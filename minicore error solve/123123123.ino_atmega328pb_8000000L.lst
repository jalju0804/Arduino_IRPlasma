
C:\Users\dlcks\AppData\Local\Temp\arduino_build_630224/123123123.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
       0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_8>
../../../../crt1/gcrt1.S:75
      24:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
      b4:	07 63       	ori	r16, 0x37	; 55
      b6:	42 36       	cpi	r20, 0x62	; 98
      b8:	b7 9b       	sbis	0x16, 7	; 22
      ba:	d8 a7       	std	Y+40, r29	; 0x28
      bc:	1a 39       	cpi	r17, 0x9A	; 154
      be:	68 56       	subi	r22, 0x68	; 104
      c0:	18 ae       	std	Y+56, r1	; 0x38
      c2:	ba ab       	std	Y+50, r27	; 0x32
      c4:	55 8c       	ldd	r5, Z+29	; 0x1d
      c6:	1d 3c       	cpi	r17, 0xCD	; 205
      c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
      ca:	57 63       	ori	r21, 0x37	; 55
      cc:	bd 6d       	ori	r27, 0xDD	; 221
      ce:	ed fd       	.word	0xfded	; ????
      d0:	75 3e       	cpi	r23, 0xE5	; 229
      d2:	f6 17       	cp	r31, r22
      d4:	72 31       	cpi	r23, 0x12	; 18
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	08 00       	.word	0x0008	; ????
      de:	00 00       	nop
      e0:	be 92       	st	-X, r11
      e2:	24 49       	sbci	r18, 0x94	; 148
      e4:	12 3e       	cpi	r17, 0xE2	; 226
      e6:	ab aa       	std	Y+51, r10	; 0x33
      e8:	aa 2a       	or	r10, r26
      ea:	be cd       	rjmp	.-1156   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
      ec:	cc cc       	rjmp	.-1640   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
      ee:	4c 3e       	cpi	r20, 0xEC	; 236
      f0:	00 00       	nop
      f2:	00 80       	ld	r0, Z
      f4:	be ab       	std	Y+54, r27	; 0x36
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	aa 3e       	cpi	r26, 0xEA	; 234
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	bf 00       	.word	0x00bf	; ????
     100:	00 00       	nop
     102:	80 3f       	cpi	r24, 0xF0	; 240
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 08       	sbc	r0, r0
     10a:	41 78       	andi	r20, 0x81	; 129
     10c:	d3 bb       	out	0x13, r29	; 19
     10e:	43 87       	std	Z+11, r20	; 0x0b
     110:	d1 13       	cpse	r29, r17
     112:	3d 19       	sub	r19, r13
     114:	0e 3c       	cpi	r16, 0xCE	; 206
     116:	c3 bd       	out	0x23, r28	; 35
     118:	42 82       	std	Z+2, r4	; 0x02
     11a:	ad 2b       	or	r26, r29
     11c:	3e 68       	ori	r19, 0x8E	; 142
     11e:	ec 82       	std	Y+4, r14	; 0x04
     120:	76 be       	out	0x36, r7	; 54
     122:	d9 8f       	std	Y+25, r29	; 0x19
     124:	e1 a9       	ldd	r30, Z+49	; 0x31
     126:	3e 4c       	sbci	r19, 0xCE	; 206
     128:	80 ef       	ldi	r24, 0xF0	; 240
     12a:	ff be       	out	0x3f, r15	; 63
     12c:	01 c4       	rjmp	.+2050   	; 0x930 <__stack+0x31>
     12e:	ff 7f       	andi	r31, 0xFF	; 255
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
	...

00000136 <__trampolines_end>:
__trampolines_start():
     136:	00 86       	std	Z+8, r0	; 0x08
     138:	22 7e       	andi	r18, 0xE2	; 226
     13a:	6d 00       	.word	0x006d	; ????
     13c:	00 02       	muls	r16, r16
     13e:	30 06       	cpc	r3, r16
     140:	63 00       	.word	0x0063	; ????
     142:	04 40       	sbci	r16, 0x04	; 4
     144:	80 52       	subi	r24, 0x20	; 32
     146:	3f 06       	cpc	r3, r31
     148:	5b 4f       	sbci	r21, 0xFB	; 251
     14a:	66 6d       	ori	r22, 0xD6	; 214
     14c:	7d 27       	eor	r23, r29
     14e:	7f 6f       	ori	r23, 0xFF	; 255
     150:	00 00       	nop
     152:	00 48       	sbci	r16, 0x80	; 128
     154:	00 53       	subi	r16, 0x30	; 48
     156:	5f 77       	andi	r21, 0x7F	; 127
     158:	7f 39       	cpi	r23, 0x9F	; 159
     15a:	3f 79       	andi	r19, 0x9F	; 159
     15c:	71 3d       	cpi	r23, 0xD1	; 209
     15e:	76 06       	cpc	r7, r22
     160:	1e 69       	ori	r17, 0x9E	; 158
     162:	38 15       	cp	r19, r8
     164:	37 3f       	cpi	r19, 0xF7	; 247
     166:	73 67       	ori	r23, 0x73	; 115
     168:	31 6d       	ori	r19, 0xD1	; 209
     16a:	78 3e       	cpi	r23, 0xE8	; 232
     16c:	2a 1d       	adc	r18, r10
     16e:	76 6e       	ori	r23, 0xE6	; 230
     170:	5b 39       	cpi	r21, 0x9B	; 155
     172:	64 0f       	add	r22, r20
     174:	00 08       	sbc	r0, r0
     176:	20 5f       	subi	r18, 0xF0	; 240
     178:	7c 58       	subi	r23, 0x8C	; 140
     17a:	5e 7b       	andi	r21, 0xBE	; 190
     17c:	31 6f       	ori	r19, 0xF1	; 241
     17e:	74 04       	cpc	r7, r4
     180:	0e 75       	andi	r16, 0x5E	; 94
     182:	30 55       	subi	r19, 0x50	; 80
     184:	54 5c       	subi	r21, 0xC4	; 196
     186:	73 67       	ori	r23, 0x73	; 115
     188:	50 6d       	ori	r21, 0xD0	; 208
     18a:	78 1c       	adc	r7, r8
     18c:	2a 1d       	adc	r18, r10
     18e:	76 6e       	ori	r23, 0xE6	; 230
     190:	47 46       	sbci	r20, 0x67	; 103
     192:	06 70       	andi	r16, 0x06	; 6
     194:	01 3f       	Address 0x00000194 is out of bounds.
.word	0xffff	; ????

00000195 <_ZL18TM16XX_NUMBER_FONT.lto_priv.103>:
     195:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

000001a5 <port_to_mode_PGM>:
     1a5:	00 00 00 00 24 00 27 00 2a 00 2d 00                 ....$.'.*.-.

000001b1 <port_to_output_PGM>:
     1b1:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

000001bd <_ZL18TM16XX_NUMBER_FONT.lto_priv.102>:
     1bd:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

000001cd <_ZL19TM16XX_FONT_DEFAULT.lto_priv.100>:
     1cd:	00 86 22 7e 6d 00 00 02 30 06 63 00 04 40 80 52     .."~m...0.c..@.R
     1dd:	3f 06 5b 4f 66 6d 7d 27 7f 6f 00 00 00 48 00 53     ?.[Ofm}'.o...H.S
     1ed:	5f 77 7f 39 3f 79 71 3d 76 06 1e 69 38 15 37 3f     _w.9?yq=v..i8.7?
     1fd:	73 67 31 6d 78 3e 2a 1d 76 6e 5b 39 64 0f 00 08     sg1mx>*.vn[9d...
     20d:	20 5f 7c 58 5e 7b 31 6f 74 04 0e 75 30 55 54 5c      _|X^{1ot..u0UT\
     21d:	73 67 50 6d 78 1c 2a 1d 76 6e 47 46 06 70 01        sgPmx.*.vnGF.p.

0000022c <port_to_input_PGM>:
     22c:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

00000238 <digital_pin_to_port_PGM>:
     238:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     248:	03 03 03 03 02 02 03 05 05 05 05                    ...........

00000253 <digital_pin_to_bit_mask_PGM>:
     253:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     263:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

0000026e <digital_pin_to_timer_PGM>:
     26e:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

0000028a <__ctors_start>:
__ctors_start():
     28a:	a0 11       	cpse	r26, r0

0000028c <__ctors_end>:
__dtors_start():
     28c:	53 1d       	adc	r21, r3

0000028e <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     28e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     290:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     292:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
     294:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
     296:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
     298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     29a:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     29c:	a4 e2       	ldi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     29e:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <.do_clear_bss_start>

000002a2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2a2:	1d 92       	st	X+, r1

000002a4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2a4:	a8 3f       	cpi	r26, 0xF8	; 248
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2a6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <.do_clear_bss_loop>

000002aa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2aa:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2ae:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     2b0:	ec eb       	ldi	r30, 0xBC	; 188
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     2b2:	f5 e4       	ldi	r31, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     2b6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     2b8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     2ba:	a4 32       	cpi	r26, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     2bc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <__do_copy_data+0xc>

000002c0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c2:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2c4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2c8:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2ca:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2cc:	0e 94 a6 21 	call	0x434c	; 0x434c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d0:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2d4:	c9 f7       	brne	.-14     	; 0x2c8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2d6:	0e 94 aa 12 	call	0x2554	; 0x2554 <main>
../../../../crt1/gcrt1.S:315
     2da:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__do_global_dtors>

000002de <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     2de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e2 <twi_setAddress>:
twi_setAddress():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:131
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     2e2:	88 0f       	add	r24, r24
     2e4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:132
}
     2e8:	08 95       	ret

000002ea <twi_setFrequency>:
twi_setFrequency():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:141
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:142
  TWBR = ((F_CPU / frequency) - 16) / 2;
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	72 e1       	ldi	r23, 0x12	; 18
     2f2:	8a e7       	ldi	r24, 0x7A	; 122
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodsi4>
     2fa:	20 51       	subi	r18, 0x10	; 16
     2fc:	31 09       	sbc	r19, r1
     2fe:	41 09       	sbc	r20, r1
     300:	51 09       	sbc	r21, r1
     302:	56 95       	lsr	r21
     304:	47 95       	ror	r20
     306:	37 95       	ror	r19
     308:	27 95       	ror	r18
     30a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:148

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
     30e:	08 95       	ret

00000310 <twi_reply>:
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:420
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     310:	88 23       	and	r24, r24
     312:	21 f0       	breq	.+8      	; 0x31c <twi_reply+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     314:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:425
  }
}
     31a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     31c:	85 e8       	ldi	r24, 0x85	; 133
     31e:	fb cf       	rjmp	.-10     	; 0x316 <twi_reply+0x6>

00000320 <twi_stop>:
twi_stop():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     320:	85 ed       	ldi	r24, 0xD5	; 213
     322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     326:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     32a:	84 fd       	sbrc	r24, 4
     32c:	fc cf       	rjmp	.-8      	; 0x326 <twi_stop+0x6>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     32e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:463
}
     332:	08 95       	ret

00000334 <twi_releaseBus>:
twi_releaseBus():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     334:	85 ec       	ldi	r24, 0xC5	; 197
     336:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     33a:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:478
}
     33e:	08 95       	ret

00000340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]>:
_ZN10MQ131Class18getEnvCorrectRatioEv.constprop.76():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:173

/**
 * Get correction to apply on Rs depending on environmental
 * conditions
 */
 float MQ131Class::getEnvCorrectRatio() {
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:176
 	// Select the right equation based on humidity
 	// If default value, ignore correction ratio
 	if(humidityPercent == 60 && temperatureCelsuis == 20) {
     344:	d0 91 e2 04 	lds	r29, 0x04E2	; 0x8004e2 <MQ131+0x1e>
     348:	c0 91 e1 04 	lds	r28, 0x04E1	; 0x8004e1 <MQ131+0x1d>
     34c:	dc 33       	cpi	r29, 0x3C	; 60
     34e:	39 f4       	brne	.+14     	; 0x35e <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x1e>
     350:	c4 31       	cpi	r28, 0x14	; 20
     352:	01 f5       	brne	.+64     	; 0x394 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:177
 		return 1.0;
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	9f e3       	ldi	r25, 0x3F	; 63
     35c:	16 c0       	rjmp	.+44     	; 0x38a <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x4a>
     35e:	6c 2f       	mov	r22, r28
     360:	0c 2e       	mov	r0, r28
     362:	00 0c       	add	r0, r0
     364:	77 0b       	sbc	r23, r23
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__floatsisf>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:180
 	}
 	// For humidity > 75%, use the 85% curve
 	if(humidityPercent > 75) {
     36e:	dc 34       	cpi	r29, 0x4C	; 76
     370:	78 f0       	brcs	.+30     	; 0x390 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:182
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
     372:	25 e5       	ldi	r18, 0x55	; 85
     374:	31 ec       	ldi	r19, 0xC1	; 193
     376:	48 e2       	ldi	r20, 0x28	; 40
     378:	5c eb       	ldi	r21, 0xBC	; 188
     37a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
     37e:	23 e2       	ldi	r18, 0x23	; 35
     380:	3a e4       	ldi	r19, 0x4A	; 74
     382:	43 e9       	ldi	r20, 0x93	; 147
     384:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 		return -0.0119 * temperatureCelsuis + 1.3261;
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     386:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__addsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:193
 }
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:185
 	if(humidityPercent > 75) {
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
 	}
 	// For humidity > 50%, use the 60% curve
 	if(humidityPercent > 50) {
     390:	d3 33       	cpi	r29, 0x33	; 51
     392:	90 f0       	brcs	.+36     	; 0x3b8 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:187
 		// R^2 = 0.9976
 		return -0.0119 * temperatureCelsuis + 1.3261;
     394:	6c 2f       	mov	r22, r28
     396:	cc 0f       	add	r28, r28
     398:	77 0b       	sbc	r23, r23
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__floatsisf>
     3a2:	28 e3       	ldi	r18, 0x38	; 56
     3a4:	38 ef       	ldi	r19, 0xF8	; 248
     3a6:	42 e4       	ldi	r20, 0x42	; 66
     3a8:	5c eb       	ldi	r21, 0xBC	; 188
     3aa:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
     3ae:	25 ea       	ldi	r18, 0xA5	; 165
     3b0:	3d eb       	ldi	r19, 0xBD	; 189
     3b2:	49 ea       	ldi	r20, 0xA9	; 169
     3b4:	5f e3       	ldi	r21, 0x3F	; 63
     3b6:	e7 cf       	rjmp	.-50     	; 0x386 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x46>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     3b8:	20 eb       	ldi	r18, 0xB0	; 176
     3ba:	33 e0       	ldi	r19, 0x03	; 3
     3bc:	47 e6       	ldi	r20, 0x67	; 103
     3be:	5c eb       	ldi	r21, 0xBC	; 188
     3c0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
     3c4:	22 e7       	ldi	r18, 0x72	; 114
     3c6:	39 ef       	ldi	r19, 0xF9	; 249
     3c8:	47 ec       	ldi	r20, 0xC7	; 199
     3ca:	5f e3       	ldi	r21, 0x3F	; 63
     3cc:	dc cf       	rjmp	.-72     	; 0x386 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]+0x46>

000003ce <IRrecv::getBiphaselevel() [clone .constprop.50]>:
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:603
 *                1   0   0   0   1   1   0   1   0   1   1  - Space
 * A mark to space at a significant clock edge results in a 1
 * A space to mark at a significant clock edge results in a 0 (for RC6)
 * Returns current level [MARK or SPACE] or -1 for error (measured time interval is not a multiple of sBiphaseTimeUnit).
 */
uint8_t IRrecv::getBiphaselevel() {
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:606
    uint8_t tLevelOfCurrentInterval; // 0 (SPACE) or 1 (MARK)

    if (sBiphaseDecodeRawbuffOffset >= decodedIRData.rawDataPtr->rawlen) {
     3d6:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
     3da:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
     3de:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
     3e2:	80 85       	ldd	r24, Z+8	; 0x08
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:607
        return SPACE;  // After end of recorded buffer, assume space.
     3e4:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:606
 * Returns current level [MARK or SPACE] or -1 for error (measured time interval is not a multiple of sBiphaseTimeUnit).
 */
uint8_t IRrecv::getBiphaselevel() {
    uint8_t tLevelOfCurrentInterval; // 0 (SPACE) or 1 (MARK)

    if (sBiphaseDecodeRawbuffOffset >= decodedIRData.rawDataPtr->rawlen) {
     3e6:	48 17       	cp	r20, r24
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <IRrecv::getBiphaselevel() [clone .constprop.50]+0x1e>
     3ea:	64 c0       	rjmp	.+200    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:610
        return SPACE;  // After end of recorded buffer, assume space.
    }

    tLevelOfCurrentInterval = (sBiphaseDecodeRawbuffOffset) & 1; // on odd rawbuf offsets we have mark timings
     3ec:	14 2f       	mov	r17, r20
     3ee:	11 70       	andi	r17, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:615

    /*
     * Setup data if sUsedTimingIntervals is 0
     */
    if (sUsedTimingIntervals == 0) {
     3f0:	00 91 f1 03 	lds	r16, 0x03F1	; 0x8003f1 <sUsedTimingIntervals>
     3f4:	01 11       	cpse	r16, r1
     3f6:	4f c0       	rjmp	.+158    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:616
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
     3f8:	84 2f       	mov	r24, r20
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	01 84       	ldd	r0, Z+9	; 0x09
     406:	f2 85       	ldd	r31, Z+10	; 0x0a
     408:	e0 2d       	mov	r30, r0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:617
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;
     40a:	2c ee       	ldi	r18, 0xEC	; 236
     40c:	3f ef       	ldi	r19, 0xFF	; 255
     40e:	11 23       	and	r17, r17
     410:	11 f0       	breq	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	24 e1       	ldi	r18, 0x14	; 20
     414:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:619

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     416:	c0 91 ef 03 	lds	r28, 0x03EF	; 0x8003ef <sBiphaseTimeUnit>
     41a:	d0 91 f0 03 	lds	r29, 0x03F0	; 0x8003f0 <sBiphaseTimeUnit+0x1>
     41e:	2c 0f       	add	r18, r28
     420:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     422:	c9 01       	movw	r24, r18
     424:	63 e4       	ldi	r22, 0x43	; 67
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     42c:	e6 17       	cp	r30, r22
     42e:	f7 07       	cpc	r31, r23
     430:	60 f0       	brcs	.+24     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     432:	c9 01       	movw	r24, r18
     434:	68 e2       	ldi	r22, 0x28	; 40
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:620
    if (sUsedTimingIntervals == 0) {
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     444:	6e 17       	cp	r22, r30
     446:	7f 07       	cpc	r23, r31
     448:	10 f5       	brcc	.+68     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:621
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     44a:	2c 0f       	add	r18, r28
     44c:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     44e:	c9 01       	movw	r24, r18
     450:	63 e4       	ldi	r22, 0x43	; 67
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     458:	e6 17       	cp	r30, r22
     45a:	f7 07       	cpc	r31, r23
     45c:	50 f0       	brcs	.+20     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     45e:	c9 01       	movw	r24, r18
     460:	68 e2       	ldi	r22, 0x28	; 40
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	6e 17       	cp	r22, r30
     46e:	7f 07       	cpc	r23, r31
     470:	60 f4       	brcc	.+24     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:623

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     472:	2c 0f       	add	r18, r28
     474:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     476:	c9 01       	movw	r24, r18
     478:	63 e4       	ldi	r22, 0x43	; 67
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     480:	e6 17       	cp	r30, r22
     482:	f7 07       	cpc	r31, r23
     484:	e8 f4       	brcc	.+58     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:626
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
        } else {
            return -1;
     486:	1f ef       	ldi	r17, 0xFF	; 255
     488:	15 c0       	rjmp	.+42     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:622
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:624
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
     48e:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <sCurrentTimingIntervals+0x1>
     492:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <sCurrentTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:631
            return -1;
        }
    }

    // We use another interval from tCurrentTimingIntervals
    sUsedTimingIntervals++;
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	00 93 f1 03 	sts	0x03F1, r16	; 0x8003f1 <sUsedTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:634

    // keep track of current timing offset
    if (sUsedTimingIntervals >= sCurrentTimingIntervals) {
     49c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <sCurrentTimingIntervals>
     4a0:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <sCurrentTimingIntervals+0x1>
     4a4:	08 17       	cp	r16, r24
     4a6:	19 06       	cpc	r1, r25
     4a8:	28 f0       	brcs	.+10     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:636
        // we have used all intervals of current timing, switch to next timing value
        sUsedTimingIntervals = 0;
     4aa:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <sUsedTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:637
        sBiphaseDecodeRawbuffOffset++;
     4ae:	4f 5f       	subi	r20, 0xFF	; 255
     4b0:	40 93 f2 03 	sts	0x03F2, r20	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:643
    }

    TRACE_PRINTLN(tLevelOfCurrentInterval);

    return tLevelOfCurrentInterval;
}
     4b4:	81 2f       	mov	r24, r17
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     4c0:	c9 01       	movw	r24, r18
     4c2:	68 e2       	ldi	r22, 0x28	; 40
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
     4ca:	6f 5f       	subi	r22, 0xFF	; 255
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	6e 17       	cp	r22, r30
     4d0:	7f 07       	cpc	r23, r31
     4d2:	c8 f2       	brcs	.-78     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
_ZN6IRrecv15getBiphaselevelEv.constprop.50():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:624
        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	da cf       	rjmp	.-76     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>

000004da <delayMicroseconds.constprop.5>:
delayMicroseconds.constprop.5():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     4da:	00 00       	nop
     4dc:	00 00       	nop
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <delayMicroseconds.constprop.5+0x8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     4e6:	08 95       	ret

000004e8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	6c 01       	movw	r12, r24
     4fe:	7b 01       	movw	r14, r22
     500:	8b 01       	movw	r16, r22
     502:	04 0f       	add	r16, r20
     504:	15 1f       	adc	r17, r21
     506:	eb 01       	movw	r28, r22
     508:	5e 01       	movw	r10, r28
     50a:	ae 18       	sub	r10, r14
     50c:	bf 08       	sbc	r11, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     50e:	c0 17       	cp	r28, r16
     510:	d1 07       	cpc	r29, r17
     512:	59 f0       	breq	.+22     	; 0x52a <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     514:	69 91       	ld	r22, Y+
     516:	d6 01       	movw	r26, r12
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	01 90       	ld	r0, Z+
     51e:	f0 81       	ld	r31, Z
     520:	e0 2d       	mov	r30, r0
     522:	c6 01       	movw	r24, r12
     524:	09 95       	icall
     526:	89 2b       	or	r24, r25
     528:	79 f7       	brne	.-34     	; 0x508 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     52a:	c5 01       	movw	r24, r10
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	df 90       	pop	r13
     53a:	cf 90       	pop	r12
     53c:	bf 90       	pop	r11
     53e:	af 90       	pop	r10
     540:	08 95       	ret

00000542 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     542:	fc 01       	movw	r30, r24
     544:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     546:	44 8d       	ldd	r20, Z+28	; 0x1c
     548:	25 2f       	mov	r18, r21
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	84 2f       	mov	r24, r20
     54e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     550:	82 1b       	sub	r24, r18
     552:	93 0b       	sbc	r25, r19
     554:	54 17       	cp	r21, r20
     556:	10 f0       	brcs	.+4      	; 0x55c <HardwareSerial::availableForWrite()+0x1a>
     558:	cf 96       	adiw	r24, 0x3f	; 63
     55a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     55c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     55e:	08 95       	ret

00000560 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     560:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     562:	91 8d       	ldd	r25, Z+25	; 0x19
     564:	82 8d       	ldd	r24, Z+26	; 0x1a
     566:	98 17       	cp	r25, r24
     568:	61 f0       	breq	.+24     	; 0x582 <HardwareSerial::read()+0x22>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     56a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     56c:	ae 0f       	add	r26, r30
     56e:	bf 2f       	mov	r27, r31
     570:	b1 1d       	adc	r27, r1
     572:	5d 96       	adiw	r26, 0x1d	; 29
     574:	8c 91       	ld	r24, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     576:	92 8d       	ldd	r25, Z+26	; 0x1a
     578:	9f 5f       	subi	r25, 0xFF	; 255
     57a:	9f 73       	andi	r25, 0x3F	; 63
     57c:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     586:	08 95       	ret

00000588 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     588:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     58a:	91 8d       	ldd	r25, Z+25	; 0x19
     58c:	82 8d       	ldd	r24, Z+26	; 0x1a
     58e:	98 17       	cp	r25, r24
     590:	31 f0       	breq	.+12     	; 0x59e <HardwareSerial::peek()+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     592:	82 8d       	ldd	r24, Z+26	; 0x1a
     594:	e8 0f       	add	r30, r24
     596:	f1 1d       	adc	r31, r1
     598:	85 8d       	ldd	r24, Z+29	; 0x1d
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     5a2:	08 95       	ret

000005a4 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5a4:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5a6:	91 8d       	ldd	r25, Z+25	; 0x19
     5a8:	22 8d       	ldd	r18, Z+26	; 0x1a
     5aa:	89 2f       	mov	r24, r25
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 5c       	subi	r24, 0xC0	; 192
     5b0:	9f 4f       	sbci	r25, 0xFF	; 255
     5b2:	82 1b       	sub	r24, r18
     5b4:	91 09       	sbc	r25, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     5b6:	8f 73       	andi	r24, 0x3F	; 63
     5b8:	99 27       	eor	r25, r25
     5ba:	08 95       	ret

000005bc <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     5bc:	83 ef       	ldi	r24, 0xF3	; 243
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <HardwareSerial::available()>
     5c4:	21 e0       	ldi	r18, 0x01	; 1
     5c6:	89 2b       	or	r24, r25
     5c8:	09 f4       	brne	.+2      	; 0x5cc <Serial0_available()+0x10>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     5cc:	82 2f       	mov	r24, r18
     5ce:	08 95       	ret

000005d0 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     5d0:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5d2:	a4 8d       	ldd	r26, Z+28	; 0x1c
     5d4:	a8 0f       	add	r26, r24
     5d6:	b9 2f       	mov	r27, r25
     5d8:	b1 1d       	adc	r27, r1
     5da:	a3 5a       	subi	r26, 0xA3	; 163
     5dc:	bf 4f       	sbci	r27, 0xFF	; 255
     5de:	2c 91       	ld	r18, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	8f 73       	andi	r24, 0x3F	; 63
     5e8:	99 27       	eor	r25, r25
     5ea:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     5ec:	a6 89       	ldd	r26, Z+22	; 0x16
     5ee:	b7 89       	ldd	r27, Z+23	; 0x17
     5f0:	2c 93       	st	X, r18
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     5f2:	a0 89       	ldd	r26, Z+16	; 0x10
     5f4:	b1 89       	ldd	r27, Z+17	; 0x11
     5f6:	8c 91       	ld	r24, X
     5f8:	83 70       	andi	r24, 0x03	; 3
     5fa:	80 64       	ori	r24, 0x40	; 64
     5fc:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5fe:	93 8d       	ldd	r25, Z+27	; 0x1b
     600:	84 8d       	ldd	r24, Z+28	; 0x1c
     602:	98 13       	cpse	r25, r24
     604:	06 c0       	rjmp	.+12     	; 0x612 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     606:	02 88       	ldd	r0, Z+18	; 0x12
     608:	f3 89       	ldd	r31, Z+19	; 0x13
     60a:	e0 2d       	mov	r30, r0
     60c:	80 81       	ld	r24, Z
     60e:	8f 7d       	andi	r24, 0xDF	; 223
     610:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     612:	08 95       	ret

00000614 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     626:	9b 8d       	ldd	r25, Y+27	; 0x1b
     628:	8c 8d       	ldd	r24, Y+28	; 0x1c
     62a:	98 13       	cpse	r25, r24
     62c:	1a c0       	rjmp	.+52     	; 0x662 <HardwareSerial::write(unsigned char)+0x4e>
     62e:	e8 89       	ldd	r30, Y+16	; 0x10
     630:	f9 89       	ldd	r31, Y+17	; 0x11
     632:	80 81       	ld	r24, Z
     634:	85 ff       	sbrs	r24, 5
     636:	15 c0       	rjmp	.+42     	; 0x662 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     638:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     63a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     63c:	ee 89       	ldd	r30, Y+22	; 0x16
     63e:	ff 89       	ldd	r31, Y+23	; 0x17
     640:	60 83       	st	Z, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     642:	e8 89       	ldd	r30, Y+16	; 0x10
     644:	f9 89       	ldd	r31, Y+17	; 0x11
     646:	80 81       	ld	r24, Z
     648:	83 70       	andi	r24, 0x03	; 3
     64a:	80 64       	ori	r24, 0x40	; 64
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     64c:	80 83       	st	Z, r24
__iRestore():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	08 95       	ret
     662:	f6 2e       	mov	r15, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     664:	0b 8d       	ldd	r16, Y+27	; 0x1b
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	0f 5f       	subi	r16, 0xFF	; 255
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	0f 73       	andi	r16, 0x3F	; 63
     66e:	11 27       	eor	r17, r17
     670:	e0 2e       	mov	r14, r16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     672:	8c 8d       	ldd	r24, Y+28	; 0x1c
     674:	8e 11       	cpse	r24, r14
     676:	0c c0       	rjmp	.+24     	; 0x690 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	07 fc       	sbrc	r0, 7
     67c:	fa cf       	rjmp	.-12     	; 0x672 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     67e:	e8 89       	ldd	r30, Y+16	; 0x10
     680:	f9 89       	ldd	r31, Y+17	; 0x11
     682:	80 81       	ld	r24, Z
     684:	85 ff       	sbrs	r24, 5
     686:	f5 cf       	rjmp	.-22     	; 0x672 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <HardwareSerial::_tx_udr_empty_irq()>
     68e:	f1 cf       	rjmp	.-30     	; 0x672 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     690:	eb 8d       	ldd	r30, Y+27	; 0x1b
     692:	ec 0f       	add	r30, r28
     694:	fd 2f       	mov	r31, r29
     696:	f1 1d       	adc	r31, r1
     698:	e3 5a       	subi	r30, 0xA3	; 163
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	f0 82       	st	Z, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     69e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     6a2:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     6a4:	ea 89       	ldd	r30, Y+18	; 0x12
     6a6:	fb 89       	ldd	r31, Y+19	; 0x13
     6a8:	80 81       	ld	r24, Z
     6aa:	80 62       	ori	r24, 0x20	; 32
     6ac:	cf cf       	rjmp	.-98     	; 0x64c <HardwareSerial::write(unsigned char)+0x38>

000006ae <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6b4:	88 8d       	ldd	r24, Y+24	; 0x18
     6b6:	88 23       	and	r24, r24
     6b8:	b9 f0       	breq	.+46     	; 0x6e8 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6ba:	aa 89       	ldd	r26, Y+18	; 0x12
     6bc:	bb 89       	ldd	r27, Y+19	; 0x13
     6be:	e8 89       	ldd	r30, Y+16	; 0x10
     6c0:	f9 89       	ldd	r31, Y+17	; 0x11
     6c2:	8c 91       	ld	r24, X
     6c4:	85 fd       	sbrc	r24, 5
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <HardwareSerial::flush()+0x20>
     6c8:	80 81       	ld	r24, Z
     6ca:	86 fd       	sbrc	r24, 6
     6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	07 fc       	sbrc	r0, 7
     6d2:	f7 cf       	rjmp	.-18     	; 0x6c2 <HardwareSerial::flush()+0x14>
     6d4:	8c 91       	ld	r24, X
     6d6:	85 ff       	sbrs	r24, 5
     6d8:	f2 cf       	rjmp	.-28     	; 0x6be <HardwareSerial::flush()+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     6da:	80 81       	ld	r24, Z
     6dc:	85 ff       	sbrs	r24, 5
     6de:	ed cf       	rjmp	.-38     	; 0x6ba <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     6e0:	ce 01       	movw	r24, r28
     6e2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <HardwareSerial::_tx_udr_empty_irq()>
     6e6:	e9 cf       	rjmp	.-46     	; 0x6ba <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	89 2b       	or	r24, r25
     6f4:	29 f0       	breq	.+10     	; 0x700 <serialEventRun()+0x12>
     6f6:	0e 94 de 02 	call	0x5bc	; 0x5bc <Serial0_available()>
     6fa:	81 11       	cpse	r24, r1
     6fc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	89 2b       	or	r24, r25
     706:	49 f0       	breq	.+18     	; 0x71a <serialEventRun()+0x2c>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	89 2b       	or	r24, r25
     70e:	29 f0       	breq	.+10     	; 0x71a <serialEventRun()+0x2c>
     710:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     714:	81 11       	cpse	r24, r1
     716:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     71a:	08 95       	ret

0000071c <turnOffPWM>:
turnOffPWM():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     71c:	82 50       	subi	r24, 0x02	; 2
     71e:	8d 30       	cpi	r24, 0x0D	; 13
     720:	08 f0       	brcs	.+2      	; 0x724 <turnOffPWM+0x8>
     722:	3e c0       	rjmp	.+124    	; 0x7a0 <turnOffPWM+0x84>
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	e8 56       	subi	r30, 0x68	; 104
     72a:	fc 4f       	sbci	r31, 0xFC	; 252
     72c:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__tablejump2__>
     730:	cd 03       	fmulsu	r20, r21
     732:	d1 03       	fmuls	r21, r17
     734:	a5 03       	fmuls	r18, r21
     736:	ab 03       	fmulsu	r18, r19
     738:	d0 03       	fmuls	r21, r16
     73a:	d0 03       	fmuls	r21, r16
     73c:	af 03       	fmulsu	r18, r23
     73e:	b5 03       	fmuls	r19, r21
     740:	b9 03       	fmulsu	r19, r17
     742:	bf 03       	fmulsu	r19, r23
     744:	d0 03       	fmuls	r21, r16
     746:	c3 03       	fmuls	r20, r19
     748:	c9 03       	fmulsu	r20, r17
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     74a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     74e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     750:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     754:	08 95       	ret
     756:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     75a:	8f 7d       	andi	r24, 0xDF	; 223
     75c:	f9 cf       	rjmp	.-14     	; 0x750 <turnOffPWM+0x34>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     75e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     762:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     764:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     768:	08 95       	ret
     76a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     76e:	8f 7d       	andi	r24, 0xDF	; 223
     770:	f9 cf       	rjmp	.-14     	; 0x764 <turnOffPWM+0x48>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     772:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     776:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     778:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     77c:	08 95       	ret
     77e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     782:	8f 7d       	andi	r24, 0xDF	; 223
     784:	f9 cf       	rjmp	.-14     	; 0x778 <turnOffPWM+0x5c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     786:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     78a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     78c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     790:	08 95       	ret
     792:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     796:	8f 7d       	andi	r24, 0xDF	; 223
     798:	f9 cf       	rjmp	.-14     	; 0x78c <turnOffPWM+0x70>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     79a:	84 b5       	in	r24, 0x24	; 36
     79c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     79e:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     7a0:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     7a2:	84 b5       	in	r24, 0x24	; 36
     7a4:	8f 7d       	andi	r24, 0xDF	; 223
     7a6:	fb cf       	rjmp	.-10     	; 0x79e <turnOffPWM+0x82>

000007a8 <digitalRead>:
digitalRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	e2 59       	subi	r30, 0x92	; 146
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     7b8:	f9 01       	movw	r30, r18
     7ba:	ed 5a       	subi	r30, 0xAD	; 173
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     7c0:	f9 01       	movw	r30, r18
     7c2:	e8 5c       	subi	r30, 0xC8	; 200
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     7c8:	cc 23       	and	r28, r28
     7ca:	a1 f0       	breq	.+40     	; 0x7f4 <digitalRead+0x4c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     7cc:	81 11       	cpse	r24, r1
     7ce:	0e 94 8e 03 	call	0x71c	; 0x71c <turnOffPWM>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     7d2:	ec 2f       	mov	r30, r28
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	e4 5d       	subi	r30, 0xD4	; 212
     7dc:	fd 4f       	sbci	r31, 0xFD	; 253
     7de:	a5 91       	lpm	r26, Z+
     7e0:	b4 91       	lpm	r27, Z
     7e2:	ec 91       	ld	r30, X
     7e4:	ed 23       	and	r30, r29
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	09 f4       	brne	.+2      	; 0x7ee <digitalRead+0x46>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fa cf       	rjmp	.-12     	; 0x7ee <digitalRead+0x46>

000007fa <digitalWrite>:
digitalWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	e2 59       	subi	r30, 0x92	; 146
     808:	fd 4f       	sbci	r31, 0xFD	; 253
     80a:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     80c:	f9 01       	movw	r30, r18
     80e:	ed 5a       	subi	r30, 0xAD	; 173
     810:	fd 4f       	sbci	r31, 0xFD	; 253
     812:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     814:	f9 01       	movw	r30, r18
     816:	e8 5c       	subi	r30, 0xC8	; 200
     818:	fd 4f       	sbci	r31, 0xFD	; 253
     81a:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     81c:	cc 23       	and	r28, r28
     81e:	a9 f0       	breq	.+42     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     820:	16 2f       	mov	r17, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     822:	81 11       	cpse	r24, r1
     824:	0e 94 8e 03 	call	0x71c	; 0x71c <turnOffPWM>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     828:	ec 2f       	mov	r30, r28
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ef 54       	subi	r30, 0x4F	; 79
     832:	fe 4f       	sbci	r31, 0xFE	; 254
     834:	a5 91       	lpm	r26, Z+
     836:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     838:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     83a:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     83c:	ec 91       	ld	r30, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     83e:	11 11       	cpse	r17, r1
     840:	08 c0       	rjmp	.+16     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     842:	d0 95       	com	r29
     844:	de 23       	and	r29, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     846:	dc 93       	st	X, r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     848:	8f bf       	out	0x3f, r24	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     852:	de 2b       	or	r29, r30
     854:	f8 cf       	rjmp	.-16     	; 0x846 <__DATA_REGION_LENGTH__+0x46>

00000856 <twi_init>:
twi_init():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     856:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:85
  twi_sendStop = true; // default value
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:86
  twi_inRepStart = false;
     860:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	82 e1       	ldi	r24, 0x12	; 18
     868:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:90
  digitalWrite(SCL, 1);
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	83 e1       	ldi	r24, 0x13	; 19
     870:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     874:	e9 eb       	ldi	r30, 0xB9	; 185
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	8e 7f       	andi	r24, 0xFE	; 254
     87c:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:94
  cbi(TWSR, TWPS1);
     87e:	80 81       	ld	r24, Z
     880:	8d 7f       	andi	r24, 0xFD	; 253
     882:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     88a:	85 e4       	ldi	r24, 0x45	; 69
     88c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:104
}
     890:	08 95       	ret

00000892 <twi_disable>:
twi_disable():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:115
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
     892:	ec eb       	ldi	r30, 0xBC	; 188
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	8a 7b       	andi	r24, 0xBA	; 186
     89a:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:118

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:119
  digitalWrite(SCL, 0);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	83 e1       	ldi	r24, 0x13	; 19
     8a8:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <digitalWrite>

000008ac <analogWrite.part.0.constprop.91>:
analogWrite.part.0.constprop.91():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
     8ac:	e7 e7       	ldi	r30, 0x77	; 119
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	e4 91       	lpm	r30, Z
     8b2:	e2 50       	subi	r30, 0x02	; 2
     8b4:	ed 30       	cpi	r30, 0x0D	; 13
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <analogWrite.part.0.constprop.91+0xe>
     8b8:	6f c0       	rjmp	.+222    	; 0x998 <__stack+0x99>
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	ee 59       	subi	r30, 0x9E	; 158
     8be:	fb 4f       	sbci	r31, 0xFB	; 251
     8c0:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__tablejump2__>
     8c4:	6f 04       	cpc	r6, r15
     8c6:	74 04       	cpc	r7, r4
     8c8:	79 04       	cpc	r7, r9
     8ca:	83 04       	cpc	r8, r3
     8cc:	cc 04       	cpc	r12, r12
     8ce:	cc 04       	cpc	r12, r12
     8d0:	8d 04       	cpc	r8, r13
     8d2:	95 04       	cpc	r9, r5
     8d4:	9d 04       	cpc	r9, r13
     8d6:	a7 04       	cpc	r10, r7
     8d8:	cc 04       	cpc	r12, r12
     8da:	b2 04       	cpc	r11, r2
     8dc:	c1 04       	cpc	r12, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:132
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
     8de:	94 b5       	in	r25, 0x24	; 36
     8e0:	90 68       	ori	r25, 0x80	; 128
     8e2:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:133
        OCR0A = val; // set pwm duty
     8e4:	87 bd       	out	0x27, r24	; 39
     8e6:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:140
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
     8e8:	94 b5       	in	r25, 0x24	; 36
     8ea:	90 62       	ori	r25, 0x20	; 32
     8ec:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:141
        OCR0B = val; // set pwm duty
     8ee:	88 bd       	out	0x28, r24	; 40
     8f0:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     8f2:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     8f6:	20 68       	ori	r18, 0x80	; 128
     8f8:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     8fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     900:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     904:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     906:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     90a:	20 62       	ori	r18, 0x20	; 32
     90c:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     910:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     914:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     918:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:180
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
     91a:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     91e:	90 68       	ori	r25, 0x80	; 128
     920:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:181
        OCR2A = val; // set pwm duty
     924:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     928:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:188
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
     92a:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     92e:	90 62       	ori	r25, 0x20	; 32
     930:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:189
        OCR2B = val; // set pwm duty
     934:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     938:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
     93a:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     93e:	20 68       	ori	r18, 0x80	; 128
     940:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
     944:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     948:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
     94c:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:205

      #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        // connect pwm to pin on timer 3, channel B
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
     94e:	5a 9a       	sbi	0x0b, 2	; 11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:209
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
     950:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     954:	20 62       	ori	r18, 0x20	; 32
     956:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
     95a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
     95e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
     962:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:225
      #endif

      #if defined(TCCR4A)
      case TIMER4A:
        //connect pwm to pin on timer 4, channel A
        TCCR4A |= _BV(COM4A1);
     964:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     968:	20 68       	ori	r18, 0x80	; 128
     96a:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:227
        #if defined(COM4A0)    // only used on 32U4
          TCCR4A &= ~_BV(COM4A0);
     96e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     972:	2f 7b       	andi	r18, 0xBF	; 191
     974:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:229
        #endif
        OCR4A = val;  // set pwm duty
     978:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
     97c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
     980:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:237
      
      #if defined(TCCR4A) && defined(COM4B1)
      case TIMER4B:
        // connect pwm to pin on timer 4, channel B
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
     982:	5a 9a       	sbi	0x0b, 2	; 11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:241
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR4A |= _BV(COM4B1);
     984:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     988:	20 62       	ori	r18, 0x20	; 32
     98a:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:242
        OCR4B = val; // set pwm duty
     98e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
     992:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     996:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:293
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
          digitalWrite(pin, LOW);
     998:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     99a:	80 38       	cpi	r24, 0x80	; 128
     99c:	91 05       	cpc	r25, r1
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__stack+0xa3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:295
          digitalWrite(pin, LOW);
        } else {
          digitalWrite(pin, HIGH);
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <digitalWrite>

000009a8 <pinMode>:
pinMode():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	fc 01       	movw	r30, r24
     9b0:	ed 5a       	subi	r30, 0xAD	; 173
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	24 91       	lpm	r18, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     9b6:	88 5c       	subi	r24, 0xC8	; 200
     9b8:	9d 4f       	sbci	r25, 0xFD	; 253
     9ba:	fc 01       	movw	r30, r24
     9bc:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     9be:	88 23       	and	r24, r24
     9c0:	d1 f0       	breq	.+52     	; 0x9f6 <pinMode+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	fc 01       	movw	r30, r24
     9ca:	eb 55       	subi	r30, 0x5B	; 91
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	a5 91       	lpm	r26, Z+
     9d0:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     9d2:	fc 01       	movw	r30, r24
     9d4:	ef 54       	subi	r30, 0x4F	; 79
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	c5 91       	lpm	r28, Z+
     9da:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     9dc:	61 11       	cpse	r22, r1
     9de:	0e c0       	rjmp	.+28     	; 0x9fc <pinMode+0x54>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     9e0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     9e2:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     9e4:	8c 91       	ld	r24, X
     9e6:	e2 2f       	mov	r30, r18
     9e8:	e0 95       	com	r30
     9ea:	8e 23       	and	r24, r30
     9ec:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     9ee:	28 81       	ld	r18, Y
     9f0:	e2 23       	and	r30, r18
     9f2:	e8 83       	st	Y, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     9f4:	9f bf       	out	0x3f, r25	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     9fc:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     9fe:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     a00:	ec 91       	ld	r30, X
     a02:	e2 2b       	or	r30, r18
     a04:	ec 93       	st	X, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     a06:	8f bf       	out	0x3f, r24	; 63
     a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <pinMode+0x4e>

00000a0a <micros>:
micros():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     a0a:	3f b7       	in	r19, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     a0c:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     a0e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <timer0_overflow_count>
     a12:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <timer0_overflow_count+0x1>
     a16:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <timer0_overflow_count+0x2>
     a1a:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     a1e:	26 b5       	in	r18, 0x26	; 38
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a20:	a8 9b       	sbis	0x15, 0	; 21
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <micros+0x24>
     a24:	2f 3f       	cpi	r18, 0xFF	; 255
     a26:	19 f0       	breq	.+6      	; 0xa2e <micros+0x24>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	a1 1d       	adc	r26, r1
     a2c:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     a2e:	3f bf       	out	0x3f, r19	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     a30:	ba 2f       	mov	r27, r26
     a32:	a9 2f       	mov	r26, r25
     a34:	98 2f       	mov	r25, r24
     a36:	88 27       	eor	r24, r24
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	62 0f       	add	r22, r18
     a3e:	71 1d       	adc	r23, r1
     a40:	81 1d       	adc	r24, r1
     a42:	91 1d       	adc	r25, r1
     a44:	43 e0       	ldi	r20, 0x03	; 3
     a46:	66 0f       	add	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	88 1f       	adc	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	4a 95       	dec	r20
     a50:	d1 f7       	brne	.-12     	; 0xa46 <micros+0x3c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     a52:	08 95       	ret

00000a54 <delay.constprop.83>:
delay.constprop.83():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:395

void delay(unsigned long ms)
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:397
{
  unsigned long start = micros();
     a5c:	0e 94 05 05 	call	0xa0a	; 0xa0a <micros>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     a64:	0e 94 05 05 	call	0xa0a	; 0xa0a <micros>
     a68:	6c 19       	sub	r22, r12
     a6a:	7d 09       	sbc	r23, r13
     a6c:	8e 09       	sbc	r24, r14
     a6e:	9f 09       	sbc	r25, r15
     a70:	68 3e       	cpi	r22, 0xE8	; 232
     a72:	73 40       	sbci	r23, 0x03	; 3
     a74:	81 05       	cpc	r24, r1
     a76:	91 05       	cpc	r25, r1
     a78:	a8 f3       	brcs	.-22     	; 0xa64 <delay.constprop.83+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	08 95       	ret

00000a84 <TM16xx::receive()>:
_ZN6TM16xx7receiveEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:242
  send(data);
  stop();
}

byte TM16xx::receive()
{
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:246
  byte temp = 0;

  // Pull-up on
  pinMode(dataPin, INPUT);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:247
  digitalWrite(dataPin, HIGH);
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
     aa4:	98 e0       	ldi	r25, 0x08	; 8
     aa6:	c9 2e       	mov	r12, r25
     aa8:	d1 2c       	mov	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:243
  stop();
}

byte TM16xx::receive()
{
  byte temp = 0;
     aaa:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:250
  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
    temp >>= 1;
     aac:	e1 2e       	mov	r14, r17
     aae:	f1 2c       	mov	r15, r1
     ab0:	f5 94       	asr	r15
     ab2:	e7 94       	ror	r14
     ab4:	1e 2d       	mov	r17, r14
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:252

    digitalWrite(clockPin, LOW);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	8e 81       	ldd	r24, Y+6	; 0x06
     aba:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:253
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
     abe:	e8 81       	ld	r30, Y
     ac0:	f9 81       	ldd	r31, Y+1	; 0x01
     ac2:	02 8c       	ldd	r0, Z+26	; 0x1a
     ac4:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ac6:	e0 2d       	mov	r30, r0
     ac8:	ce 01       	movw	r24, r28
     aca:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:255

    if (digitalRead(dataPin)) {
     acc:	8d 81       	ldd	r24, Y+5	; 0x05
     ace:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <digitalRead>
     ad2:	89 2b       	or	r24, r25
     ad4:	09 f0       	breq	.+2      	; 0xad8 <TM16xx::receive()+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:256
      temp |= 0x80;
     ad6:	10 68       	ori	r17, 0x80	; 128
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:259
    }

    digitalWrite(clockPin, HIGH);
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:260
    bitDelay();
     ae0:	e8 81       	ld	r30, Y
     ae2:	f9 81       	ldd	r31, Y+1	; 0x01
     ae4:	02 8c       	ldd	r0, Z+26	; 0x1a
     ae6:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ae8:	e0 2d       	mov	r30, r0
     aea:	ce 01       	movw	r24, r28
     aec:	09 95       	icall
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	c8 1a       	sub	r12, r24
     af2:	d1 08       	sbc	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:249

  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
     af4:	d9 f6       	brne	.-74     	; 0xaac <TM16xx::receive()+0x28>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:264
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }

  // Pull-up off
  pinMode(dataPin, OUTPUT);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:265
  digitalWrite(dataPin, LOW);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	8d 81       	ldd	r24, Y+5	; 0x05
     b02:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:268

  return temp;
}
     b06:	81 2f       	mov	r24, r17
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <TM16xx::sendData(unsigned char, unsigned char)>:
_ZN6TM16xx8sendDataEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:233
  send(cmd);
  stop();
}

void TM16xx::sendData(byte address, byte data)
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	16 2f       	mov	r17, r22
     b24:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:234
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
     b26:	e8 81       	ld	r30, Y
     b28:	f9 81       	ldd	r31, Y+1	; 0x01
     b2a:	02 a0       	ldd	r0, Z+34	; 0x22
     b2c:	f3 a1       	ldd	r31, Z+35	; 0x23
     b2e:	e0 2d       	mov	r30, r0
     b30:	64 e4       	ldi	r22, 0x44	; 68
     b32:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:235
	start();
     b34:	e8 81       	ld	r30, Y
     b36:	f9 81       	ldd	r31, Y+1	; 0x01
     b38:	04 8c       	ldd	r0, Z+28	; 0x1c
     b3a:	f5 8d       	ldd	r31, Z+29	; 0x1d
     b3c:	e0 2d       	mov	r30, r0
     b3e:	ce 01       	movw	r24, r28
     b40:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:236
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
     b42:	61 2f       	mov	r22, r17
     b44:	60 6c       	ori	r22, 0xC0	; 192
     b46:	e8 81       	ld	r30, Y
     b48:	f9 81       	ldd	r31, Y+1	; 0x01
     b4a:	00 a0       	ldd	r0, Z+32	; 0x20
     b4c:	f1 a1       	ldd	r31, Z+33	; 0x21
     b4e:	e0 2d       	mov	r30, r0
     b50:	ce 01       	movw	r24, r28
     b52:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:237
  send(data);
     b54:	e8 81       	ld	r30, Y
     b56:	f9 81       	ldd	r31, Y+1	; 0x01
     b58:	00 a0       	ldd	r0, Z+32	; 0x20
     b5a:	f1 a1       	ldd	r31, Z+33	; 0x21
     b5c:	e0 2d       	mov	r30, r0
     b5e:	60 2f       	mov	r22, r16
     b60:	ce 01       	movw	r24, r28
     b62:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
  stop();
     b64:	e8 81       	ld	r30, Y
     b66:	f9 81       	ldd	r31, Y+1	; 0x01
     b68:	06 8c       	ldd	r0, Z+30	; 0x1e
     b6a:	f7 8d       	ldd	r31, Z+31	; 0x1f
     b6c:	e0 2d       	mov	r30, r0
     b6e:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:239
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
{
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
	start();
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
  send(data);
  stop();
     b78:	09 94       	ijmp

00000b7a <TM16xx::sendCommand(unsigned char)>:
_ZN6TM16xx11sendCommandEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:226
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
}

void TM16xx::sendCommand(byte cmd)
{
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	ec 01       	movw	r28, r24
     b82:	16 2f       	mov	r17, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:227
	start();
     b84:	e8 81       	ld	r30, Y
     b86:	f9 81       	ldd	r31, Y+1	; 0x01
     b88:	04 8c       	ldd	r0, Z+28	; 0x1c
     b8a:	f5 8d       	ldd	r31, Z+29	; 0x1d
     b8c:	e0 2d       	mov	r30, r0
     b8e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:228
  send(cmd);
     b90:	e8 81       	ld	r30, Y
     b92:	f9 81       	ldd	r31, Y+1	; 0x01
     b94:	00 a0       	ldd	r0, Z+32	; 0x20
     b96:	f1 a1       	ldd	r31, Z+33	; 0x21
     b98:	e0 2d       	mov	r30, r0
     b9a:	61 2f       	mov	r22, r17
     b9c:	ce 01       	movw	r24, r28
     b9e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229
  stop();
     ba0:	e8 81       	ld	r30, Y
     ba2:	f9 81       	ldd	r31, Y+1	; 0x01
     ba4:	06 8c       	ldd	r0, Z+30	; 0x1e
     ba6:	f7 8d       	ldd	r31, Z+31	; 0x1f
     ba8:	e0 2d       	mov	r30, r0
     baa:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:230
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229

void TM16xx::sendCommand(byte cmd)
{
	start();
  send(cmd);
  stop();
     bb2:	09 94       	ijmp

00000bb4 <TM16xx::send(unsigned char)>:
_ZN6TM16xx4sendEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:210
  digitalWrite(strobePin, HIGH);
  bitDelay();
}

void TM16xx::send(byte data)
{
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	f6 2e       	mov	r15, r22
     bc2:	08 e0       	ldi	r16, 0x08	; 8
     bc4:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:214
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	8e 81       	ldd	r24, Y+6	; 0x06
     bca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:215
    bitDelay();
     bce:	e8 81       	ld	r30, Y
     bd0:	f9 81       	ldd	r31, Y+1	; 0x01
     bd2:	02 8c       	ldd	r0, Z+26	; 0x1a
     bd4:	f3 8d       	ldd	r31, Z+27	; 0x1b
     bd6:	e0 2d       	mov	r30, r0
     bd8:	ce 01       	movw	r24, r28
     bda:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:216
    digitalWrite(dataPin, data & 1 ? HIGH : LOW);
     bdc:	6f 2d       	mov	r22, r15
     bde:	61 70       	andi	r22, 0x01	; 1
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:217
    bitDelay();
     be6:	e8 81       	ld	r30, Y
     be8:	f9 81       	ldd	r31, Y+1	; 0x01
     bea:	02 8c       	ldd	r0, Z+26	; 0x1a
     bec:	f3 8d       	ldd	r31, Z+27	; 0x1b
     bee:	e0 2d       	mov	r30, r0
     bf0:	ce 01       	movw	r24, r28
     bf2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:218
    data >>= 1;
     bf4:	f6 94       	lsr	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:219
    digitalWrite(clockPin, HIGH);
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	8e 81       	ldd	r24, Y+6	; 0x06
     bfa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:220
    bitDelay();
     bfe:	e8 81       	ld	r30, Y
     c00:	f9 81       	ldd	r31, Y+1	; 0x01
     c02:	02 8c       	ldd	r0, Z+26	; 0x1a
     c04:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c06:	e0 2d       	mov	r30, r0
     c08:	ce 01       	movw	r24, r28
     c0a:	09 95       	icall
     c0c:	01 50       	subi	r16, 0x01	; 1
     c0e:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:213

void TM16xx::send(byte data)
{
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
     c10:	d1 f6       	brne	.-76     	; 0xbc6 <TM16xx::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     c12:	e8 81       	ld	r30, Y
     c14:	f9 81       	ldd	r31, Y+1	; 0x01
     c16:	02 8c       	ldd	r0, Z+26	; 0x1a
     c18:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c1a:	e0 2d       	mov	r30, r0
     c1c:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:223
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     c28:	09 94       	ijmp

00000c2a <TM16xx::stop()>:
_ZN6TM16xx4stopEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:204
  digitalWrite(strobePin, LOW);
  bitDelay();
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:205
  digitalWrite(strobePin, HIGH);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
  bitDelay();
     c38:	e8 81       	ld	r30, Y
     c3a:	f9 81       	ldd	r31, Y+1	; 0x01
     c3c:	02 8c       	ldd	r0, Z+26	; 0x1a
     c3e:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c40:	e0 2d       	mov	r30, r0
     c42:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:207
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
  digitalWrite(strobePin, HIGH);
  bitDelay();
     c48:	09 94       	ijmp

00000c4a <TM16xx::start()>:
_ZN6TM16xx5startEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:198
  	delayMicroseconds(1);
  #endif
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:199
  digitalWrite(strobePin, LOW);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	8f 81       	ldd	r24, Y+7	; 0x07
     c54:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
  bitDelay();
     c58:	e8 81       	ld	r30, Y
     c5a:	f9 81       	ldd	r31, Y+1	; 0x01
     c5c:	02 8c       	ldd	r0, Z+26	; 0x1a
     c5e:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c60:	e0 2d       	mov	r30, r0
     c62:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:201
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
  digitalWrite(strobePin, LOW);
  bitDelay();
     c68:	09 94       	ijmp

00000c6a <TM16xx::bitDelay()>:
_ZN7TwoWire5flushEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:712
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     c6a:	08 95       	ret

00000c6c <TM16xx::getButtons()>:
_ZN6TM16xx10getButtonsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:174

// key-scanning method, implemented in chip specific derived class
uint32_t TM16xx::getButtons()
{	// return state of up to 32 keys.
	return(0);
}
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	cb 01       	movw	r24, r22
     c72:	08 95       	ret

00000c74 <TM16xx::getNumDigits()>:
_ZN6TM16xx12getNumDigitsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:168
}

byte TM16xx::getNumDigits()
{	// get the number of digits used (needed by TM16xxDisplay to combine modules)
  return(digits);
}
     c74:	fc 01       	movw	r30, r24
     c76:	84 81       	ldd	r24, Z+4	; 0x04
     c78:	08 95       	ret

00000c7a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>:
_ZN6TM16xx18setDisplayToStringEPKcjhPKh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:154
    sendChar(i, pgm_read_byte_near(values+i), 0);
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
     c7a:	7f 92       	push	r7
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	7c 01       	movw	r14, r24
     c96:	6a 01       	movw	r12, r20
     c98:	72 2e       	mov	r7, r18
     c9a:	8b 01       	movw	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  for (int i = 0; i < digits - pos; i++) {
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	a2 2e       	mov	r10, r18
     ca2:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
  	if (string[i] != '\0') {
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     ca4:	88 24       	eor	r8, r8
     ca6:	83 94       	inc	r8
     ca8:	91 2c       	mov	r9, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     caa:	d7 01       	movw	r26, r14
     cac:	14 96       	adiw	r26, 0x04	; 4
     cae:	8c 91       	ld	r24, X
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	9c 01       	movw	r18, r24
     cb4:	2a 19       	sub	r18, r10
     cb6:	3b 09       	sbc	r19, r11
     cb8:	c2 17       	cp	r28, r18
     cba:	d3 07       	cpc	r29, r19
     cbc:	0c f5       	brge	.+66     	; 0xd00 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:156
  	if (string[i] != '\0') {
     cbe:	f8 01       	movw	r30, r16
     cc0:	41 91       	ld	r20, Z+
     cc2:	8f 01       	movw	r16, r30
     cc4:	44 23       	and	r20, r20
     cc6:	e1 f0       	breq	.+56     	; 0xd00 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     cc8:	8c 1b       	sub	r24, r28
     cca:	9d 0b       	sbc	r25, r29
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	94 01       	movw	r18, r8
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x5c>
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	8a 95       	dec	r24
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x58>
     cda:	c9 01       	movw	r24, r18
     cdc:	8c 21       	and	r24, r12
     cde:	9d 21       	and	r25, r13
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	89 2b       	or	r24, r25
     ce4:	09 f4       	brne	.+2      	; 0xce8 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x6e>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	6c 2f       	mov	r22, r28
     cea:	67 0d       	add	r22, r7
     cec:	d7 01       	movw	r26, r14
     cee:	ed 91       	ld	r30, X+
     cf0:	fc 91       	ld	r31, X
     cf2:	06 88       	ldd	r0, Z+22	; 0x16
     cf4:	f7 89       	ldd	r31, Z+23	; 0x17
     cf6:	e0 2d       	mov	r30, r0
     cf8:	c7 01       	movw	r24, r14
     cfa:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     cfc:	21 96       	adiw	r28, 0x01	; 1
     cfe:	d5 cf       	rjmp	.-86     	; 0xcaa <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x30>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:163
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
		} else {
		  break;
		}
  }
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	08 95       	ret

00000d1c <TM16xx::setDisplay(unsigned char const*, unsigned char)>:
_ZN6TM16xx10setDisplayEPKhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:147
{
  sendChar(pos, 0, dot);
}

void TM16xx::setDisplay(const byte values[], byte size)
{	// send an array of values to the display
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	7c 01       	movw	r14, r24
     d2e:	6b 01       	movw	r12, r22
     d30:	04 2f       	mov	r16, r20
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	d0 e0       	ldi	r29, 0x00	; 0
     d36:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:148
  for (byte i = 0; i < size; i++) {
     d38:	c0 17       	cp	r28, r16
     d3a:	d1 07       	cpc	r29, r17
     d3c:	81 f0       	breq	.+32     	; 0xd5e <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x42>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:149
    sendChar(i, pgm_read_byte_near(values+i), 0);
     d3e:	f6 01       	movw	r30, r12
     d40:	ec 0f       	add	r30, r28
     d42:	fd 1f       	adc	r31, r29
     d44:	44 91       	lpm	r20, Z
     d46:	d7 01       	movw	r26, r14
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	02 88       	ldd	r0, Z+18	; 0x12
     d4e:	f3 89       	ldd	r31, Z+19	; 0x13
     d50:	e0 2d       	mov	r30, r0
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	6c 2f       	mov	r22, r28
     d56:	c7 01       	movw	r24, r14
     d58:	09 95       	icall
     d5a:	21 96       	adiw	r28, 0x01	; 1
     d5c:	ed cf       	rjmp	.-38     	; 0xd38 <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x1c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:151
  }
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	08 95       	ret

00000d70 <TM16xx::clearDisplayDigit(unsigned char, bool)>:
_ZN6TM16xx17clearDisplayDigitEhb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:142
    nNumber/=10;
  }
}

void TM16xx::clearDisplayDigit(byte pos, boolean dot)
{
     d70:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:143
  sendChar(pos, 0, dot);
     d72:	dc 01       	movw	r26, r24
     d74:	ed 91       	ld	r30, X+
     d76:	fc 91       	ld	r31, X
     d78:	02 88       	ldd	r0, Z+18	; 0x12
     d7a:	f3 89       	ldd	r31, Z+19	; 0x13
     d7c:	e0 2d       	mov	r30, r0
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	09 94       	ijmp

00000d82 <TM16xx::setDisplayToDecNumber(int, unsigned char)>:
_ZN6TM16xx21setDisplayToDecNumberEih():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:129
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
}

void TM16xx::setDisplayToDecNumber(int nNumber, byte bDots)		// byte bDots=0
{	// Function to display a decimal number on a n-digit clock display.
     d82:	9f 92       	push	r9
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     d9a:	c1 e0       	ldi	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     d9c:	c4 2e       	mov	r12, r20
     d9e:	d1 2c       	mov	r13, r1
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	a8 2e       	mov	r10, r24
     da4:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     da6:	d7 01       	movw	r26, r14
     da8:	14 96       	adiw	r26, 0x04	; 4
     daa:	4c 91       	ld	r20, X
     dac:	4c 17       	cp	r20, r28
     dae:	f0 f0       	brcs	.+60     	; 0xdec <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     db0:	96 01       	movw	r18, r12
     db2:	0c 2e       	mov	r0, r28
     db4:	02 c0       	rjmp	.+4      	; 0xdba <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x38>
     db6:	35 95       	asr	r19
     db8:	27 95       	ror	r18
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x34>
     dbe:	21 70       	andi	r18, 0x01	; 1
     dc0:	4c 1b       	sub	r20, r28
     dc2:	cb 01       	movw	r24, r22
     dc4:	b5 01       	movw	r22, r10
     dc6:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
     dca:	96 2e       	mov	r9, r22
     dcc:	d7 2f       	mov	r29, r23
     dce:	d7 01       	movw	r26, r14
     dd0:	ed 91       	ld	r30, X+
     dd2:	fc 91       	ld	r31, X
     dd4:	00 84       	ldd	r0, Z+8	; 0x08
     dd6:	f1 85       	ldd	r31, Z+9	; 0x09
     dd8:	e0 2d       	mov	r30, r0
     dda:	05 e9       	ldi	r16, 0x95	; 149
     ddc:	11 e0       	ldi	r17, 0x01	; 1
     dde:	68 2f       	mov	r22, r24
     de0:	c7 01       	movw	r24, r14
     de2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:137
    nNumber/=10;
     de4:	69 2d       	mov	r22, r9
     de6:	7d 2f       	mov	r23, r29
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     de8:	cf 5f       	subi	r28, 0xFF	; 255
     dea:	dd cf       	rjmp	.-70     	; 0xda6 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x24>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:139
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
    nNumber/=10;
  }
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	08 95       	ret

00000e04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>:
_ZN6TM16xx15setDisplayDigitEhhbPKh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:124
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	e6 2f       	mov	r30, r22
     e0a:	64 2f       	mov	r22, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     e0c:	ef 70       	andi	r30, 0x0F	; 15
     e0e:	e0 0f       	add	r30, r16
     e10:	f1 2f       	mov	r31, r17
     e12:	f1 1d       	adc	r31, r1
     e14:	44 91       	lpm	r20, Z
     e16:	dc 01       	movw	r26, r24
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	02 88       	ldd	r0, Z+18	; 0x12
     e1e:	f3 89       	ldd	r31, Z+19	; 0x13
     e20:	e0 2d       	mov	r30, r0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:126
}
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     e26:	09 94       	ijmp

00000e28 <TM16xx::sendAsciiChar(unsigned char, char, bool)>:
_ZN6TM16xx13sendAsciiCharEhcb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:119
void TM16xx::sendAsciiChar(byte pos, char c, boolean fDot)
{ // Method to send an Ascii character to the display
  // This method is also called by TM16xxDisplay.print to display characters
  // The base class uses the default 7-segment font to find the LED pattern.
  // Derived classes for multi-segment displays or alternate layout displays can override this method
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
     e28:	e4 2f       	mov	r30, r20
     e2a:	44 0f       	add	r20, r20
     e2c:	ff 0b       	sbc	r31, r31
     e2e:	ea 5e       	subi	r30, 0xEA	; 234
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	44 91       	lpm	r20, Z
     e34:	dc 01       	movw	r26, r24
     e36:	ed 91       	ld	r30, X+
     e38:	fc 91       	ld	r31, X
     e3a:	02 88       	ldd	r0, Z+18	; 0x12
     e3c:	f3 89       	ldd	r31, Z+19	; 0x13
     e3e:	e0 2d       	mov	r30, r0
     e40:	09 94       	ijmp

00000e42 <TM16xx::sendChar(unsigned char, unsigned char, bool)>:
_ZN6TM16xx8sendCharEhhb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:106
  // Depending on the module this method should shift the segments to the proper data position.
}


void TM16xx::sendChar(byte pos, byte data, boolean dot)
{
     e42:	36 2f       	mov	r19, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:111
/*
	if(pos<_maxDisplays)
	  sendData(pos, data | (dot ? 0b10000000 : 0));
*/
	setSegments(data | (dot ? 0b10000000 : 0), pos);
     e44:	dc 01       	movw	r26, r24
     e46:	ed 91       	ld	r30, X+
     e48:	fc 91       	ld	r31, X
     e4a:	04 80       	ldd	r0, Z+4	; 0x04
     e4c:	f5 81       	ldd	r31, Z+5	; 0x05
     e4e:	e0 2d       	mov	r30, r0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	21 11       	cpse	r18, r1
     e54:	60 e8       	ldi	r22, 0x80	; 128
     e56:	64 2b       	or	r22, r20
     e58:	43 2f       	mov	r20, r19
     e5a:	09 94       	ijmp

00000e5c <TM16xx::setSegments16(unsigned int, unsigned char)>:
_ZN6TM16xx13setSegments16Ejh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:102
  // The position of the additional segments in the second data byte can be different per module,
  // For that reason this module has no implementation in the base class.
  // E.g. for TM1638/TM1668 segments 8-9 are in bits 0-1, for TM1630 segment 14 is in bit 5
  // This method assumes segments 0-7 to be in the lower byte and the extra segments in the upper byte
  // Depending on the module this method should shift the segments to the proper data position.
}
     e5c:	08 95       	ret

00000e5e <TM16xx::setSegments(unsigned char, unsigned char)>:
_ZN6TM16xx11setSegmentsEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:88
	stop();

}

void TM16xx::setSegments(byte segments, byte position)
{	// set 8 leds on common grd as specified
     e5e:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:90
	// TODO: support 10-14 segments on chips like TM1638/TM1668
	if(position<_maxDisplays)
     e60:	dc 01       	movw	r26, r24
     e62:	12 96       	adiw	r26, 0x02	; 2
     e64:	3c 91       	ld	r19, X
     e66:	12 97       	sbiw	r26, 0x02	; 2
     e68:	43 17       	cp	r20, r19
     e6a:	40 f4       	brcc	.+16     	; 0xe7c <TM16xx::setSegments(unsigned char, unsigned char)+0x1e>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:91
		sendData(position, segments);
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	04 a0       	ldd	r0, Z+36	; 0x24
     e72:	f5 a1       	ldd	r31, Z+37	; 0x25
     e74:	e0 2d       	mov	r30, r0
     e76:	46 2f       	mov	r20, r22
     e78:	62 2f       	mov	r22, r18
     e7a:	09 94       	ijmp
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:93
		//sendData(TM16XX_CMD_ADDRESS | position, segments);
}
     e7c:	08 95       	ret

00000e7e <TM16xx::clearDisplay()>:
_ZN6TM16xx12clearDisplayEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:68
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
}

void TM16xx::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:73
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode
     e88:	e8 81       	ld	r30, Y
     e8a:	f9 81       	ldd	r31, Y+1	; 0x01
     e8c:	02 a0       	ldd	r0, Z+34	; 0x22
     e8e:	f3 a1       	ldd	r31, Z+35	; 0x23
     e90:	e0 2d       	mov	r30, r0
     e92:	60 e4       	ldi	r22, 0x40	; 64
     e94:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:76

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
     e96:	e8 81       	ld	r30, Y
     e98:	f9 81       	ldd	r31, Y+1	; 0x01
     e9a:	04 8c       	ldd	r0, Z+28	; 0x1c
     e9c:	f5 8d       	ldd	r31, Z+29	; 0x1d
     e9e:	e0 2d       	mov	r30, r0
     ea0:	ce 01       	movw	r24, r28
     ea2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:77
  send(TM16XX_CMD_ADDRESS);
     ea4:	e8 81       	ld	r30, Y
     ea6:	f9 81       	ldd	r31, Y+1	; 0x01
     ea8:	00 a0       	ldd	r0, Z+32	; 0x20
     eaa:	f1 a1       	ldd	r31, Z+33	; 0x21
     eac:	e0 2d       	mov	r30, r0
     eae:	60 ec       	ldi	r22, 0xC0	; 192
     eb0:	ce 01       	movw	r24, r28
     eb2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  for (int i = 0; i < _maxDisplays; i++) {
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	e8 81       	ld	r30, Y
     eba:	f9 81       	ldd	r31, Y+1	; 0x01
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	80 17       	cp	r24, r16
     ec0:	11 06       	cpc	r1, r17
     ec2:	a9 f0       	breq	.+42     	; 0xeee <TM16xx::clearDisplay()+0x70>
     ec4:	a4 f0       	brlt	.+40     	; 0xeee <TM16xx::clearDisplay()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:79
    send(0x00);
     ec6:	00 a0       	ldd	r0, Z+32	; 0x20
     ec8:	f1 a1       	ldd	r31, Z+33	; 0x21
     eca:	e0 2d       	mov	r30, r0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	ce 01       	movw	r24, r28
     ed0:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:80
    if(_maxSegments>8)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	89 30       	cpi	r24, 0x09	; 9
     ed6:	40 f0       	brcs	.+16     	; 0xee8 <TM16xx::clearDisplay()+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:81
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
     ed8:	e8 81       	ld	r30, Y
     eda:	f9 81       	ldd	r31, Y+1	; 0x01
     edc:	00 a0       	ldd	r0, Z+32	; 0x20
     ede:	f1 a1       	ldd	r31, Z+33	; 0x21
     ee0:	e0 2d       	mov	r30, r0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
  send(TM16XX_CMD_ADDRESS);
  for (int i = 0; i < _maxDisplays; i++) {
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	e5 cf       	rjmp	.-54     	; 0xeb8 <TM16xx::clearDisplay()+0x3a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     eee:	06 8c       	ldd	r0, Z+30	; 0x1e
     ef0:	f7 8d       	ldd	r31, Z+31	; 0x1f
     ef2:	e0 2d       	mov	r30, r0
     ef4:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:85

}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
  for (int i = 0; i < _maxDisplays; i++) {
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     efe:	09 94       	ijmp

00000f00 <TM16xx::setupDisplay(bool, unsigned char)>:
_ZN6TM16xx12setupDisplayEbh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:64
*/
}

void TM16xx::setupDisplay(boolean active, byte intensity)
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
     f00:	dc 01       	movw	r26, r24
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	02 a0       	ldd	r0, Z+34	; 0x22
     f08:	f3 a1       	ldd	r31, Z+35	; 0x23
     f0a:	e0 2d       	mov	r30, r0
     f0c:	61 11       	cpse	r22, r1
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <TM16xx::setupDisplay(bool, unsigned char)+0x1c>
     f10:	60 e8       	ldi	r22, 0x80	; 128
     f12:	48 30       	cpi	r20, 0x08	; 8
     f14:	08 f0       	brcs	.+2      	; 0xf18 <TM16xx::setupDisplay(bool, unsigned char)+0x18>
     f16:	47 e0       	ldi	r20, 0x07	; 7
     f18:	64 2b       	or	r22, r20
     f1a:	09 94       	ijmp
     f1c:	68 e8       	ldi	r22, 0x88	; 136
     f1e:	f9 cf       	rjmp	.-14     	; 0xf12 <TM16xx::setupDisplay(bool, unsigned char)+0x12>

00000f20 <TM1650::getButtons()>:
_ZN6TM165010getButtonsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:177

  return temp;
}

uint32_t TM1650::getButtons()
{	// Keyscan data on the TM1650/TM1637 is one byte, with index of the button that is pressed.
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:190
	//		0x64-0x67 for DIG1 to DIG4 on KeyInput5 (E)
	//		0x6C-0x6F for DIG1 to DIG4 on KeyInput6 (F)
	//		0x74-0x77 for DIG1 to DIG4 on KeyInput7 (G)
	// Button state is reset when another command is issued
	// For compatibility with the rest of the library the buttonstate is returned as a 32-bit value
  start();
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	04 8c       	ldd	r0, Z+28	; 0x1c
     f30:	f5 8d       	ldd	r31, Z+29	; 0x1d
     f32:	e0 2d       	mov	r30, r0
     f34:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:191
  send(TM1650_CMD_DATA_READ);		// send read buttons command
     f36:	d8 01       	movw	r26, r16
     f38:	ed 91       	ld	r30, X+
     f3a:	fc 91       	ld	r31, X
     f3c:	00 a0       	ldd	r0, Z+32	; 0x20
     f3e:	f1 a1       	ldd	r31, Z+33	; 0x21
     f40:	e0 2d       	mov	r30, r0
     f42:	69 e4       	ldi	r22, 0x49	; 73
     f44:	c8 01       	movw	r24, r16
     f46:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:192
	byte received=receive();
     f48:	d8 01       	movw	r26, r16
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	06 a0       	ldd	r0, Z+38	; 0x26
     f50:	f7 a1       	ldd	r31, Z+39	; 0x27
     f52:	e0 2d       	mov	r30, r0
     f54:	c8 01       	movw	r24, r16
     f56:	09 95       	icall
     f58:	c8 2f       	mov	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:193
	stop();
     f5a:	d8 01       	movw	r26, r16
     f5c:	ed 91       	ld	r30, X+
     f5e:	fc 91       	ld	r31, X
     f60:	06 8c       	ldd	r0, Z+30	; 0x1e
     f62:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f64:	e0 2d       	mov	r30, r0
     f66:	c8 01       	movw	r24, r16
     f68:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:200
	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
		return(0);
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	cb 01       	movw	r24, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:199

	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
     f70:	c4 34       	cpi	r28, 0x44	; 68
     f72:	70 f0       	brcs	.+28     	; 0xf90 <TM1650::getButtons()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:203
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
     f74:	c8 34       	cpi	r28, 0x48	; 72
     f76:	80 f4       	brcc	.+32     	; 0xf98 <TM1650::getButtons()+0x78>
     f78:	c4 54       	subi	r28, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:211
	else if(received<=0x5F) received=received-0x5C+12;
	else if(received<=0x67) received=received-0x64+16;
	else if(received<=0x6F) received=received-0x6C+20;
	else if(received<=0x77) received=received-0x74+24;

	return(bit(received)); 		// return bit set for the number of the button that is pressed (bits 0-27)
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <TM1650::getButtons()+0x6c>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	88 1f       	adc	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	ca 95       	dec	r28
     f8e:	d2 f7       	brpl	.-12     	; 0xf84 <TM1650::getButtons()+0x64>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:212
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:204
	if(received<0x44)
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
	else if(received<=0x4F) received=received-0x4C+4;
     f98:	c0 35       	cpi	r28, 0x50	; 80
     f9a:	10 f4       	brcc	.+4      	; 0xfa0 <TM1650::getButtons()+0x80>
     f9c:	c8 54       	subi	r28, 0x48	; 72
     f9e:	ed cf       	rjmp	.-38     	; 0xf7a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:205
	else if(received<=0x57) received=received-0x54+8;
     fa0:	c8 35       	cpi	r28, 0x58	; 88
     fa2:	10 f4       	brcc	.+4      	; 0xfa8 <TM1650::getButtons()+0x88>
     fa4:	cc 54       	subi	r28, 0x4C	; 76
     fa6:	e9 cf       	rjmp	.-46     	; 0xf7a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:206
	else if(received<=0x5F) received=received-0x5C+12;
     fa8:	c0 36       	cpi	r28, 0x60	; 96
     faa:	10 f4       	brcc	.+4      	; 0xfb0 <TM1650::getButtons()+0x90>
     fac:	c0 55       	subi	r28, 0x50	; 80
     fae:	e5 cf       	rjmp	.-54     	; 0xf7a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:207
	else if(received<=0x67) received=received-0x64+16;
     fb0:	c8 36       	cpi	r28, 0x68	; 104
     fb2:	10 f4       	brcc	.+4      	; 0xfb8 <TM1650::getButtons()+0x98>
     fb4:	c4 55       	subi	r28, 0x54	; 84
     fb6:	e1 cf       	rjmp	.-62     	; 0xf7a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:208
	else if(received<=0x6F) received=received-0x6C+20;
     fb8:	c0 37       	cpi	r28, 0x70	; 112
     fba:	10 f4       	brcc	.+4      	; 0xfc0 <TM1650::getButtons()+0xa0>
     fbc:	c8 55       	subi	r28, 0x58	; 88
     fbe:	dd cf       	rjmp	.-70     	; 0xf7a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:209
	else if(received<=0x77) received=received-0x74+24;
     fc0:	c8 37       	cpi	r28, 0x78	; 120
     fc2:	d8 f6       	brcc	.-74     	; 0xf7a <TM1650::getButtons()+0x5a>
     fc4:	cc 55       	subi	r28, 0x5C	; 92
     fc6:	d9 cf       	rjmp	.-78     	; 0xf7a <TM1650::getButtons()+0x5a>

00000fc8 <TM1650::receive()>:
_ZN6TM16507receiveEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:134
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:138
  byte temp = 0;

  // Pull-up on
  digitalWrite(clockPin, LOW);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:139
  pinMode(dataPin, INPUT);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:140
  digitalWrite(dataPin, HIGH);
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
     fec:	88 e0       	ldi	r24, 0x08	; 8
     fee:	e8 2e       	mov	r14, r24
     ff0:	f1 2c       	mov	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:135
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
  byte temp = 0;
     ff2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:144
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
  {
    temp <<= 1;  // MSB first on TM1650, so shift left
     ff4:	11 0f       	add	r17, r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:146

    digitalWrite(clockPin, HIGH);
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:147
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	02 8c       	ldd	r0, Z+26	; 0x1a
    1004:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1006:	e0 2d       	mov	r30, r0
    1008:	ce 01       	movw	r24, r28
    100a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:149

    if (digitalRead(dataPin)) {
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <digitalRead>
    1012:	89 2b       	or	r24, r25
    1014:	09 f0       	breq	.+2      	; 0x1018 <TM1650::receive()+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:150
      temp |= 0x01;	 // MSB first on TM1650, so set lowest bit
    1016:	11 60       	ori	r17, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:153
    }

    digitalWrite(clockPin, LOW);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:154
    bitDelay();
    1020:	e8 81       	ld	r30, Y
    1022:	f9 81       	ldd	r31, Y+1	; 0x01
    1024:	02 8c       	ldd	r0, Z+26	; 0x1a
    1026:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1028:	e0 2d       	mov	r30, r0
    102a:	ce 01       	movw	r24, r28
    102c:	09 95       	icall
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	e8 1a       	sub	r14, r24
    1032:	f1 08       	sbc	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:142
  // Pull-up on
  digitalWrite(clockPin, LOW);
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
    1034:	f9 f6       	brne	.-66     	; 0xff4 <TM1650::receive()+0x2c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:160
  }

	// receive Ack
	// TODO: currently the logical analyzer reports a NAK for the received value.
	// I'd like to see an ACK instead as all data transfer seems okay.
  digitalWrite(clockPin, LOW);
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:162
  //digitalWrite(dataPin, HIGH);
  pinMode(dataPin, INPUT);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:163
  digitalWrite(dataPin, HIGH);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:164
  bitDelay();
    104e:	e8 81       	ld	r30, Y
    1050:	f9 81       	ldd	r31, Y+1	; 0x01
    1052:	02 8c       	ldd	r0, Z+26	; 0x1a
    1054:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1056:	e0 2d       	mov	r30, r0
    1058:	ce 01       	movw	r24, r28
    105a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:165
  digitalWrite(clockPin, HIGH);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	8e 81       	ldd	r24, Y+6	; 0x06
    1060:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:166
  bitDelay();
    1064:	e8 81       	ld	r30, Y
    1066:	f9 81       	ldd	r31, Y+1	; 0x01
    1068:	02 8c       	ldd	r0, Z+26	; 0x1a
    106a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    106c:	e0 2d       	mov	r30, r0
    106e:	ce 01       	movw	r24, r28
    1070:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:167
  uint8_t ack = digitalRead(dataPin);
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <digitalRead>
    1078:	f8 2e       	mov	r15, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:168
  digitalWrite(clockPin, LOW);
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	8e 81       	ldd	r24, Y+6	; 0x06
    107e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:169
  if (ack == 0)
    1082:	f1 10       	cpse	r15, r1
    1084:	04 c0       	rjmp	.+8      	; 0x108e <TM1650::receive()+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:170
	  digitalWrite(dataPin, LOW);
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:171
  pinMode(dataPin, OUTPUT);
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:174

  return temp;
}
    1096:	81 2f       	mov	r24, r17
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <TM1650::setupDisplay(bool, unsigned char)>:
_ZN6TM165012setupDisplayEbh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:122
  	sendData(i, 0);
  }
}

void TM1650::setupDisplay(boolean active, byte intensity)
{	// For the TM1650 level 0 is maximum brightness, 1-7 is low to high.
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
    10ae:	06 2f       	mov	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:124
	// To align with other TM16XX chips we translate this to the same levels (0-7)
	intensity=min(7, intensity);
    10b0:	48 30       	cpi	r20, 0x08	; 8
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <TM1650::setupDisplay(bool, unsigned char)+0x12>
    10b4:	47 e0       	ldi	r20, 0x07	; 7
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:125
	intensity+=1;
    10b6:	11 e0       	ldi	r17, 0x01	; 1
    10b8:	14 0f       	add	r17, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:126
	if(intensity==8) intensity=0;
    10ba:	18 30       	cpi	r17, 0x08	; 8
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <TM1650::setupDisplay(bool, unsigned char)+0x1c>
    10be:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:127
	start();
    10c0:	e8 81       	ld	r30, Y
    10c2:	f9 81       	ldd	r31, Y+1	; 0x01
    10c4:	04 8c       	ldd	r0, Z+28	; 0x1c
    10c6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    10c8:	e0 2d       	mov	r30, r0
    10ca:	ce 01       	movw	r24, r28
    10cc:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:128
  send(TM1650_CMD_MODE);
    10ce:	e8 81       	ld	r30, Y
    10d0:	f9 81       	ldd	r31, Y+1	; 0x01
    10d2:	00 a0       	ldd	r0, Z+32	; 0x20
    10d4:	f1 a1       	ldd	r31, Z+33	; 0x21
    10d6:	e0 2d       	mov	r30, r0
    10d8:	68 e4       	ldi	r22, 0x48	; 72
    10da:	ce 01       	movw	r24, r28
    10dc:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:129
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
    10de:	e8 81       	ld	r30, Y
    10e0:	f9 81       	ldd	r31, Y+1	; 0x01
    10e2:	00 a0       	ldd	r0, Z+32	; 0x20
    10e4:	f1 a1       	ldd	r31, Z+33	; 0x21
    10e6:	e0 2d       	mov	r30, r0
    10e8:	80 e1       	ldi	r24, 0x10	; 16
    10ea:	18 9f       	mul	r17, r24
    10ec:	a0 01       	movw	r20, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	87 30       	cpi	r24, 0x07	; 7
    10f6:	09 f4       	brne	.+2      	; 0x10fa <TM1650::setupDisplay(bool, unsigned char)+0x56>
    10f8:	68 e0       	ldi	r22, 0x08	; 8
    10fa:	40 2b       	or	r20, r16
    10fc:	64 2b       	or	r22, r20
    10fe:	ce 01       	movw	r24, r28
    1100:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
  stop();
    1102:	e8 81       	ld	r30, Y
    1104:	f9 81       	ldd	r31, Y+1	; 0x01
    1106:	06 8c       	ldd	r0, Z+30	; 0x1e
    1108:	f7 8d       	ldd	r31, Z+31	; 0x1f
    110a:	e0 2d       	mov	r30, r0
    110c:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:131
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
	intensity+=1;
	if(intensity==8) intensity=0;
	start();
  send(TM1650_CMD_MODE);
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
    1116:	09 94       	ijmp

00001118 <TM1650::clearDisplay()>:
_ZN6TM165012clearDisplayEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:110
  send(data);
  stop();
}

void TM1650::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
    1122:	d0 e0       	ldi	r29, 0x00	; 0
    1124:	c0 e0       	ldi	r28, 0x00	; 0
    1126:	d8 01       	movw	r26, r16
    1128:	12 96       	adiw	r26, 0x02	; 2
    112a:	8c 91       	ld	r24, X
    112c:	12 97       	sbiw	r26, 0x02	; 2
    112e:	8c 17       	cp	r24, r28
    1130:	1d 06       	cpc	r1, r29
    1132:	61 f0       	breq	.+24     	; 0x114c <TM1650::clearDisplay()+0x34>
    1134:	5c f0       	brlt	.+22     	; 0x114c <TM1650::clearDisplay()+0x34>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:117
  	sendData(i, 0);
    1136:	ed 91       	ld	r30, X+
    1138:	fc 91       	ld	r31, X
    113a:	04 a0       	ldd	r0, Z+36	; 0x24
    113c:	f5 a1       	ldd	r31, Z+37	; 0x25
    113e:	e0 2d       	mov	r30, r0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	6c 2f       	mov	r22, r28
    1144:	c8 01       	movw	r24, r16
    1146:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	ed cf       	rjmp	.-38     	; 0x1126 <TM1650::clearDisplay()+0xe>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:119
  	sendData(i, 0);
  }
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <TM1650::sendData(unsigned char, unsigned char)>:
_ZN6TM16508sendDataEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:102
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
}

void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	ec 01       	movw	r28, r24
    1160:	16 2f       	mov	r17, r22
    1162:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:103
	start();
    1164:	e8 81       	ld	r30, Y
    1166:	f9 81       	ldd	r31, Y+1	; 0x01
    1168:	04 8c       	ldd	r0, Z+28	; 0x1c
    116a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    116c:	e0 2d       	mov	r30, r0
    116e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:104
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
    1170:	61 2f       	mov	r22, r17
    1172:	66 0f       	add	r22, r22
    1174:	68 66       	ori	r22, 0x68	; 104
    1176:	e8 81       	ld	r30, Y
    1178:	f9 81       	ldd	r31, Y+1	; 0x01
    117a:	00 a0       	ldd	r0, Z+32	; 0x20
    117c:	f1 a1       	ldd	r31, Z+33	; 0x21
    117e:	e0 2d       	mov	r30, r0
    1180:	ce 01       	movw	r24, r28
    1182:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:105
  send(data);
    1184:	e8 81       	ld	r30, Y
    1186:	f9 81       	ldd	r31, Y+1	; 0x01
    1188:	00 a0       	ldd	r0, Z+32	; 0x20
    118a:	f1 a1       	ldd	r31, Z+33	; 0x21
    118c:	e0 2d       	mov	r30, r0
    118e:	60 2f       	mov	r22, r16
    1190:	ce 01       	movw	r24, r28
    1192:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
  stop();
    1194:	e8 81       	ld	r30, Y
    1196:	f9 81       	ldd	r31, Y+1	; 0x01
    1198:	06 8c       	ldd	r0, Z+30	; 0x1e
    119a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    119c:	e0 2d       	mov	r30, r0
    119e:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:107
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
	start();
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
  send(data);
  stop();
    11a8:	09 94       	ijmp

000011aa <TM1650::send(unsigned char)>:
_ZN6TM16504sendEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:69
  digitalWrite(dataPin, HIGH);
	bitDelay();
}

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	ec 01       	movw	r28, r24
    11b6:	f6 2e       	mov	r15, r22
    11b8:	08 e0       	ldi	r16, 0x08	; 8
    11ba:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:74
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
  {
    digitalWrite(clockPin, LOW);
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:75
    bitDelay();
    11c4:	e8 81       	ld	r30, Y
    11c6:	f9 81       	ldd	r31, Y+1	; 0x01
    11c8:	02 8c       	ldd	r0, Z+26	; 0x1a
    11ca:	f3 8d       	ldd	r31, Z+27	; 0x1b
    11cc:	e0 2d       	mov	r30, r0
    11ce:	ce 01       	movw	r24, r28
    11d0:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:77

    digitalWrite(dataPin, data & 0x80 ? HIGH : LOW);		// in contrast to other TM16xx chips, the TM1650 expects MSB first
    11d2:	6f 2d       	mov	r22, r15
    11d4:	66 1f       	adc	r22, r22
    11d6:	66 27       	eor	r22, r22
    11d8:	66 1f       	adc	r22, r22
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:78
    data <<= 1;
    11e0:	ff 0c       	add	r15, r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:80

    digitalWrite(clockPin, HIGH);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:81
    bitDelay();
    11ea:	e8 81       	ld	r30, Y
    11ec:	f9 81       	ldd	r31, Y+1	; 0x01
    11ee:	02 8c       	ldd	r0, Z+26	; 0x1a
    11f0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    11f2:	e0 2d       	mov	r30, r0
    11f4:	ce 01       	movw	r24, r28
    11f6:	09 95       	icall
    11f8:	01 50       	subi	r16, 0x01	; 1
    11fa:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:72

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
    11fc:	f9 f6       	brne	.-66     	; 0x11bc <TM1650::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:83
    data <<= 1;

    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();
    11fe:	e8 81       	ld	r30, Y
    1200:	f9 81       	ldd	r31, Y+1	; 0x01
    1202:	02 8c       	ldd	r0, Z+26	; 0x1a
    1204:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1206:	e0 2d       	mov	r30, r0
    1208:	ce 01       	movw	r24, r28
    120a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:84
  bitDelay();
    120c:	e8 81       	ld	r30, Y
    120e:	f9 81       	ldd	r31, Y+1	; 0x01
    1210:	02 8c       	ldd	r0, Z+26	; 0x1a
    1212:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1214:	e0 2d       	mov	r30, r0
    1216:	ce 01       	movw	r24, r28
    1218:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:90

	// unlike TM1638/TM1668 and TM1640, the TM1650 and TM1637 uses an ACK to confirm reception of command/data
  // read the acknowledgement
  // TODO? return the ack?
	// (method derived from https://github.com/avishorp/TM1637 but using pins in standard output mode when writing)
  digitalWrite(clockPin, LOW);
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	8e 81       	ldd	r24, Y+6	; 0x06
    121e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:91
  pinMode(dataPin, INPUT);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:92
  bitDelay();
    122a:	e8 81       	ld	r30, Y
    122c:	f9 81       	ldd	r31, Y+1	; 0x01
    122e:	02 8c       	ldd	r0, Z+26	; 0x1a
    1230:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1232:	e0 2d       	mov	r30, r0
    1234:	ce 01       	movw	r24, r28
    1236:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:93
  digitalWrite(clockPin, HIGH);
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	8e 81       	ldd	r24, Y+6	; 0x06
    123c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:94
  bitDelay();
    1240:	e8 81       	ld	r30, Y
    1242:	f9 81       	ldd	r31, Y+1	; 0x01
    1244:	02 8c       	ldd	r0, Z+26	; 0x1a
    1246:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1248:	e0 2d       	mov	r30, r0
    124a:	ce 01       	movw	r24, r28
    124c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:95
  uint8_t ack = digitalRead(dataPin);
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <digitalRead>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:96
  if (ack == 0)
    1254:	81 11       	cpse	r24, r1
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <TM1650::send(unsigned char)+0xb6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:97
	  digitalWrite(dataPin, LOW);
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  pinMode(dataPin, OUTPUT);
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:99
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  digitalWrite(clockPin, HIGH);
  bitDelay();
  uint8_t ack = digitalRead(dataPin);
  if (ack == 0)
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
    126e:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <pinMode>

00001272 <TM1650::stop()>:
_ZN6TM16504stopEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:57
	bitDelay();

}

void TM1650::stop()
{ // to stop TM1650 expects the clock to go high, when strobing DIO high
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:60
	// Datasheet p.3: "End signal: keep SCL at "1" level, SDA jumps from "0" to "1", which is considered to be the end signal."
	// TM1650 expects start and stop like I2C: at stop clock is high, then data changes from low to high.
  digitalWrite(clockPin, LOW);
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:61
  digitalWrite(dataPin, LOW);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:62
	bitDelay();
    1288:	e8 81       	ld	r30, Y
    128a:	f9 81       	ldd	r31, Y+1	; 0x01
    128c:	02 8c       	ldd	r0, Z+26	; 0x1a
    128e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1290:	e0 2d       	mov	r30, r0
    1292:	ce 01       	movw	r24, r28
    1294:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:63
  digitalWrite(clockPin, HIGH);
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:64
  digitalWrite(dataPin, HIGH);
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
	bitDelay();
    12a6:	e8 81       	ld	r30, Y
    12a8:	f9 81       	ldd	r31, Y+1	; 0x01
    12aa:	02 8c       	ldd	r0, Z+26	; 0x1a
    12ac:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12ae:	e0 2d       	mov	r30, r0
    12b0:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:66
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
  digitalWrite(clockPin, LOW);
  digitalWrite(dataPin, LOW);
	bitDelay();
  digitalWrite(clockPin, HIGH);
  digitalWrite(dataPin, HIGH);
	bitDelay();
    12b6:	09 94       	ijmp

000012b8 <TM1650::start()>:
_ZN6TM16505startEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:44
}
#endif


void TM1650::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:47
	// Datasheet p.3: "Start signal: keep SCL at "1" level, SDA jumps from "1" to "0", which is considered to be the start signal."
	// TM1650 expects start and stop like I2C: at start data is low, then clock changes from high to low.
  digitalWrite(dataPin, HIGH);
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:48
  digitalWrite(clockPin, HIGH);
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:49
  bitDelay();
    12ce:	e8 81       	ld	r30, Y
    12d0:	f9 81       	ldd	r31, Y+1	; 0x01
    12d2:	02 8c       	ldd	r0, Z+26	; 0x1a
    12d4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12d6:	e0 2d       	mov	r30, r0
    12d8:	ce 01       	movw	r24, r28
    12da:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:50
  digitalWrite(dataPin, LOW);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:51
  digitalWrite(clockPin, LOW);
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
	bitDelay();
    12ec:	e8 81       	ld	r30, Y
    12ee:	f9 81       	ldd	r31, Y+1	; 0x01
    12f0:	02 8c       	ldd	r0, Z+26	; 0x1a
    12f2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12f4:	e0 2d       	mov	r30, r0
    12f6:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:54

}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
  digitalWrite(dataPin, HIGH);
  digitalWrite(clockPin, HIGH);
  bitDelay();
  digitalWrite(dataPin, LOW);
  digitalWrite(clockPin, LOW);
	bitDelay();
    12fc:	09 94       	ijmp

000012fe <TM1628::bitDelay()>:
_ZN6TM16288bitDelayEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1628.cpp:54
	setupDisplay(activateDisplay, intensity);
}

void TM1628::bitDelay()
{
	delayMicroseconds(5);
    12fe:	0c 94 6d 02 	jmp	0x4da	; 0x4da <delayMicroseconds.constprop.5>

00001302 <twi_transmit>:
twi_transmit():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    1302:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <twi_txBufferLength>
    1306:	26 0f       	add	r18, r22
    1308:	33 27       	eor	r19, r19
    130a:	33 1f       	adc	r19, r19
    130c:	21 32       	cpi	r18, 0x21	; 33
    130e:	31 05       	cpc	r19, r1
    1310:	ec f4       	brge	.+58     	; 0x134c <twi_transmit+0x4a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1312:	20 91 70 03 	lds	r18, 0x0370	; 0x800370 <twi_state>
    1316:	fc 01       	movw	r30, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	24 30       	cpi	r18, 0x04	; 4
    131e:	69 f0       	breq	.+26     	; 0x133a <twi_transmit+0x38>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:377
    return 2;
    1320:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    1322:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    1324:	a0 91 4c 03 	lds	r26, 0x034C	; 0x80034c <twi_txBufferLength>
    1328:	21 91       	ld	r18, Z+
    132a:	ac 01       	movw	r20, r24
    132c:	44 5d       	subi	r20, 0xD4	; 212
    132e:	5c 4f       	sbci	r21, 0xFC	; 252
    1330:	a4 0f       	add	r26, r20
    1332:	b5 2f       	mov	r27, r21
    1334:	b1 1d       	adc	r27, r1
    1336:	2c 93       	st	X, r18
    1338:	01 96       	adiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    133a:	86 17       	cp	r24, r22
    133c:	98 f3       	brcs	.-26     	; 0x1324 <twi_transmit+0x22>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    133e:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <twi_txBufferLength>
    1342:	68 0f       	add	r22, r24
    1344:	60 93 4c 03 	sts	0x034C, r22	; 0x80034c <twi_txBufferLength>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	08 95       	ret

00001350 <twi_writeTo>:
twi_writeTo():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:266
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    1350:	0f 93       	push	r16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:268
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    1352:	41 32       	cpi	r20, 0x21	; 33
    1354:	08 f0       	brcs	.+2      	; 0x1358 <twi_writeTo+0x8>
    1356:	44 c0       	rjmp	.+136    	; 0x13e0 <twi_writeTo+0x90>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
    1358:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <twi_state>
    135c:	91 11       	cpse	r25, r1
    135e:	fc cf       	rjmp	.-8      	; 0x1358 <twi_writeTo+0x8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:288
  twi_sendStop = sendStop;
    1366:	00 93 72 03 	sts	0x0372, r16	; 0x800372 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1370:	70 93 74 03 	sts	0x0374, r23	; 0x800374 <twi_masterBuffer+0x1>
    1374:	60 93 73 03 	sts	0x0373, r22	; 0x800373 <twi_masterBuffer>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:294
  twi_masterBufferIndex = 0;
    1378:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:295
  twi_masterBufferLength = length;
    137c:	40 93 75 03 	sts	0x0375, r20	; 0x800375 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    1380:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:299
  twi_slarw |= address << 1;
    1384:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <twi_slarw>
    1388:	88 0f       	add	r24, r24
    138a:	89 2b       	or	r24, r25
    138c:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    1390:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_inRepStart>
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	11 f5       	brne	.+68     	; 0x13dc <twi_writeTo+0x8c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1398:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    139c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_slarw>
    13a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:323
      } while(TWCR & _BV(TWWC));
    13a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    13a8:	83 fd       	sbrc	r24, 3
    13aa:	f8 cf       	rjmp	.-16     	; 0x139c <twi_writeTo+0x4c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    13ac:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    13ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
    13b2:	22 23       	and	r18, r18
    13b4:	21 f0       	breq	.+8      	; 0x13be <twi_writeTo+0x6e>
    13b6:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <twi_state>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	d1 f3       	breq	.-12     	; 0x13b2 <twi_writeTo+0x62>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    13be:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_error>
    13c2:	8f 3f       	cpi	r24, 0xFF	; 255
    13c4:	79 f0       	breq	.+30     	; 0x13e4 <twi_writeTo+0x94>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    13c6:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_error>
    13ca:	80 32       	cpi	r24, 0x20	; 32
    13cc:	69 f0       	breq	.+26     	; 0x13e8 <twi_writeTo+0x98>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    13ce:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_error>
    13d2:	80 33       	cpi	r24, 0x30	; 48
    13d4:	59 f0       	breq	.+22     	; 0x13ec <twi_writeTo+0x9c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    13d6:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:354
}
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    13dc:	85 ee       	ldi	r24, 0xE5	; 229
    13de:	e7 cf       	rjmp	.-50     	; 0x13ae <twi_writeTo+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	fa cf       	rjmp	.-12     	; 0x13d8 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	f6 cf       	rjmp	.-20     	; 0x13d8 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	f4 cf       	rjmp	.-24     	; 0x13d8 <twi_writeTo+0x88>

000013f0 <twi_readFrom>:
twi_readFrom():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:163
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    13f0:	41 32       	cpi	r20, 0x21	; 33
    13f2:	e0 f5       	brcc	.+120    	; 0x146c <twi_readFrom+0x7c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    13f4:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <twi_state>
    13f8:	91 11       	cpse	r25, r1
    13fa:	fc cf       	rjmp	.-8      	; 0x13f4 <twi_readFrom+0x4>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:182
  twi_sendStop = sendStop;
    1402:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    140c:	70 93 74 03 	sts	0x0374, r23	; 0x800374 <twi_masterBuffer+0x1>
    1410:	60 93 73 03 	sts	0x0373, r22	; 0x800373 <twi_masterBuffer>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:188
  twi_masterBufferIndex = 0;
    1414:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1418:	24 0f       	add	r18, r20
    141a:	20 93 75 03 	sts	0x0375, r18	; 0x800375 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    141e:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:198
  twi_slarw |= address << 1;
    1422:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <twi_slarw>
    1426:	88 0f       	add	r24, r24
    1428:	89 2b       	or	r24, r25
    142a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:200

  if (true == twi_inRepStart) {
    142e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_inRepStart>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	c9 f4       	brne	.+50     	; 0x1468 <twi_readFrom+0x78>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1436:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    143a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_slarw>
    143e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:220
      } while(TWCR & _BV(TWWC));
    1442:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1446:	83 fd       	sbrc	r24, 3
    1448:	f8 cf       	rjmp	.-16     	; 0x143a <twi_readFrom+0x4a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    144a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    144c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    1450:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <twi_state>
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	e1 f3       	breq	.-8      	; 0x1450 <twi_readFrom+0x60>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    1458:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <twi_masterBufferIndex>
    145c:	84 17       	cp	r24, r20
    145e:	10 f4       	brcc	.+4      	; 0x1464 <twi_readFrom+0x74>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:244
    length = twi_masterBufferIndex;
    1460:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:247

  return length;
}
    1464:	84 2f       	mov	r24, r20
    1466:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1468:	85 ee       	ldi	r24, 0xE5	; 229
    146a:	f0 cf       	rjmp	.-32     	; 0x144c <twi_readFrom+0x5c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:164
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	fa cf       	rjmp	.-12     	; 0x1464 <twi_readFrom+0x74>

00001470 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:743

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    1470:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <Wire+0x18>
    1474:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <Wire+0x19>
    1478:	30 97       	sbiw	r30, 0x00	; 0
    147a:	29 f0       	breq	.+10     	; 0x1486 <{lambda()#2}::_FUN()+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:748
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    147c:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <Wire+0x15>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:749
  txBufferLength = 0;
    1480:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <Wire+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:751
  // alert user program
  user_onRequest();
    1484:	09 94       	ijmp
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    1486:	08 95       	ret

00001488 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:785
                         twi_setTimeoutInMicros,
                         twi_handleTimeout,
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
    1488:	dc 01       	movw	r26, r24
onReceiveService():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:718

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    148a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <Wire+0x1a>
    148e:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <Wire+0x1b>
    1492:	89 2b       	or	r24, r25
    1494:	19 f1       	breq	.+70     	; 0x14dc <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x54>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:724
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    1496:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <Wire+0x10>
    149a:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <Wire+0x11>
    149e:	98 17       	cp	r25, r24
    14a0:	e8 f0       	brcs	.+58     	; 0x14dc <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x54>
_ZNUlPhiE_4_FUNES_i():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:729
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    14a2:	90 e0       	ldi	r25, 0x00	; 0
onReceiveService():
    14a4:	29 2f       	mov	r18, r25
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	26 17       	cp	r18, r22
    14aa:	37 07       	cpc	r19, r23
    14ac:	6c f4       	brge	.+26     	; 0x14c8 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x40>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:730
    rxBuffer[i] = inBytes[i];
    14ae:	fd 01       	movw	r30, r26
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	40 81       	ld	r20, Z
    14b6:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <Wire+0xe>
    14ba:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <Wire+0xf>
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	40 83       	st	Z, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:729
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	ee cf       	rjmp	.-36     	; 0x14a4 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x1c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:733
    rxBuffer[i] = inBytes[i];
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    14c8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <Wire+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:734
  rxBufferLength = numBytes;
    14cc:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <Wire+0x11>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:736
  // alert user program
  user_onReceive(numBytes);
    14d0:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <Wire+0x1a>
    14d4:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <Wire+0x1b>
    14d8:	cb 01       	movw	r24, r22
    14da:	09 94       	ijmp
_ZNUlPhiE_4_FUNES_i():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:785
                         twi_setTimeoutInMicros,
                         twi_handleTimeout,
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
    14dc:	08 95       	ret

000014de <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:699

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    14de:	dc 01       	movw	r26, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:702
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    14e0:	50 96       	adiw	r26, 0x10	; 16
    14e2:	ec 91       	ld	r30, X
    14e4:	50 97       	sbiw	r26, 0x10	; 16
    14e6:	51 96       	adiw	r26, 0x11	; 17
    14e8:	8c 91       	ld	r24, X
    14ea:	51 97       	sbiw	r26, 0x11	; 17
    14ec:	e8 17       	cp	r30, r24
    14ee:	48 f4       	brcc	.+18     	; 0x1502 <TwoWire::peek()+0x24>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:703
    value = rxBuffer[rxBufferIndex];
    14f0:	1e 96       	adiw	r26, 0x0e	; 14
    14f2:	8d 91       	ld	r24, X+
    14f4:	9c 91       	ld	r25, X
    14f6:	e8 0f       	add	r30, r24
    14f8:	f9 2f       	mov	r31, r25
    14fa:	f1 1d       	adc	r31, r1
    14fc:	80 81       	ld	r24, Z
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:700
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:707
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1506:	08 95       	ret

00001508 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:683

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    1508:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:687
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    150a:	90 89       	ldd	r25, Z+16	; 0x10
    150c:	81 89       	ldd	r24, Z+17	; 0x11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:684
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    150e:	2f ef       	ldi	r18, 0xFF	; 255
    1510:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:687

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1512:	98 17       	cp	r25, r24
    1514:	40 f4       	brcc	.+16     	; 0x1526 <TwoWire::read()+0x1e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:688
    value = rxBuffer[rxBufferIndex];
    1516:	a6 85       	ldd	r26, Z+14	; 0x0e
    1518:	b7 85       	ldd	r27, Z+15	; 0x0f
    151a:	a9 0f       	add	r26, r25
    151c:	b1 1d       	adc	r27, r1
    151e:	2c 91       	ld	r18, X
    1520:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:689
    ++rxBufferIndex;
    1522:	9f 5f       	subi	r25, 0xFF	; 255
    1524:	90 8b       	std	Z+16, r25	; 0x10
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:693
  }

  return value;
}
    1526:	c9 01       	movw	r24, r18
    1528:	08 95       	ret

0000152a <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:675

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    152a:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:676
  return rxBufferLength - rxBufferIndex;
    152c:	81 89       	ldd	r24, Z+17	; 0x11
    152e:	90 89       	ldd	r25, Z+16	; 0x10
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:677
}
    1530:	89 1b       	sub	r24, r25
    1532:	99 0b       	sbc	r25, r25
    1534:	08 95       	ret

00001536 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:657

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	8c 01       	movw	r16, r24
    1548:	cb 01       	movw	r24, r22
    154a:	7a 01       	movw	r14, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:658
  if(transmitting){
    154c:	d8 01       	movw	r26, r16
    154e:	57 96       	adiw	r26, 0x17	; 23
    1550:	2c 91       	ld	r18, X
    1552:	57 97       	sbiw	r26, 0x17	; 23
    1554:	22 23       	and	r18, r18
    1556:	89 f0       	breq	.+34     	; 0x157a <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    1558:	eb 01       	movw	r28, r22
    155a:	6b 01       	movw	r12, r22
    155c:	c4 0e       	add	r12, r20
    155e:	d5 1e       	adc	r13, r21
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:660
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1560:	cc 15       	cp	r28, r12
    1562:	dd 05       	cpc	r29, r13
    1564:	79 f0       	breq	.+30     	; 0x1584 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:661
      write(data[i]);
    1566:	69 91       	ld	r22, Y+
    1568:	d8 01       	movw	r26, r16
    156a:	ed 91       	ld	r30, X+
    156c:	fc 91       	ld	r31, X
    156e:	01 90       	ld	r0, Z+
    1570:	f0 81       	ld	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	c8 01       	movw	r24, r16
    1576:	09 95       	icall
    1578:	f3 cf       	rjmp	.-26     	; 0x1560 <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:666
    }
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(data, quantity);
    157a:	98 96       	adiw	r26, 0x28	; 40
    157c:	ed 91       	ld	r30, X+
    157e:	fc 91       	ld	r31, X
    1580:	64 2f       	mov	r22, r20
    1582:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:669
  }
  return quantity;
}
    1584:	c7 01       	movw	r24, r14
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	08 95       	ret

00001598 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:632

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	1f 92       	push	r1
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	fc 01       	movw	r30, r24
    15a4:	69 83       	std	Y+1, r22	; 0x01
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:633
  if(transmitting){
    15a6:	87 89       	ldd	r24, Z+23	; 0x17
    15a8:	88 23       	and	r24, r24
    15aa:	f9 f0       	breq	.+62     	; 0x15ea <TwoWire::write(unsigned char)+0x52>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:636
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= bufferLength){
    15ac:	26 89       	ldd	r18, Z+22	; 0x16
    15ae:	84 85       	ldd	r24, Z+12	; 0x0c
    15b0:	95 85       	ldd	r25, Z+13	; 0x0d
    15b2:	28 17       	cp	r18, r24
    15b4:	19 06       	cpc	r1, r25
    15b6:	54 f0       	brlt	.+20     	; 0x15cc <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	93 83       	std	Z+3, r25	; 0x03
    15be:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:638
      setWriteError();
      return 0;
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:651
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
  }
  return 1;
}
    15c4:	0f 90       	pop	r0
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:641
    if(txBufferLength >= bufferLength){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	a5 89       	ldd	r26, Z+21	; 0x15
    15d0:	23 89       	ldd	r18, Z+19	; 0x13
    15d2:	34 89       	ldd	r19, Z+20	; 0x14
    15d4:	a2 0f       	add	r26, r18
    15d6:	b3 2f       	mov	r27, r19
    15d8:	b1 1d       	adc	r27, r1
    15da:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:642
    ++txBufferIndex;
    15dc:	85 89       	ldd	r24, Z+21	; 0x15
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	85 8b       	std	Z+21, r24	; 0x15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:644
    // update amount in buffer
    txBufferLength = txBufferIndex;
    15e2:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:650
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
  }
  return 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	ed cf       	rjmp	.-38     	; 0x15c4 <TwoWire::write(unsigned char)+0x2c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:648
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
    15ea:	00 a4       	ldd	r0, Z+40	; 0x28
    15ec:	f1 a5       	ldd	r31, Z+41	; 0x29
    15ee:	e0 2d       	mov	r30, r0
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	09 95       	icall
    15f8:	f5 cf       	rjmp	.-22     	; 0x15e4 <TwoWire::write(unsigned char)+0x4c>

000015fa <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	08 95       	ret

00001600 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>:
_ZN10MQ131Class7convertEf9MQ131UnitS0_.part.2():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:254
    return input;
  }

  float concentration = 0;

  switch(unitOut) {
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	a1 f0       	breq	.+40     	; 0x162e <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x2e>
    1606:	23 30       	cpi	r18, 0x03	; 3
    1608:	31 05       	cpc	r19, r1
    160a:	21 f1       	breq	.+72     	; 0x1654 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x54>
    160c:	21 30       	cpi	r18, 0x01	; 1
    160e:	31 05       	cpc	r19, r1
    1610:	39 f0       	breq	.+14     	; 0x1620 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x20>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:259
    case PPM :
      // We assume that the unit IN is PPB as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPB to PPM
      return input / 1000.0;
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a e7       	ldi	r20, 0x7A	; 122
    1618:	54 e4       	ldi	r21, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    161a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:282
    default :
      return input;
  }
}
    161e:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:264
      return input / 1000.0;
    case PPB :
      // We assume that the unit IN is PPM as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPM to PPB
      return input * 1000.0;
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    162c:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:266
    case MG_M3 :
      if(unitIn == PPM) {
    162e:	45 2b       	or	r20, r21
    1630:	31 f0       	breq	.+12     	; 0x163e <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:269
        concentration = input;
      } else {
        concentration = input / 1000.0;
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a e7       	ldi	r20, 0x7A	; 122
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e4       	ldi	r20, 0x40	; 64
    1644:	52 e4       	ldi	r21, 0x42	; 66
    1646:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    164a:	2b e4       	ldi	r18, 0x4B	; 75
    164c:	30 eb       	ldi	r19, 0xB0	; 176
    164e:	45 eb       	ldi	r20, 0xB5	; 181
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	e3 cf       	rjmp	.-58     	; 0x161a <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x1a>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:273
      } else {
        concentration = input / 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    case UG_M3 :
      if(unitIn == PPB) {
    1654:	41 30       	cpi	r20, 0x01	; 1
    1656:	51 05       	cpc	r21, r1
    1658:	91 f3       	breq	.-28     	; 0x163e <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:276
        concentration = input;
      } else {
        concentration = input * 1000.0;
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a e7       	ldi	r20, 0x7A	; 122
    1660:	54 e4       	ldi	r21, 0x44	; 68
    1662:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    1666:	eb cf       	rjmp	.-42     	; 0x163e <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>

00001668 <MQ131Class::~MQ131Class()>:
_ZN10MQ131ClassD2Ev():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:44

/**
 * Destructor, nothing special to do
 */
MQ131Class::~MQ131Class() {
}
    1668:	08 95       	ret

0000166a <setSegmentFloat(float, bool)>:
_Z15setSegmentFloatfb():
C:\Users\dlcks\Desktop\123123123/123123123.ino:180
      temperature = am1008w_k_i2c.get_temperature()*10;
    }
  }
}

void setSegmentFloat(float input,bool sign){
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	4b 01       	movw	r8, r22
    1680:	5c 01       	movw	r10, r24
    1682:	f4 2e       	mov	r15, r20
C:\Users\dlcks\Desktop\123123123/123123123.ino:181
  module.clearDisplay();
    1684:	8f ec       	ldi	r24, 0xCF	; 207
    1686:	95 e0       	ldi	r25, 0x05	; 5
    1688:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:182
  int tmp = (int)input;
    168c:	c5 01       	movw	r24, r10
    168e:	b4 01       	movw	r22, r8
    1690:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixsfsi>
    1694:	eb 01       	movw	r28, r22
C:\Users\dlcks\Desktop\123123123/123123123.ino:183
  module.setDisplayToDecNumber(tmp%100,2); // 값, 위치
    1696:	cb 01       	movw	r24, r22
    1698:	64 e6       	ldi	r22, 0x64	; 100
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    16a0:	e6 2e       	mov	r14, r22
    16a2:	42 e0       	ldi	r20, 0x02	; 2
    16a4:	bc 01       	movw	r22, r24
    16a6:	8f ec       	ldi	r24, 0xCF	; 207
    16a8:	95 e0       	ldi	r25, 0x05	; 5
    16aa:	0e 94 c1 06 	call	0xd82	; 0xd82 <TM16xx::setDisplayToDecNumber(int, unsigned char)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:184
  tmp = tmp/10;
    16ae:	2a e0       	ldi	r18, 0x0A	; 10
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	ce 01       	movw	r24, r28
    16b4:	b9 01       	movw	r22, r18
    16b6:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    16ba:	cb 01       	movw	r24, r22
C:\Users\dlcks\Desktop\123123123/123123123.ino:185
  module.setDisplayDigit(tmp%10,1,true);// 원하는 값, 위치, dot 찍을거임?
    16bc:	b9 01       	movw	r22, r18
    16be:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    16c2:	0d eb       	ldi	r16, 0xBD	; 189
    16c4:	11 e0       	ldi	r17, 0x01	; 1
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	68 2f       	mov	r22, r24
    16cc:	8f ec       	ldi	r24, 0xCF	; 207
    16ce:	95 e0       	ldi	r25, 0x05	; 5
    16d0:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:187
  tmp = tmp/10;
  module.setDisplayDigit(tmp,0,false); // 3번 자리에 숫자 2설정, 퍼센트
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	6e 2d       	mov	r22, r14
    16da:	8f ec       	ldi	r24, 0xCF	; 207
    16dc:	95 e0       	ldi	r25, 0x05	; 5
    16de:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:189
  
  if(sign) module.setDisplayDigit(1,3,false); // 퍼센트
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	43 e0       	ldi	r20, 0x03	; 3
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	f1 10       	cpse	r15, r1
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <setSegmentFloat(float, bool)+0x8c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:190
  else module.setDisplayDigit(5,3,false); // 온도
    16ec:	0d eb       	ldi	r16, 0xBD	; 189
    16ee:	11 e0       	ldi	r17, 0x01	; 1
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	43 e0       	ldi	r20, 0x03	; 3
    16f4:	65 e0       	ldi	r22, 0x05	; 5
    16f6:	8f ec       	ldi	r24, 0xCF	; 207
    16f8:	95 e0       	ldi	r25, 0x05	; 5
    16fa:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:191
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	bf 90       	pop	r11
    170c:	af 90       	pop	r10
    170e:	9f 90       	pop	r9
    1710:	8f 90       	pop	r8
    1712:	08 95       	ret

00001714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>:
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:495
 * Output is    IrReceiver.decodedIRData.decodedRawData
 *
 * @param aStartOffset must point to a mark
 * @return true if decoding was successful
 */
bool IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros,
    1714:	7f 92       	push	r7
    1716:	8f 92       	push	r8
    1718:	9f 92       	push	r9
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	78 2e       	mov	r7, r24
    1730:	ea 01       	movw	r28, r20
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:498
        uint16_t aZeroSpaceMicros, bool aMSBfirst) {

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    1732:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
    1736:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
    173a:	3f 96       	adiw	r30, 0x0f	; 15
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:779
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
    173c:	8b 01       	movw	r16, r22
    173e:	0c 5e       	subi	r16, 0xEC	; 236
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	43 e4       	ldi	r20, 0x43	; 67
    1744:	c4 2e       	mov	r12, r20
    1746:	d1 2c       	mov	r13, r1
    1748:	c8 01       	movw	r24, r16
    174a:	b6 01       	movw	r22, r12
    174c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    1750:	5b 01       	movw	r10, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    1752:	58 e2       	ldi	r21, 0x28	; 40
    1754:	e5 2e       	mov	r14, r21
    1756:	f1 2c       	mov	r15, r1
    1758:	c8 01       	movw	r24, r16
    175a:	b7 01       	movw	r22, r14
    175c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    1760:	8b 01       	movw	r16, r22
    1762:	0f 5f       	subi	r16, 0xFF	; 255
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:812
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
    1766:	64 97       	sbiw	r28, 0x14	; 20
    1768:	ce 01       	movw	r24, r28
    176a:	b6 01       	movw	r22, r12
    176c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    1770:	4b 01       	movw	r8, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    1772:	ce 01       	movw	r24, r28
    1774:	b7 01       	movw	r22, r14
    1776:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    177a:	eb 01       	movw	r28, r22
    177c:	21 96       	adiw	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:812
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
    177e:	24 51       	subi	r18, 0x14	; 20
    1780:	31 09       	sbc	r19, r1
    1782:	c9 01       	movw	r24, r18
    1784:	b6 01       	movw	r22, r12
    1786:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    178a:	6b 01       	movw	r12, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    178c:	c9 01       	movw	r24, r18
    178e:	b7 01       	movw	r22, r14
    1790:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:499
 */
bool IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros,
        uint16_t aZeroSpaceMicros, bool aMSBfirst) {

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    uint32_t tDecodedData = 0;
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:502

    if (aMSBfirst) {
        for (uint_fast8_t i = 0; i < aNumberOfBits; i++) {
    179e:	a0 e0       	ldi	r26, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:504
            // Check for constant length mark
            if (!matchMark(*tRawBufPointer, aBitMarkMicros)) {
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    17a4:	8a 15       	cp	r24, r10
    17a6:	9b 05       	cpc	r25, r11
    17a8:	70 f1       	brcs	.+92     	; 0x1806 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xf2>
    17aa:	08 17       	cp	r16, r24
    17ac:	19 07       	cpc	r17, r25
    17ae:	58 f1       	brcs	.+86     	; 0x1806 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xf2>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:515
                return false;
            }
            tRawBufPointer++;

            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    17b4:	88 15       	cp	r24, r8
    17b6:	99 05       	cpc	r25, r9
    17b8:	18 f1       	brcs	.+70     	; 0x1800 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xec>
    17ba:	c8 17       	cp	r28, r24
    17bc:	d9 07       	cpc	r29, r25
    17be:	28 f1       	brcs	.+74     	; 0x180a <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xf6>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:516
            }
            tRawBufPointer++;

            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 1;
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	44 1f       	adc	r20, r20
    17c6:	55 1f       	adc	r21, r21
    17c8:	21 60       	ori	r18, 0x01	; 1
    17ca:	34 96       	adiw	r30, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:502

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    uint32_t tDecodedData = 0;

    if (aMSBfirst) {
        for (uint_fast8_t i = 0; i < aNumberOfBits; i++) {
    17cc:	af 5f       	subi	r26, 0xFF	; 255
    17ce:	7a 12       	cpse	r7, r26
    17d0:	e7 cf       	rjmp	.-50     	; 0x17a0 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0x8c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:569
            }
            tRawBufPointer++;
        }
        TRACE_PRINTLN("");
    }
    decodedIRData.decodedRawData = tDecodedData;
    17d2:	20 93 be 05 	sts	0x05BE, r18	; 0x8005be <irrecv+0xa>
    17d6:	30 93 bf 05 	sts	0x05BF, r19	; 0x8005bf <irrecv+0xb>
    17da:	40 93 c0 05 	sts	0x05C0, r20	; 0x8005c0 <irrecv+0xc>
    17de:	50 93 c1 05 	sts	0x05C1, r21	; 0x8005c1 <irrecv+0xd>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:570
    return true;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:571
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	08 95       	ret
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    1800:	8c 15       	cp	r24, r12
    1802:	9d 05       	cpc	r25, r13
    1804:	10 f4       	brcc	.+4      	; 0x180a <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xf6>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:510
                DEBUG_PRINT(F("Mark="));
                DEBUG_PRINT(*tRawBufPointer * MICROS_PER_TICK);
                DEBUG_PRINT(F(" is not "));
                DEBUG_PRINT(aBitMarkMicros);
                DEBUG_PRINT(' ');
                return false;
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	ed cf       	rjmp	.-38     	; 0x17e4 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xd0>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    180a:	68 17       	cp	r22, r24
    180c:	79 07       	cpc	r23, r25
    180e:	d8 f3       	brcs	.-10     	; 0x1806 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xf2>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.44():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:519
            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 1;
                TRACE_PRINT('1');
            } else if (matchSpace(*tRawBufPointer, aZeroSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 0;
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	44 1f       	adc	r20, r20
    1816:	55 1f       	adc	r21, r21
    1818:	d8 cf       	rjmp	.-80     	; 0x17ca <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]+0xb6>

0000181a <WindDirectionControl()>:
_Z20WindDirectionControlv():
C:\Users\dlcks\Desktop\123123123/123123123.ino:370
    irrecv.resume();        //계속해서 다음 신호 받기
  }
}

void WindDirectionControl(){
  switch(wind_flag){
    181a:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <wind_flag>
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	b1 f0       	breq	.+44     	; 0x184e <WindDirectionControl()+0x34>
    1822:	28 f0       	brcs	.+10     	; 0x182e <WindDirectionControl()+0x14>
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	19 f1       	breq	.+70     	; 0x186e <WindDirectionControl()+0x54>
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	59 f1       	breq	.+86     	; 0x1882 <WindDirectionControl()+0x68>
    182c:	08 95       	ret
C:\Users\dlcks\Desktop\123123123/123123123.ino:372
    case wind_off:
      digitalWrite(FAN_BLED,0);
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	80 e1       	ldi	r24, 0x10	; 16
    1832:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:373
      digitalWrite(FAN_RLED,0);
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	8f e0       	ldi	r24, 0x0F	; 15
    183a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	89 e0       	ldi	r24, 0x09	; 9
    1842:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
    1846:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1848:	89 e0       	ldi	r24, 0x09	; 9
    184a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <digitalWrite>
_Z20WindDirectionControlv():
C:\Users\dlcks\Desktop\123123123/123123123.ino:377
      analogWrite(FAN1_EN,N_FAN_OFF);
    break;
    case low:
      digitalWrite(FAN_BLED,1);
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	80 e1       	ldi	r24, 0x10	; 16
    1852:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:378
      digitalWrite(FAN_RLED,1);
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	8f e0       	ldi	r24, 0x0F	; 15
    185a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	89 e0       	ldi	r24, 0x09	; 9
    1862:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
    1866:	8c ed       	ldi	r24, 0xDC	; 220
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <analogWrite.part.0.constprop.91>
_Z20WindDirectionControlv():
C:\Users\dlcks\Desktop\123123123/123123123.ino:382
      analogWrite(FAN1_EN,N_FAN_LOW);
    break;
    case mid:
      digitalWrite(FAN_RLED,0);
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	8f e0       	ldi	r24, 0x0F	; 15
    1872:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	89 e0       	ldi	r24, 0x09	; 9
    187a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	e3 cf       	rjmp	.-58     	; 0x1848 <WindDirectionControl()+0x2e>
_Z20WindDirectionControlv():
C:\Users\dlcks\Desktop\123123123/123123123.ino:386
      analogWrite(FAN1_EN,N_FAN_MIDDLE);
    break;
    case hi:
      digitalWrite(FAN_BLED,0);
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	80 e1       	ldi	r24, 0x10	; 16
    1886:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:387
      digitalWrite(FAN_RLED,1);
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	89 e0       	ldi	r24, 0x09	; 9
    1896:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
    189a:	84 eb       	ldi	r24, 0xB4	; 180
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	e5 cf       	rjmp	.-54     	; 0x186a <WindDirectionControl()+0x50>

000018a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>:
_ZN5Print5writeEPKc.part.2.constprop.89():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    18a0:	fc 01       	movw	r30, r24
    18a2:	01 90       	ld	r0, Z+
    18a4:	00 20       	and	r0, r0
    18a6:	e9 f7       	brne	.-6      	; 0x18a2 <Print::write(char const*) [clone .part.2] [clone .constprop.89]+0x2>
    18a8:	31 97       	sbiw	r30, 0x01	; 1
    18aa:	af 01       	movw	r20, r30
    18ac:	48 1b       	sub	r20, r24
    18ae:	59 0b       	sbc	r21, r25
    18b0:	bc 01       	movw	r22, r24
    18b2:	83 ef       	ldi	r24, 0xF3	; 243
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <Print::write(unsigned char const*, unsigned int)>

000018ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>:
_ZN5Print11printNumberEmh.constprop.73():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	a1 97       	sbiw	r28, 0x21	; 33
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    18da:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]+0x28>
    18e0:	4a e0       	ldi	r20, 0x0A	; 10
    18e2:	8e 01       	movw	r16, r28
    18e4:	0f 5d       	subi	r16, 0xDF	; 223
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    18e8:	84 2e       	mov	r8, r20
    18ea:	91 2c       	mov	r9, r1
    18ec:	b1 2c       	mov	r11, r1
    18ee:	a1 2c       	mov	r10, r1
    18f0:	a5 01       	movw	r20, r10
    18f2:	94 01       	movw	r18, r8
    18f4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodsi4>
    18f8:	e6 2f       	mov	r30, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    18fa:	b9 01       	movw	r22, r18
    18fc:	ca 01       	movw	r24, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    18fe:	ea 30       	cpi	r30, 0x0A	; 10
    1900:	f4 f4       	brge	.+60     	; 0x193e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]+0x84>
    1902:	e0 5d       	subi	r30, 0xD0	; 208
    1904:	d8 01       	movw	r26, r16
    1906:	ee 93       	st	-X, r30
    1908:	8d 01       	movw	r16, r26
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    190a:	23 2b       	or	r18, r19
    190c:	24 2b       	or	r18, r20
    190e:	25 2b       	or	r18, r21
    1910:	79 f7       	brne	.-34     	; 0x18f0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]+0x36>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
write():
    1916:	10 97       	sbiw	r26, 0x00	; 0
    1918:	19 f0       	breq	.+6      	; 0x1920 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]+0x66>
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
_ZN5Print11printNumberEmh.constprop.73():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    1920:	a1 96       	adiw	r28, 0x21	; 33
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	bf 90       	pop	r11
    1936:	af 90       	pop	r10
    1938:	9f 90       	pop	r9
    193a:	8f 90       	pop	r8
    193c:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    193e:	e9 5c       	subi	r30, 0xC9	; 201
    1940:	e1 cf       	rjmp	.-62     	; 0x1904 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]+0x4a>

00001942 <Print::println(char const*) [clone .constprop.86]>:
_ZN5Print7printlnEPKc.constprop.86():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
write():
    1946:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
    194a:	ec 01       	movw	r28, r24
    194c:	81 e9       	ldi	r24, 0x91	; 145
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
_ZN5Print7printlnEPKc.constprop.86():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
    1954:	8c 0f       	add	r24, r28
    1956:	9d 1f       	adc	r25, r29
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <Print::print(char const*) [clone .constprop.79]>:
_ZN5Print5printEPKc.constprop.79():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:62
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
    195e:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>

00001962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>:
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    1962:	4f 92       	push	r4
    1964:	5f 92       	push	r5
    1966:	6f 92       	push	r6
    1968:	7f 92       	push	r7
    196a:	8f 92       	push	r8
    196c:	9f 92       	push	r9
    196e:	af 92       	push	r10
    1970:	bf 92       	push	r11
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	6b 01       	movw	r12, r22
    1982:	7c 01       	movw	r14, r24
    1984:	74 2e       	mov	r7, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1986:	ac 01       	movw	r20, r24
    1988:	9b 01       	movw	r18, r22
    198a:	0e 94 44 20 	call	0x4088	; 0x4088 <__unordsf2>
    198e:	88 23       	and	r24, r24
    1990:	99 f0       	breq	.+38     	; 0x19b8 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x56>
write():
    1992:	84 e9       	ldi	r24, 0x94	; 148
    1994:	91 e0       	ldi	r25, 0x01	; 1
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	7f 90       	pop	r7
    19ae:	6f 90       	pop	r6
    19b0:	5f 90       	pop	r5
    19b2:	4f 90       	pop	r4
write():
    19b4:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    19b8:	46 01       	movw	r8, r12
    19ba:	57 01       	movw	r10, r14
    19bc:	e8 94       	clt
    19be:	b7 f8       	bld	r11, 7
    19c0:	2f ef       	ldi	r18, 0xFF	; 255
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	5f e7       	ldi	r21, 0x7F	; 127
    19c8:	c5 01       	movw	r24, r10
    19ca:	b4 01       	movw	r22, r8
    19cc:	0e 94 44 20 	call	0x4088	; 0x4088 <__unordsf2>
    19d0:	81 11       	cpse	r24, r1
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x8c>
    19d4:	2f ef       	ldi	r18, 0xFF	; 255
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	5f e7       	ldi	r21, 0x7F	; 127
    19dc:	c5 01       	movw	r24, r10
    19de:	b4 01       	movw	r22, r8
    19e0:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	1c f4       	brge	.+6      	; 0x19ee <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x8c>
write():
    19e8:	88 e9       	ldi	r24, 0x98	; 152
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	d4 cf       	rjmp	.-88     	; 0x1996 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x34>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    19ee:	2f ef       	ldi	r18, 0xFF	; 255
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	5f e4       	ldi	r21, 0x4F	; 79
    19f6:	c7 01       	movw	r24, r14
    19f8:	b6 01       	movw	r22, r12
    19fa:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__gesf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	1c f4       	brge	.+6      	; 0x1a08 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0xa6>
write():
    1a02:	8c e9       	ldi	r24, 0x9C	; 156
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	c7 cf       	rjmp	.-114    	; 0x1996 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x34>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a08:	2f ef       	ldi	r18, 0xFF	; 255
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	5f ec       	ldi	r21, 0xCF	; 207
    1a10:	c7 01       	movw	r24, r14
    1a12:	b6 01       	movw	r22, r12
    1a14:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpsf2>
    1a18:	87 fd       	sbrc	r24, 7
    1a1a:	f3 cf       	rjmp	.-26     	; 0x1a02 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0xa0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	c7 01       	movw	r24, r14
    1a24:	b6 01       	movw	r22, r12
    1a26:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpsf2>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1a2e:	87 ff       	sbrs	r24, 7
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0xe4>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1a32:	6d e2       	ldi	r22, 0x2D	; 45
    1a34:	83 ef       	ldi	r24, 0xF3	; 243
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 0a 03 	call	0x614	; 0x614 <HardwareSerial::write(unsigned char)>
    1a3c:	8c 01       	movw	r16, r24
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1a3e:	f7 fa       	bst	r15, 7
    1a40:	f0 94       	com	r15
    1a42:	f7 f8       	bld	r15, 7
    1a44:	f0 94       	com	r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a46:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    1a50:	7c 16       	cp	r7, r28
    1a52:	41 f0       	breq	.+16     	; 0x1a64 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x102>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a60:	cf 5f       	subi	r28, 0xFF	; 255
    1a62:	f6 cf       	rjmp	.-20     	; 0x1a50 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0xee>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    1a64:	a7 01       	movw	r20, r14
    1a66:	96 01       	movw	r18, r12
    1a68:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__addsf3>
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1a70:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__fixunssfsi>
    1a74:	4b 01       	movw	r8, r22
    1a76:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1a78:	4a e0       	ldi	r20, 0x0A	; 10
    1a7a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1a7e:	7c 01       	movw	r14, r24
    1a80:	e0 0e       	add	r14, r16
    1a82:	f1 1e       	adc	r15, r17
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1a84:	cc 23       	and	r28, r28
    1a86:	c1 f1       	breq	.+112    	; 0x1af8 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x196>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1a88:	c5 01       	movw	r24, r10
    1a8a:	b4 01       	movw	r22, r8
    1a8c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__floatunsisf>
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	c3 01       	movw	r24, r6
    1a96:	b2 01       	movw	r22, r4
    1a98:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__subsf3>
    1a9c:	4b 01       	movw	r8, r22
    1a9e:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1aa0:	6e e2       	ldi	r22, 0x2E	; 46
    1aa2:	83 ef       	ldi	r24, 0xF3	; 243
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	0e 94 0a 03 	call	0x614	; 0x614 <HardwareSerial::write(unsigned char)>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1aaa:	e8 0e       	add	r14, r24
    1aac:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1aae:	c1 50       	subi	r28, 0x01	; 1
    1ab0:	18 f1       	brcs	.+70     	; 0x1af8 <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x196>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	c5 01       	movw	r24, r10
    1abc:	b4 01       	movw	r22, r8
    1abe:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    1ac6:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__fixunssfsi>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1aca:	4b 01       	movw	r8, r22
    1acc:	b1 2c       	mov	r11, r1
    1ace:	a1 2c       	mov	r10, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1ad0:	4a e0       	ldi	r20, 0x0A	; 10
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	b4 01       	movw	r22, r8
    1ad6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>
_ZN5Print10printFloatEdh.constprop.68():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1ada:	e8 0e       	add	r14, r24
    1adc:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    1ade:	c5 01       	movw	r24, r10
    1ae0:	b4 01       	movw	r22, r8
    1ae2:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__floatunsisf>
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	c3 01       	movw	r24, r6
    1aec:	b2 01       	movw	r22, r4
    1aee:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__subsf3>
    1af2:	4b 01       	movw	r8, r22
    1af4:	5c 01       	movw	r10, r24
    1af6:	db cf       	rjmp	.-74     	; 0x1aae <Print::printFloat(double, unsigned char) [clone .constprop.68]+0x14c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    1af8:	c7 01       	movw	r24, r14
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	cf 90       	pop	r12
    1b08:	bf 90       	pop	r11
    1b0a:	af 90       	pop	r10
    1b0c:	9f 90       	pop	r9
    1b0e:	8f 90       	pop	r8
    1b10:	7f 90       	pop	r7
    1b12:	6f 90       	pop	r6
    1b14:	5f 90       	pop	r5
    1b16:	4f 90       	pop	r4
    1b18:	08 95       	ret

00001b1a <Print::println(int, int) [clone .constprop.16]>:
_ZN5Print7printlnEii.constprop.16():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:159
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    1b1a:	cf 92       	push	r12
    1b1c:	df 92       	push	r13
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1b26:	6c 01       	movw	r12, r24
    1b28:	99 0f       	add	r25, r25
    1b2a:	ee 08       	sbc	r14, r14
    1b2c:	ff 08       	sbc	r15, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1b2e:	f7 fe       	sbrs	r15, 7
    1b30:	1f c0       	rjmp	.+62     	; 0x1b70 <Print::println(int, int) [clone .constprop.16]+0x56>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1b32:	6d e2       	ldi	r22, 0x2D	; 45
    1b34:	83 ef       	ldi	r24, 0xF3	; 243
    1b36:	93 e0       	ldi	r25, 0x03	; 3
    1b38:	0e 94 0a 03 	call	0x614	; 0x614 <HardwareSerial::write(unsigned char)>
    1b3c:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    1b3e:	66 27       	eor	r22, r22
    1b40:	77 27       	eor	r23, r23
    1b42:	cb 01       	movw	r24, r22
    1b44:	6c 19       	sub	r22, r12
    1b46:	7d 09       	sbc	r23, r13
    1b48:	8e 09       	sbc	r24, r14
    1b4a:	9f 09       	sbc	r25, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1b4c:	4a e0       	ldi	r20, 0x0A	; 10
    1b4e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>
    1b52:	c8 0f       	add	r28, r24
    1b54:	d9 1f       	adc	r29, r25
write():
    1b56:	81 e9       	ldi	r24, 0x91	; 145
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
_ZN5Print7printlnEii.constprop.16():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:164
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b5e:	8c 0f       	add	r24, r28
    1b60:	9d 1f       	adc	r25, r29
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	08 95       	ret
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1b70:	4a e0       	ldi	r20, 0x0A	; 10
    1b72:	c7 01       	movw	r24, r14
    1b74:	b6 01       	movw	r22, r12
    1b76:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>
    1b7a:	ec 01       	movw	r28, r24
    1b7c:	ec cf       	rjmp	.-40     	; 0x1b56 <Print::println(int, int) [clone .constprop.16]+0x3c>

00001b7e <setSegmentInt(int)>:
_Z13setSegmentInti():
C:\Users\dlcks\Desktop\123123123/123123123.ino:193
  
  if(sign) module.setDisplayDigit(1,3,false); // 퍼센트
  else module.setDisplayDigit(5,3,false); // 온도
}

void setSegmentInt(int input){
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	7c 01       	movw	r14, r24
C:\Users\dlcks\Desktop\123123123/123123123.ino:194
  module.clearDisplay();
    1b8c:	8f ec       	ldi	r24, 0xCF	; 207
    1b8e:	95 e0       	ldi	r25, 0x05	; 5
    1b90:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:195
  Serial.print("setsegmentInt: ");
    1b94:	80 ea       	ldi	r24, 0xA0	; 160
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:196
  Serial.println(tmp);
    1b9c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1ba0:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1ba4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:197
  tmp = input;
    1ba8:	f0 92 2b 03 	sts	0x032B, r15	; 0x80032b <tmp+0x1>
    1bac:	e0 92 2a 03 	sts	0x032A, r14	; 0x80032a <tmp>
C:\Users\dlcks\Desktop\123123123/123123123.ino:198
  module.setDisplayDigit(tmp % 10,2,false); // 값, 위치
    1bb0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1bb4:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1bb8:	ca e0       	ldi	r28, 0x0A	; 10
    1bba:	d0 e0       	ldi	r29, 0x00	; 0
    1bbc:	be 01       	movw	r22, r28
    1bbe:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    1bc2:	0d eb       	ldi	r16, 0xBD	; 189
    1bc4:	11 e0       	ldi	r17, 0x01	; 1
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	42 e0       	ldi	r20, 0x02	; 2
    1bca:	68 2f       	mov	r22, r24
    1bcc:	8f ec       	ldi	r24, 0xCF	; 207
    1bce:	95 e0       	ldi	r25, 0x05	; 5
    1bd0:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:199
  if(input > 9)
    1bd4:	8a e0       	ldi	r24, 0x0A	; 10
    1bd6:	e8 16       	cp	r14, r24
    1bd8:	f1 04       	cpc	r15, r1
    1bda:	0c f4       	brge	.+2      	; 0x1bde <setSegmentInt(int)+0x60>
    1bdc:	46 c0       	rjmp	.+140    	; 0x1c6a <setSegmentInt(int)+0xec>
C:\Users\dlcks\Desktop\123123123/123123123.ino:201
  {
    tmp = tmp/10;
    1bde:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1be2:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1be6:	be 01       	movw	r22, r28
    1be8:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    1bec:	70 93 2b 03 	sts	0x032B, r23	; 0x80032b <tmp+0x1>
    1bf0:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <tmp>
C:\Users\dlcks\Desktop\123123123/123123123.ino:202
    Serial.print("setsegmentInt: ");
    1bf4:	80 ea       	ldi	r24, 0xA0	; 160
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:203
    Serial.println(tmp);
    1bfc:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1c00:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1c04:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:204
    module.setDisplayDigit(tmp%10,1,false);// 원하는 값, 위치, dot 찍을거임?
    1c08:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1c0c:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1c10:	be 01       	movw	r22, r28
    1c12:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	68 2f       	mov	r22, r24
    1c1c:	8f ec       	ldi	r24, 0xCF	; 207
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:205
    if(input > 99)
    1c24:	84 e6       	ldi	r24, 0x64	; 100
    1c26:	e8 16       	cp	r14, r24
    1c28:	f1 04       	cpc	r15, r1
    1c2a:	fc f0       	brlt	.+62     	; 0x1c6a <setSegmentInt(int)+0xec>
C:\Users\dlcks\Desktop\123123123/123123123.ino:207
    {
      tmp = tmp/10;
    1c2c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1c30:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1c34:	be 01       	movw	r22, r28
    1c36:	0e 94 92 21 	call	0x4324	; 0x4324 <__divmodhi4>
    1c3a:	70 93 2b 03 	sts	0x032B, r23	; 0x80032b <tmp+0x1>
    1c3e:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <tmp>
C:\Users\dlcks\Desktop\123123123/123123123.ino:208
      Serial.print("setsegmentInt: ");
    1c42:	80 ea       	ldi	r24, 0xA0	; 160
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:209
      Serial.println(tmp);
    1c4a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <tmp>
    1c4e:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <tmp+0x1>
    1c52:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:210
      module.setDisplayDigit(tmp,0,false);
    1c56:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <tmp>
    1c5a:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <tmp+0x1>
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	8f ec       	ldi	r24, 0xCF	; 207
    1c64:	95 e0       	ldi	r25, 0x05	; 5
    1c66:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:214
    }
  }
  
}
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]>:
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.75():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:198
 }

 /**
 * Get gas concentration for O3 in ppm
 */
 float MQ131Class::getO3(MQ131Unit unit) {
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:200
 	// If no value Rs read, return 0.0
 	if(lastValueRs < 0) {
    1c86:	c0 90 dd 04 	lds	r12, 0x04DD	; 0x8004dd <MQ131+0x19>
    1c8a:	d0 90 de 04 	lds	r13, 0x04DE	; 0x8004de <MQ131+0x1a>
    1c8e:	e0 90 df 04 	lds	r14, 0x04DF	; 0x8004df <MQ131+0x1b>
    1c92:	f0 90 e0 04 	lds	r15, 0x04E0	; 0x8004e0 <MQ131+0x1c>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	a9 01       	movw	r20, r18
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpsf2>
    1ca4:	87 fd       	sbrc	r24, 7
    1ca6:	0c c0       	rjmp	.+24     	; 0x1cc0 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x48>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:206
 		return 0.0;
 	}

  float ratio = 0.0;

 	switch(model) {
    1ca8:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <MQ131+0x2>
    1cac:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <MQ131+0x3>
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x40>
    1cb6:	42 c0       	rjmp	.+132    	; 0x1d3c <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0xc4>
    1cb8:	90 f0       	brcs	.+36     	; 0x1cde <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x66>
    1cba:	02 97       	sbiw	r24, 0x02	; 2
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x48>
    1cbe:	78 c0       	rjmp	.+240    	; 0x1db0 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x138>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:240
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
      break;
      
 		default :
 			return 0.0;
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
  }
}
    1cc8:	65 2f       	mov	r22, r21
    1cca:	74 2f       	mov	r23, r20
    1ccc:	83 2f       	mov	r24, r19
    1cce:	92 2f       	mov	r25, r18
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:210

 	switch(model) {
 		case LOW_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    1cde:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <MQ131+0x15>
    1ce2:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <MQ131+0x16>
    1ce6:	40 91 db 04 	lds	r20, 0x04DB	; 0x8004db <MQ131+0x17>
    1cea:	50 91 dc 04 	lds	r21, 0x04DC	; 0x8004dc <MQ131+0x18>
    1cee:	c7 01       	movw	r24, r14
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    1cf6:	6b 01       	movw	r12, r22
    1cf8:	7c 01       	movw	r14, r24
    1cfa:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]>
    1cfe:	9b 01       	movw	r18, r22
    1d00:	ac 01       	movw	r20, r24
    1d02:	c7 01       	movw	r24, r14
    1d04:	b6 01       	movw	r22, r12
    1d06:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:213
      // R^2 = 0.9906
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(9.4783 * pow(ratio, 2.3348), PPB, unit);
    1d0a:	2d e5       	ldi	r18, 0x5D	; 93
    1d0c:	3d e6       	ldi	r19, 0x6D	; 109
    1d0e:	45 e1       	ldi	r20, 0x15	; 21
    1d10:	50 e4       	ldi	r21, 0x40	; 64
    1d12:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <pow>
    1d16:	2e e1       	ldi	r18, 0x1E	; 30
    1d18:	37 ea       	ldi	r19, 0xA7	; 167
    1d1a:	47 e1       	ldi	r20, 0x17	; 23
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    1d1e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    1d22:	b6 2f       	mov	r27, r22
    1d24:	a7 2f       	mov	r26, r23
    1d26:	f8 2f       	mov	r31, r24
    1d28:	e9 2f       	mov	r30, r25
    1d2a:	ad 01       	movw	r20, r26
    1d2c:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    1d2e:	c1 30       	cpi	r28, 0x01	; 1
    1d30:	d1 05       	cpc	r29, r1
    1d32:	51 f2       	breq	.-108    	; 0x1cc8 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x50>
    1d34:	9e 01       	movw	r18, r28
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	2e c0       	rjmp	.+92     	; 0x1d98 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x120>
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.75():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:223

 		case HIGH_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
 			
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    1d3c:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <MQ131+0x15>
    1d40:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <MQ131+0x16>
    1d44:	40 91 db 04 	lds	r20, 0x04DB	; 0x8004db <MQ131+0x17>
    1d48:	50 91 dc 04 	lds	r21, 0x04DC	; 0x8004dc <MQ131+0x18>
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	b6 01       	movw	r22, r12
    1d50:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    1d54:	6b 01       	movw	r12, r22
    1d56:	7c 01       	movw	r14, r24
    1d58:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]>
    1d5c:	9b 01       	movw	r18, r22
    1d5e:	ac 01       	movw	r20, r24
    1d60:	c7 01       	movw	r24, r14
    1d62:	b6 01       	movw	r22, r12
    1d64:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:226
      // R^2 = 0.9900
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(8.1399 * pow(ratio, 2.3297), PPM, unit);
    1d68:	2e ec       	ldi	r18, 0xCE	; 206
    1d6a:	39 e1       	ldi	r19, 0x19	; 25
    1d6c:	45 e1       	ldi	r20, 0x15	; 21
    1d6e:	50 e4       	ldi	r21, 0x40	; 64
    1d70:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <pow>
    1d74:	28 e0       	ldi	r18, 0x08	; 8
    1d76:	3d e3       	ldi	r19, 0x3D	; 61
    1d78:	42 e0       	ldi	r20, 0x02	; 2
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    1d80:	b6 2f       	mov	r27, r22
    1d82:	a7 2f       	mov	r26, r23
    1d84:	f8 2f       	mov	r31, r24
    1d86:	e9 2f       	mov	r30, r25
    1d88:	ad 01       	movw	r20, r26
    1d8a:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    1d8c:	20 97       	sbiw	r28, 0x00	; 0
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x11a>
    1d90:	9b cf       	rjmp	.-202    	; 0x1cc8 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0x50>
    1d92:	9e 01       	movw	r18, r28
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	6b 2f       	mov	r22, r27
    1d9a:	7a 2f       	mov	r23, r26
    1d9c:	8f 2f       	mov	r24, r31
    1d9e:	9e 2f       	mov	r25, r30
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.75():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
      break;
      
 		default :
 			return 0.0;
  }
}
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
convert():
    1dac:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.75():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:234
      // Use this if you are constantly monitoring high concentration of O3
      // return convert((8.37768358 * pow(ratio, 2.30375446) - 8.37768358), PPM, unit);

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
    1db0:	26 e6       	ldi	r18, 0x66	; 102
    1db2:	36 e6       	ldi	r19, 0x66	; 102
    1db4:	42 e4       	ldi	r20, 0x42	; 66
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	c7 01       	movw	r24, r14
    1dba:	b6 01       	movw	r22, r12
    1dbc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    1dc0:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <MQ131+0x15>
    1dc4:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <MQ131+0x16>
    1dc8:	40 91 db 04 	lds	r20, 0x04DB	; 0x8004db <MQ131+0x17>
    1dcc:	50 91 dc 04 	lds	r21, 0x04DC	; 0x8004dc <MQ131+0x18>
    1dd0:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    1dd4:	6b 01       	movw	r12, r22
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.76]>
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	c7 01       	movw	r24, r14
    1de2:	b6 01       	movw	r22, r12
    1de4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    1de8:	21 ee       	ldi	r18, 0xE1	; 225
    1dea:	3a e7       	ldi	r19, 0x7A	; 122
    1dec:	44 e9       	ldi	r20, 0x94	; 148
    1dee:	5f eb       	ldi	r21, 0xBF	; 191
    1df0:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <pow>
    1df4:	2b e2       	ldi	r18, 0x2B	; 43
    1df6:	37 e8       	ldi	r19, 0x87	; 135
    1df8:	47 ed       	ldi	r20, 0xD7	; 215
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	90 cf       	rjmp	.-224    	; 0x1d1e <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]+0xa6>

00001dfe <MQ131Class::~MQ131Class()>:
_ZN10MQ131ClassD0Ev():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    1dfe:	0c 94 48 22 	jmp	0x4490	; 0x4490 <free>

00001e02 <__vector_19>:
__vector_19():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e02:	1f 92       	push	r1
    1e04:	0f 92       	push	r0
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	0f 92       	push	r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	2f 93       	push	r18
    1e0e:	3f 93       	push	r19
    1e10:	4f 93       	push	r20
    1e12:	5f 93       	push	r21
    1e14:	6f 93       	push	r22
    1e16:	7f 93       	push	r23
    1e18:	8f 93       	push	r24
    1e1a:	9f 93       	push	r25
    1e1c:	af 93       	push	r26
    1e1e:	bf 93       	push	r27
    1e20:	ef 93       	push	r30
    1e22:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1e24:	83 ef       	ldi	r24, 0xF3	; 243
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1e2c:	ff 91       	pop	r31
    1e2e:	ef 91       	pop	r30
    1e30:	bf 91       	pop	r27
    1e32:	af 91       	pop	r26
    1e34:	9f 91       	pop	r25
    1e36:	8f 91       	pop	r24
    1e38:	7f 91       	pop	r23
    1e3a:	6f 91       	pop	r22
    1e3c:	5f 91       	pop	r21
    1e3e:	4f 91       	pop	r20
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti

00001e4e <__vector_18>:
__vector_18():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	2f 93       	push	r18
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e62:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <Serial+0x10>
    1e66:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <Serial+0x11>
    1e6a:	80 81       	ld	r24, Z
    1e6c:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <Serial+0x16>
    1e70:	f0 91 0a 04 	lds	r31, 0x040A	; 0x80040a <Serial+0x17>
    1e74:	82 fd       	sbrc	r24, 2
    1e76:	1b c0       	rjmp	.+54     	; 0x1eae <__vector_18+0x60>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e78:	90 81       	ld	r25, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e7a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <Serial+0x19>
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e82:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <Serial+0x1a>
    1e86:	82 17       	cp	r24, r18
    1e88:	41 f0       	breq	.+16     	; 0x1e9a <__vector_18+0x4c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1e8a:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <Serial+0x19>
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	ed 50       	subi	r30, 0x0D	; 13
    1e92:	fc 4f       	sbci	r31, 0xFC	; 252
    1e94:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1e96:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <Serial+0x19>
__vector_18():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1e9a:	ff 91       	pop	r31
    1e9c:	ef 91       	pop	r30
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1eae:	80 81       	ld	r24, Z
    1eb0:	f4 cf       	rjmp	.-24     	; 0x1e9a <__vector_18+0x4c>

00001eb2 <__vector_16>:
__vector_16():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	8f 93       	push	r24
    1ec2:	9f 93       	push	r25
    1ec4:	af 93       	push	r26
    1ec6:	bf 93       	push	r27
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1ec8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer0_millis>
    1ecc:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer0_millis+0x1>
    1ed0:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <timer0_millis+0x2>
    1ed4:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1ed8:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <timer0_fract>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1edc:	26 e0       	ldi	r18, 0x06	; 6
    1ede:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1ee0:	2d 37       	cpi	r18, 0x7D	; 125
    1ee2:	68 f1       	brcs	.+90     	; 0x1f3e <__vector_16+0x8c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1ee4:	29 e8       	ldi	r18, 0x89	; 137
    1ee6:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1ee8:	03 96       	adiw	r24, 0x03	; 3
    1eea:	a1 1d       	adc	r26, r1
    1eec:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1eee:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <timer0_fract>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1ef2:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <timer0_millis>
    1ef6:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <timer0_millis+0x1>
    1efa:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <timer0_millis+0x2>
    1efe:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1f02:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <timer0_overflow_count>
    1f06:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <timer0_overflow_count+0x1>
    1f0a:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <timer0_overflow_count+0x2>
    1f0e:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <timer0_overflow_count+0x3>
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	a1 1d       	adc	r26, r1
    1f16:	b1 1d       	adc	r27, r1
    1f18:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <timer0_overflow_count>
    1f1c:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <timer0_overflow_count+0x1>
    1f20:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <timer0_overflow_count+0x2>
    1f24:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1f28:	bf 91       	pop	r27
    1f2a:	af 91       	pop	r26
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	3f 91       	pop	r19
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1f3e:	02 96       	adiw	r24, 0x02	; 2
    1f40:	a1 1d       	adc	r26, r1
    1f42:	b1 1d       	adc	r27, r1
    1f44:	d4 cf       	rjmp	.-88     	; 0x1eee <__vector_16+0x3c>

00001f46 <__vector_24>:
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
    1f68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1f6c:	88 7f       	andi	r24, 0xF8	; 248
    1f6e:	80 36       	cpi	r24, 0x60	; 96
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <__vector_24+0x2e>
    1f72:	4c c0       	rjmp	.+152    	; 0x200c <__vector_24+0xc6>
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <__vector_24+0x32>
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <__vector_24+0xb0>
    1f78:	88 32       	cpi	r24, 0x28	; 40
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <__vector_24+0x38>
    1f7c:	a8 c0       	rjmp	.+336    	; 0x20ce <__vector_24+0x188>
    1f7e:	18 f5       	brcc	.+70     	; 0x1fc6 <__vector_24+0x80>
    1f80:	80 31       	cpi	r24, 0x10	; 16
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <__vector_24+0x40>
    1f84:	9c c0       	rjmp	.+312    	; 0x20be <__vector_24+0x178>
    1f86:	b8 f4       	brcc	.+46     	; 0x1fb6 <__vector_24+0x70>
    1f88:	88 23       	and	r24, r24
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <__vector_24+0x48>
    1f8c:	05 c1       	rjmp	.+522    	; 0x2198 <__vector_24+0x252>
    1f8e:	88 30       	cpi	r24, 0x08	; 8
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_24+0x4e>
    1f92:	95 c0       	rjmp	.+298    	; 0x20be <__vector_24+0x178>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1f94:	ff 91       	pop	r31
    1f96:	ef 91       	pop	r30
    1f98:	bf 91       	pop	r27
    1f9a:	af 91       	pop	r26
    1f9c:	9f 91       	pop	r25
    1f9e:	8f 91       	pop	r24
    1fa0:	7f 91       	pop	r23
    1fa2:	6f 91       	pop	r22
    1fa4:	5f 91       	pop	r21
    1fa6:	4f 91       	pop	r20
    1fa8:	3f 91       	pop	r19
    1faa:	2f 91       	pop	r18
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0f 90       	pop	r0
    1fb2:	1f 90       	pop	r1
    1fb4:	18 95       	reti
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1fb6:	88 31       	cpi	r24, 0x18	; 24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <__vector_24+0x76>
    1fba:	89 c0       	rjmp	.+274    	; 0x20ce <__vector_24+0x188>
    1fbc:	80 32       	cpi	r24, 0x20	; 32
    1fbe:	51 f7       	brne	.-44     	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1fc0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_error>
    1fc4:	15 c0       	rjmp	.+42     	; 0x1ff0 <__vector_24+0xaa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1fc6:	80 34       	cpi	r24, 0x40	; 64
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <__vector_24+0x86>
    1fca:	a6 c0       	rjmp	.+332    	; 0x2118 <__vector_24+0x1d2>
    1fcc:	48 f4       	brcc	.+18     	; 0x1fe0 <__vector_24+0x9a>
    1fce:	80 33       	cpi	r24, 0x30	; 48
    1fd0:	b9 f3       	breq	.-18     	; 0x1fc0 <__vector_24+0x7a>
    1fd2:	88 33       	cpi	r24, 0x38	; 56
    1fd4:	f9 f6       	brne	.-66     	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1fd6:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:575
      twi_releaseBus();
    1fda:	0e 94 9a 01 	call	0x334	; 0x334 <twi_releaseBus>
    1fde:	da cf       	rjmp	.-76     	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1fe0:	80 35       	cpi	r24, 0x50	; 80
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <__vector_24+0xa0>
    1fe4:	89 c0       	rjmp	.+274    	; 0x20f8 <__vector_24+0x1b2>
    1fe6:	88 35       	cpi	r24, 0x58	; 88
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <__vector_24+0xa6>
    1fea:	9e c0       	rjmp	.+316    	; 0x2128 <__vector_24+0x1e2>
    1fec:	88 34       	cpi	r24, 0x48	; 72
    1fee:	91 f6       	brne	.-92     	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1ff0:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
    1ff4:	cf cf       	rjmp	.-98     	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ff6:	88 39       	cpi	r24, 0x98	; 152
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <__vector_24+0xb6>
    1ffa:	94 c0       	rjmp	.+296    	; 0x2124 <__vector_24+0x1de>
    1ffc:	38 f5       	brcc	.+78     	; 0x204c <__vector_24+0x106>
    1ffe:	88 37       	cpi	r24, 0x78	; 120
    2000:	29 f0       	breq	.+10     	; 0x200c <__vector_24+0xc6>
    2002:	50 f4       	brcc	.+20     	; 0x2018 <__vector_24+0xd2>
    2004:	88 36       	cpi	r24, 0x68	; 104
    2006:	11 f0       	breq	.+4      	; 0x200c <__vector_24+0xc6>
    2008:	80 37       	cpi	r24, 0x70	; 112
    200a:	21 f6       	brne	.-120    	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2012:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_rxBufferIndex>
    2016:	57 c0       	rjmp	.+174    	; 0x20c6 <__vector_24+0x180>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2018:	88 38       	cpi	r24, 0x88	; 136
    201a:	09 f4       	brne	.+2      	; 0x201e <__vector_24+0xd8>
    201c:	83 c0       	rjmp	.+262    	; 0x2124 <__vector_24+0x1de>
    201e:	80 39       	cpi	r24, 0x90	; 144
    2020:	19 f0       	breq	.+6      	; 0x2028 <__vector_24+0xe2>
    2022:	80 38       	cpi	r24, 0x80	; 128
    2024:	09 f0       	breq	.+2      	; 0x2028 <__vector_24+0xe2>
    2026:	b6 cf       	rjmp	.-148    	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2028:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_rxBufferIndex>
    202c:	80 32       	cpi	r24, 0x20	; 32
    202e:	08 f0       	brcs	.+2      	; 0x2032 <__vector_24+0xec>
    2030:	79 c0       	rjmp	.+242    	; 0x2124 <__vector_24+0x1de>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2032:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_rxBufferIndex>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	8e 0f       	add	r24, r30
    203a:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_rxBufferIndex>
    203e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	e2 5b       	subi	r30, 0xB2	; 178
    2046:	fc 4f       	sbci	r31, 0xFC	; 252
    2048:	80 83       	st	Z, r24
    204a:	3d c0       	rjmp	.+122    	; 0x20c6 <__vector_24+0x180>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    204c:	80 3b       	cpi	r24, 0xB0	; 176
    204e:	39 f0       	breq	.+14     	; 0x205e <__vector_24+0x118>
    2050:	e0 f4       	brcc	.+56     	; 0x208a <__vector_24+0x144>
    2052:	80 3a       	cpi	r24, 0xA0	; 160
    2054:	09 f4       	brne	.+2      	; 0x2058 <__vector_24+0x112>
    2056:	85 c0       	rjmp	.+266    	; 0x2162 <__vector_24+0x21c>
    2058:	88 3a       	cpi	r24, 0xA8	; 168
    205a:	09 f0       	breq	.+2      	; 0x205e <__vector_24+0x118>
    205c:	9b cf       	rjmp	.-202    	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2064:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <twi_txBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2068:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    206c:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <twi_onSlaveTransmit>
    2070:	f0 91 93 04 	lds	r31, 0x0493	; 0x800493 <twi_onSlaveTransmit+0x1>
    2074:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2076:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <twi_txBufferLength>
    207a:	81 11       	cpse	r24, r1
    207c:	0f c0       	rjmp	.+30     	; 0x209c <__vector_24+0x156>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    2084:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_txBuffer>
    2088:	09 c0       	rjmp	.+18     	; 0x209c <__vector_24+0x156>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    208a:	80 3c       	cpi	r24, 0xC0	; 192
    208c:	09 f4       	brne	.+2      	; 0x2090 <__vector_24+0x14a>
    208e:	82 c0       	rjmp	.+260    	; 0x2194 <__vector_24+0x24e>
    2090:	88 3c       	cpi	r24, 0xC8	; 200
    2092:	09 f4       	brne	.+2      	; 0x2096 <__vector_24+0x150>
    2094:	7f c0       	rjmp	.+254    	; 0x2194 <__vector_24+0x24e>
    2096:	88 3b       	cpi	r24, 0xB8	; 184
    2098:	09 f0       	breq	.+2      	; 0x209c <__vector_24+0x156>
    209a:	7c cf       	rjmp	.-264    	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    209c:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <twi_txBufferIndex>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8e 0f       	add	r24, r30
    20a4:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <twi_txBufferIndex>
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	e4 5d       	subi	r30, 0xD4	; 212
    20ac:	fc 4f       	sbci	r31, 0xFC	; 252
    20ae:	80 81       	ld	r24, Z
    20b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20b4:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <twi_txBufferIndex>
    20b8:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <twi_txBufferLength>
    20bc:	31 c0       	rjmp	.+98     	; 0x2120 <__vector_24+0x1da>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    20be:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    20c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20c6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    20cc:	63 cf       	rjmp	.-314    	; 0x1f94 <__vector_24+0x4e>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    20ce:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_masterBufferIndex>
    20d2:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_masterBufferLength>
    20d6:	98 17       	cp	r25, r24
    20d8:	b8 f5       	brcc	.+110    	; 0x2148 <__vector_24+0x202>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    20da:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_masterBuffer>
    20de:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <twi_masterBuffer+0x1>
    20e2:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	2e 0f       	add	r18, r30
    20ea:	20 93 76 03 	sts	0x0376, r18	; 0x800376 <twi_masterBufferIndex>
    20ee:	e8 0f       	add	r30, r24
    20f0:	f9 2f       	mov	r31, r25
    20f2:	f1 1d       	adc	r31, r1
    20f4:	80 81       	ld	r24, Z
    20f6:	e5 cf       	rjmp	.-54     	; 0x20c2 <__vector_24+0x17c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20f8:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <twi_masterBuffer>
    20fc:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <twi_masterBuffer+0x1>
    2100:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8e 0f       	add	r24, r30
    2108:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_masterBufferIndex>
    210c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2110:	e2 0f       	add	r30, r18
    2112:	f3 2f       	mov	r31, r19
    2114:	f1 1d       	adc	r31, r1
    2116:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2118:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_masterBufferIndex>
    211c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2120:	98 17       	cp	r25, r24
    2122:	88 f2       	brcs	.-94     	; 0x20c6 <__vector_24+0x180>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2124:	85 e8       	ldi	r24, 0x85	; 133
    2126:	d0 cf       	rjmp	.-96     	; 0x20c8 <__vector_24+0x182>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2128:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <twi_masterBuffer>
    212c:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <twi_masterBuffer+0x1>
    2130:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	8e 0f       	add	r24, r30
    2138:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_masterBufferIndex>
    213c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2140:	e2 0f       	add	r30, r18
    2142:	f3 2f       	mov	r31, r19
    2144:	f1 1d       	adc	r31, r1
    2146:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
    2148:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <twi_sendStop>
    214c:	81 11       	cpse	r24, r1
    214e:	50 cf       	rjmp	.-352    	; 0x1ff0 <__vector_24+0xaa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2156:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    215c:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_state>
    2160:	19 cf       	rjmp	.-462    	; 0x1f94 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2162:	0e 94 9a 01 	call	0x334	; 0x334 <twi_releaseBus>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2166:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_rxBufferIndex>
    216a:	80 32       	cpi	r24, 0x20	; 32
    216c:	30 f4       	brcc	.+12     	; 0x217a <__vector_24+0x234>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    216e:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <twi_rxBufferIndex>
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	e2 5b       	subi	r30, 0xB2	; 178
    2176:	fc 4f       	sbci	r31, 0xFC	; 252
    2178:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    217a:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <twi_rxBufferIndex>
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <twi_onSlaveReceive>
    2184:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <twi_onSlaveReceive+0x1>
    2188:	8e e4       	ldi	r24, 0x4E	; 78
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    218e:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_rxBufferIndex>
    2192:	00 cf       	rjmp	.-512    	; 0x1f94 <__vector_24+0x4e>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2194:	85 ec       	ldi	r24, 0xC5	; 197
    2196:	e0 cf       	rjmp	.-64     	; 0x2158 <__vector_24+0x212>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2198:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <twi_error>
    219c:	29 cf       	rjmp	.-430    	; 0x1ff0 <__vector_24+0xaa>

0000219e <__vector_8>:
__vector_8():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1261
#if defined(TIMER_INTR_NAME)
ISR (TIMER_INTR_NAME) // for ISR definitions
#else
ISR () // for functions definitions which are called by separate (board specific) ISR
#endif
{
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	2f 93       	push	r18
    21aa:	3f 93       	push	r19
    21ac:	4f 93       	push	r20
    21ae:	5f 93       	push	r21
    21b0:	6f 93       	push	r22
    21b2:	7f 93       	push	r23
    21b4:	8f 93       	push	r24
    21b6:	9f 93       	push	r25
    21b8:	af 93       	push	r26
    21ba:	bf 93       	push	r27
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1271

    TIMER_RESET_INTR_PENDING;// reset TickCounterForISR interrupt flag if required (currently only for Teensy and ATmega4809)

// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
#if defined(__AVR__)
    uint8_t tIRInputLevel = *irparams.IRReceivePinPortInputRegister & irparams.IRReceivePinMask;
    21c0:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <irparams+0x2>
    21c4:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <irparams+0x3>
    21c8:	90 81       	ld	r25, Z
    21ca:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <irparams+0x4>
    21ce:	98 23       	and	r25, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1279
#endif

    /*
     * Increase TickCounter and clip it at maximum 0xFFFF / 3.2 seconds at 50 us ticks
     */
    if (irparams.TickCounterForISR < 0xFFFF) {
    21d0:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <irparams+0x5>
    21d4:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <irparams+0x6>
    21d8:	2f 3f       	cpi	r18, 0xFF	; 255
    21da:	32 07       	cpc	r19, r18
    21dc:	31 f0       	breq	.+12     	; 0x21ea <__vector_8+0x4c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1280
        irparams.TickCounterForISR++;  // One more 50uS tick
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <irparams+0x6>
    21e6:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <irparams+0x5>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1289
     * Due to a ESP32 compiler bug https://github.com/espressif/esp-idf/issues/1552 no switch statements are possible for ESP32
     * So we change the code to if / else if
     */
//    switch (irparams.StateForISR) {
//......................................................................
    if (irparams.StateForISR == IR_REC_STATE_IDLE) { // In the middle of a gap or just resumed (and maybe in the middle of a transmission
    21ea:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    21ee:	81 11       	cpse	r24, r1
    21f0:	35 c0       	rjmp	.+106    	; 0x225c <__vector_8+0xbe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1290
        if (tIRInputLevel == INPUT_MARK) {
    21f2:	91 11       	cpse	r25, r1
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1292
            // check if we did not start in the middle of a transmission by checking the minimum length of leading space
            if (irparams.TickCounterForISR > RECORD_GAP_TICKS) {
    21f6:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <irparams+0x5>
    21fa:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <irparams+0x6>
    21fe:	25 36       	cpi	r18, 0x65	; 101
    2200:	31 05       	cpc	r19, r1
    2202:	58 f0       	brcs	.+22     	; 0x221a <__vector_8+0x7c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1298
                // Gap just ended; Record gap duration + start recording transmission
                // Initialize all state machine variables
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//                digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
                irparams.OverflowFlag = false;
    2204:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1299
                irparams.rawbuf[0] = irparams.TickCounterForISR;
    2208:	30 93 ed 04 	sts	0x04ED, r19	; 0x8004ed <irparams+0xa>
    220c:	20 93 ec 04 	sts	0x04EC, r18	; 0x8004ec <irparams+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1300
                irparams.rawlen = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1301
                irparams.StateForISR = IR_REC_STATE_MARK;
    2216:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <irparams>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1303
            } // otherwise stay in idle state
            irparams.TickCounterForISR = 0;// reset counter in both cases
    221a:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <irparams+0x6>
    221e:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <irparams+0x5>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1355
            irparams.TickCounterForISR = 0;
        }
    }

#if !defined(DISABLE_LED_FEEDBACK_FOR_RECEIVE)
    if (FeedbackLEDControl.LedFeedbackEnabled) {
    2222:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <FeedbackLEDControl+0x1>
    2226:	88 23       	and	r24, r24
    2228:	41 f0       	breq	.+16     	; 0x223a <__vector_8+0x9c>
    222a:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <FeedbackLEDControl>
setFeedbackLED():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:85
#if defined(ESP32)
IRAM_ATTR
#endif
void setFeedbackLED(bool aSwitchLedOn) {
    if (FeedbackLEDControl.LedFeedbackEnabled) {
        if (aSwitchLedOn) {
    222e:	91 11       	cpse	r25, r1
    2230:	62 c0       	rjmp	.+196    	; 0x22f6 <__vector_8+0x158>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:90
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
#if defined(FEEDBACK_LED_IS_ACTIVE_LOW)
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, LOW); // Turn user defined pin LED on
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED on
    2232:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:86
IRAM_ATTR
#endif
void setFeedbackLED(bool aSwitchLedOn) {
    if (FeedbackLEDControl.LedFeedbackEnabled) {
        if (aSwitchLedOn) {
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
    2234:	81 11       	cpse	r24, r1
    2236:	62 c0       	rjmp	.+196    	; 0x22fc <__vector_8+0x15e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:94
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED on
#endif
#ifdef FEEDBACK_LED_ON
            } else {
                FEEDBACK_LED_ON();   // if no user defined LED pin, turn default LED pin for the hardware on
    2238:	2d 9a       	sbi	0x05, 5	; 5
__vector_8():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1363
#endif

#ifdef IR_MEASURE_TIMING
    digitalWriteFast(IR_TIMING_TEST_PIN, LOW); // 2 clock cycles
#endif
}
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1306
                irparams.StateForISR = IR_REC_STATE_MARK;
            } // otherwise stay in idle state
            irparams.TickCounterForISR = 0;// reset counter in both cases
        }

    } else if (irparams.StateForISR == IR_REC_STATE_MARK) {  // Timing Mark
    225c:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	a1 f4       	brne	.+40     	; 0x228c <__vector_8+0xee>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1307
        if (tIRInputLevel != INPUT_MARK) {   // Mark ended; Record time
    2264:	99 23       	and	r25, r25
    2266:	e9 f2       	breq	.-70     	; 0x2222 <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1311
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//            digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
            irparams.rawbuf[irparams.rawlen++] = irparams.TickCounterForISR;
    2268:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <irparams+0x5>
    226c:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <irparams+0x6>
    2270:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <irparams+0x8>
    2274:	8e 0f       	add	r24, r30
    2276:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <irparams+0x8>
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ed 51       	subi	r30, 0x1D	; 29
    2282:	fb 4f       	sbci	r31, 0xFB	; 251
    2284:	32 87       	std	Z+10, r19	; 0x0a
    2286:	21 87       	std	Z+9, r18	; 0x09
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1312
            irparams.StateForISR = IR_REC_STATE_SPACE;
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	c5 cf       	rjmp	.-118    	; 0x2216 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1316
            irparams.TickCounterForISR = 0;
        }

    } else if (irparams.StateForISR == IR_REC_STATE_SPACE) {  // Timing Space
    228c:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    2290:	82 30       	cpi	r24, 0x02	; 2
    2292:	41 f5       	brne	.+80     	; 0x22e4 <__vector_8+0x146>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1317
        if (tIRInputLevel == INPUT_MARK) {  // Space just ended; Record time
    2294:	91 11       	cpse	r25, r1
    2296:	1a c0       	rjmp	.+52     	; 0x22cc <__vector_8+0x12e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1318
            if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
    2298:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <irparams+0x8>
    229c:	e4 36       	cpi	r30, 0x64	; 100
    229e:	28 f0       	brcs	.+10     	; 0x22aa <__vector_8+0x10c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1320
                // Flag up a read OverflowFlag; Stop the State Machine
                irparams.OverflowFlag = true;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1321
                irparams.StateForISR = IR_REC_STATE_STOP;
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	b6 cf       	rjmp	.-148    	; 0x2216 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1326
            } else {
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//                digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
                irparams.rawbuf[irparams.rawlen++] = irparams.TickCounterForISR;
    22aa:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <irparams+0x5>
    22ae:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <irparams+0x6>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	8e 0f       	add	r24, r30
    22b6:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <irparams+0x8>
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	ed 51       	subi	r30, 0x1D	; 29
    22c2:	fb 4f       	sbci	r31, 0xFB	; 251
    22c4:	32 87       	std	Z+10, r19	; 0x0a
    22c6:	21 87       	std	Z+9, r18	; 0x09
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1327
                irparams.StateForISR = IR_REC_STATE_MARK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	a5 cf       	rjmp	.-182    	; 0x2216 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1331
            }
            irparams.TickCounterForISR = 0;

        } else if (irparams.TickCounterForISR > RECORD_GAP_TICKS) {
    22cc:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <irparams+0x5>
    22d0:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <irparams+0x6>
    22d4:	25 36       	cpi	r18, 0x65	; 101
    22d6:	31 05       	cpc	r19, r1
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <__vector_8+0x13e>
    22da:	a3 cf       	rjmp	.-186    	; 0x2222 <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1338
             * Current code is ready for processing!
             * We received a long space, which indicates gap between codes.
             * Switch to IR_REC_STATE_STOP
             * Don't reset TickCounterForISR; keep counting width of next leading space
             */
            irparams.StateForISR = IR_REC_STATE_STOP;
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <irparams>
    22e2:	9f cf       	rjmp	.-194    	; 0x2222 <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1340
        }
    } else if (irparams.StateForISR == IR_REC_STATE_STOP) {
    22e4:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	09 f0       	breq	.+2      	; 0x22ee <__vector_8+0x150>
    22ec:	9a cf       	rjmp	.-204    	; 0x2222 <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1348
         * stay here until resume() is called, which switches state to IR_REC_STATE_IDLE
         */
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//        digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
        if (tIRInputLevel == INPUT_MARK) {
    22ee:	99 23       	and	r25, r25
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <__vector_8+0x156>
    22f2:	93 cf       	rjmp	.-218    	; 0x221a <__vector_8+0x7c>
    22f4:	96 cf       	rjmp	.-212    	; 0x2222 <__vector_8+0x84>
setFeedbackLED():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:98
#endif
            }
        } else {
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
    22f6:	88 23       	and	r24, r24
    22f8:	21 f0       	breq	.+8      	; 0x2302 <__vector_8+0x164>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:102
#if defined(FEEDBACK_LED_IS_ACTIVE_LOW)
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED off
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, LOW); // Turn user defined pin LED off
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
    2300:	9c cf       	rjmp	.-200    	; 0x223a <__vector_8+0x9c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRFeedbackLED.cpp.h:106
#endif
#ifdef FEEDBACK_LED_OFF
            } else {
                FEEDBACK_LED_OFF();   // if no user defined LED pin, turn default LED pin for the hardware on
    2302:	2d 98       	cbi	0x05, 5	; 5
    2304:	9a cf       	rjmp	.-204    	; 0x223a <__vector_8+0x9c>

00002306 <IRrecv::setReceivePin(unsigned char) [clone .constprop.63]>:
_ZN6IRrecv13setReceivePinEh.constprop.63():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:107

/**
 * Sets / changes the receiver pin number
 */
void IRrecv::setReceivePin(uint8_t aReceivePinNumber) {
    irparams.IRReceivePin = aReceivePinNumber;
    2306:	a3 ee       	ldi	r26, 0xE3	; 227
    2308:	b4 e0       	ldi	r27, 0x04	; 4
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	8c 93       	st	X, r24
    230e:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:109
#if defined(__AVR__)
    irparams.IRReceivePinMask = digitalPinToBitMask(aReceivePinNumber);
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	fc 01       	movw	r30, r24
    2314:	ed 5a       	subi	r30, 0xAD	; 173
    2316:	fd 4f       	sbci	r31, 0xFD	; 253
    2318:	e4 91       	lpm	r30, Z
    231a:	14 96       	adiw	r26, 0x04	; 4
    231c:	ec 93       	st	X, r30
    231e:	14 97       	sbiw	r26, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:110
    irparams.IRReceivePinPortInputRegister = portInputRegister(digitalPinToPort(aReceivePinNumber));
    2320:	fc 01       	movw	r30, r24
    2322:	e8 5c       	subi	r30, 0xC8	; 200
    2324:	fd 4f       	sbci	r31, 0xFD	; 253
    2326:	e4 91       	lpm	r30, Z
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e4 5d       	subi	r30, 0xD4	; 212
    2330:	fd 4f       	sbci	r31, 0xFD	; 253
    2332:	85 91       	lpm	r24, Z+
    2334:	94 91       	lpm	r25, Z
    2336:	13 96       	adiw	r26, 0x03	; 3
    2338:	9c 93       	st	X, r25
    233a:	8e 93       	st	-X, r24
    233c:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:112
#endif
}
    233e:	08 95       	ret

00002340 <global constructors keyed to 65535_0_123123123.ino.cpp.o.6736>:
_GLOBAL__I_65535_0_123123123.ino.cpp.o.6736():
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	e3 ef       	ldi	r30, 0xF3	; 243
    2350:	f3 e0       	ldi	r31, 0x03	; 3
    2352:	13 82       	std	Z+3, r1	; 0x03
    2354:	12 82       	std	Z+2, r1	; 0x02
    2356:	88 ee       	ldi	r24, 0xE8	; 232
    2358:	93 e0       	ldi	r25, 0x03	; 3
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	84 83       	std	Z+4, r24	; 0x04
    2360:	95 83       	std	Z+5, r25	; 0x05
    2362:	a6 83       	std	Z+6, r26	; 0x06
    2364:	b7 83       	std	Z+7, r27	; 0x07
    2366:	21 e1       	ldi	r18, 0x11	; 17
    2368:	31 e0       	ldi	r19, 0x01	; 1
    236a:	31 83       	std	Z+1, r19	; 0x01
    236c:	20 83       	st	Z, r18
    236e:	25 ec       	ldi	r18, 0xC5	; 197
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	35 87       	std	Z+13, r19	; 0x0d
    2374:	24 87       	std	Z+12, r18	; 0x0c
    2376:	24 ec       	ldi	r18, 0xC4	; 196
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	37 87       	std	Z+15, r19	; 0x0f
    237c:	26 87       	std	Z+14, r18	; 0x0e
    237e:	20 ec       	ldi	r18, 0xC0	; 192
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	31 8b       	std	Z+17, r19	; 0x11
    2384:	20 8b       	std	Z+16, r18	; 0x10
    2386:	21 ec       	ldi	r18, 0xC1	; 193
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	33 8b       	std	Z+19, r19	; 0x13
    238c:	22 8b       	std	Z+18, r18	; 0x12
    238e:	22 ec       	ldi	r18, 0xC2	; 194
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	35 8b       	std	Z+21, r19	; 0x15
    2394:	24 8b       	std	Z+20, r18	; 0x14
    2396:	26 ec       	ldi	r18, 0xC6	; 198
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	37 8b       	std	Z+23, r19	; 0x17
    239c:	26 8b       	std	Z+22, r18	; 0x16
    239e:	11 8e       	std	Z+25, r1	; 0x19
    23a0:	12 8e       	std	Z+26, r1	; 0x1a
    23a2:	13 8e       	std	Z+27, r1	; 0x1b
    23a4:	14 8e       	std	Z+28, r1	; 0x1c
    23a6:	c4 e9       	ldi	r28, 0x94	; 148
    23a8:	d4 e0       	ldi	r29, 0x04	; 4
    23aa:	1b 82       	std	Y+3, r1	; 0x03
    23ac:	1a 82       	std	Y+2, r1	; 0x02
    23ae:	8c 83       	std	Y+4, r24	; 0x04
    23b0:	9d 83       	std	Y+5, r25	; 0x05
    23b2:	ae 83       	std	Y+6, r26	; 0x06
    23b4:	bf 83       	std	Y+7, r27	; 0x07
    23b6:	83 e2       	ldi	r24, 0x23	; 35
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	99 83       	std	Y+1, r25	; 0x01
    23bc:	88 83       	st	Y, r24
    23be:	80 e2       	ldi	r24, 0x20	; 32
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9d 87       	std	Y+13, r25	; 0x0d
    23c4:	8c 87       	std	Y+12, r24	; 0x0c
    23c6:	0e 94 ac 21 	call	0x4358	; 0x4358 <malloc>
    23ca:	9f 87       	std	Y+15, r25	; 0x0f
    23cc:	8e 87       	std	Y+14, r24	; 0x0e
    23ce:	18 8a       	std	Y+16, r1	; 0x10
    23d0:	19 8a       	std	Y+17, r1	; 0x11
    23d2:	1a 8a       	std	Y+18, r1	; 0x12
    23d4:	80 e2       	ldi	r24, 0x20	; 32
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 ac 21 	call	0x4358	; 0x4358 <malloc>
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	1d 8a       	std	Y+21, r1	; 0x15
    23e2:	1e 8a       	std	Y+22, r1	; 0x16
    23e4:	1f 8a       	std	Y+23, r1	; 0x17
    23e6:	8b e2       	ldi	r24, 0x2B	; 43
    23e8:	94 e0       	ldi	r25, 0x04	; 4
    23ea:	9d 8f       	std	Y+29, r25	; 0x1d
    23ec:	8c 8f       	std	Y+28, r24	; 0x1c
    23ee:	89 e4       	ldi	r24, 0x49	; 73
    23f0:	94 e0       	ldi	r25, 0x04	; 4
    23f2:	9f 8f       	std	Y+31, r25	; 0x1f
    23f4:	8e 8f       	std	Y+30, r24	; 0x1e
    23f6:	81 e7       	ldi	r24, 0x71	; 113
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	99 a3       	std	Y+33, r25	; 0x21
    23fc:	88 a3       	std	Y+32, r24	; 0x20
    23fe:	85 e7       	ldi	r24, 0x75	; 117
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	9b a3       	std	Y+35, r25	; 0x23
    2404:	8a a3       	std	Y+34, r24	; 0x22
    2406:	88 ef       	ldi	r24, 0xF8	; 248
    2408:	99 e0       	ldi	r25, 0x09	; 9
    240a:	9d a3       	std	Y+37, r25	; 0x25
    240c:	8c a3       	std	Y+36, r24	; 0x24
    240e:	88 ea       	ldi	r24, 0xA8	; 168
    2410:	99 e0       	ldi	r25, 0x09	; 9
    2412:	9f a3       	std	Y+39, r25	; 0x27
    2414:	8e a3       	std	Y+38, r24	; 0x26
    2416:	81 e8       	ldi	r24, 0x81	; 129
    2418:	99 e0       	ldi	r25, 0x09	; 9
    241a:	99 a7       	std	Y+41, r25	; 0x29
    241c:	88 a7       	std	Y+40, r24	; 0x28
    241e:	88 e8       	ldi	r24, 0x88	; 136
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	9b a7       	std	Y+43, r25	; 0x2b
    2424:	8a a7       	std	Y+42, r24	; 0x2a
    2426:	80 e9       	ldi	r24, 0x90	; 144
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9d a7       	std	Y+45, r25	; 0x2d
    242c:	8c a7       	std	Y+44, r24	; 0x2c
    242e:	8a e9       	ldi	r24, 0x9A	; 154
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	9f a7       	std	Y+47, r25	; 0x2f
    2434:	8e a7       	std	Y+46, r24	; 0x2e
    2436:	84 e4       	ldi	r24, 0x44	; 68
    2438:	9a e0       	ldi	r25, 0x0A	; 10
    243a:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <twi_onSlaveReceive+0x1>
    243e:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <twi_onSlaveReceive>
    2442:	88 e3       	ldi	r24, 0x38	; 56
    2444:	9a e0       	ldi	r25, 0x0A	; 10
    2446:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <twi_onSlaveTransmit+0x1>
    244a:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <twi_onSlaveTransmit>
    244e:	e4 ec       	ldi	r30, 0xC4	; 196
    2450:	f4 e0       	ldi	r31, 0x04	; 4
    2452:	85 e3       	ldi	r24, 0x35	; 53
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	15 82       	std	Z+5, r1	; 0x05
    245c:	14 82       	std	Z+4, r1	; 0x04
    245e:	16 82       	std	Z+6, r1	; 0x06
    2460:	8f ef       	ldi	r24, 0xFF	; 255
    2462:	87 83       	std	Z+7, r24	; 0x07
    2464:	80 87       	std	Z+8, r24	; 0x08
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	dc 01       	movw	r26, r24
    246c:	85 87       	std	Z+13, r24	; 0x0d
    246e:	96 87       	std	Z+14, r25	; 0x0e
    2470:	a7 87       	std	Z+15, r26	; 0x0f
    2472:	b0 8b       	std	Z+16, r27	; 0x10
    2474:	81 8b       	std	Z+17, r24	; 0x11
    2476:	92 8b       	std	Z+18, r25	; 0x12
    2478:	a3 8b       	std	Z+19, r26	; 0x13
    247a:	b4 8b       	std	Z+20, r27	; 0x14
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf eb       	ldi	r27, 0xBF	; 191
    2484:	85 8b       	std	Z+21, r24	; 0x15
    2486:	96 8b       	std	Z+22, r25	; 0x16
    2488:	a7 8b       	std	Z+23, r26	; 0x17
    248a:	b0 8f       	std	Z+24, r27	; 0x18
    248c:	81 8f       	std	Z+25, r24	; 0x19
    248e:	92 8f       	std	Z+26, r25	; 0x1a
    2490:	a3 8f       	std	Z+27, r26	; 0x1b
    2492:	b4 8f       	std	Z+28, r27	; 0x1c
    2494:	84 e1       	ldi	r24, 0x14	; 20
    2496:	85 8f       	std	Z+29, r24	; 0x1d
    2498:	81 e4       	ldi	r24, 0x41	; 65
    249a:	86 8f       	std	Z+30, r24	; 0x1e
    249c:	80 e4       	ldi	r24, 0x40	; 64
    249e:	92 e4       	ldi	r25, 0x42	; 66
    24a0:	af e0       	ldi	r26, 0x0F	; 15
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	81 87       	std	Z+9, r24	; 0x09
    24a6:	92 87       	std	Z+10, r25	; 0x0a
    24a8:	a3 87       	std	Z+11, r26	; 0x0b
    24aa:	b4 87       	std	Z+12, r27	; 0x0c
    24ac:	83 ee       	ldi	r24, 0xE3	; 227
    24ae:	e8 2e       	mov	r14, r24
    24b0:	84 e0       	ldi	r24, 0x04	; 4
    24b2:	f8 2e       	mov	r15, r24
    24b4:	f0 92 e8 05 	sts	0x05E8, r15	; 0x8005e8 <IrReceiver+0xf>
    24b8:	e0 92 e7 05 	sts	0x05E7, r14	; 0x8005e7 <IrReceiver+0xe>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	0e 94 83 11 	call	0x2306	; 0x2306 <IRrecv::setReceivePin(unsigned char) [clone .constprop.63]>
    24c2:	07 ed       	ldi	r16, 0xD7	; 215
    24c4:	15 e0       	ldi	r17, 0x05	; 5
    24c6:	f8 01       	movw	r30, r16
    24c8:	10 82       	st	Z, r1
    24ca:	11 82       	std	Z+1, r1	; 0x01
    24cc:	cf ec       	ldi	r28, 0xCF	; 207
    24ce:	d5 e0       	ldi	r29, 0x05	; 5
    24d0:	8d e3       	ldi	r24, 0x3D	; 61
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	99 83       	std	Y+1, r25	; 0x01
    24d6:	88 83       	st	Y, r24
    24d8:	98 e0       	ldi	r25, 0x08	; 8
    24da:	d9 2e       	mov	r13, r25
    24dc:	db 82       	std	Y+3, r13	; 0x03
    24de:	8b e0       	ldi	r24, 0x0B	; 11
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	9c e0       	ldi	r25, 0x0C	; 12
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	84 e0       	ldi	r24, 0x04	; 4
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	8c 83       	std	Y+4, r24	; 0x04
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	8b e0       	ldi	r24, 0x0B	; 11
    24f2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	8c e0       	ldi	r24, 0x0C	; 12
    24fa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	8b e0       	ldi	r24, 0x0B	; 11
    2502:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	8b e0       	ldi	r24, 0x0B	; 11
    250a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	8c e0       	ldi	r24, 0x0C	; 12
    2512:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
    2516:	89 e6       	ldi	r24, 0x69	; 105
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	99 83       	std	Y+1, r25	; 0x01
    251c:	88 83       	st	Y, r24
    251e:	ce 01       	movw	r24, r28
    2520:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
    2524:	db 82       	std	Y+3, r13	; 0x03
    2526:	47 e0       	ldi	r20, 0x07	; 7
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	ce 01       	movw	r24, r28
    252c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TM1650::setupDisplay(bool, unsigned char)>
    2530:	f0 92 c3 05 	sts	0x05C3, r15	; 0x8005c3 <irrecv+0xf>
    2534:	e0 92 c2 05 	sts	0x05C2, r14	; 0x8005c2 <irrecv+0xe>
    2538:	84 e1       	ldi	r24, 0x14	; 20
    253a:	0e 94 83 11 	call	0x2306	; 0x2306 <IRrecv::setReceivePin(unsigned char) [clone .constprop.63]>
    253e:	f8 01       	movw	r30, r16
    2540:	10 82       	st	Z, r1
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	08 95       	ret

00002554 <main>:
main():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2554:	78 94       	sei
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2556:	84 b5       	in	r24, 0x24	; 36
    2558:	83 60       	ori	r24, 0x03	; 3
    255a:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    255c:	85 b5       	in	r24, 0x25	; 37
    255e:	83 60       	ori	r24, 0x03	; 3
    2560:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2562:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    2566:	81 60       	ori	r24, 0x01	; 1
    2568:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    256c:	c2 e0       	ldi	r28, 0x02	; 2
    256e:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2572:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2576:	81 60       	ori	r24, 0x01	; 1
    2578:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    257c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2580:	81 60       	ori	r24, 0x01	; 1
    2582:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2586:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    258a:	84 60       	ori	r24, 0x04	; 4
    258c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2590:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    259a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    259e:	83 60       	ori	r24, 0x03	; 3
    25a0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    25a4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    25a8:	81 60       	ori	r24, 0x01	; 1
    25aa:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    25ae:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
    25b2:	83 60       	ori	r24, 0x03	; 3
    25b4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    25b8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    25bc:	81 60       	ori	r24, 0x01	; 1
    25be:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    25c2:	86 e8       	ldi	r24, 0x86	; 134
    25c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    25c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
begin():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    25cc:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <Serial+0x10>
    25d0:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <Serial+0x11>
    25d4:	c0 83       	st	Z, r28
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    25d6:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <Serial+0xc>
    25da:	f0 91 00 04 	lds	r31, 0x0400	; 0x800400 <Serial+0xd>
    25de:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    25e0:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <Serial+0xe>
    25e4:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <Serial+0xf>
    25e8:	83 e3       	ldi	r24, 0x33	; 51
    25ea:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    25ec:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <Serial+0x18>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    25f0:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <Serial+0x14>
    25f4:	f0 91 08 04 	lds	r31, 0x0408	; 0x800408 <Serial+0x15>
    25f8:	86 e0       	ldi	r24, 0x06	; 6
    25fa:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    25fc:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <Serial+0x12>
    2600:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <Serial+0x13>
    2604:	80 81       	ld	r24, Z
    2606:	88 69       	ori	r24, 0x98	; 152
    2608:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    260a:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <Serial+0x12>
    260e:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <Serial+0x13>
    2612:	80 81       	ld	r24, Z
    2614:	8f 7d       	andi	r24, 0xDF	; 223
    2616:	80 83       	st	Z, r24
setup():
C:\Users\dlcks\Desktop\123123123/123123123.ino:459
}

void setup()
{
  Serial.begin(19200);   //시리얼 프린트를 시작합니다
  Serial.println("motor speed...");
    2618:	80 eb       	ldi	r24, 0xB0	; 176
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:460
  TCCR1B = TCCR1B & B11111000 | B00000010; // for PWM frequency of 3921.16 Hz
    2620:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2624:	88 7f       	andi	r24, 0xF8	; 248
    2626:	82 60       	ori	r24, 0x02	; 2
    2628:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\Desktop\123123123/123123123.ino:462
  
  Serial.println("am1008w start...");
    262c:	8f eb       	ldi	r24, 0xBF	; 191
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:36
 *         {@code 3} Frame length is different
 *         {@code 4} Checksum is wrong
 */
void AM1008W_K_I2C::begin(TwoWire &wirePort)
{
  _i2cPort = &wirePort; //Grab which port the user wants us to use
    2634:	84 e9       	ldi	r24, 0x94	; 148
    2636:	94 e0       	ldi	r25, 0x04	; 4
    2638:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <am1008w_k_i2c+0x21>
    263c:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <am1008w_k_i2c+0x20>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:449

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2640:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <Wire+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:450
  rxBufferLength = 0;
    2644:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <Wire+0x11>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:452

  txBufferIndex = 0;
    2648:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <Wire+0x15>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:453
  txBufferLength = 0;
    264c:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <Wire+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:455

  tw_init();
    2650:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <Wire+0x1c>
    2654:	f0 91 b1 04 	lds	r31, 0x04B1	; 0x8004b1 <Wire+0x1d>
    2658:	09 95       	icall
setup():
C:\Users\dlcks\Desktop\123123123/123123123.ino:465
  am1008w_k_i2c.begin(); // 0x50
  //am1008w_k_i2c.pm_sensor_mode_cotinuously_measurement();
  Serial.println("ir start...");
    265a:	80 ed       	ldi	r24, 0xD0	; 208
    265c:	91 e0       	ldi	r25, 0x01	; 1
    265e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:152
/**
 * Configures the timer and the state machine for IR reception.
 */
void IRrecv::enableIRIn() {

    noInterrupts();
    2662:	f8 94       	cli
timerConfigForReceive():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/private/IRTimer.cpp.h:368
    TCCR2B = _BV(CS20);
    OCR2A = TIMER_COUNT_TOP;
    OCR2B = TIMER_COUNT_TOP;
    TCNT2 = 0;
#  else
    TCCR2A = _BV(WGM21);
    2664:	c0 93 b0 00 	sts	0x00B0, r28	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/private/IRTimer.cpp.h:369
    TCCR2B = _BV(CS21);
    2668:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/private/IRTimer.cpp.h:370
    OCR2A = TIMER_COUNT_TOP / 8;
    266c:	82 e3       	ldi	r24, 0x32	; 50
    266e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/private/IRTimer.cpp.h:371
    OCR2B = TIMER_COUNT_TOP / 8;
    2672:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/private/IRTimer.cpp.h:372
    TCNT2 = 0;
    2676:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:156

    // Setup pulse clock TickCounterForISR interrupt
    timerConfigForReceive();
    TIMER_ENABLE_RECEIVE_INTR;  // Timer interrupt enable
    267a:	84 e0       	ldi	r24, 0x04	; 4
    267c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
resume():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:188
 * Restart the ISR state machine
 * Enable receiving of the next value
 */
void IRrecv::resume() {
    // check allows to call resume at arbitrary places or more than once
    if (irparams.StateForISR == IR_REC_STATE_STOP) {
    2680:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    2684:	83 30       	cpi	r24, 0x03	; 3
    2686:	11 f4       	brne	.+4      	; 0x268c <main+0x138>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:189
        irparams.StateForISR = IR_REC_STATE_IDLE;
    2688:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <irparams>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:161
    TIMER_ENABLE_RECEIVE_INTR;  // Timer interrupt enable
    TIMER_RESET_INTR_PENDING;   // NOP for most platforms

    // Initialize state machine state
    resume();
    interrupts(); // after resume to avoid running through STOP state 1 time before switching to IDLE
    268c:	78 94       	sei
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:164

    // Set pin modes
    pinMode(irparams.IRReceivePin, INPUT);
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <irparams+0x1>
    2694:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
setup():
C:\Users\dlcks\Desktop\123123123/123123123.ino:467
  irrecv.enableIRIn();  //적외선 센서 활성화
  Serial.println("mq131 start...");
    2698:	8c ed       	ldi	r24, 0xDC	; 220
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:51
/**
 * Init core variables
 */
 void MQ131Class::begin(uint8_t _pinPower, uint8_t _pinSensor, MQ131Model _model, uint32_t _RL, Stream* _debugStream) { 
  // Define if debug is requested
  enableDebug = _debugStream != NULL;
    26a0:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <MQ131+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:52
  debugStream = _debugStream;
    26a4:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <MQ131+0x5>
    26a8:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <MQ131+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:55
  
 	// Setup the model
 	model = _model;
    26ac:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <MQ131+0x3>
    26b0:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <MQ131+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:58

 	// Store the circuit info (pin and load resistance)
 	pinPower = _pinPower;
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <MQ131+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:59
 	pinSensor = _pinSensor;
    26ba:	89 e1       	ldi	r24, 0x19	; 25
    26bc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <MQ131+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:60
 	valueRL = _RL;
    26c0:	80 e4       	ldi	r24, 0x40	; 64
    26c2:	92 e4       	ldi	r25, 0x42	; 66
    26c4:	af e0       	ldi	r26, 0x0F	; 15
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <MQ131+0x9>
    26cc:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <MQ131+0xa>
    26d0:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <MQ131+0xb>
    26d4:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <MQ131+0xc>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    26d8:	8a e0       	ldi	r24, 0x0A	; 10
    26da:	97 ea       	ldi	r25, 0xA7	; 167
    26dc:	af ee       	ldi	r26, 0xEF	; 239
    26de:	b4 e4       	ldi	r27, 0x44	; 68
    26e0:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <MQ131+0x15>
    26e4:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <MQ131+0x16>
    26e8:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <MQ131+0x17>
    26ec:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    26f0:	80 e5       	ldi	r24, 0x50	; 80
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e0       	ldi	r26, 0x00	; 0
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <MQ131+0x11>
    26fc:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <MQ131+0x12>
    2700:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <MQ131+0x13>
    2704:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <MQ131+0x14>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:80
      setTimeToRead(MQ131_DEFAULT_LO_CONCENTRATION_TIME2READ);
      break;
  }

 	// Setup pin mode
 	pinMode(pinPower, OUTPUT);
    2708:	61 e0       	ldi	r22, 0x01	; 1
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:81
 	pinMode(pinSensor, INPUT);
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <MQ131+0x8>
    2716:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:84

  // Switch off the heater as default status
  digitalWrite(pinPower, LOW);
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <MQ131+0x7>
    2720:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    2724:	88 e4       	ldi	r24, 0x48	; 72
    2726:	91 e6       	ldi	r25, 0x61	; 97
    2728:	a4 e7       	ldi	r26, 0x74	; 116
    272a:	b4 e4       	ldi	r27, 0x44	; 68
    272c:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <MQ131+0x15>
    2730:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <MQ131+0x16>
    2734:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <MQ131+0x17>
    2738:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    273c:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <MQ131+0x11>
    2740:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <MQ131+0x12>
    2744:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <MQ131+0x13>
    2748:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <MQ131+0x14>
setup():
C:\Users\dlcks\Desktop\123123123/123123123.ino:472
  MQ131.begin(DC18_EN, OZONE, LOW_CONCENTRATION, 1000000);
  MQ131.setR0(977.52);
  MQ131.setTimeToRead(0);
  
  Serial.println("pin config start...");
    274c:	8b ee       	ldi	r24, 0xEB	; 235
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:473
  pinMode(FAN1_EN,OUTPUT);
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	89 e0       	ldi	r24, 0x09	; 9
    2758:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:474
  pinMode(DC18_EN, OUTPUT);
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:475
  pinMode(PLASMA1_EN,OUTPUT);
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	85 e0       	ldi	r24, 0x05	; 5
    2768:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:476
  pinMode(PLASMA2_EN,OUTPUT);
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:477
  pinMode(AUTO_LED,OUTPUT);
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	8a e1       	ldi	r24, 0x1A	; 26
    2778:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:478
  pinMode(FAN1_EN, OUTPUT);
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	89 e0       	ldi	r24, 0x09	; 9
    2780:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:479
  pinMode(PWR_LED, OUTPUT);
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	8d e0       	ldi	r24, 0x0D	; 13
    2788:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:480
  pinMode(FAN_RLED,OUTPUT);
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	8f e0       	ldi	r24, 0x0F	; 15
    2790:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:481
  pinMode(FAN_BLED,OUTPUT);
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	80 e1       	ldi	r24, 0x10	; 16
    2798:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:482
  pinMode(PLASMA_LED,OUTPUT);
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	8e e0       	ldi	r24, 0x0E	; 14
    27a0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:483
  pinMode(UV_EN,OUTPUT);
    27a4:	61 e0       	ldi	r22, 0x01	; 1
    27a6:	85 e1       	ldi	r24, 0x15	; 21
    27a8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:484
  module.clearDisplay();
    27ac:	8f ec       	ldi	r24, 0xCF	; 207
    27ae:	95 e0       	ldi	r25, 0x05	; 5
    27b0:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:486
  
  pinMode(PLASMA1_CH,INPUT);
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	87 e0       	ldi	r24, 0x07	; 7
    27b8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:487
  pinMode(FAN1_CH,INPUT);
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	8a e0       	ldi	r24, 0x0A	; 10
    27c0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:488
  pinMode(PLASMA2_CH,INPUT);
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	88 e0       	ldi	r24, 0x08	; 8
    27c8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:489
  pinMode(UV_CH,INPUT);
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	84 e0       	ldi	r24, 0x04	; 4
    27d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <pinMode>
C:\Users\dlcks\Desktop\123123123/123123123.ino:490
  Serial.println("end...");
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
ReceiveIR():
C:\Users\dlcks\Desktop\123123123/123123123.ino:346
          WindDirectionControl();
        }
      break;
      case IR_Button_13:  // 1초
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_ONE_DUTY;
    27dc:	b4 e1       	ldi	r27, 0x14	; 20
    27de:	6b 2e       	mov	r6, r27
    27e0:	71 2c       	mov	r7, r1
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:226

// Check for repeat -- like a NEC repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], 2250)
            && matchMark(aResults->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
        aResults->bits = 0;
        aResults->value = 0xFFFFFFFF;
    27e2:	88 24       	eor	r8, r8
    27e4:	8a 94       	dec	r8
    27e6:	98 2c       	mov	r9, r8
    27e8:	54 01       	movw	r10, r8
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1376
 * aResults->decode_type
 **********************************************************************************************************************/
bool IRrecv::decode(decode_results *aResults) {
    static bool sDeprecationMessageSent = false;

    if (irparams.StateForISR != IR_REC_STATE_STOP) {
    27ea:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <main+0x2a0>
    27f2:	ed c1       	rjmp	.+986    	; 0x2bce <main+0x67a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1380
        return false;
    }

    if (!sDeprecationMessageSent) {
    27f4:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <IRrecv::decode(decode_results*)::sDeprecationMessageSent>
    27f8:	81 11       	cpse	r24, r1
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <main+0x2b6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1381
        Serial.println(
    27fc:	86 e0       	ldi	r24, 0x06	; 6
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    2800:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1383
                "The function decode(&results)) is deprecated and may not work as expected! Just use decode() without a parameter and IrReceiver.decodedIRData.<fieldname> .");
        sDeprecationMessageSent = true;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <IRrecv::decode(decode_results*)::sDeprecationMessageSent>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1387
    }

    // copy for usage by legacy programs
    aResults->rawbuf = irparams.rawbuf;
    280a:	8c ee       	ldi	r24, 0xEC	; 236
    280c:	94 e0       	ldi	r25, 0x04	; 4
    280e:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <results+0xd>
    2812:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <results+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1388
    aResults->rawlen = irparams.rawlen;
    2816:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <irparams+0x8>
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <results+0xf>
    2820:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <results+0xe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1389
    if (irparams.OverflowFlag) {
    2824:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <irparams+0x7>
    2828:	22 23       	and	r18, r18
    282a:	21 f0       	breq	.+8      	; 0x2834 <main+0x2e0>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1391
        // Copy overflow flag to decodedIRData.flags
        irparams.OverflowFlag = false;
    282c:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1392
        irparams.rawlen = 0; // otherwise we have OverflowFlag again at next ISR call
    2830:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1395
        DEBUG_PRINTLN("Overflow happened");
    }
    aResults->overflow = irparams.OverflowFlag;
    2834:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <irparams+0x7>
    2838:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <results+0x10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1396
    aResults->value = 0;
    283c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <results+0x4>
    2840:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <results+0x5>
    2844:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <results+0x6>
    2848:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1398

    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST; // for print
    284c:	20 e8       	ldi	r18, 0x80	; 128
    284e:	20 93 bd 05 	sts	0x05BD, r18	; 0x8005bd <irrecv+0x9>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2852:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <irparams+0xb>
    2856:	30 91 ef 04 	lds	r19, 0x04EF	; 0x8004ef <irparams+0xc>
    285a:	26 58       	subi	r18, 0x86	; 134
    285c:	31 09       	sbc	r19, r1
    285e:	2c 35       	cpi	r18, 0x5C	; 92
    2860:	31 05       	cpc	r19, r1
    2862:	08 f0       	brcs	.+2      	; 0x2866 <main+0x312>
    2864:	62 c0       	rjmp	.+196    	; 0x292a <main+0x3d6>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:297
    }
    offset++;

// Check for repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], NEC_REPEAT_HEADER_SPACE)
            && matchMark(aResults->rawbuf[offset + 1], NEC_BIT_MARK)) {
    2866:	84 30       	cpi	r24, 0x04	; 4
    2868:	91 05       	cpc	r25, r1
    286a:	21 f5       	brne	.+72     	; 0x28b4 <main+0x360>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    286c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <irparams+0xd>
    2870:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <irparams+0xe>
    2874:	81 97       	sbiw	r24, 0x21	; 33
    2876:	48 97       	sbiw	r24, 0x18	; 24
    2878:	08 f0       	brcs	.+2      	; 0x287c <main+0x328>
    287a:	57 c0       	rjmp	.+174    	; 0x292a <main+0x3d6>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    287c:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <irparams+0xf>
    2880:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <irparams+0x10>
    2884:	08 97       	sbiw	r24, 0x08	; 8
    2886:	08 97       	sbiw	r24, 0x08	; 8
    2888:	08 f0       	brcs	.+2      	; 0x288c <main+0x338>
    288a:	4f c0       	rjmp	.+158    	; 0x292a <main+0x3d6>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:298
        aResults->bits = 0;
    288c:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:299
        aResults->value = 0xFFFFFFFF;
    2890:	80 92 86 03 	sts	0x0386, r8	; 0x800386 <results+0x4>
    2894:	90 92 87 03 	sts	0x0387, r9	; 0x800387 <results+0x5>
    2898:	a0 92 88 03 	sts	0x0388, r10	; 0x800388 <results+0x6>
    289c:	b0 92 89 03 	sts	0x0389, r11	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:300
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    28a0:	81 e8       	ldi	r24, 0x81	; 129
    28a2:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:301
        decodedIRData.protocol = NEC;
    28a6:	87 e0       	ldi	r24, 0x07	; 7
    28a8:	90 e0       	ldi	r25, 0x00	; 0
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:276

    aResults->bits = KASEIKYO_BITS;
    aResults->value = decodedIRData.decodedRawData;
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    aResults->decode_type = PANASONIC;
    decodedIRData.protocol = PANASONIC;
    28aa:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <irrecv+0x1>
    28ae:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <irrecv>
    28b2:	1a c1       	rjmp	.+564    	; 0x2ae8 <main+0x594>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:306
        return true;
    }

    // Check we have the right amount of data (32). +4 for initial gap, start bit mark and space + stop bit mark
    if (aResults->rawlen != (2 * NEC_BITS) + 4) {
    28b4:	84 34       	cpi	r24, 0x44	; 68
    28b6:	91 05       	cpc	r25, r1
    28b8:	c1 f5       	brne	.+112    	; 0x292a <main+0x3d6>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    28ba:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <irparams+0xd>
    28be:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <irparams+0xe>
    28c2:	82 54       	subi	r24, 0x42	; 66
    28c4:	91 09       	sbc	r25, r1
    28c6:	8f 97       	sbiw	r24, 0x2f	; 47
    28c8:	80 f5       	brcc	.+96     	; 0x292a <main+0x3d6>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:322
        DEBUG_PRINTLN("Header space length is wrong");
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(NEC_BITS, offset, NEC_BIT_MARK, NEC_ONE_SPACE, NEC_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    28ca:	20 e3       	ldi	r18, 0x30	; 48
    28cc:	32 e0       	ldi	r19, 0x02	; 2
    28ce:	40 e9       	ldi	r20, 0x90	; 144
    28d0:	56 e0       	ldi	r21, 0x06	; 6
    28d2:	60 e3       	ldi	r22, 0x30	; 48
    28d4:	72 e0       	ldi	r23, 0x02	; 2
    28d6:	80 e2       	ldi	r24, 0x20	; 32
    28d8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    28dc:	88 23       	and	r24, r24
    28de:	29 f1       	breq	.+74     	; 0x292a <main+0x3d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:329
        DEBUG_PRINTLN(F("Decode failed"));
        return false;
    }

    // Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * NEC_BITS)], NEC_BIT_MARK)) {
    28e0:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    28e4:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    28e8:	ea 57       	subi	r30, 0x7A	; 122
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	08 97       	sbiw	r24, 0x08	; 8
    28f2:	08 97       	sbiw	r24, 0x08	; 8
    28f4:	d0 f4       	brcc	.+52     	; 0x292a <main+0x3d6>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:336
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    28f6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    28fa:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    28fe:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    2902:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    2906:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    290a:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    290e:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    2912:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:337
    aResults->bits = NEC_BITS;
    2916:	80 e2       	ldi	r24, 0x20	; 32
    2918:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:338
    aResults->decode_type = NEC;
    291c:	87 e0       	ldi	r24, 0x07	; 7
    291e:	90 e0       	ldi	r25, 0x00	; 0
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:275
    }

    aResults->bits = KASEIKYO_BITS;
    aResults->value = decodedIRData.decodedRawData;
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    aResults->decode_type = PANASONIC;
    2920:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <results+0x1>
    2924:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <results>
    2928:	c0 cf       	rjmp	.-128    	; 0x28aa <main+0x356>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:156
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    uint8_t bits = 0;
    unsigned int offset = 0;  // Dont skip first space, check its size

    if (aResults->rawlen < (2 * SONY_BITS_MIN) + 2) {
    292a:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <results+0xe>
    292e:	50 91 91 03 	lds	r21, 0x0391	; 0x800391 <results+0xf>
    2932:	4a 31       	cpi	r20, 0x1A	; 26
    2934:	51 05       	cpc	r21, r1
    2936:	08 f4       	brcc	.+2      	; 0x293a <main+0x3e6>
    2938:	53 c0       	rjmp	.+166    	; 0x29e0 <main+0x48c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:162
        return false;
    }

    // Some Sony's deliver repeats fast after first
    // unfortunately can't spot difference from of repeat from two fast clicks
    if (aResults->rawbuf[0] < (SONY_DOUBLE_SPACE_USECS / MICROS_PER_TICK)) {
    293a:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    293e:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	0a 97       	sbiw	r24, 0x0a	; 10
    2948:	80 f4       	brcc	.+32     	; 0x296a <main+0x416>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:164
        DEBUG_PRINTLN("IR Gap found");
        aResults->bits = 0;
    294a:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:165
        aResults->value = 0xFFFFFFFF;
    294e:	80 92 86 03 	sts	0x0386, r8	; 0x800386 <results+0x4>
    2952:	90 92 87 03 	sts	0x0387, r9	; 0x800387 <results+0x5>
    2956:	a0 92 88 03 	sts	0x0388, r10	; 0x800388 <results+0x6>
    295a:	b0 92 89 03 	sts	0x0389, r11	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:166
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:167
        decodedIRData.protocol = SONY;
    2964:	82 e1       	ldi	r24, 0x12	; 18
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 cf       	rjmp	.-192    	; 0x28aa <main+0x356>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	84 97       	sbiw	r24, 0x24	; 36
    2970:	4a 97       	sbiw	r24, 0x1a	; 26
    2972:	b0 f5       	brcc	.+108    	; 0x29e0 <main+0x48c>
    2974:	23 e0       	ldi	r18, 0x03	; 3
    2976:	30 e0       	ldi	r19, 0x00	; 0
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:153

#if !defined(NO_LEGACY_COMPATIBILITY)
#define SONY_DOUBLE_SPACE_USECS    500 // usually see 713 - not using ticks as get number wrap around
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    uint8_t bits = 0;
    2978:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:152
}

#if !defined(NO_LEGACY_COMPATIBILITY)
#define SONY_DOUBLE_SPACE_USECS    500 // usually see 713 - not using ticks as get number wrap around
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    297a:	c1 2c       	mov	r12, r1
    297c:	d1 2c       	mov	r13, r1
    297e:	76 01       	movw	r14, r12
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2980:	84 81       	ldd	r24, Z+4	; 0x04
    2982:	95 81       	ldd	r25, Z+5	; 0x05
    2984:	08 97       	sbiw	r24, 0x08	; 8
    2986:	08 97       	sbiw	r24, 0x08	; 8
    2988:	58 f5       	brcc	.+86     	; 0x29e0 <main+0x48c>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:189
            return false;
        }
        offset++;

        // bit value is determined by length of the mark
        if (matchMark(aResults->rawbuf[offset], SONY_ONE_MARK)) {
    298a:	86 81       	ldd	r24, Z+6	; 0x06
    298c:	97 81       	ldd	r25, Z+7	; 0x07
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    298e:	82 31       	cpi	r24, 0x12	; 18
    2990:	91 05       	cpc	r25, r1
    2992:	e0 f0       	brcs	.+56     	; 0x29cc <main+0x478>
    2994:	80 97       	sbiw	r24, 0x20	; 32
    2996:	20 f5       	brcc	.+72     	; 0x29e0 <main+0x48c>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:190
            data = (data << 1) | 1;
    2998:	cc 0c       	add	r12, r12
    299a:	dd 1c       	adc	r13, r13
    299c:	ee 1c       	adc	r14, r14
    299e:	ff 1c       	adc	r15, r15
    29a0:	68 94       	set
    29a2:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:197
            data = (data << 1) | 0;
        } else {
            return false;
        }
        offset++;
        bits++;
    29a4:	6f 5f       	subi	r22, 0xFF	; 255
    29a6:	2e 5f       	subi	r18, 0xFE	; 254
    29a8:	3f 4f       	sbci	r19, 0xFF	; 255
    29aa:	34 96       	adiw	r30, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:179
        return false;
    }
    offset++;

    // MSB first - Not compatible to standard, which says LSB first :-(
    while (offset + 1 < aResults->rawlen) {
    29ac:	24 17       	cp	r18, r20
    29ae:	35 07       	cpc	r19, r21
    29b0:	38 f3       	brcs	.-50     	; 0x2980 <main+0x42c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:201
        offset++;
        bits++;

    }

    aResults->bits = bits;
    29b2:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:202
    aResults->value = data;
    29b6:	c0 92 86 03 	sts	0x0386, r12	; 0x800386 <results+0x4>
    29ba:	d0 92 87 03 	sts	0x0387, r13	; 0x800387 <results+0x5>
    29be:	e0 92 88 03 	sts	0x0388, r14	; 0x800388 <results+0x6>
    29c2:	f0 92 89 03 	sts	0x0389, r15	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:203
    aResults->decode_type = SONY;
    29c6:	82 e1       	ldi	r24, 0x12	; 18
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	aa cf       	rjmp	.-172    	; 0x2920 <main+0x3cc>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    29cc:	89 30       	cpi	r24, 0x09	; 9
    29ce:	91 05       	cpc	r25, r1
    29d0:	38 f0       	brcs	.+14     	; 0x29e0 <main+0x48c>
    29d2:	41 97       	sbiw	r24, 0x11	; 17
    29d4:	28 f4       	brcc	.+10     	; 0x29e0 <main+0x48c>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:192

        // bit value is determined by length of the mark
        if (matchMark(aResults->rawbuf[offset], SONY_ONE_MARK)) {
            data = (data << 1) | 1;
        } else if (matchMark(aResults->rawbuf[offset], SONY_ZERO_MARK)) {
            data = (data << 1) | 0;
    29d6:	cc 0c       	add	r12, r12
    29d8:	dd 1c       	adc	r13, r13
    29da:	ee 1c       	adc	r14, r14
    29dc:	ff 1c       	adc	r15, r15
    29de:	e2 cf       	rjmp	.-60     	; 0x29a4 <main+0x450>
initBiphaselevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:582
uint16_t sCurrentTimingIntervals; // Number of aBiphaseTimeUnit intervals of the current rawbuf[sBiphaseDecodeRawbuffOffset] timing.
uint8_t sUsedTimingIntervals;       // Number of already used intervals of sCurrentTimingIntervals.
uint16_t sBiphaseTimeUnit;

void IRrecv::initBiphaselevel(uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit) {
    sBiphaseDecodeRawbuffOffset = aRCDecodeRawbuffOffset;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:583
    sBiphaseTimeUnit = aBiphaseTimeUnit;
    29e6:	a9 e7       	ldi	r26, 0x79	; 121
    29e8:	b3 e0       	ldi	r27, 0x03	; 3
    29ea:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <sBiphaseTimeUnit+0x1>
    29ee:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <sBiphaseTimeUnit>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:584
    sUsedTimingIntervals = 0;
    29f2:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <sUsedTimingIntervals>
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:147
        DEBUG_PRINTLN(" is not between 11 and 26");
        return false;
    }

// Check start bit, the first space is included in the gap
    if (getBiphaselevel() != MARK) {
    29f6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <main+0x4ac>
    29fe:	e2 c2       	rjmp	.+1476   	; 0x2fc4 <main+0xa70>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:131
 * 1 Start bit for RC5X    _____| ...
 *
 */
bool IRrecv::decodeRC5() {
    uint8_t tBitIndex;
    uint32_t tDecodedRawData = 0;
    2a00:	c1 2c       	mov	r12, r1
    2a02:	d1 2c       	mov	r13, r1
    2a04:	76 01       	movw	r14, r12
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:156
    }

    /*
     * Get data bits - MSB first
     */
    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    2a06:	c0 e0       	ldi	r28, 0x00	; 0
decodeRC5():
    2a08:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
    2a0c:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
    2a10:	90 85       	ldd	r25, Z+8	; 0x08
    2a12:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
    2a16:	89 17       	cp	r24, r25
    2a18:	e0 f4       	brcc	.+56     	; 0x2a52 <main+0x4fe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:157
        uint8_t tStartLevel = getBiphaselevel();
    2a1a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    2a1e:	d8 2f       	mov	r29, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:158
        uint8_t tEndLevel = getBiphaselevel();
    2a20:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:160

        if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
    2a24:	d1 11       	cpse	r29, r1
    2a26:	0b c0       	rjmp	.+22     	; 0x2a3e <main+0x4ea>
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <main+0x4da>
    2a2c:	cb c2       	rjmp	.+1430   	; 0x2fc4 <main+0xa70>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:162
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;
    2a2e:	cc 0c       	add	r12, r12
    2a30:	dd 1c       	adc	r13, r13
    2a32:	ee 1c       	adc	r14, r14
    2a34:	ff 1c       	adc	r15, r15
    2a36:	68 94       	set
    2a38:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:156
    }

    /*
     * Get data bits - MSB first
     */
    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    2a3a:	cf 5f       	subi	r28, 0xFF	; 255
    2a3c:	e5 cf       	rjmp	.-54     	; 0x2a08 <main+0x4b4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:163
        uint8_t tEndLevel = getBiphaselevel();

        if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;
        } else if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
    2a3e:	d1 30       	cpi	r29, 0x01	; 1
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <main+0x4f0>
    2a42:	c0 c2       	rjmp	.+1408   	; 0x2fc4 <main+0xa70>
    2a44:	81 11       	cpse	r24, r1
    2a46:	be c2       	rjmp	.+1404   	; 0x2fc4 <main+0xa70>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:165
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 0;
    2a48:	cc 0c       	add	r12, r12
    2a4a:	dd 1c       	adc	r13, r13
    2a4c:	ee 1c       	adc	r14, r14
    2a4e:	ff 1c       	adc	r15, r15
    2a50:	f4 cf       	rjmp	.-24     	; 0x2a3a <main+0x4e6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:175
            return false;
        }
    }

    // Success
    decodedIRData.numberOfBits = tBitIndex; // must be RC5_BITS
    2a52:	c0 93 bc 05 	sts	0x05BC, r28	; 0x8005bc <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:179

    LongUnion tValue;
    tValue.ULong = tDecodedRawData;
    decodedIRData.decodedRawData = tDecodedRawData;
    2a56:	c0 92 be 05 	sts	0x05BE, r12	; 0x8005be <irrecv+0xa>
    2a5a:	d0 92 bf 05 	sts	0x05BF, r13	; 0x8005bf <irrecv+0xb>
    2a5e:	e0 92 c0 05 	sts	0x05C0, r14	; 0x8005c0 <irrecv+0xc>
    2a62:	f0 92 c1 05 	sts	0x05C1, r15	; 0x8005c1 <irrecv+0xd>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:180
    decodedIRData.command = tValue.UByte.LowByte & 0x3F;
    2a66:	8c 2d       	mov	r24, r12
    2a68:	8f 73       	andi	r24, 0x3F	; 63
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <irrecv+0x5>
    2a70:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:181
    decodedIRData.address = (tValue.UWord.LowWord >> RC5_COMMAND_BITS) & 0x1F;
    2a74:	96 01       	movw	r18, r12
    2a76:	46 e0       	ldi	r20, 0x06	; 6
    2a78:	36 95       	lsr	r19
    2a7a:	27 95       	ror	r18
    2a7c:	4a 95       	dec	r20
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <main+0x524>
    2a80:	2f 71       	andi	r18, 0x1F	; 31
    2a82:	33 27       	eor	r19, r19
    2a84:	30 93 b7 05 	sts	0x05B7, r19	; 0x8005b7 <irrecv+0x3>
    2a88:	20 93 b6 05 	sts	0x05B6, r18	; 0x8005b6 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:184

    // Get the inverted 7. command bit for RC5X, the inverted value is always 1 for RC5 and serves as a second start bit.
    if ((tValue.UWord.LowWord & (1 << (RC5_TOGGLE_BIT + RC5_ADDRESS_BITS + RC5_COMMAND_BITS))) == 0) {
    2a8c:	96 01       	movw	r18, r12
    2a8e:	22 27       	eor	r18, r18
    2a90:	30 71       	andi	r19, 0x10	; 16
    2a92:	23 2b       	or	r18, r19
    2a94:	31 f4       	brne	.+12     	; 0x2aa2 <main+0x54e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:185
        decodedIRData.command += 0x40;
    2a96:	80 5c       	subi	r24, 0xC0	; 192
    2a98:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9a:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <irrecv+0x5>
    2a9e:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:188
    }

    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    2aa2:	80 e8       	ldi	r24, 0x80	; 128
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:189
    if (tValue.UByte.MidLowByte & 0x8) {
    2aa4:	d3 fc       	sbrc	r13, 3
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:190
        decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
    2aa6:	88 e8       	ldi	r24, 0x88	; 136
    2aa8:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:194
    }

    // check for repeat
    if (decodedIRData.rawDataPtr->rawbuf[0] < (RC5_REPEAT_PERIOD / MICROS_PER_TICK)) {
    2aac:	81 85       	ldd	r24, Z+9	; 0x09
    2aae:	92 85       	ldd	r25, Z+10	; 0x0a
    2ab0:	83 3e       	cpi	r24, 0xE3	; 227
    2ab2:	98 40       	sbci	r25, 0x08	; 8
    2ab4:	28 f4       	brcc	.+10     	; 0x2ac0 <main+0x56c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:195
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    2ab6:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <irrecv+0x9>
    2aba:	81 60       	ori	r24, 0x01	; 1
    2abc:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:198
    }

    decodedIRData.protocol = RC5;
    2ac0:	8e e0       	ldi	r24, 0x0E	; 14
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:458
    // check for repeat, do not check toggle bit yet
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((RC6_REPEAT_SPACE + (RC6_REPEAT_SPACE / 2)) / MICROS_PER_TICK)) {
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    }

    decodedIRData.protocol = RC6;
    2ac4:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <irrecv+0x1>
    2ac8:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <irrecv>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1433
#endif

#if defined(DECODE_RC6)
    DEBUG_PRINTLN("Attempting RC6 decode");
    if (decodeRC6())  {
        aResults->bits = decodedIRData.numberOfBits;
    2acc:	c0 93 8a 03 	sts	0x038A, r28	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1434
        aResults->value = decodedIRData.decodedRawData;
    2ad0:	c0 92 86 03 	sts	0x0386, r12	; 0x800386 <results+0x4>
    2ad4:	d0 92 87 03 	sts	0x0387, r13	; 0x800387 <results+0x5>
    2ad8:	e0 92 88 03 	sts	0x0388, r14	; 0x800388 <results+0x6>
    2adc:	f0 92 89 03 	sts	0x0389, r15	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:1435
        aResults->decode_type = RC6;
    2ae0:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <results+0x1>
    2ae4:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <results>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2ae8:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <results+0x4>
    2aec:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <results+0x5>
    2af0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <results+0x6>
    2af4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <results+0x7>
    2af8:	4a e0       	ldi	r20, 0x0A	; 10
    2afa:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.73]>
write():
    2afe:	81 e9       	ldi	r24, 0x91	; 145
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
ReceiveIR():
C:\Users\dlcks\Desktop\123123123/123123123.ino:277
}

void ReceiveIR(){
  if(irrecv.decode(&results)){ //적외선 신호 해석합니다.
    Serial.println(results.value); // 적외선 신호값을 출력
    if(results.value == IR_Button_11 && Power)
    2b06:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <results+0x4>
    2b0a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <results+0x5>
    2b0e:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <results+0x6>
    2b12:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <results+0x7>
    2b16:	8f 32       	cpi	r24, 0x2F	; 47
    2b18:	90 4d       	sbci	r25, 0xD0	; 208
    2b1a:	af 45       	sbci	r26, 0x5F	; 95
    2b1c:	b0 4a       	sbci	r27, 0xA0	; 160
    2b1e:	69 f5       	brne	.+90     	; 0x2b7a <main+0x626>
    2b20:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    2b24:	88 23       	and	r24, r24
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <main+0x5d6>
    2b28:	8e c5       	rjmp	.+2844   	; 0x3646 <main+0x10f2>
C:\Users\dlcks\Desktop\123123123/123123123.ino:279
    {
      if(++push_cnt == N_3MIN_PUSHING){
    2b2a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <push_cnt>
    2b2e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <push_cnt+0x1>
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <push_cnt+0x1>
    2b38:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <push_cnt>
    2b3c:	88 3b       	cpi	r24, 0xB8	; 184
    2b3e:	9b 40       	sbci	r25, 0x0B	; 11
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <main+0x5f0>
    2b42:	b0 c4       	rjmp	.+2400   	; 0x34a4 <main+0xf50>
C:\Users\dlcks\Desktop\123123123/123123123.ino:280
        plasma_cnt = 0;
    2b44:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    2b48:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:281
        plasma_duty = N_PLASMA_ZEORTHR_DUTY;
    2b4c:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    2b50:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:282
        plasma_period = N_PLASMA_ZEORTHR_PERIOD;
    2b54:	8c e2       	ldi	r24, 0x2C	; 44
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <plasma_period+0x1>
    2b5c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <plasma_period>
C:\Users\dlcks\Desktop\123123123/123123123.ino:283
        if(Power){
    2b60:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    2b64:	88 23       	and	r24, r24
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <main+0x616>
    2b68:	6e c5       	rjmp	.+2780   	; 0x3646 <main+0x10f2>
C:\Users\dlcks\Desktop\123123123/123123123.ino:284
        digitalWrite(AUTO_LED,0);
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	8a e1       	ldi	r24, 0x1A	; 26
    2b6e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:285
        digitalWrite(PLASMA_LED,1);
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	8e e0       	ldi	r24, 0x0E	; 14
    2b76:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:289
        }
      }else if(push_cnt) push_cnt = 0;
    }
    switch(results.value)
    2b7a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <results+0x4>
    2b7e:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <results+0x5>
    2b82:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <results+0x6>
    2b86:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <results+0x7>
    2b8a:	8f 34       	cpi	r24, 0x4F	; 79
    2b8c:	20 eb       	ldi	r18, 0xB0	; 176
    2b8e:	92 07       	cpc	r25, r18
    2b90:	2f e5       	ldi	r18, 0x5F	; 95
    2b92:	a2 07       	cpc	r26, r18
    2b94:	20 ea       	ldi	r18, 0xA0	; 160
    2b96:	b2 07       	cpc	r27, r18
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <main+0x648>
    2b9a:	6a c5       	rjmp	.+2772   	; 0x3670 <main+0x111c>
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <main+0x64c>
    2b9e:	cf c4       	rjmp	.+2462   	; 0x353e <main+0xfea>
    2ba0:	8f 3a       	cpi	r24, 0xAF	; 175
    2ba2:	20 e5       	ldi	r18, 0x50	; 80
    2ba4:	92 07       	cpc	r25, r18
    2ba6:	2f e5       	ldi	r18, 0x5F	; 95
    2ba8:	a2 07       	cpc	r26, r18
    2baa:	20 ea       	ldi	r18, 0xA0	; 160
    2bac:	b2 07       	cpc	r27, r18
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <main+0x65e>
    2bb0:	31 c5       	rjmp	.+2658   	; 0x3614 <main+0x10c0>
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <main+0x662>
    2bb4:	83 c4       	rjmp	.+2310   	; 0x34bc <main+0xf68>
    2bb6:	8f 3c       	cpi	r24, 0xCF	; 207
    2bb8:	90 43       	sbci	r25, 0x30	; 48
    2bba:	af 45       	sbci	r26, 0x5F	; 95
    2bbc:	b0 4a       	sbci	r27, 0xA0	; 160
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <main+0x66e>
    2bc0:	46 c5       	rjmp	.+2700   	; 0x364e <main+0x10fa>
resume():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:188
 * Restart the ISR state machine
 * Enable receiving of the next value
 */
void IRrecv::resume() {
    // check allows to call resume at arbitrary places or more than once
    if (irparams.StateForISR == IR_REC_STATE_STOP) {
    2bc2:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <irparams>
    2bc6:	83 30       	cpi	r24, 0x03	; 3
    2bc8:	11 f4       	brne	.+4      	; 0x2bce <main+0x67a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:189
        irparams.StateForISR = IR_REC_STATE_IDLE;
    2bca:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <irparams>
loop():
C:\Users\dlcks\Desktop\123123123/123123123.ino:496
}

void loop()
{
  ReceiveIR();
  if(Power){
    2bce:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <main+0x684>
    2bd6:	33 c7       	rjmp	.+3686   	; 0x3a3e <main+0x14ea>
PlasmaControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:394
    break;
  }
}

void PlasmaControl(){
  switch(plasma_flag)
    2bd8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <plasma_flag>
    2bdc:	88 23       	and	r24, r24
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <main+0x68e>
    2be0:	6c c5       	rjmp	.+2776   	; 0x36ba <main+0x1166>
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <main+0x694>
    2be6:	a2 c5       	rjmp	.+2884   	; 0x372c <main+0x11d8>
SegmentControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:217
  }
  
}
void SegmentControl()
{
  if(N_SEGMENT_PERIOD == ++segment_cnt){
    2be8:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    2bec:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <segment_cnt+0x1>
    2bf6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <segment_cnt>
    2bfa:	80 3d       	cpi	r24, 0xD0	; 208
    2bfc:	97 40       	sbci	r25, 0x07	; 7
    2bfe:	79 f4       	brne	.+30     	; 0x2c1e <main+0x6ca>
C:\Users\dlcks\Desktop\123123123/123123123.ino:218
    segement_flag++;
    2c00:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <segement_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:219
    segment_cnt = 0;
    2c0a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <segment_cnt+0x1>
    2c0e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <segment_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:220
    if(segement_flag > 4) segement_flag = 0;
    2c12:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    2c16:	85 30       	cpi	r24, 0x05	; 5
    2c18:	10 f0       	brcs	.+4      	; 0x2c1e <main+0x6ca>
    2c1a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <segement_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:223
  }
  
  if(segement_flag == 0){ // PM1.0
    2c1e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    2c22:	81 11       	cpse	r24, r1
    2c24:	90 c5       	rjmp	.+2848   	; 0x3746 <main+0x11f2>
C:\Users\dlcks\Desktop\123123123/123123123.ino:224
    if(1 == segment_cnt)
    2c26:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    2c2a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	c1 f4       	brne	.+48     	; 0x2c62 <main+0x70e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:226
    {
      module.clearDisplay();
    2c32:	8f ec       	ldi	r24, 0xCF	; 207
    2c34:	95 e0       	ldi	r25, 0x05	; 5
    2c36:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:227
      module.setDisplayToString("P10");
    2c3a:	0d ec       	ldi	r16, 0xCD	; 205
    2c3c:	11 e0       	ldi	r17, 0x01	; 1
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	62 ea       	ldi	r22, 0xA2	; 162
    2c46:	72 e0       	ldi	r23, 0x02	; 2
    2c48:	8f ec       	ldi	r24, 0xCF	; 207
    2c4a:	95 e0       	ldi	r25, 0x05	; 5
    2c4c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:228
      module.setDisplayDigit(1,1,true); // digit, pos, dot 0 1 2순서
    2c50:	0d eb       	ldi	r16, 0xBD	; 189
    2c52:	11 e0       	ldi	r17, 0x01	; 1
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	8f ec       	ldi	r24, 0xCF	; 207
    2c5c:	95 e0       	ldi	r25, 0x05	; 5
    2c5e:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:230
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    2c62:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    2c66:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    2c6a:	88 3e       	cpi	r24, 0xE8	; 232
    2c6c:	93 40       	sbci	r25, 0x03	; 3
    2c6e:	81 f4       	brne	.+32     	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:231
      Serial.print("pm1.0: ");
    2c70:	86 ea       	ldi	r24, 0xA6	; 166
    2c72:	92 e0       	ldi	r25, 0x02	; 2
    2c74:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:232
      Serial.println(p1dot0);
    2c78:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <p1dot0>
    2c7c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <p1dot0+0x1>
    2c80:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:233
      setSegmentInt(p1dot0);
    2c84:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <p1dot0>
    2c88:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <p1dot0+0x1>
C:\Users\dlcks\Desktop\123123123/123123123.ino:244
      module.setDisplayDigit(2,1,true);
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
      Serial.print("pm2.5: ");
      Serial.println(p2dot5);
      setSegmentInt(p2dot5);
    2c8c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <setSegmentInt(int)>
Read_dust_value():
C:\Users\dlcks\Desktop\123123123/123123123.ino:165
IRrecv irrecv(IR);  // 적외선 센서
decode_results results; // 적외선 수신번호를 저장할 값입니다.

void Read_dust_value()
{
  if(++dust_cnt == N_FIVE)
    2c90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2c94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2c9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2ca2:	88 38       	cpi	r24, 0x88	; 136
    2ca4:	93 41       	sbci	r25, 0x13	; 19
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <main+0x756>
    2ca8:	2c c1       	rjmp	.+600    	; 0x2f02 <main+0x9ae>
C:\Users\dlcks\Desktop\123123123/123123123.ino:167
  {
    dust_cnt = 0;
    2caa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2cae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
read_data_command():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:112
  return send_command_data(AM1008W_K_I2C_CTRL_CO2_CALIBRATION, range);
}

uint8_t AM1008W_K_I2C::read_data_command(void)
{
  _i2cPort->requestFrom(AM1008W_K_I2C_ADDRESS, 25);
    2cb2:	c0 91 ca 03 	lds	r28, 0x03CA	; 0x8003ca <am1008w_k_i2c+0x20>
    2cb6:	d0 91 cb 03 	lds	r29, 0x03CB	; 0x8003cb <am1008w_k_i2c+0x21>
requestFrom():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:548
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
  }

  // clamp to buffer length
  if(quantity > bufferLength){
    2cba:	4c 85       	ldd	r20, Y+12	; 0x0c
    2cbc:	5d 85       	ldd	r21, Y+13	; 0x0d
    2cbe:	49 31       	cpi	r20, 0x19	; 25
    2cc0:	51 05       	cpc	r21, r1
    2cc2:	14 f0       	brlt	.+4      	; 0x2cc8 <main+0x774>
    2cc4:	49 e1       	ldi	r20, 0x19	; 25
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:552
    quantity = bufferLength;
  }
  // perform blocking read into buffer
  uint8_t read = tw_readFrom(address, rxBuffer, quantity, sendStop);
    2cc8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2cca:	7f 85       	ldd	r23, Y+15	; 0x0f
    2ccc:	ec a1       	ldd	r30, Y+36	; 0x24
    2cce:	fd a1       	ldd	r31, Y+37	; 0x25
    2cd0:	21 e0       	ldi	r18, 0x01	; 1
    2cd2:	88 e2       	ldi	r24, 0x28	; 40
    2cd4:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:554
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2cd6:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:555
  rxBufferLength = read;
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
    2cda:	03 ec       	ldi	r16, 0xC3	; 195
    2cdc:	13 e0       	ldi	r17, 0x03	; 3
    2cde:	ca ea       	ldi	r28, 0xAA	; 170
    2ce0:	d3 e0       	ldi	r29, 0x03	; 3
read_data_command():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:115
  uint8_t idx = 0;

  while (_i2cPort->available())
    2ce2:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <am1008w_k_i2c+0x20>
    2ce6:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <am1008w_k_i2c+0x21>
    2cea:	dc 01       	movw	r26, r24
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	00 84       	ldd	r0, Z+8	; 0x08
    2cf2:	f1 85       	ldd	r31, Z+9	; 0x09
    2cf4:	e0 2d       	mov	r30, r0
    2cf6:	09 95       	icall
    2cf8:	89 2b       	or	r24, r25
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <main+0x7aa>
    2cfc:	02 c1       	rjmp	.+516    	; 0x2f02 <main+0x9ae>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:117
  { // slave may send less than requested
    uint8_t b = _i2cPort->read();
    2cfe:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <am1008w_k_i2c+0x20>
    2d02:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <am1008w_k_i2c+0x21>
    2d06:	dc 01       	movw	r26, r24
    2d08:	ed 91       	ld	r30, X+
    2d0a:	fc 91       	ld	r31, X
    2d0c:	02 84       	ldd	r0, Z+10	; 0x0a
    2d0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d10:	e0 2d       	mov	r30, r0
    2d12:	09 95       	icall
    2d14:	89 93       	st	Y+, r24
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:119
    _buffer[idx++] = b;
    if (idx == AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    2d16:	0c 17       	cp	r16, r28
    2d18:	1d 07       	cpc	r17, r29
    2d1a:	19 f7       	brne	.-58     	; 0x2ce2 <main+0x78e>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:133
    Serial.println("AM1008W_K_I2C::read_data_command : buffer is short!");
#endif
    return 1;
  }

  if (_buffer[0] != AM1008W_K_I2C_FRAME_STX)
    2d1c:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <am1008w_k_i2c>
    2d20:	26 31       	cpi	r18, 0x16	; 22
    2d22:	09 f0       	breq	.+2      	; 0x2d26 <main+0x7d2>
    2d24:	ee c0       	rjmp	.+476    	; 0x2f02 <main+0x9ae>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:142
    Serial.println(_buffer[0], HEX);
#endif
    return 2;
  }

  if (_buffer[1] != AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    2d26:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <am1008w_k_i2c+0x1>
    2d2a:	89 31       	cpi	r24, 0x19	; 25
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <main+0x7dc>
    2d2e:	e9 c0       	rjmp	.+466    	; 0x2f02 <main+0x9ae>
    2d30:	eb ea       	ldi	r30, 0xAB	; 171
    2d32:	f3 e0       	ldi	r31, 0x03	; 3
    2d34:	82 ec       	ldi	r24, 0xC2	; 194
    2d36:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:154

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
  {
    check_code ^= _buffer[i];
    2d38:	31 91       	ld	r19, Z+
    2d3a:	23 27       	eor	r18, r19
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:152
    return 3;
  }

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
    2d3c:	8e 17       	cp	r24, r30
    2d3e:	9f 07       	cpc	r25, r31
    2d40:	d9 f7       	brne	.-10     	; 0x2d38 <main+0x7e4>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:157
  {
    check_code ^= _buffer[i];
  }

  if (_buffer[AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1] != check_code)
    2d42:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <am1008w_k_i2c+0x18>
    2d46:	28 13       	cpse	r18, r24
    2d48:	dc c0       	rjmp	.+440    	; 0x2f02 <main+0x9ae>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:170
    Serial.println(check_code, HEX);
#endif
    return 4;
  }

  _pm_operation_mode = _buffer[2];
    2d4a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <am1008w_k_i2c+0x2>
    2d4e:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <am1008w_k_i2c+0x22>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:171
  _co2 = (_buffer[3] << 8) + _buffer[4];
    2d52:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <am1008w_k_i2c+0x3>
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	98 2f       	mov	r25, r24
    2d5a:	88 27       	eor	r24, r24
    2d5c:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <am1008w_k_i2c+0x4>
    2d60:	82 0f       	add	r24, r18
    2d62:	91 1d       	adc	r25, r1
    2d64:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <am1008w_k_i2c+0x24>
    2d68:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <am1008w_k_i2c+0x23>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:172
  _voc = (_buffer[5] << 8) + _buffer[6];
    2d6c:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <am1008w_k_i2c+0x5>
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	98 2f       	mov	r25, r24
    2d74:	88 27       	eor	r24, r24
    2d76:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <am1008w_k_i2c+0x6>
    2d7a:	82 0f       	add	r24, r18
    2d7c:	91 1d       	adc	r25, r1
    2d7e:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <am1008w_k_i2c+0x26>
    2d82:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <am1008w_k_i2c+0x25>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:173
  _humidity = (float)((_buffer[7] << 8) + _buffer[8]) / 10;
    2d86:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <am1008w_k_i2c+0x7>
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	76 2f       	mov	r23, r22
    2d8e:	66 27       	eor	r22, r22
    2d90:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <am1008w_k_i2c+0x8>
    2d94:	68 0f       	add	r22, r24
    2d96:	71 1d       	adc	r23, r1
    2d98:	07 2e       	mov	r0, r23
    2d9a:	00 0c       	add	r0, r0
    2d9c:	88 0b       	sbc	r24, r24
    2d9e:	99 0b       	sbc	r25, r25
    2da0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__floatsisf>
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    2db0:	1b 01       	movw	r2, r22
    2db2:	2c 01       	movw	r4, r24
    2db4:	20 92 d1 03 	sts	0x03D1, r2	; 0x8003d1 <am1008w_k_i2c+0x27>
    2db8:	30 92 d2 03 	sts	0x03D2, r3	; 0x8003d2 <am1008w_k_i2c+0x28>
    2dbc:	40 92 d3 03 	sts	0x03D3, r4	; 0x8003d3 <am1008w_k_i2c+0x29>
    2dc0:	50 92 d4 03 	sts	0x03D4, r5	; 0x8003d4 <am1008w_k_i2c+0x2a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:174
  _temperature = (float)((_buffer[9] << 8) + _buffer[10] - 500) / 10;
    2dc4:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <am1008w_k_i2c+0x9>
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	76 2f       	mov	r23, r22
    2dcc:	66 27       	eor	r22, r22
    2dce:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <am1008w_k_i2c+0xa>
    2dd2:	68 0f       	add	r22, r24
    2dd4:	71 1d       	adc	r23, r1
    2dd6:	64 5f       	subi	r22, 0xF4	; 244
    2dd8:	71 40       	sbci	r23, 0x01	; 1
    2dda:	07 2e       	mov	r0, r23
    2ddc:	00 0c       	add	r0, r0
    2dde:	88 0b       	sbc	r24, r24
    2de0:	99 0b       	sbc	r25, r25
    2de2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__floatsisf>
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    2df2:	6b 01       	movw	r12, r22
    2df4:	7c 01       	movw	r14, r24
    2df6:	c0 92 d5 03 	sts	0x03D5, r12	; 0x8003d5 <am1008w_k_i2c+0x2b>
    2dfa:	d0 92 d6 03 	sts	0x03D6, r13	; 0x8003d6 <am1008w_k_i2c+0x2c>
    2dfe:	e0 92 d7 03 	sts	0x03D7, r14	; 0x8003d7 <am1008w_k_i2c+0x2d>
    2e02:	f0 92 d8 03 	sts	0x03D8, r15	; 0x8003d8 <am1008w_k_i2c+0x2e>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:175
  _pm1p0 = (_buffer[11] << 8) + _buffer[12];
    2e06:	60 91 b5 03 	lds	r22, 0x03B5	; 0x8003b5 <am1008w_k_i2c+0xb>
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	76 2f       	mov	r23, r22
    2e0e:	66 27       	eor	r22, r22
    2e10:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <am1008w_k_i2c+0xc>
    2e14:	68 0f       	add	r22, r24
    2e16:	71 1d       	adc	r23, r1
    2e18:	70 93 da 03 	sts	0x03DA, r23	; 0x8003da <am1008w_k_i2c+0x30>
    2e1c:	60 93 d9 03 	sts	0x03D9, r22	; 0x8003d9 <am1008w_k_i2c+0x2f>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:176
  _pm2p5 = (_buffer[13] << 8) + _buffer[14];
    2e20:	40 91 b7 03 	lds	r20, 0x03B7	; 0x8003b7 <am1008w_k_i2c+0xd>
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	54 2f       	mov	r21, r20
    2e28:	44 27       	eor	r20, r20
    2e2a:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <am1008w_k_i2c+0xe>
    2e2e:	48 0f       	add	r20, r24
    2e30:	51 1d       	adc	r21, r1
    2e32:	50 93 dc 03 	sts	0x03DC, r21	; 0x8003dc <am1008w_k_i2c+0x32>
    2e36:	40 93 db 03 	sts	0x03DB, r20	; 0x8003db <am1008w_k_i2c+0x31>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:177
  _pm10 = (_buffer[15] << 8) + _buffer[16];
    2e3a:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <am1008w_k_i2c+0xf>
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	32 2f       	mov	r19, r18
    2e42:	22 27       	eor	r18, r18
    2e44:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <am1008w_k_i2c+0x10>
    2e48:	28 0f       	add	r18, r24
    2e4a:	31 1d       	adc	r19, r1
    2e4c:	30 93 de 03 	sts	0x03DE, r19	; 0x8003de <am1008w_k_i2c+0x34>
    2e50:	20 93 dd 03 	sts	0x03DD, r18	; 0x8003dd <am1008w_k_i2c+0x33>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:178
  _voc_now_r_ref_r = (_buffer[17] << 8) + _buffer[18];
    2e54:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <am1008w_k_i2c+0x11>
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	88 27       	eor	r24, r24
    2e5e:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <am1008w_k_i2c+0x12>
    2e62:	8e 0f       	add	r24, r30
    2e64:	91 1d       	adc	r25, r1
    2e66:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <am1008w_k_i2c+0x36>
    2e6a:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <am1008w_k_i2c+0x35>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:179
  _voc_ref_r = (_buffer[19] << 8) + _buffer[20];
    2e6e:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <am1008w_k_i2c+0x13>
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	98 2f       	mov	r25, r24
    2e76:	88 27       	eor	r24, r24
    2e78:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <am1008w_k_i2c+0x14>
    2e7c:	8e 0f       	add	r24, r30
    2e7e:	91 1d       	adc	r25, r1
    2e80:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <am1008w_k_i2c+0x38>
    2e84:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <am1008w_k_i2c+0x37>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:180
  _voc_now_r = (_buffer[21] << 8) + _buffer[22];
    2e88:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <am1008w_k_i2c+0x15>
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	98 2f       	mov	r25, r24
    2e90:	88 27       	eor	r24, r24
    2e92:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <am1008w_k_i2c+0x16>
    2e96:	8e 0f       	add	r24, r30
    2e98:	91 1d       	adc	r25, r1
    2e9a:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <am1008w_k_i2c+0x3a>
    2e9e:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <am1008w_k_i2c+0x39>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:181
  _pm_sensor_status_alarm.value = _buffer[23];
    2ea2:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <am1008w_k_i2c+0x17>
    2ea6:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <am1008w_k_i2c+0x3b>
Read_dust_value():
C:\Users\dlcks\Desktop\123123123/123123123.ino:171
    uint8_t ret = am1008w_k_i2c.read_data_command();
    if (ret == 0)
    {
      p1dot0 = am1008w_k_i2c.get_pm1p0();
    2eaa:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <p1dot0+0x1>
    2eae:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <p1dot0>
C:\Users\dlcks\Desktop\123123123/123123123.ino:172
      p2dot5 = am1008w_k_i2c.get_pm2p5();
    2eb2:	50 93 a7 03 	sts	0x03A7, r21	; 0x8003a7 <p2dot5+0x1>
    2eb6:	40 93 a6 03 	sts	0x03A6, r20	; 0x8003a6 <p2dot5>
C:\Users\dlcks\Desktop\123123123/123123123.ino:173
      p10 = am1008w_k_i2c.get_pm10();
    2eba:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <p10+0x1>
    2ebe:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <p10>
C:\Users\dlcks\Desktop\123123123/123123123.ino:174
      humidity = am1008w_k_i2c.get_humidity()*10;
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	c2 01       	movw	r24, r4
    2ecc:	b1 01       	movw	r22, r2
    2ece:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    2ed2:	60 93 a0 03 	sts	0x03A0, r22	; 0x8003a0 <humidity>
    2ed6:	70 93 a1 03 	sts	0x03A1, r23	; 0x8003a1 <humidity+0x1>
    2eda:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <humidity+0x2>
    2ede:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <humidity+0x3>
C:\Users\dlcks\Desktop\123123123/123123123.ino:175
      temperature = am1008w_k_i2c.get_temperature()*10;
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e2       	ldi	r20, 0x20	; 32
    2ee8:	51 e4       	ldi	r21, 0x41	; 65
    2eea:	c7 01       	movw	r24, r14
    2eec:	b6 01       	movw	r22, r12
    2eee:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    2ef2:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <temperature>
    2ef6:	70 93 9d 03 	sts	0x039D, r23	; 0x80039d <temperature+0x1>
    2efa:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <temperature+0x2>
    2efe:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <temperature+0x3>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:418
    break;
  }
}

void CheckO3(){
  if(++O3_cnt > N_1M)
    2f02:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <O3_cnt>
    2f06:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <O3_cnt+0x1>
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <O3_cnt+0x1>
    2f10:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <O3_cnt>
    2f14:	81 36       	cpi	r24, 0x61	; 97
    2f16:	9a 4e       	sbci	r25, 0xEA	; 234
    2f18:	08 f4       	brcc	.+2      	; 0x2f1c <main+0x9c8>
    2f1a:	91 c5       	rjmp	.+2850   	; 0x3a3e <main+0x14ea>
C:\Users\dlcks\Desktop\123123123/123123123.ino:420
  {
    O3_cnt = 0;
    2f1c:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <O3_cnt+0x1>
    2f20:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <O3_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:421
    Serial.println("Reading...");
    2f24:	8a ed       	ldi	r24, 0xDA	; 218
    2f26:	92 e0       	ldi	r25, 0x02	; 2
    2f28:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
startHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:105

/**
 * Start the heater
 */
 void MQ131Class::startHeater() {
 	digitalWrite(pinPower, HIGH);
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <MQ131+0x7>
    2f32:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
millis():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    2f36:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    2f38:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    2f3a:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <timer0_millis>
    2f3e:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <timer0_millis+0x1>
    2f42:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <timer0_millis+0x2>
    2f46:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    2f4a:	2f bf       	out	0x3f, r18	; 63
startHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:106
 	secLastStart = millis()/1000;
    2f4c:	28 ee       	ldi	r18, 0xE8	; 232
    2f4e:	33 e0       	ldi	r19, 0x03	; 3
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodsi4>
    2f58:	20 93 d1 04 	sts	0x04D1, r18	; 0x8004d1 <MQ131+0xd>
    2f5c:	30 93 d2 04 	sts	0x04D2, r19	; 0x8004d2 <MQ131+0xe>
    2f60:	40 93 d3 04 	sts	0x04D3, r20	; 0x8004d3 <MQ131+0xf>
    2f64:	50 93 d4 04 	sts	0x04D4, r21	; 0x8004d4 <MQ131+0x10>
millis():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    2f68:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    2f6a:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    2f6c:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <timer0_millis>
    2f70:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <timer0_millis+0x1>
    2f74:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <timer0_millis+0x2>
    2f78:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    2f7c:	2f bf       	out	0x3f, r18	; 63
isTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:118
 	// Check if the heater has been started...
 	if(secLastStart < 0) {
 		return false;
 	}
 	// OK, check if it's the time to read based on calibration parameters
 	if(millis() / 1000 >= secLastStart + getTimeToRead()) {
    2f7e:	28 ee       	ldi	r18, 0xE8	; 232
    2f80:	33 e0       	ldi	r19, 0x03	; 3
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodsi4>
    2f8a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <MQ131+0xd>
    2f8e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <MQ131+0xe>
    2f92:	a0 91 d3 04 	lds	r26, 0x04D3	; 0x8004d3 <MQ131+0xf>
    2f96:	b0 91 d4 04 	lds	r27, 0x04D4	; 0x8004d4 <MQ131+0x10>
    2f9a:	c0 90 d5 04 	lds	r12, 0x04D5	; 0x8004d5 <MQ131+0x11>
    2f9e:	d0 90 d6 04 	lds	r13, 0x04D6	; 0x8004d6 <MQ131+0x12>
    2fa2:	e0 90 d7 04 	lds	r14, 0x04D7	; 0x8004d7 <MQ131+0x13>
    2fa6:	f0 90 d8 04 	lds	r15, 0x04D8	; 0x8004d8 <MQ131+0x14>
    2faa:	8c 0d       	add	r24, r12
    2fac:	9d 1d       	adc	r25, r13
    2fae:	ae 1d       	adc	r26, r14
    2fb0:	bf 1d       	adc	r27, r15
    2fb2:	28 17       	cp	r18, r24
    2fb4:	39 07       	cpc	r19, r25
    2fb6:	4a 07       	cpc	r20, r26
    2fb8:	5b 07       	cpc	r21, r27
    2fba:	08 f0       	brcs	.+2      	; 0x2fbe <main+0xa6a>
    2fbc:	80 c4       	rjmp	.+2304   	; 0x38be <main+0x136a>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:95
 * of the read cycle!
 */
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
    2fbe:	0e 94 2a 05 	call	0xa54	; 0xa54 <delay.constprop.83>
    2fc2:	d2 cf       	rjmp	.-92     	; 0x2f68 <main+0xa14>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:360
        DEBUG_PRINTLN(" is not between 15 and 45");
        return false;
    }

    // Check header "mark" and "space", this must be done for repeat and data
    if (!matchMark(decodedIRData.rawDataPtr->rawbuf[1], RC6_HEADER_MARK)
    2fc4:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
    2fc8:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2fcc:	83 85       	ldd	r24, Z+11	; 0x0b
    2fce:	94 85       	ldd	r25, Z+12	; 0x0c
    2fd0:	88 97       	sbiw	r24, 0x28	; 40
    2fd2:	4d 97       	sbiw	r24, 0x1d	; 29
    2fd4:	08 f0       	brcs	.+2      	; 0x2fd8 <main+0xa84>
    2fd6:	46 c0       	rjmp	.+140    	; 0x3064 <main+0xb10>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2fd8:	85 85       	ldd	r24, Z+13	; 0x0d
    2fda:	96 85       	ldd	r25, Z+14	; 0x0e
    2fdc:	0c 97       	sbiw	r24, 0x0c	; 12
    2fde:	0b 97       	sbiw	r24, 0x0b	; 11
    2fe0:	08 f0       	brcs	.+2      	; 0x2fe4 <main+0xa90>
    2fe2:	40 c0       	rjmp	.+128    	; 0x3064 <main+0xb10>
initBiphaselevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:582
uint16_t sCurrentTimingIntervals; // Number of aBiphaseTimeUnit intervals of the current rawbuf[sBiphaseDecodeRawbuffOffset] timing.
uint8_t sUsedTimingIntervals;       // Number of already used intervals of sCurrentTimingIntervals.
uint16_t sBiphaseTimeUnit;

void IRrecv::initBiphaselevel(uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit) {
    sBiphaseDecodeRawbuffOffset = aRCDecodeRawbuffOffset;
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:583
    sBiphaseTimeUnit = aBiphaseTimeUnit;
    2fea:	8c eb       	ldi	r24, 0xBC	; 188
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <sBiphaseTimeUnit+0x1>
    2ff2:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <sBiphaseTimeUnit>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:584
    sUsedTimingIntervals = 0;
    2ff6:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <sUsedTimingIntervals>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:372

    // Set Biphase decoding start values
    initBiphaselevel(3, RC6_UNIT); // Skip gap-space and start-bit mark + space

// Process first bit, which is known to be a 1 (mark->space)
    if (getBiphaselevel() != MARK) {
    2ffa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	89 f5       	brne	.+98     	; 0x3064 <main+0xb10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:377
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("first getBiphaselevel() is not MARK");
        return false;
    }
    if (getBiphaselevel() != SPACE) {
    3002:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    3006:	c8 2f       	mov	r28, r24
    3008:	81 11       	cpse	r24, r1
    300a:	2c c0       	rjmp	.+88     	; 0x3064 <main+0xb10>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:348
/**
 * Try to decode data as RC6 protocol
 */
bool IRrecv::decodeRC6() {
    uint8_t tBitIndex;
    uint32_t tDecodedRawData = 0;
    300c:	c1 2c       	mov	r12, r1
    300e:	d1 2c       	mov	r13, r1
    3010:	76 01       	movw	r14, r12
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:383
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("second getBiphaselevel() is not SPACE");
        return false;
    }

    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    3012:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
    3016:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
    301a:	90 85       	ldd	r25, Z+8	; 0x08
    301c:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <sBiphaseDecodeRawbuffOffset>
    3020:	89 17       	cp	r24, r25
    3022:	08 f0       	brcs	.+2      	; 0x3026 <main+0xad2>
    3024:	69 c0       	rjmp	.+210    	; 0x30f8 <main+0xba4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:387
        uint8_t tStartLevel; // start level of coded bit
        uint8_t tEndLevel;   // end level of coded bit

        tStartLevel = getBiphaselevel();
    3026:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    302a:	18 2f       	mov	r17, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:388
        if (tBitIndex == 3) {
    302c:	c3 30       	cpi	r28, 0x03	; 3
    302e:	b1 f0       	breq	.+44     	; 0x305c <main+0xb08>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:397
                DEBUG_PRINTLN(F("Toggle mark or space length is wrong"));
                return false;
            }
        }

        tEndLevel = getBiphaselevel();
    3030:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    3034:	d8 2f       	mov	r29, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:398
        if (tBitIndex == 3) {
    3036:	c3 30       	cpi	r28, 0x03	; 3
    3038:	21 f4       	brne	.+8      	; 0x3042 <main+0xaee>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:400
            // Toggle bit is double wide; make sure second half matches
            if (tEndLevel != getBiphaselevel()) {
    303a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    303e:	d8 13       	cpse	r29, r24
    3040:	11 c0       	rjmp	.+34     	; 0x3064 <main+0xb10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:410
        }

        /*
         * Determine tDecodedRawData bit value by checking the transition type
         */
        if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
    3042:	11 30       	cpi	r17, 0x01	; 1
    3044:	09 f0       	breq	.+2      	; 0x3048 <main+0xaf4>
    3046:	4e c0       	rjmp	.+156    	; 0x30e4 <main+0xb90>
    3048:	d1 11       	cpse	r29, r1
    304a:	0c c0       	rjmp	.+24     	; 0x3064 <main+0xb10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:412
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;  // inverted compared to RC5
    304c:	cc 0c       	add	r12, r12
    304e:	dd 1c       	adc	r13, r13
    3050:	ee 1c       	adc	r14, r14
    3052:	ff 1c       	adc	r15, r15
    3054:	68 94       	set
    3056:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:383
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("second getBiphaselevel() is not SPACE");
        return false;
    }

    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    3058:	cf 5f       	subi	r28, 0xFF	; 255
    305a:	db cf       	rjmp	.-74     	; 0x3012 <main+0xabe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:390
        uint8_t tEndLevel;   // end level of coded bit

        tStartLevel = getBiphaselevel();
        if (tBitIndex == 3) {
            // Toggle bit is double wide; make sure second half is equal first half
            if (tStartLevel != getBiphaselevel()) {
    305c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <IRrecv::getBiphaselevel() [clone .constprop.50]>
    3060:	18 17       	cp	r17, r24
    3062:	31 f3       	breq	.-52     	; 0x3030 <main+0xadc>
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:253
 * Old MSB first decoder
 */
bool IRrecv::decodePanasonicMSB(decode_results *aResults) {
    unsigned int offset = 1;

    if (aResults->rawlen < (2 * KASEIKYO_BITS) + 2) {
    3064:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <results+0xe>
    3068:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <results+0xf>
    306c:	82 36       	cpi	r24, 0x62	; 98
    306e:	91 05       	cpc	r25, r1
    3070:	08 f4       	brcc	.+2      	; 0x3074 <main+0xb20>
    3072:	87 c0       	rjmp	.+270    	; 0x3182 <main+0xc2e>
    3074:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3078:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	c3 97       	sbiw	r24, 0x33	; 51
    3082:	85 97       	sbiw	r24, 0x25	; 37
    3084:	08 f0       	brcs	.+2      	; 0x3088 <main+0xb34>
    3086:	7d c0       	rjmp	.+250    	; 0x3182 <main+0xc2e>
    3088:	84 81       	ldd	r24, Z+4	; 0x04
    308a:	95 81       	ldd	r25, Z+5	; 0x05
    308c:	4a 97       	sbiw	r24, 0x1a	; 26
    308e:	43 97       	sbiw	r24, 0x13	; 19
    3090:	08 f0       	brcs	.+2      	; 0x3094 <main+0xb40>
    3092:	77 c0       	rjmp	.+238    	; 0x3182 <main+0xc2e>
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:267
        return false;
    }
    offset++;

    // decode address
    if (!decodePulseDistanceData(KASEIKYO_ADDRESS_BITS + KASEIKYO_DATA_BITS, offset, KASEIKYO_BIT_MARK, KASEIKYO_ONE_SPACE,
    3094:	20 eb       	ldi	r18, 0xB0	; 176
    3096:	31 e0       	ldi	r19, 0x01	; 1
    3098:	40 e1       	ldi	r20, 0x10	; 16
    309a:	55 e0       	ldi	r21, 0x05	; 5
    309c:	60 eb       	ldi	r22, 0xB0	; 176
    309e:	71 e0       	ldi	r23, 0x01	; 1
    30a0:	8c e2       	ldi	r24, 0x2C	; 44
    30a2:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    30a6:	88 23       	and	r24, r24
    30a8:	09 f4       	brne	.+2      	; 0x30ac <main+0xb58>
    30aa:	6b c0       	rjmp	.+214    	; 0x3182 <main+0xc2e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:272
    KASEIKYO_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
        return false;
    }

    aResults->bits = KASEIKYO_BITS;
    30ac:	80 e3       	ldi	r24, 0x30	; 48
    30ae:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:273
    aResults->value = decodedIRData.decodedRawData;
    30b2:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    30b6:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    30ba:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    30be:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    30c2:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    30c6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    30ca:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    30ce:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:274
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	90 e2       	ldi	r25, 0x20	; 32
    30d6:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <results+0x3>
    30da:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <results+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Kaseikyo.cpp:275
    aResults->decode_type = PANASONIC;
    30de:	88 e0       	ldi	r24, 0x08	; 8
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	1e cc       	rjmp	.-1988   	; 0x2920 <main+0x3cc>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:413
         * Determine tDecodedRawData bit value by checking the transition type
         */
        if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;  // inverted compared to RC5
        } else if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
    30e4:	11 11       	cpse	r17, r1
    30e6:	be cf       	rjmp	.-132    	; 0x3064 <main+0xb10>
    30e8:	d1 30       	cpi	r29, 0x01	; 1
    30ea:	09 f0       	breq	.+2      	; 0x30ee <main+0xb9a>
    30ec:	bb cf       	rjmp	.-138    	; 0x3064 <main+0xb10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:415
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 0;
    30ee:	cc 0c       	add	r12, r12
    30f0:	dd 1c       	adc	r13, r13
    30f2:	ee 1c       	adc	r14, r14
    30f4:	ff 1c       	adc	r15, r15
    30f6:	b0 cf       	rjmp	.-160    	; 0x3058 <main+0xb04>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:425
            return false;            // Error
        }
    }

// Success
    decodedIRData.numberOfBits = tBitIndex;
    30f8:	c0 93 bc 05 	sts	0x05BC, r28	; 0x8005bc <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:429

    LongUnion tValue;
    tValue.ULong = tDecodedRawData;
    decodedIRData.decodedRawData = tDecodedRawData;
    30fc:	c0 92 be 05 	sts	0x05BE, r12	; 0x8005be <irrecv+0xa>
    3100:	d0 92 bf 05 	sts	0x05BF, r13	; 0x8005bf <irrecv+0xb>
    3104:	e0 92 c0 05 	sts	0x05C0, r14	; 0x8005c0 <irrecv+0xc>
    3108:	f0 92 c1 05 	sts	0x05C1, r15	; 0x8005c1 <irrecv+0xd>
    310c:	2c 2d       	mov	r18, r12
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	8d 2d       	mov	r24, r13
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:431

    if (tBitIndex < 36) {
    3112:	c4 32       	cpi	r28, 0x24	; 36
    3114:	f8 f4       	brcc	.+62     	; 0x3154 <main+0xc00>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:433
        // RC6
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    3116:	80 e8       	ldi	r24, 0x80	; 128
    3118:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:434
        decodedIRData.command = tValue.UByte.LowByte;
    311c:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <irrecv+0x5>
    3120:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:435
        decodedIRData.address = tValue.UByte.MidLowByte;
    3124:	8d 2d       	mov	r24, r13
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <irrecv+0x3>
    312c:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:437
        // Check for toggle flag
        if ((tValue.UByte.MidHighByte & 1) != 0) {
    3130:	e0 fe       	sbrs	r14, 0
    3132:	03 c0       	rjmp	.+6      	; 0x313a <main+0xbe6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:438
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
    3134:	88 e8       	ldi	r24, 0x88	; 136
    3136:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:454
        // get extra info
        decodedIRData.extra = tValue.UWord.HighWord;
    }

    // check for repeat, do not check toggle bit yet
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((RC6_REPEAT_SPACE + (RC6_REPEAT_SPACE / 2)) / MICROS_PER_TICK)) {
    313a:	81 85       	ldd	r24, Z+9	; 0x09
    313c:	92 85       	ldd	r25, Z+10	; 0x0a
    313e:	8a 38       	cpi	r24, 0x8A	; 138
    3140:	9c 40       	sbci	r25, 0x0C	; 12
    3142:	28 f4       	brcc	.+10     	; 0x314e <main+0xbfa>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:455
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    3144:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <irrecv+0x9>
    3148:	81 60       	ori	r24, 0x01	; 1
    314a:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:458
    }

    decodedIRData.protocol = RC6;
    314e:	8f e0       	ldi	r24, 0x0F	; 15
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	b8 cc       	rjmp	.-1680   	; 0x2ac4 <main+0x570>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:442
        if ((tValue.UByte.MidHighByte & 1) != 0) {
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
        }
    } else {
        // RC6A
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
    3154:	90 e9       	ldi	r25, 0x90	; 144
    3156:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:443
        if ((tValue.UByte.MidLowByte & 0x80) != 0) {
    315a:	d7 fe       	sbrs	r13, 7
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <main+0xc10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:444
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
    315e:	98 e9       	ldi	r25, 0x98	; 152
    3160:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:447
        }
        tValue.UByte.MidLowByte &= 0x87F; // mask toggle bit
        decodedIRData.command = tValue.UByte.LowByte;
    3164:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <irrecv+0x5>
    3168:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:446
        // RC6A
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
        if ((tValue.UByte.MidLowByte & 0x80) != 0) {
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
        }
        tValue.UByte.MidLowByte &= 0x87F; // mask toggle bit
    316c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:448
        decodedIRData.command = tValue.UByte.LowByte;
        decodedIRData.address = tValue.UByte.MidLowByte;
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <irrecv+0x3>
    3174:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:450
        // get extra info
        decodedIRData.extra = tValue.UWord.HighWord;
    3178:	f0 92 bb 05 	sts	0x05BB, r15	; 0x8005bb <irrecv+0x7>
    317c:	e0 92 ba 05 	sts	0x05BA, r14	; 0x8005ba <irrecv+0x6>
    3180:	dc cf       	rjmp	.-72     	; 0x313a <main+0xbe6>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:231
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeLGMSB(decode_results *aResults) {
    unsigned int offset = 1; // Skip first space

// Check we have enough data (60) - +4 for initial gap, start bit mark and space + stop bit mark
    if (aResults->rawlen != (2 * LG_BITS) + 4) {
    3182:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <results+0xe>
    3186:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <results+0xf>
    318a:	cc 97       	sbiw	r24, 0x3c	; 60
    318c:	e9 f5       	brne	.+122    	; 0x3208 <main+0xcb4>
    318e:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3192:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	86 58       	subi	r24, 0x86	; 134
    319c:	91 09       	sbc	r25, r1
    319e:	8c 35       	cpi	r24, 0x5C	; 92
    31a0:	91 05       	cpc	r25, r1
    31a2:	90 f5       	brcc	.+100    	; 0x3208 <main+0xcb4>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    31a4:	84 81       	ldd	r24, Z+4	; 0x04
    31a6:	95 81       	ldd	r25, Z+5	; 0x05
    31a8:	82 54       	subi	r24, 0x42	; 66
    31aa:	91 09       	sbc	r25, r1
    31ac:	8f 97       	sbiw	r24, 0x2f	; 47
    31ae:	60 f5       	brcc	.+88     	; 0x3208 <main+0xcb4>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:246
    if (!matchSpace(aResults->rawbuf[offset], LG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(LG_BITS, offset, LG_BIT_MARK, LG_ONE_SPACE, LG_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    31b0:	20 e3       	ldi	r18, 0x30	; 48
    31b2:	32 e0       	ldi	r19, 0x02	; 2
    31b4:	40 e9       	ldi	r20, 0x90	; 144
    31b6:	56 e0       	ldi	r21, 0x06	; 6
    31b8:	60 e3       	ldi	r22, 0x30	; 48
    31ba:	72 e0       	ldi	r23, 0x02	; 2
    31bc:	8c e1       	ldi	r24, 0x1C	; 28
    31be:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    31c2:	88 23       	and	r24, r24
    31c4:	09 f1       	breq	.+66     	; 0x3208 <main+0xcb4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:250
        return false;
    }
// Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * LG_BITS)], LG_BIT_MARK)) {
    31c6:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    31ca:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    31ce:	ea 58       	subi	r30, 0x8A	; 138
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	08 97       	sbiw	r24, 0x08	; 8
    31d8:	08 97       	sbiw	r24, 0x08	; 8
    31da:	b0 f4       	brcc	.+44     	; 0x3208 <main+0xcb4>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:256
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    31dc:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    31e0:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    31e4:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    31e8:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    31ec:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    31f0:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    31f4:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    31f8:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:257
    aResults->bits = LG_BITS;
    31fc:	8c e1       	ldi	r24, 0x1C	; 28
    31fe:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:258
    aResults->decode_type = LG;
    3202:	86 e0       	ldi	r24, 0x06	; 6
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	8c cb       	rjmp	.-2280   	; 0x2920 <main+0x3cc>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:163
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeJVCMSB(decode_results *aResults) {
    unsigned int offset = 1; // Skip first space

    // Check for repeat
    if ((aResults->rawlen - 1 == 33) && matchMark(aResults->rawbuf[offset], JVC_BIT_MARK)
    3208:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <results+0xe>
    320c:	50 91 91 03 	lds	r21, 0x0391	; 0x800391 <results+0xf>
    3210:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3214:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    3218:	82 81       	ldd	r24, Z+2	; 0x02
    321a:	93 81       	ldd	r25, Z+3	; 0x03
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:164
            && matchMark(aResults->rawbuf[aResults->rawlen - 1], JVC_BIT_MARK)) {
    321c:	42 32       	cpi	r20, 0x22	; 34
    321e:	51 05       	cpc	r21, r1
    3220:	01 f5       	brne	.+64     	; 0x3262 <main+0xd0e>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    3222:	9c 01       	movw	r18, r24
    3224:	28 50       	subi	r18, 0x08	; 8
    3226:	31 09       	sbc	r19, r1
    3228:	27 30       	cpi	r18, 0x07	; 7
    322a:	31 05       	cpc	r19, r1
    322c:	d0 f4       	brcc	.+52     	; 0x3262 <main+0xd0e>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:164
    322e:	df 01       	movw	r26, r30
    3230:	ae 5b       	subi	r26, 0xBE	; 190
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    3234:	2d 91       	ld	r18, X+
    3236:	3c 91       	ld	r19, X
    3238:	28 50       	subi	r18, 0x08	; 8
    323a:	31 09       	sbc	r19, r1
    323c:	27 30       	cpi	r18, 0x07	; 7
    323e:	31 05       	cpc	r19, r1
    3240:	80 f4       	brcc	.+32     	; 0x3262 <main+0xd0e>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:165
        aResults->bits = 0;
    3242:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:166
        aResults->value = 0xFFFFFFFF;
    3246:	80 92 86 03 	sts	0x0386, r8	; 0x800386 <results+0x4>
    324a:	90 92 87 03 	sts	0x0387, r9	; 0x800387 <results+0x5>
    324e:	a0 92 88 03 	sts	0x0388, r10	; 0x800388 <results+0x6>
    3252:	b0 92 89 03 	sts	0x0389, r11	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:167
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:168
        decodedIRData.protocol = JVC;
    325c:	85 e0       	ldi	r24, 0x05	; 5
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	24 cb       	rjmp	.-2488   	; 0x28aa <main+0x356>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    3262:	8d 57       	subi	r24, 0x7D	; 125
    3264:	91 09       	sbc	r25, r1
    3266:	87 35       	cpi	r24, 0x57	; 87
    3268:	91 05       	cpc	r25, r1
    326a:	a0 f5       	brcc	.+104    	; 0x32d4 <main+0xd80>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:179
        return false;
    }
    offset++;

    // Check we have enough data - +3 for start bit mark and space + stop bit mark
    if (aResults->rawlen <= (2 * JVC_BITS) + 3) {
    326c:	44 32       	cpi	r20, 0x24	; 36
    326e:	51 05       	cpc	r21, r1
    3270:	88 f1       	brcs	.+98     	; 0x32d4 <main+0xd80>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    3272:	84 81       	ldd	r24, Z+4	; 0x04
    3274:	95 81       	ldd	r25, Z+5	; 0x05
    3276:	ce 97       	sbiw	r24, 0x3e	; 62
    3278:	8c 97       	sbiw	r24, 0x2c	; 44
    327a:	60 f5       	brcc	.+88     	; 0x32d4 <main+0xd80>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:193
    if (!matchSpace(aResults->rawbuf[offset], JVC_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(JVC_BITS, offset, JVC_BIT_MARK, JVC_ONE_SPACE, JVC_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    327c:	2e e0       	ldi	r18, 0x0E	; 14
    327e:	32 e0       	ldi	r19, 0x02	; 2
    3280:	4a e2       	ldi	r20, 0x2A	; 42
    3282:	56 e0       	ldi	r21, 0x06	; 6
    3284:	6e e0       	ldi	r22, 0x0E	; 14
    3286:	72 e0       	ldi	r23, 0x02	; 2
    3288:	80 e1       	ldi	r24, 0x10	; 16
    328a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    328e:	88 23       	and	r24, r24
    3290:	09 f1       	breq	.+66     	; 0x32d4 <main+0xd80>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:198
        return false;
    }

    // Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * JVC_BITS)], JVC_BIT_MARK)) {
    3292:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3296:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    329a:	ea 5b       	subi	r30, 0xBA	; 186
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	08 97       	sbiw	r24, 0x08	; 8
    32a4:	07 97       	sbiw	r24, 0x07	; 7
    32a6:	b0 f4       	brcc	.+44     	; 0x32d4 <main+0xd80>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:204
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

    // Success
    aResults->value = decodedIRData.decodedRawData;
    32a8:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    32ac:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    32b0:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    32b4:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    32b8:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    32bc:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    32c0:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    32c4:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:205
    aResults->bits = JVC_BITS;
    32c8:	80 e1       	ldi	r24, 0x10	; 16
    32ca:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:206
    aResults->decode_type = JVC;
    32ce:	85 e0       	ldi	r24, 0x05	; 5
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	26 cb       	rjmp	.-2484   	; 0x2920 <main+0x3cc>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:217
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeSAMSUNG(decode_results *aResults) {
    unsigned int offset = 1;  // Skip first space

    // Initial mark
    if (!matchMark(aResults->rawbuf[offset], SAMSUNG_HEADER_MARK)) {
    32d4:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    32d8:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	81 54       	subi	r24, 0x41	; 65
    32e2:	91 09       	sbc	r25, r1
    32e4:	8f 97       	sbiw	r24, 0x2f	; 47
    32e6:	08 f0       	brcs	.+2      	; 0x32ea <main+0xd96>
    32e8:	4c c0       	rjmp	.+152    	; 0x3382 <main+0xe2e>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:223
        return false;
    }
    offset++;

// Check for repeat -- like a NEC repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], 2250)
    32ea:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <results+0xe>
    32ee:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <results+0xf>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:224
            && matchMark(aResults->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
    32f2:	84 30       	cpi	r24, 0x04	; 4
    32f4:	91 05       	cpc	r25, r1
    32f6:	d9 f4       	brne	.+54     	; 0x332e <main+0xdda>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    32f8:	84 81       	ldd	r24, Z+4	; 0x04
    32fa:	95 81       	ldd	r25, Z+5	; 0x05
    32fc:	81 97       	sbiw	r24, 0x21	; 33
    32fe:	48 97       	sbiw	r24, 0x18	; 24
    3300:	08 f0       	brcs	.+2      	; 0x3304 <main+0xdb0>
    3302:	3f c0       	rjmp	.+126    	; 0x3382 <main+0xe2e>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    3304:	86 81       	ldd	r24, Z+6	; 0x06
    3306:	97 81       	ldd	r25, Z+7	; 0x07
    3308:	08 97       	sbiw	r24, 0x08	; 8
    330a:	08 97       	sbiw	r24, 0x08	; 8
    330c:	d0 f5       	brcc	.+116    	; 0x3382 <main+0xe2e>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:225
        aResults->bits = 0;
    330e:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:226
        aResults->value = 0xFFFFFFFF;
    3312:	80 92 86 03 	sts	0x0386, r8	; 0x800386 <results+0x4>
    3316:	90 92 87 03 	sts	0x0387, r9	; 0x800387 <results+0x5>
    331a:	a0 92 88 03 	sts	0x0388, r10	; 0x800388 <results+0x6>
    331e:	b0 92 89 03 	sts	0x0389, r11	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:227
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:228
        decodedIRData.protocol = SAMSUNG;
    3328:	80 e1       	ldi	r24, 0x10	; 16
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	be ca       	rjmp	.-2692   	; 0x28aa <main+0x356>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:231
        return true;
    }
    if (aResults->rawlen < (2 * SAMSUNG_BITS) + 4) {
    332e:	84 34       	cpi	r24, 0x44	; 68
    3330:	91 05       	cpc	r25, r1
    3332:	38 f1       	brcs	.+78     	; 0x3382 <main+0xe2e>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    3334:	84 81       	ldd	r24, Z+4	; 0x04
    3336:	95 81       	ldd	r25, Z+5	; 0x05
    3338:	81 54       	subi	r24, 0x41	; 65
    333a:	91 09       	sbc	r25, r1
    333c:	8e 97       	sbiw	r24, 0x2e	; 46
    333e:	08 f5       	brcc	.+66     	; 0x3382 <main+0xe2e>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:241
    if (!matchSpace(aResults->rawbuf[offset], SAMSUNG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(SAMSUNG_BITS, offset, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    3340:	26 e2       	ldi	r18, 0x26	; 38
    3342:	32 e0       	ldi	r19, 0x02	; 2
    3344:	42 e7       	ldi	r20, 0x72	; 114
    3346:	56 e0       	ldi	r21, 0x06	; 6
    3348:	66 e2       	ldi	r22, 0x26	; 38
    334a:	72 e0       	ldi	r23, 0x02	; 2
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    3352:	88 23       	and	r24, r24
    3354:	b1 f0       	breq	.+44     	; 0x3382 <main+0xe2e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:246
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    3356:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    335a:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    335e:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    3362:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    3366:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    336a:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    336e:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    3372:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:247
    aResults->bits = SAMSUNG_BITS;
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:248
    aResults->decode_type = SAMSUNG;
    337c:	80 e1       	ldi	r24, 0x10	; 16
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	cf ca       	rjmp	.-2658   	; 0x2920 <main+0x3cc>
decodeDenonOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:201

#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeDenonOld(decode_results *aResults) {

    // Check we have the right amount of data
    if (decodedIRData.rawDataPtr->rawlen != 1 + 2 + (2 * DENON_BITS) + 1) {
    3382:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <irrecv+0xe>
    3386:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <irrecv+0xf>
    338a:	80 85       	ldd	r24, Z+8	; 0x08
    338c:	82 32       	cpi	r24, 0x22	; 34
    338e:	79 f5       	brne	.+94     	; 0x33ee <main+0xe9a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:206
        return false;
    }

    // Check initial Mark+Space match
    if (!matchMark(aResults->rawbuf[1], DENON_HEADER_MARK)) {
    3390:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3394:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    3398:	82 81       	ldd	r24, Z+2	; 0x02
    339a:	93 81       	ldd	r25, Z+3	; 0x03
    339c:	04 97       	sbiw	r24, 0x04	; 4
    339e:	05 97       	sbiw	r24, 0x05	; 5
    33a0:	30 f5       	brcc	.+76     	; 0x33ee <main+0xe9a>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    33a2:	84 81       	ldd	r24, Z+4	; 0x04
    33a4:	95 81       	ldd	r25, Z+5	; 0x05
    33a6:	0b 97       	sbiw	r24, 0x0b	; 11
    33a8:	0a 97       	sbiw	r24, 0x0a	; 10
    33aa:	08 f5       	brcc	.+66     	; 0x33ee <main+0xe9a>
decodeDenonOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:215
    if (!matchSpace(aResults->rawbuf[2], DENON_HEADER_SPACE)) {
        return false;
    }

    // Read the bits in
    if (!decodePulseDistanceData(DENON_BITS, 3, DENON_BIT_MARK, DENON_ONE_SPACE, DENON_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    33ac:	2c e0       	ldi	r18, 0x0C	; 12
    33ae:	33 e0       	ldi	r19, 0x03	; 3
    33b0:	4c e1       	ldi	r20, 0x1C	; 28
    33b2:	57 e0       	ldi	r21, 0x07	; 7
    33b4:	64 e0       	ldi	r22, 0x04	; 4
    33b6:	71 e0       	ldi	r23, 0x01	; 1
    33b8:	8f e0       	ldi	r24, 0x0F	; 15
    33ba:	0e 94 8a 0b 	call	0x1714	; 0x1714 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.44]>
    33be:	88 23       	and	r24, r24
    33c0:	b1 f0       	breq	.+44     	; 0x33ee <main+0xe9a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:220
        return false;
    }

    // Success
    aResults->value = decodedIRData.decodedRawData;
    33c2:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <irrecv+0xa>
    33c6:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <irrecv+0xb>
    33ca:	a0 91 c0 05 	lds	r26, 0x05C0	; 0x8005c0 <irrecv+0xc>
    33ce:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <irrecv+0xd>
    33d2:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <results+0x4>
    33d6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <results+0x5>
    33da:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <results+0x6>
    33de:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:221
    aResults->bits = DENON_BITS;
    33e2:	8f e0       	ldi	r24, 0x0F	; 15
    33e4:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:222
    aResults->decode_type = DENON;
    33e8:	83 e0       	ldi	r24, 0x03	; 3
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	99 ca       	rjmp	.-2766   	; 0x2920 <main+0x3cc>
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:711
#  if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeHashOld(decode_results *aResults) {
    long hash = FNV_BASIS_32;

// Require at least 6 samples to prevent triggering on noise
    if (aResults->rawlen < 6) {
    33ee:	00 91 90 03 	lds	r16, 0x0390	; 0x800390 <results+0xe>
    33f2:	10 91 91 03 	lds	r17, 0x0391	; 0x800391 <results+0xf>
    33f6:	06 30       	cpi	r16, 0x06	; 6
    33f8:	11 05       	cpc	r17, r1
    33fa:	08 f4       	brcc	.+2      	; 0x33fe <main+0xeaa>
    33fc:	e2 cb       	rjmp	.-2108   	; 0x2bc2 <main+0x66e>
    33fe:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <results+0xc>
    3402:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <results+0xd>
    3406:	32 96       	adiw	r30, 0x02	; 2
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:716
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
    3408:	c3 e0       	ldi	r28, 0x03	; 3
    340a:	d0 e0       	ldi	r29, 0x00	; 0
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:708
    return true;
}

#  if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeHashOld(decode_results *aResults) {
    long hash = FNV_BASIS_32;
    340c:	25 ec       	ldi	r18, 0xC5	; 197
    340e:	3d e9       	ldi	r19, 0x9D	; 157
    3410:	4c e1       	ldi	r20, 0x1C	; 28
    3412:	51 e8       	ldi	r21, 0x81	; 129
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    3414:	8a e0       	ldi	r24, 0x0A	; 10
    3416:	f8 2e       	mov	r15, r24
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:716
    if (aResults->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
    3418:	84 81       	ldd	r24, Z+4	; 0x04
    341a:	95 81       	ldd	r25, Z+5	; 0x05
    341c:	61 91       	ld	r22, Z+
    341e:	71 91       	ld	r23, Z+
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    3420:	f8 9e       	mul	r15, r24
    3422:	60 01       	movw	r12, r0
    3424:	f9 9e       	mul	r15, r25
    3426:	d0 0c       	add	r13, r0
    3428:	11 24       	eor	r1, r1
    342a:	db 01       	movw	r26, r22
    342c:	aa 0f       	add	r26, r26
    342e:	bb 1f       	adc	r27, r27
    3430:	aa 0f       	add	r26, r26
    3432:	bb 1f       	adc	r27, r27
    3434:	aa 0f       	add	r26, r26
    3436:	bb 1f       	adc	r27, r27
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:656
        return 0;
    3438:	e1 2c       	mov	r14, r1
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    343a:	ca 16       	cp	r12, r26
    343c:	db 06       	cpc	r13, r27
    343e:	88 f0       	brcs	.+34     	; 0x3462 <main+0xf0e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:658
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    3440:	f6 9e       	mul	r15, r22
    3442:	d0 01       	movw	r26, r0
    3444:	f7 9e       	mul	r15, r23
    3446:	b0 0d       	add	r27, r0
    3448:	11 24       	eor	r1, r1
    344a:	63 e0       	ldi	r22, 0x03	; 3
    344c:	88 0f       	add	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	6a 95       	dec	r22
    3452:	e1 f7       	brne	.-8      	; 0x344c <main+0xef8>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:661
        return 2;
    }
    return 1;
    3454:	ee 24       	eor	r14, r14
    3456:	e3 94       	inc	r14
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:658
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    3458:	a8 17       	cp	r26, r24
    345a:	b9 07       	cpc	r27, r25
    345c:	10 f4       	brcc	.+4      	; 0x3462 <main+0xf0e>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:659
        return 2;
    345e:	82 e0       	ldi	r24, 0x02	; 2
    3460:	e8 2e       	mov	r14, r24
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:718
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    3462:	63 e9       	ldi	r22, 0x93	; 147
    3464:	71 e0       	ldi	r23, 0x01	; 1
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	91 e0       	ldi	r25, 0x01	; 1
    346a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__mulsi3>
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	2e 25       	eor	r18, r14
    3474:	21 96       	adiw	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:715
// Require at least 6 samples to prevent triggering on noise
    if (aResults->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
    3476:	0c 17       	cp	r16, r28
    3478:	1d 07       	cpc	r17, r29
    347a:	71 f6       	brne	.-100    	; 0x3418 <main+0xec4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:721
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    }

    aResults->value = hash;
    347c:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <results+0x4>
    3480:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <results+0x5>
    3484:	40 93 88 03 	sts	0x0388, r20	; 0x800388 <results+0x6>
    3488:	50 93 89 03 	sts	0x0389, r21	; 0x800389 <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:722
    aResults->bits = 32;
    348c:	80 e2       	ldi	r24, 0x20	; 32
    348e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:723
    aResults->decode_type = UNKNOWN;
    3492:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <results+0x1>
    3496:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <results>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRReceive.cpp.h:724
    decodedIRData.protocol = UNKNOWN;
    349a:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <irrecv+0x1>
    349e:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <irrecv>
    34a2:	22 cb       	rjmp	.-2492   	; 0x2ae8 <main+0x594>
ReceiveIR():
C:\Users\dlcks\Desktop\123123123/123123123.ino:287
        plasma_period = N_PLASMA_ZEORTHR_PERIOD;
        if(Power){
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }else if(push_cnt) push_cnt = 0;
    34a4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <push_cnt>
    34a8:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <push_cnt+0x1>
    34ac:	89 2b       	or	r24, r25
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <main+0xf5e>
    34b0:	ca c0       	rjmp	.+404    	; 0x3646 <main+0x10f2>
    34b2:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <push_cnt+0x1>
    34b6:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <push_cnt>
    34ba:	5f cb       	rjmp	.-2370   	; 0x2b7a <main+0x626>
C:\Users\dlcks\Desktop\123123123/123123123.ino:289
    }
    switch(results.value)
    34bc:	87 37       	cpi	r24, 0x77	; 119
    34be:	28 e8       	ldi	r18, 0x88	; 136
    34c0:	92 07       	cpc	r25, r18
    34c2:	2f e5       	ldi	r18, 0x5F	; 95
    34c4:	a2 07       	cpc	r26, r18
    34c6:	20 ea       	ldi	r18, 0xA0	; 160
    34c8:	b2 07       	cpc	r27, r18
    34ca:	09 f4       	brne	.+2      	; 0x34ce <main+0xf7a>
    34cc:	e0 c0       	rjmp	.+448    	; 0x368e <main+0x113a>
    34ce:	8f 35       	cpi	r24, 0x5F	; 95
    34d0:	90 4a       	sbci	r25, 0xA0	; 160
    34d2:	af 45       	sbci	r26, 0x5F	; 95
    34d4:	b0 4a       	sbci	r27, 0xA0	; 160
    34d6:	09 f0       	breq	.+2      	; 0x34da <main+0xf86>
    34d8:	74 cb       	rjmp	.-2328   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:301
          digitalWrite(AUTO_LED,0);
          digitalWrite(PLASMA_LED,1);
        }
      break;
      case IR_Button_5:  // on/off
        Power = !Power;
    34da:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    34de:	c1 e0       	ldi	r28, 0x01	; 1
    34e0:	8c 27       	eor	r24, r28
    34e2:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <Power>
C:\Users\dlcks\Desktop\123123123/123123123.ino:302
        if(Power){
    34e6:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    34ea:	88 23       	and	r24, r24
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <main+0xf9c>
    34ee:	71 c0       	rjmp	.+226    	; 0x35d2 <main+0x107e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:303
          plasma_flag = plasma_on;
    34f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <plasma_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:304
          digitalWrite(PWR_LED,1);
    34f4:	61 e0       	ldi	r22, 0x01	; 1
    34f6:	8d e0       	ldi	r24, 0x0D	; 13
    34f8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:305
          digitalWrite(AUTO_LED,1);
    34fc:	61 e0       	ldi	r22, 0x01	; 1
    34fe:	8a e1       	ldi	r24, 0x1A	; 26
    3500:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:306
          digitalWrite(UV_EN,1);
    3504:	61 e0       	ldi	r22, 0x01	; 1
    3506:	85 e1       	ldi	r24, 0x15	; 21
    3508:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:307
          wind_flag = low;
    350c:	c0 93 7f 03 	sts	0x037F, r28	; 0x80037f <wind_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:308
          plasma_cnt = 0;
    3510:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3514:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:309
          plasma_duty = N_PLASMA_FOUR_DUTY;
    3518:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    351c:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:310
          plasma_period = N_PLASMA_FOUR_PERIOD;
    3520:	a0 ea       	ldi	r26, 0xA0	; 160
    3522:	bf e0       	ldi	r27, 0x0F	; 15
    3524:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <plasma_period+0x1>
    3528:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <plasma_period>
C:\Users\dlcks\Desktop\123123123/123123123.ino:311
          segement_flag = 0;
    352c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <segement_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:312
          segment_cnt = 0;
    3530:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <segment_cnt+0x1>
    3534:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <segment_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:324
          digitalWrite(PWR_LED,0);
          digitalWrite(PLASMA_LED,0);
          wind_flag = wind_off;
          module.clearDisplay();
        }
        WindDirectionControl();
    3538:	0e 94 0d 0c 	call	0x181a	; 0x181a <WindDirectionControl()>
    353c:	42 cb       	rjmp	.-2428   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:289
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }else if(push_cnt) push_cnt = 0;
    }
    switch(results.value)
    353e:	87 33       	cpi	r24, 0x37	; 55
    3540:	28 ec       	ldi	r18, 0xC8	; 200
    3542:	92 07       	cpc	r25, r18
    3544:	2f e5       	ldi	r18, 0x5F	; 95
    3546:	a2 07       	cpc	r26, r18
    3548:	20 ea       	ldi	r18, 0xA0	; 160
    354a:	b2 07       	cpc	r27, r18
    354c:	09 f4       	brne	.+2      	; 0x3550 <main+0xffc>
    354e:	aa c0       	rjmp	.+340    	; 0x36a4 <main+0x1150>
    3550:	10 f5       	brcc	.+68     	; 0x3596 <main+0x1042>
    3552:	8f 33       	cpi	r24, 0x3F	; 63
    3554:	90 4c       	sbci	r25, 0xC0	; 192
    3556:	af 45       	sbci	r26, 0x5F	; 95
    3558:	b0 4a       	sbci	r27, 0xA0	; 160
    355a:	09 f0       	breq	.+2      	; 0x355e <main+0x100a>
    355c:	32 cb       	rjmp	.-2460   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:292
    {
      case IR_Button_3:  // 0.3초
        plasma_cnt = 0;
    355e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3562:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:293
        plasma_duty = N_PLASMA_ZEORTHR_DUTY;
    3566:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    356a:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:294
        plasma_period = N_PLASMA_ZEORTHR_PERIOD;
    356e:	8c e2       	ldi	r24, 0x2C	; 44
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <plasma_period+0x1>
    3576:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <plasma_period>
C:\Users\dlcks\Desktop\123123123/123123123.ino:295
        if(Power){
    357a:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    357e:	88 23       	and	r24, r24
    3580:	09 f4       	brne	.+2      	; 0x3584 <main+0x1030>
    3582:	1f cb       	rjmp	.-2498   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:296
          digitalWrite(AUTO_LED,0);
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	8a e1       	ldi	r24, 0x1A	; 26
    3588:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:297
          digitalWrite(PLASMA_LED,1);
    358c:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\Desktop\123123123/123123123.ino:332
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_FOUR_DUTY;
        plasma_period = N_PLASMA_FOUR_PERIOD;
        if(Power){
          digitalWrite(AUTO_LED,1);
          digitalWrite(PLASMA_LED,0);
    358e:	8e e0       	ldi	r24, 0x0E	; 14
    3590:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
    3594:	16 cb       	rjmp	.-2516   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:289
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }else if(push_cnt) push_cnt = 0;
    }
    switch(results.value)
    3596:	8f 32       	cpi	r24, 0x2F	; 47
    3598:	20 ed       	ldi	r18, 0xD0	; 208
    359a:	92 07       	cpc	r25, r18
    359c:	2f e5       	ldi	r18, 0x5F	; 95
    359e:	a2 07       	cpc	r26, r18
    35a0:	20 ea       	ldi	r18, 0xA0	; 160
    35a2:	b2 07       	cpc	r27, r18
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <main+0x1054>
    35a6:	4f c0       	rjmp	.+158    	; 0x3646 <main+0x10f2>
    35a8:	8f 30       	cpi	r24, 0x0F	; 15
    35aa:	90 4f       	sbci	r25, 0xF0	; 240
    35ac:	af 45       	sbci	r26, 0x5F	; 95
    35ae:	b0 4a       	sbci	r27, 0xA0	; 160
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <main+0x1060>
    35b2:	07 cb       	rjmp	.-2546   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:350
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_ONE_DUTY;
        plasma_period = N_PLASMA_ONE_PERIOD;
      break;
      case IR_Button_15:  // 4초
        plasma_cnt = 0;
    35b4:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    35b8:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:351
        plasma_duty = N_PLASMA_FOUR_DUTY;
    35bc:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    35c0:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:352
        plasma_period = N_PLASMA_FOUR_PERIOD;
    35c4:	80 ea       	ldi	r24, 0xA0	; 160
    35c6:	9f e0       	ldi	r25, 0x0F	; 15
C:\Users\dlcks\Desktop\123123123/123123123.ino:362
        plasma_period = N_PLASMA_SIX_PERIOD;
      break;
      case IR_Button_18:  // 8초
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_EIGHT_DUTY;
        plasma_period = N_PLASMA_EIGHT_PERIOD;
    35c8:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <plasma_period+0x1>
    35cc:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <plasma_period>
    35d0:	f8 ca       	rjmp	.-2576   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:314
          plasma_duty = N_PLASMA_FOUR_DUTY;
          plasma_period = N_PLASMA_FOUR_PERIOD;
          segement_flag = 0;
          segment_cnt = 0;
          }else{
          plasma_flag = plasma_off;
    35d2:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <plasma_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:315
          digitalWrite(AUTO_LED,0);
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	8a e1       	ldi	r24, 0x1A	; 26
    35da:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:316
          digitalWrite(UV_EN,0);
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	85 e1       	ldi	r24, 0x15	; 21
    35e2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:317
          digitalWrite(FAN1_EN,0);
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	89 e0       	ldi	r24, 0x09	; 9
    35ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:318
          digitalWrite(DC18_EN,0);
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:319
          digitalWrite(PWR_LED,0);
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	8d e0       	ldi	r24, 0x0D	; 13
    35fa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:320
          digitalWrite(PLASMA_LED,0);
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	8e e0       	ldi	r24, 0x0E	; 14
    3602:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:321
          wind_flag = wind_off;
    3606:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <wind_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:322
          module.clearDisplay();
    360a:	8f ec       	ldi	r24, 0xCF	; 207
    360c:	95 e0       	ldi	r25, 0x05	; 5
    360e:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
    3612:	92 cf       	rjmp	.-220    	; 0x3538 <main+0xfe4>
C:\Users\dlcks\Desktop\123123123/123123123.ino:327
        }
        WindDirectionControl();
      break;
      case IR_Button_10:  // 4초
        plasma_cnt = 0;
    3614:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3618:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:328
        plasma_duty = N_PLASMA_FOUR_DUTY;
    361c:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    3620:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:329
        plasma_period = N_PLASMA_FOUR_PERIOD;
    3624:	80 ea       	ldi	r24, 0xA0	; 160
    3626:	9f e0       	ldi	r25, 0x0F	; 15
    3628:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <plasma_period+0x1>
    362c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <plasma_period>
C:\Users\dlcks\Desktop\123123123/123123123.ino:330
        if(Power){
    3630:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    3634:	88 23       	and	r24, r24
    3636:	09 f4       	brne	.+2      	; 0x363a <main+0x10e6>
    3638:	c4 ca       	rjmp	.-2680   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:331
          digitalWrite(AUTO_LED,1);
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	8a e1       	ldi	r24, 0x1A	; 26
    363e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:332
          digitalWrite(PLASMA_LED,0);
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	a4 cf       	rjmp	.-184    	; 0x358e <main+0x103a>
C:\Users\dlcks\Desktop\123123123/123123123.ino:336
        }
      break;
      case IR_Button_11:  // 0.3초(살균)
        TimePush = true;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <TimePush>
    364c:	ba ca       	rjmp	.-2700   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:339
      break;
      case IR_Button_12:  // 풍향 설정
        if(Power){
    364e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <Power>
    3652:	88 23       	and	r24, r24
    3654:	09 f4       	brne	.+2      	; 0x3658 <main+0x1104>
    3656:	b5 ca       	rjmp	.-2710   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:340
          if(++wind_flag > 3) wind_flag = 1;
    3658:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <wind_flag>
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <wind_flag>
    3662:	84 30       	cpi	r24, 0x04	; 4
    3664:	08 f4       	brcc	.+2      	; 0x3668 <main+0x1114>
    3666:	68 cf       	rjmp	.-304    	; 0x3538 <main+0xfe4>
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <wind_flag>
    366e:	64 cf       	rjmp	.-312    	; 0x3538 <main+0xfe4>
C:\Users\dlcks\Desktop\123123123/123123123.ino:345
          WindDirectionControl();
        }
      break;
      case IR_Button_13:  // 1초
        plasma_cnt = 0;
    3670:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3674:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:346
        plasma_duty = N_PLASMA_ONE_DUTY;
    3678:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    367c:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:347
        plasma_period = N_PLASMA_ONE_PERIOD;
    3680:	a8 ee       	ldi	r26, 0xE8	; 232
    3682:	b3 e0       	ldi	r27, 0x03	; 3
C:\Users\dlcks\Desktop\123123123/123123123.ino:357
        plasma_period = N_PLASMA_FOUR_PERIOD;
      break;
      case IR_Button_16:  // 6초
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_SIX_DUTY;
        plasma_period = N_PLASMA_SIX_PERIOD;
    3684:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <plasma_period+0x1>
    3688:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <plasma_period>
    368c:	9a ca       	rjmp	.-2764   	; 0x2bc2 <main+0x66e>
C:\Users\dlcks\Desktop\123123123/123123123.ino:355
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_FOUR_DUTY;
        plasma_period = N_PLASMA_FOUR_PERIOD;
      break;
      case IR_Button_16:  // 6초
        plasma_cnt = 0;
    368e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3692:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:356
        plasma_duty = N_PLASMA_SIX_DUTY;
    3696:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    369a:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:357
        plasma_period = N_PLASMA_SIX_PERIOD;
    369e:	a0 e7       	ldi	r26, 0x70	; 112
    36a0:	b7 e1       	ldi	r27, 0x17	; 23
    36a2:	f0 cf       	rjmp	.-32     	; 0x3684 <main+0x1130>
C:\Users\dlcks\Desktop\123123123/123123123.ino:360
      break;
      case IR_Button_18:  // 8초
        plasma_cnt = 0;
    36a4:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    36a8:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:361
        plasma_duty = N_PLASMA_EIGHT_DUTY;
    36ac:	70 92 96 03 	sts	0x0396, r7	; 0x800396 <plasma_duty+0x1>
    36b0:	60 92 95 03 	sts	0x0395, r6	; 0x800395 <plasma_duty>
C:\Users\dlcks\Desktop\123123123/123123123.ino:362
        plasma_period = N_PLASMA_EIGHT_PERIOD;
    36b4:	80 e4       	ldi	r24, 0x40	; 64
    36b6:	9f e1       	ldi	r25, 0x1F	; 31
    36b8:	87 cf       	rjmp	.-242    	; 0x35c8 <main+0x1074>
PlasmaControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:397

void PlasmaControl(){
  switch(plasma_flag)
  {
    case plasma_on:
    digitalWrite(DC18_EN,1);
    36ba:	61 e0       	ldi	r22, 0x01	; 1
    36bc:	83 e0       	ldi	r24, 0x03	; 3
    36be:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:398
    plasma_cnt++;
    36c2:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <plasma_cnt>
    36c6:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <plasma_cnt+0x1>
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <plasma_cnt+0x1>
    36d0:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <plasma_cnt>
C:\Users\dlcks\Desktop\123123123/123123123.ino:399
    if(plasma_duty == plasma_cnt) {
    36d4:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <plasma_duty>
    36d8:	30 91 96 03 	lds	r19, 0x0396	; 0x800396 <plasma_duty+0x1>
    36dc:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <plasma_cnt>
    36e0:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <plasma_cnt+0x1>
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	41 f4       	brne	.+16     	; 0x36fa <main+0x11a6>
C:\Users\dlcks\Desktop\123123123/123123123.ino:400
      digitalWrite(PLASMA1_EN,0);
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	85 e0       	ldi	r24, 0x05	; 5
    36ee:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:401
      digitalWrite(PLASMA2_EN,0);
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	86 e0       	ldi	r24, 0x06	; 6
    36f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:403
    }
    if(plasma_period == plasma_cnt){
    36fa:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <plasma_period>
    36fe:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <plasma_period+0x1>
    3702:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <plasma_cnt>
    3706:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <plasma_cnt+0x1>
    370a:	28 17       	cp	r18, r24
    370c:	39 07       	cpc	r19, r25
    370e:	09 f0       	breq	.+2      	; 0x3712 <main+0x11be>
    3710:	6b ca       	rjmp	.-2858   	; 0x2be8 <main+0x694>
C:\Users\dlcks\Desktop\123123123/123123123.ino:404
      digitalWrite(PLASMA1_EN,1);
    3712:	61 e0       	ldi	r22, 0x01	; 1
    3714:	85 e0       	ldi	r24, 0x05	; 5
    3716:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:405
      digitalWrite(PLASMA2_EN,1);
    371a:	61 e0       	ldi	r22, 0x01	; 1
    371c:	86 e0       	ldi	r24, 0x06	; 6
    371e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:406
      plasma_cnt = 0;
    3722:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <plasma_cnt+0x1>
    3726:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <plasma_cnt>
    372a:	5e ca       	rjmp	.-2884   	; 0x2be8 <main+0x694>
C:\Users\dlcks\Desktop\123123123/123123123.ino:410
    }
    break;
    case plasma_off:
    digitalWrite(DC18_EN,0);
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:411
    digitalWrite(PLASMA1_EN,0);
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	85 e0       	ldi	r24, 0x05	; 5
    3738:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Desktop\123123123/123123123.ino:412
    digitalWrite(PLASMA2_EN,0);
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	86 e0       	ldi	r24, 0x06	; 6
    3740:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
    3744:	51 ca       	rjmp	.-2910   	; 0x2be8 <main+0x694>
SegmentControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:235
    if(N_SEGMENT_DUTY == segment_cnt) {
      Serial.print("pm1.0: ");
      Serial.println(p1dot0);
      setSegmentInt(p1dot0);
    }
    }else if(segement_flag == 1){ // PM2.5
    3746:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    374a:	81 30       	cpi	r24, 0x01	; 1
    374c:	a9 f5       	brne	.+106    	; 0x37b8 <main+0x1264>
C:\Users\dlcks\Desktop\123123123/123123123.ino:236
    if(0 == segment_cnt){
    374e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    3752:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    3756:	89 2b       	or	r24, r25
    3758:	c1 f4       	brne	.+48     	; 0x378a <main+0x1236>
C:\Users\dlcks\Desktop\123123123/123123123.ino:237
      module.clearDisplay();
    375a:	8f ec       	ldi	r24, 0xCF	; 207
    375c:	95 e0       	ldi	r25, 0x05	; 5
    375e:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:238
      module.setDisplayToString("P25");
    3762:	0d ec       	ldi	r16, 0xCD	; 205
    3764:	11 e0       	ldi	r17, 0x01	; 1
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	6e ea       	ldi	r22, 0xAE	; 174
    376e:	72 e0       	ldi	r23, 0x02	; 2
    3770:	8f ec       	ldi	r24, 0xCF	; 207
    3772:	95 e0       	ldi	r25, 0x05	; 5
    3774:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:239
      module.setDisplayDigit(2,1,true);
    3778:	0d eb       	ldi	r16, 0xBD	; 189
    377a:	11 e0       	ldi	r17, 0x01	; 1
    377c:	21 e0       	ldi	r18, 0x01	; 1
    377e:	41 e0       	ldi	r20, 0x01	; 1
    3780:	62 e0       	ldi	r22, 0x02	; 2
    3782:	8f ec       	ldi	r24, 0xCF	; 207
    3784:	95 e0       	ldi	r25, 0x05	; 5
    3786:	0e 94 02 07 	call	0xe04	; 0xe04 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:241
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    378a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    378e:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    3792:	88 3e       	cpi	r24, 0xE8	; 232
    3794:	93 40       	sbci	r25, 0x03	; 3
    3796:	09 f0       	breq	.+2      	; 0x379a <main+0x1246>
    3798:	7b ca       	rjmp	.-2826   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:242
      Serial.print("pm2.5: ");
    379a:	82 eb       	ldi	r24, 0xB2	; 178
    379c:	92 e0       	ldi	r25, 0x02	; 2
    379e:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:243
      Serial.println(p2dot5);
    37a2:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <p2dot5>
    37a6:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <p2dot5+0x1>
    37aa:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:244
      setSegmentInt(p2dot5);
    37ae:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <p2dot5>
    37b2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <p2dot5+0x1>
    37b6:	6a ca       	rjmp	.-2860   	; 0x2c8c <main+0x738>
C:\Users\dlcks\Desktop\123123123/123123123.ino:246
    }
    }else if(segement_flag == 2){ // PM10
    37b8:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    37bc:	82 30       	cpi	r24, 0x02	; 2
    37be:	61 f5       	brne	.+88     	; 0x3818 <main+0x12c4>
C:\Users\dlcks\Desktop\123123123/123123123.ino:247
    if(0 == segment_cnt){
    37c0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    37c4:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    37c8:	89 2b       	or	r24, r25
    37ca:	79 f4       	brne	.+30     	; 0x37ea <main+0x1296>
C:\Users\dlcks\Desktop\123123123/123123123.ino:248
      module.clearDisplay();
    37cc:	8f ec       	ldi	r24, 0xCF	; 207
    37ce:	95 e0       	ldi	r25, 0x05	; 5
    37d0:	0e 94 8c 08 	call	0x1118	; 0x1118 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\123123123/123123123.ino:249
      module.setDisplayToString("P10");
    37d4:	0d ec       	ldi	r16, 0xCD	; 205
    37d6:	11 e0       	ldi	r17, 0x01	; 1
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	62 ea       	ldi	r22, 0xA2	; 162
    37e0:	72 e0       	ldi	r23, 0x02	; 2
    37e2:	8f ec       	ldi	r24, 0xCF	; 207
    37e4:	95 e0       	ldi	r25, 0x05	; 5
    37e6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\123123123/123123123.ino:251
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    37ea:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    37ee:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    37f2:	88 3e       	cpi	r24, 0xE8	; 232
    37f4:	93 40       	sbci	r25, 0x03	; 3
    37f6:	09 f0       	breq	.+2      	; 0x37fa <main+0x12a6>
    37f8:	4b ca       	rjmp	.-2922   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:252
      Serial.print("pm10: ");
    37fa:	8a eb       	ldi	r24, 0xBA	; 186
    37fc:	92 e0       	ldi	r25, 0x02	; 2
    37fe:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:253
      Serial.println(p10);
    3802:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <p10>
    3806:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <p10+0x1>
    380a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:254
      setSegmentInt(p10);
    380e:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <p10>
    3812:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <p10+0x1>
    3816:	3a ca       	rjmp	.-2956   	; 0x2c8c <main+0x738>
C:\Users\dlcks\Desktop\123123123/123123123.ino:256
    }
    }else if(segement_flag == 3){ // 습도
    3818:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    381c:	83 30       	cpi	r24, 0x03	; 3
    381e:	31 f5       	brne	.+76     	; 0x386c <main+0x1318>
C:\Users\dlcks\Desktop\123123123/123123123.ino:257
    if(segment_cnt == 0){
    3820:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    3824:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    3828:	89 2b       	or	r24, r25
    382a:	09 f0       	breq	.+2      	; 0x382e <main+0x12da>
    382c:	31 ca       	rjmp	.-2974   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:258
      Serial.print("humidity: ");
    382e:	81 ec       	ldi	r24, 0xC1	; 193
    3830:	92 e0       	ldi	r25, 0x02	; 2
    3832:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:259
      Serial.println(humidity);
    3836:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <humidity>
    383a:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <humidity+0x1>
    383e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <humidity+0x2>
    3842:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <humidity+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3846:	42 e0       	ldi	r20, 0x02	; 2
    3848:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
write():
    384c:	81 e9       	ldi	r24, 0x91	; 145
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
SegmentControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:261
      
      setSegmentFloat(humidity,1); // 1-> 퍼센트 나타내기 2
    3854:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <humidity>
    3858:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <humidity+0x1>
    385c:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <humidity+0x2>
    3860:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <humidity+0x3>
    3864:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\dlcks\Desktop\123123123/123123123.ino:268
    }else if(segement_flag == 4){ // 온도
    if(segment_cnt == 0){
      Serial.print("temperature: ");
      Serial.println(temperature);
      
      setSegmentFloat(temperature,0); //0-> 섭씨온도 기호 나타내기
    3866:	0e 94 35 0b 	call	0x166a	; 0x166a <setSegmentFloat(float, bool)>
    386a:	12 ca       	rjmp	.-3036   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:263
      Serial.print("humidity: ");
      Serial.println(humidity);
      
      setSegmentFloat(humidity,1); // 1-> 퍼센트 나타내기 2
    }
    }else if(segement_flag == 4){ // 온도
    386c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <segement_flag>
    3870:	84 30       	cpi	r24, 0x04	; 4
    3872:	09 f0       	breq	.+2      	; 0x3876 <main+0x1322>
    3874:	0d ca       	rjmp	.-3046   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:264
    if(segment_cnt == 0){
    3876:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <segment_cnt>
    387a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <segment_cnt+0x1>
    387e:	89 2b       	or	r24, r25
    3880:	09 f0       	breq	.+2      	; 0x3884 <main+0x1330>
    3882:	06 ca       	rjmp	.-3060   	; 0x2c90 <main+0x73c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:265
      Serial.print("temperature: ");
    3884:	8c ec       	ldi	r24, 0xCC	; 204
    3886:	92 e0       	ldi	r25, 0x02	; 2
    3888:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:266
      Serial.println(temperature);
    388c:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <temperature>
    3890:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <temperature+0x1>
    3894:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <temperature+0x2>
    3898:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <temperature+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    389c:	42 e0       	ldi	r20, 0x02	; 2
    389e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
write():
    38a2:	81 e9       	ldi	r24, 0x91	; 145
    38a4:	91 e0       	ldi	r25, 0x01	; 1
    38a6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Print::write(char const*) [clone .part.2] [clone .constprop.89]>
SegmentControl():
C:\Users\dlcks\Desktop\123123123/123123123.ino:268
      
      setSegmentFloat(temperature,0); //0-> 섭씨온도 기호 나타내기
    38aa:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <temperature>
    38ae:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <temperature+0x1>
    38b2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <temperature+0x2>
    38b6:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <temperature+0x3>
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	d4 cf       	rjmp	.-88     	; 0x3866 <main+0x1312>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:152
/**
 * Read Rs value
 */
 float MQ131Class::readRs() {
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
    38be:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <MQ131+0x8>
analogRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    38c2:	88 30       	cpi	r24, 0x08	; 8
    38c4:	48 f0       	brcs	.+18     	; 0x38d8 <main+0x1384>
    38c6:	92 ef       	ldi	r25, 0xF2	; 242
    38c8:	98 0f       	add	r25, r24
    38ca:	9b 30       	cpi	r25, 0x0B	; 11
    38cc:	08 f4       	brcc	.+2      	; 0x38d0 <main+0x137c>
    38ce:	bd c0       	rjmp	.+378    	; 0x3a4a <main+0x14f6>
    38d0:	89 31       	cpi	r24, 0x19	; 25
    38d2:	08 f4       	brcc	.+2      	; 0x38d6 <main+0x1382>
    38d4:	bc c0       	rjmp	.+376    	; 0x3a4e <main+0x14fa>
    38d6:	83 51       	subi	r24, 0x13	; 19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    38d8:	87 70       	andi	r24, 0x07	; 7
    38da:	80 64       	ori	r24, 0x40	; 64
    38dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    38e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    38e4:	80 64       	ori	r24, 0x40	; 64
    38e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    38ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    38ee:	86 fd       	sbrc	r24, 6
    38f0:	fc cf       	rjmp	.-8      	; 0x38ea <main+0x1396>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    38f2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    38f6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:154
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__floatunsisf>
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5a e3       	ldi	r21, 0x3A	; 58
    390a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 ea       	ldi	r20, 0xA0	; 160
    3914:	50 e4       	ldi	r21, 0x40	; 64
    3916:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    391a:	6b 01       	movw	r12, r22
    391c:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	a9 01       	movw	r20, r18
    3924:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__cmpsf2>
    3928:	88 23       	and	r24, r24
    392a:	09 f4       	brne	.+2      	; 0x392e <main+0x13da>
    392c:	92 c0       	rjmp	.+292    	; 0x3a52 <main+0x14fe>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:157
 	float rS = (5.0 / vRL - 1.0) * valueRL;
    392e:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <MQ131+0x9>
    3932:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <MQ131+0xa>
    3936:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <MQ131+0xb>
    393a:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <MQ131+0xc>
    393e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__floatunsisf>
    3942:	1b 01       	movw	r2, r22
    3944:	2c 01       	movw	r4, r24
    3946:	a7 01       	movw	r20, r14
    3948:	96 01       	movw	r18, r12
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	80 ea       	ldi	r24, 0xA0	; 160
    3950:	90 e4       	ldi	r25, 0x40	; 64
    3952:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3>
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e8       	ldi	r20, 0x80	; 128
    395c:	5f e3       	ldi	r21, 0x3F	; 63
    395e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__subsf3>
    3962:	9b 01       	movw	r18, r22
    3964:	ac 01       	movw	r20, r24
    3966:	c2 01       	movw	r24, r4
    3968:	b1 01       	movw	r22, r2
    396a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:97
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
 	}
 	lastValueRs = readRs();
    396e:	60 93 dd 04 	sts	0x04DD, r22	; 0x8004dd <MQ131+0x19>
    3972:	70 93 de 04 	sts	0x04DE, r23	; 0x8004de <MQ131+0x1a>
    3976:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <MQ131+0x1b>
    397a:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <MQ131+0x1c>
stopHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:128

/**
 * Stop the heater
 */
 void MQ131Class::stopHeater() {
 	digitalWrite(pinPower, LOW);
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <MQ131+0x7>
    3984:	0e 94 fd 03 	call	0x7fa	; 0x7fa <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:129
 	secLastStart = -1;
    3988:	80 92 d1 04 	sts	0x04D1, r8	; 0x8004d1 <MQ131+0xd>
    398c:	90 92 d2 04 	sts	0x04D2, r9	; 0x8004d2 <MQ131+0xe>
    3990:	a0 92 d3 04 	sts	0x04D3, r10	; 0x8004d3 <MQ131+0xf>
    3994:	b0 92 d4 04 	sts	0x04D4, r11	; 0x8004d4 <MQ131+0x10>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:424
  {
    O3_cnt = 0;
    Serial.println("Reading...");
    MQ131.sample();

    Serial.print("O3 Value:"); // oz 신호값을 출력
    3998:	85 ee       	ldi	r24, 0xE5	; 229
    399a:	92 e0       	ldi	r25, 0x02	; 2
    399c:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:425
    ozSensorRdValue = MQ131.getO3(PPM);
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]>
    39a8:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ozSensorRdValue>
    39ac:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <ozSensorRdValue+0x1>
    39b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ozSensorRdValue+0x2>
    39b4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ozSensorRdValue+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    39b8:	42 e0       	ldi	r20, 0x02	; 2
    39ba:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:427
    Serial.print(ozSensorRdValue); // oz 신호값을 출력
    Serial.print("Concentration O3 : ");
    39be:	8f ee       	ldi	r24, 0xEF	; 239
    39c0:	92 e0       	ldi	r25, 0x02	; 2
    39c2:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:428
    Serial.print(MQ131.getO3(PPB));
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    39ce:	42 e0       	ldi	r20, 0x02	; 2
    39d0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:429
    Serial.println(" ppb");
    39d4:	83 e0       	ldi	r24, 0x03	; 3
    39d6:	93 e0       	ldi	r25, 0x03	; 3
    39d8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:430
    Serial.print("Concentration O3 : ");
    39dc:	8f ee       	ldi	r24, 0xEF	; 239
    39de:	92 e0       	ldi	r25, 0x02	; 2
    39e0:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:431
    Serial.print(MQ131.getO3(MG_M3));
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    39ec:	42 e0       	ldi	r20, 0x02	; 2
    39ee:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:432
    Serial.println(" mg/m3");
    39f2:	88 e0       	ldi	r24, 0x08	; 8
    39f4:	93 e0       	ldi	r25, 0x03	; 3
    39f6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:433
    Serial.print("Concentration O3 : ");
    39fa:	8f ee       	ldi	r24, 0xEF	; 239
    39fc:	92 e0       	ldi	r25, 0x02	; 2
    39fe:	0e 94 af 0c 	call	0x195e	; 0x195e <Print::print(char const*) [clone .constprop.79]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:434
    Serial.print(MQ131.getO3(UG_M3));
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.75]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    3a0a:	42 e0       	ldi	r20, 0x02	; 2
    3a0c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Print::printFloat(double, unsigned char) [clone .constprop.68]>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:435
    Serial.println(" ug/m3");
    3a10:	8f e0       	ldi	r24, 0x0F	; 15
    3a12:	93 e0       	ldi	r25, 0x03	; 3
    3a14:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
C:\Users\dlcks\Desktop\123123123/123123123.ino:436
    if(MQ131.getR0() >= 10000.00f){
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e4       	ldi	r19, 0x40	; 64
    3a1c:	4c e1       	ldi	r20, 0x1C	; 28
    3a1e:	56 e4       	ldi	r21, 0x46	; 70
    3a20:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <MQ131+0x15>
    3a24:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <MQ131+0x16>
    3a28:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <MQ131+0x17>
    3a2c:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <MQ131+0x18>
    3a30:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__gesf2>
    3a34:	87 fd       	sbrc	r24, 7
    3a36:	11 c0       	rjmp	.+34     	; 0x3a5a <main+0x1506>
C:\Users\dlcks\Desktop\123123123/123123123.ino:437
      plasma_flag = plasma_off;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <plasma_flag>
loop():
C:\Users\dlcks\Desktop\123123123/123123123.ino:502
    PlasmaControl();
    SegmentControl();
    Read_dust_value();
    CheckO3();
  }
  delay(1);
    3a3e:	0e 94 2a 05 	call	0xa54	; 0xa54 <delay.constprop.83>
main():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3a42:	0e 94 77 03 	call	0x6ee	; 0x6ee <serialEventRun()>
    3a46:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <main+0x296>
analogRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    3a4a:	89 2f       	mov	r24, r25
    3a4c:	45 cf       	rjmp	.-374    	; 0x38d8 <main+0x1384>
main():
    3a4e:	8f ef       	ldi	r24, 0xFF	; 255
    3a50:	43 cf       	rjmp	.-378    	; 0x38d8 <main+0x1384>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	cb 01       	movw	r24, r22
    3a58:	8a cf       	rjmp	.-236    	; 0x396e <main+0x141a>
CheckO3():
C:\Users\dlcks\Desktop\123123123/123123123.ino:439
    Serial.print(MQ131.getO3(UG_M3));
    Serial.println(" ug/m3");
    if(MQ131.getR0() >= 10000.00f){
      plasma_flag = plasma_off;
      }else{
      if (ozSensorRdValue >= 0)
    3a5a:	c0 90 03 01 	lds	r12, 0x0103	; 0x800103 <ozSensorRdValue>
    3a5e:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <ozSensorRdValue+0x1>
    3a62:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <ozSensorRdValue+0x2>
    3a66:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <ozSensorRdValue+0x3>
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	a9 01       	movw	r20, r18
    3a70:	c7 01       	movw	r24, r14
    3a72:	b6 01       	movw	r22, r12
    3a74:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__gesf2>
    3a78:	87 fd       	sbrc	r24, 7
    3a7a:	e1 cf       	rjmp	.-62     	; 0x3a3e <main+0x14ea>
C:\Users\dlcks\Desktop\123123123/123123123.ino:441
      {
        if (ozSensorRdValue >= OZON_SENSOR_OFF_VALUE)
    3a7c:	2f e8       	ldi	r18, 0x8F	; 143
    3a7e:	32 ec       	ldi	r19, 0xC2	; 194
    3a80:	45 ef       	ldi	r20, 0xF5	; 245
    3a82:	5c e3       	ldi	r21, 0x3C	; 60
    3a84:	c7 01       	movw	r24, r14
    3a86:	b6 01       	movw	r22, r12
    3a88:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__gesf2>
    3a8c:	87 fd       	sbrc	r24, 7
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <main+0x154c>
C:\Users\dlcks\Desktop\123123123/123123123.ino:443
        {
          plasma_flag = plasma_off;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <plasma_flag>
C:\Users\dlcks\Desktop\123123123/123123123.ino:444
          Serial.println("Plazma Off...");
    3a96:	86 e1       	ldi	r24, 0x16	; 22
    3a98:	93 e0       	ldi	r25, 0x03	; 3
    3a9a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Print::println(char const*) [clone .constprop.86]>
    3a9e:	cf cf       	rjmp	.-98     	; 0x3a3e <main+0x14ea>
C:\Users\dlcks\Desktop\123123123/123123123.ino:448
        }
        else
        {
          plasma_flag = plasma_on;
    3aa0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <plasma_flag>
    3aa4:	cc cf       	rjmp	.-104    	; 0x3a3e <main+0x14ea>

00003aa6 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:439
  #endif
  tw_attachSlaveRxEvent(onReceive);
  tw_attachSlaveTxEvent(onTransmit);
}

TwoWire::~TwoWire()
    3aa6:	83 e2       	ldi	r24, 0x23	; 35
    3aa8:	91 e0       	ldi	r25, 0x01	; 1
    3aaa:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <Wire+0x1>
    3aae:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <Wire>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:441
{
  delete[] rxBuffer;
    3ab2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <Wire+0xe>
    3ab6:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <Wire+0xf>
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	11 f0       	breq	.+4      	; 0x3ac2 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_+0x1c>
operator delete():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
    3abe:	0e 94 48 22 	call	0x4490	; 0x4490 <free>
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:442
  delete[] txBuffer;
    3ac2:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <Wire+0x13>
    3ac6:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <Wire+0x14>
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	11 f0       	breq	.+4      	; 0x3ad2 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_+0x2c>
operator delete():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
    3ace:	0c 94 48 22 	jmp	0x4490	; 0x4490 <free>
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    3ad2:	08 95       	ret

00003ad4 <__cmpsf2>:
__cmpsf2():
    3ad4:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <__fp_cmp>
    3ad8:	08 f4       	brcc	.+2      	; 0x3adc <__cmpsf2+0x8>
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	08 95       	ret

00003ade <__floatunsisf>:
__floatunsisf():
    3ade:	e8 94       	clt
    3ae0:	09 c0       	rjmp	.+18     	; 0x3af4 <__floatsisf+0x12>

00003ae2 <__floatsisf>:
    3ae2:	97 fb       	bst	r25, 7
    3ae4:	3e f4       	brtc	.+14     	; 0x3af4 <__floatsisf+0x12>
    3ae6:	90 95       	com	r25
    3ae8:	80 95       	com	r24
    3aea:	70 95       	com	r23
    3aec:	61 95       	neg	r22
    3aee:	7f 4f       	sbci	r23, 0xFF	; 255
    3af0:	8f 4f       	sbci	r24, 0xFF	; 255
    3af2:	9f 4f       	sbci	r25, 0xFF	; 255
    3af4:	99 23       	and	r25, r25
    3af6:	a9 f0       	breq	.+42     	; 0x3b22 <__floatsisf+0x40>
    3af8:	f9 2f       	mov	r31, r25
    3afa:	96 e9       	ldi	r25, 0x96	; 150
    3afc:	bb 27       	eor	r27, r27
    3afe:	93 95       	inc	r25
    3b00:	f6 95       	lsr	r31
    3b02:	87 95       	ror	r24
    3b04:	77 95       	ror	r23
    3b06:	67 95       	ror	r22
    3b08:	b7 95       	ror	r27
    3b0a:	f1 11       	cpse	r31, r1
    3b0c:	f8 cf       	rjmp	.-16     	; 0x3afe <__floatsisf+0x1c>
    3b0e:	fa f4       	brpl	.+62     	; 0x3b4e <__floatsisf+0x6c>
    3b10:	bb 0f       	add	r27, r27
    3b12:	11 f4       	brne	.+4      	; 0x3b18 <__floatsisf+0x36>
    3b14:	60 ff       	sbrs	r22, 0
    3b16:	1b c0       	rjmp	.+54     	; 0x3b4e <__floatsisf+0x6c>
    3b18:	6f 5f       	subi	r22, 0xFF	; 255
    3b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b20:	16 c0       	rjmp	.+44     	; 0x3b4e <__floatsisf+0x6c>
    3b22:	88 23       	and	r24, r24
    3b24:	11 f0       	breq	.+4      	; 0x3b2a <__floatsisf+0x48>
    3b26:	96 e9       	ldi	r25, 0x96	; 150
    3b28:	11 c0       	rjmp	.+34     	; 0x3b4c <__floatsisf+0x6a>
    3b2a:	77 23       	and	r23, r23
    3b2c:	21 f0       	breq	.+8      	; 0x3b36 <__floatsisf+0x54>
    3b2e:	9e e8       	ldi	r25, 0x8E	; 142
    3b30:	87 2f       	mov	r24, r23
    3b32:	76 2f       	mov	r23, r22
    3b34:	05 c0       	rjmp	.+10     	; 0x3b40 <__floatsisf+0x5e>
    3b36:	66 23       	and	r22, r22
    3b38:	71 f0       	breq	.+28     	; 0x3b56 <__floatsisf+0x74>
    3b3a:	96 e8       	ldi	r25, 0x86	; 134
    3b3c:	86 2f       	mov	r24, r22
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	2a f0       	brmi	.+10     	; 0x3b4e <__floatsisf+0x6c>
    3b44:	9a 95       	dec	r25
    3b46:	66 0f       	add	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	da f7       	brpl	.-10     	; 0x3b44 <__floatsisf+0x62>
    3b4e:	88 0f       	add	r24, r24
    3b50:	96 95       	lsr	r25
    3b52:	87 95       	ror	r24
    3b54:	97 f9       	bld	r25, 7
    3b56:	08 95       	ret

00003b58 <__fp_cmp>:
__fp_cmp():
    3b58:	99 0f       	add	r25, r25
    3b5a:	00 08       	sbc	r0, r0
    3b5c:	55 0f       	add	r21, r21
    3b5e:	aa 0b       	sbc	r26, r26
    3b60:	e0 e8       	ldi	r30, 0x80	; 128
    3b62:	fe ef       	ldi	r31, 0xFE	; 254
    3b64:	16 16       	cp	r1, r22
    3b66:	17 06       	cpc	r1, r23
    3b68:	e8 07       	cpc	r30, r24
    3b6a:	f9 07       	cpc	r31, r25
    3b6c:	c0 f0       	brcs	.+48     	; 0x3b9e <__fp_cmp+0x46>
    3b6e:	12 16       	cp	r1, r18
    3b70:	13 06       	cpc	r1, r19
    3b72:	e4 07       	cpc	r30, r20
    3b74:	f5 07       	cpc	r31, r21
    3b76:	98 f0       	brcs	.+38     	; 0x3b9e <__fp_cmp+0x46>
    3b78:	62 1b       	sub	r22, r18
    3b7a:	73 0b       	sbc	r23, r19
    3b7c:	84 0b       	sbc	r24, r20
    3b7e:	95 0b       	sbc	r25, r21
    3b80:	39 f4       	brne	.+14     	; 0x3b90 <__fp_cmp+0x38>
    3b82:	0a 26       	eor	r0, r26
    3b84:	61 f0       	breq	.+24     	; 0x3b9e <__fp_cmp+0x46>
    3b86:	23 2b       	or	r18, r19
    3b88:	24 2b       	or	r18, r20
    3b8a:	25 2b       	or	r18, r21
    3b8c:	21 f4       	brne	.+8      	; 0x3b96 <__fp_cmp+0x3e>
    3b8e:	08 95       	ret
    3b90:	0a 26       	eor	r0, r26
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <__fp_cmp+0x3e>
    3b94:	a1 40       	sbci	r26, 0x01	; 1
    3b96:	a6 95       	lsr	r26
    3b98:	8f ef       	ldi	r24, 0xFF	; 255
    3b9a:	81 1d       	adc	r24, r1
    3b9c:	81 1d       	adc	r24, r1
    3b9e:	08 95       	ret

00003ba0 <__mulsf3>:
__mulsf3():
    3ba0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__mulsf3x>
    3ba4:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__fp_round>
    3ba8:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__fp_pscA>
    3bac:	38 f0       	brcs	.+14     	; 0x3bbc <__mulsf3+0x1c>
    3bae:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__fp_pscB>
    3bb2:	20 f0       	brcs	.+8      	; 0x3bbc <__mulsf3+0x1c>
    3bb4:	95 23       	and	r25, r21
    3bb6:	11 f0       	breq	.+4      	; 0x3bbc <__mulsf3+0x1c>
    3bb8:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    3bbc:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>
    3bc0:	11 24       	eor	r1, r1
    3bc2:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>

00003bc6 <__mulsf3x>:
__mulsf3x():
    3bc6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fp_split3>
    3bca:	70 f3       	brcs	.-36     	; 0x3ba8 <__mulsf3+0x8>

00003bcc <__mulsf3_pse>:
    3bcc:	95 9f       	mul	r25, r21
    3bce:	c1 f3       	breq	.-16     	; 0x3bc0 <__mulsf3+0x20>
    3bd0:	95 0f       	add	r25, r21
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	55 1f       	adc	r21, r21
    3bd6:	62 9f       	mul	r22, r18
    3bd8:	f0 01       	movw	r30, r0
    3bda:	72 9f       	mul	r23, r18
    3bdc:	bb 27       	eor	r27, r27
    3bde:	f0 0d       	add	r31, r0
    3be0:	b1 1d       	adc	r27, r1
    3be2:	63 9f       	mul	r22, r19
    3be4:	aa 27       	eor	r26, r26
    3be6:	f0 0d       	add	r31, r0
    3be8:	b1 1d       	adc	r27, r1
    3bea:	aa 1f       	adc	r26, r26
    3bec:	64 9f       	mul	r22, r20
    3bee:	66 27       	eor	r22, r22
    3bf0:	b0 0d       	add	r27, r0
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	66 1f       	adc	r22, r22
    3bf6:	82 9f       	mul	r24, r18
    3bf8:	22 27       	eor	r18, r18
    3bfa:	b0 0d       	add	r27, r0
    3bfc:	a1 1d       	adc	r26, r1
    3bfe:	62 1f       	adc	r22, r18
    3c00:	73 9f       	mul	r23, r19
    3c02:	b0 0d       	add	r27, r0
    3c04:	a1 1d       	adc	r26, r1
    3c06:	62 1f       	adc	r22, r18
    3c08:	83 9f       	mul	r24, r19
    3c0a:	a0 0d       	add	r26, r0
    3c0c:	61 1d       	adc	r22, r1
    3c0e:	22 1f       	adc	r18, r18
    3c10:	74 9f       	mul	r23, r20
    3c12:	33 27       	eor	r19, r19
    3c14:	a0 0d       	add	r26, r0
    3c16:	61 1d       	adc	r22, r1
    3c18:	23 1f       	adc	r18, r19
    3c1a:	84 9f       	mul	r24, r20
    3c1c:	60 0d       	add	r22, r0
    3c1e:	21 1d       	adc	r18, r1
    3c20:	82 2f       	mov	r24, r18
    3c22:	76 2f       	mov	r23, r22
    3c24:	6a 2f       	mov	r22, r26
    3c26:	11 24       	eor	r1, r1
    3c28:	9f 57       	subi	r25, 0x7F	; 127
    3c2a:	50 40       	sbci	r21, 0x00	; 0
    3c2c:	9a f0       	brmi	.+38     	; 0x3c54 <__mulsf3_pse+0x88>
    3c2e:	f1 f0       	breq	.+60     	; 0x3c6c <__mulsf3_pse+0xa0>
    3c30:	88 23       	and	r24, r24
    3c32:	4a f0       	brmi	.+18     	; 0x3c46 <__mulsf3_pse+0x7a>
    3c34:	ee 0f       	add	r30, r30
    3c36:	ff 1f       	adc	r31, r31
    3c38:	bb 1f       	adc	r27, r27
    3c3a:	66 1f       	adc	r22, r22
    3c3c:	77 1f       	adc	r23, r23
    3c3e:	88 1f       	adc	r24, r24
    3c40:	91 50       	subi	r25, 0x01	; 1
    3c42:	50 40       	sbci	r21, 0x00	; 0
    3c44:	a9 f7       	brne	.-22     	; 0x3c30 <__mulsf3_pse+0x64>
    3c46:	9e 3f       	cpi	r25, 0xFE	; 254
    3c48:	51 05       	cpc	r21, r1
    3c4a:	80 f0       	brcs	.+32     	; 0x3c6c <__mulsf3_pse+0xa0>
    3c4c:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    3c50:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>
    3c54:	5f 3f       	cpi	r21, 0xFF	; 255
    3c56:	e4 f3       	brlt	.-8      	; 0x3c50 <__mulsf3_pse+0x84>
    3c58:	98 3e       	cpi	r25, 0xE8	; 232
    3c5a:	d4 f3       	brlt	.-12     	; 0x3c50 <__mulsf3_pse+0x84>
    3c5c:	86 95       	lsr	r24
    3c5e:	77 95       	ror	r23
    3c60:	67 95       	ror	r22
    3c62:	b7 95       	ror	r27
    3c64:	f7 95       	ror	r31
    3c66:	e7 95       	ror	r30
    3c68:	9f 5f       	subi	r25, 0xFF	; 255
    3c6a:	c1 f7       	brne	.-16     	; 0x3c5c <__mulsf3_pse+0x90>
    3c6c:	fe 2b       	or	r31, r30
    3c6e:	88 0f       	add	r24, r24
    3c70:	91 1d       	adc	r25, r1
    3c72:	96 95       	lsr	r25
    3c74:	87 95       	ror	r24
    3c76:	97 f9       	bld	r25, 7
    3c78:	08 95       	ret

00003c7a <__fp_inf>:
    3c7a:	97 f9       	bld	r25, 7
    3c7c:	9f 67       	ori	r25, 0x7F	; 127
    3c7e:	80 e8       	ldi	r24, 0x80	; 128
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	60 e0       	ldi	r22, 0x00	; 0
    3c84:	08 95       	ret

00003c86 <__fp_nan>:
    3c86:	9f ef       	ldi	r25, 0xFF	; 255
    3c88:	80 ec       	ldi	r24, 0xC0	; 192
    3c8a:	08 95       	ret

00003c8c <__fp_pscA>:
    3c8c:	00 24       	eor	r0, r0
    3c8e:	0a 94       	dec	r0
    3c90:	16 16       	cp	r1, r22
    3c92:	17 06       	cpc	r1, r23
    3c94:	18 06       	cpc	r1, r24
    3c96:	09 06       	cpc	r0, r25
__fp_pscA():
    3c98:	08 95       	ret

00003c9a <__fp_pscB>:
__fp_pscB():
    3c9a:	00 24       	eor	r0, r0
    3c9c:	0a 94       	dec	r0
    3c9e:	12 16       	cp	r1, r18
    3ca0:	13 06       	cpc	r1, r19
    3ca2:	14 06       	cpc	r1, r20
    3ca4:	05 06       	cpc	r0, r21
    3ca6:	08 95       	ret

00003ca8 <__fp_round>:
__fp_round():
    3ca8:	09 2e       	mov	r0, r25
    3caa:	03 94       	inc	r0
    3cac:	00 0c       	add	r0, r0
    3cae:	11 f4       	brne	.+4      	; 0x3cb4 <__fp_round+0xc>
    3cb0:	88 23       	and	r24, r24
    3cb2:	52 f0       	brmi	.+20     	; 0x3cc8 <__fp_round+0x20>
    3cb4:	bb 0f       	add	r27, r27
    3cb6:	40 f4       	brcc	.+16     	; 0x3cc8 <__fp_round+0x20>
    3cb8:	bf 2b       	or	r27, r31
    3cba:	11 f4       	brne	.+4      	; 0x3cc0 <__fp_round+0x18>
    3cbc:	60 ff       	sbrs	r22, 0
    3cbe:	04 c0       	rjmp	.+8      	; 0x3cc8 <__fp_round+0x20>
    3cc0:	6f 5f       	subi	r22, 0xFF	; 255
    3cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc8:	08 95       	ret

00003cca <__fp_split3>:
__fp_split3():
    3cca:	57 fd       	sbrc	r21, 7
    3ccc:	90 58       	subi	r25, 0x80	; 128
    3cce:	44 0f       	add	r20, r20
    3cd0:	55 1f       	adc	r21, r21
    3cd2:	59 f0       	breq	.+22     	; 0x3cea <__fp_splitA+0x10>
    3cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cd6:	71 f0       	breq	.+28     	; 0x3cf4 <__fp_splitA+0x1a>
    3cd8:	47 95       	ror	r20

00003cda <__fp_splitA>:
    3cda:	88 0f       	add	r24, r24
    3cdc:	97 fb       	bst	r25, 7
    3cde:	99 1f       	adc	r25, r25
    3ce0:	61 f0       	breq	.+24     	; 0x3cfa <__fp_splitA+0x20>
    3ce2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce4:	79 f0       	breq	.+30     	; 0x3d04 <__fp_splitA+0x2a>
    3ce6:	87 95       	ror	r24
    3ce8:	08 95       	ret
    3cea:	12 16       	cp	r1, r18
    3cec:	13 06       	cpc	r1, r19
    3cee:	14 06       	cpc	r1, r20
    3cf0:	55 1f       	adc	r21, r21
    3cf2:	f2 cf       	rjmp	.-28     	; 0x3cd8 <__fp_split3+0xe>
    3cf4:	46 95       	lsr	r20
    3cf6:	f1 df       	rcall	.-30     	; 0x3cda <__fp_splitA>
    3cf8:	08 c0       	rjmp	.+16     	; 0x3d0a <__fp_splitA+0x30>
    3cfa:	16 16       	cp	r1, r22
    3cfc:	17 06       	cpc	r1, r23
    3cfe:	18 06       	cpc	r1, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	f1 cf       	rjmp	.-30     	; 0x3ce6 <__fp_splitA+0xc>
    3d04:	86 95       	lsr	r24
    3d06:	71 05       	cpc	r23, r1
    3d08:	61 05       	cpc	r22, r1
    3d0a:	08 94       	sec
    3d0c:	08 95       	ret

00003d0e <__fp_zero>:
__fp_zero():
    3d0e:	e8 94       	clt

00003d10 <__fp_szero>:
    3d10:	bb 27       	eor	r27, r27
    3d12:	66 27       	eor	r22, r22
    3d14:	77 27       	eor	r23, r23
    3d16:	cb 01       	movw	r24, r22
    3d18:	97 f9       	bld	r25, 7
    3d1a:	08 95       	ret

00003d1c <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    3d1c:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    3d1e:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    3d20:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    3d22:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    3d26:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    3d28:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    3d2a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    3d2c:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    3d2e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    3d30:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    3d32:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    3d34:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    3d36:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    3d38:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    3d3a:	08 95       	ret

00003d3c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3d3c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3d3e:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3d40:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3d42:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3d44:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3d46:	0d c0       	rjmp	.+26     	; 0x3d62 <__udivmodsi4_ep>

00003d48 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3d48:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3d4a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3d4c:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3d4e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3d50:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3d52:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3d54:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3d56:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3d58:	20 f0       	brcs	.+8      	; 0x3d62 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3d5a:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3d5c:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3d5e:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3d60:	f5 0b       	sbc	r31, r21

00003d62 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3d62:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3d64:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3d66:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3d68:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3d6a:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3d6c:	69 f7       	brne	.-38     	; 0x3d48 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3d6e:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3d70:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3d72:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3d74:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3d76:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3d78:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3d7a:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3d7c:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3d7e:	08 95       	ret

00003d80 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3d80:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3d84:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3d86:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3d88:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3d8a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3d8c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3d8e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3d90:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3d92:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3d94:	08 95       	ret

00003d96 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3d96:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3d98:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3d9a:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3d9c:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3d9e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3da0:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3da2:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3da4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3da6:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3da8:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3daa:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3dac:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3dae:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3db0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3db2:	08 95       	ret

00003db4 <__subsf3>:
__subsf3():
    3db4:	50 58       	subi	r21, 0x80	; 128

00003db6 <__addsf3>:
    3db6:	bb 27       	eor	r27, r27
    3db8:	aa 27       	eor	r26, r26
    3dba:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__addsf3x>
    3dbe:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__fp_round>
__addsf3():
    3dc2:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__fp_pscA>
    3dc6:	38 f0       	brcs	.+14     	; 0x3dd6 <__addsf3+0x20>
    3dc8:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__fp_pscB>
    3dcc:	20 f0       	brcs	.+8      	; 0x3dd6 <__addsf3+0x20>
    3dce:	39 f4       	brne	.+14     	; 0x3dde <__addsf3+0x28>
    3dd0:	9f 3f       	cpi	r25, 0xFF	; 255
    3dd2:	19 f4       	brne	.+6      	; 0x3dda <__addsf3+0x24>
    3dd4:	26 f4       	brtc	.+8      	; 0x3dde <__addsf3+0x28>
    3dd6:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>
    3dda:	0e f4       	brtc	.+2      	; 0x3dde <__addsf3+0x28>
    3ddc:	e0 95       	com	r30
    3dde:	e7 fb       	bst	r30, 7
    3de0:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>

00003de4 <__addsf3x>:
__addsf3x():
    3de4:	e9 2f       	mov	r30, r25
    3de6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fp_split3>
    3dea:	58 f3       	brcs	.-42     	; 0x3dc2 <__addsf3+0xc>
    3dec:	ba 17       	cp	r27, r26
    3dee:	62 07       	cpc	r22, r18
    3df0:	73 07       	cpc	r23, r19
    3df2:	84 07       	cpc	r24, r20
    3df4:	95 07       	cpc	r25, r21
    3df6:	20 f0       	brcs	.+8      	; 0x3e00 <__addsf3x+0x1c>
    3df8:	79 f4       	brne	.+30     	; 0x3e18 <__addsf3x+0x34>
    3dfa:	a6 f5       	brtc	.+104    	; 0x3e64 <__addsf3x+0x80>
    3dfc:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__fp_zero>
    3e00:	0e f4       	brtc	.+2      	; 0x3e04 <__addsf3x+0x20>
    3e02:	e0 95       	com	r30
    3e04:	0b 2e       	mov	r0, r27
    3e06:	ba 2f       	mov	r27, r26
    3e08:	a0 2d       	mov	r26, r0
    3e0a:	0b 01       	movw	r0, r22
    3e0c:	b9 01       	movw	r22, r18
    3e0e:	90 01       	movw	r18, r0
    3e10:	0c 01       	movw	r0, r24
    3e12:	ca 01       	movw	r24, r20
    3e14:	a0 01       	movw	r20, r0
    3e16:	11 24       	eor	r1, r1
    3e18:	ff 27       	eor	r31, r31
    3e1a:	59 1b       	sub	r21, r25
    3e1c:	99 f0       	breq	.+38     	; 0x3e44 <__addsf3x+0x60>
    3e1e:	59 3f       	cpi	r21, 0xF9	; 249
    3e20:	50 f4       	brcc	.+20     	; 0x3e36 <__addsf3x+0x52>
    3e22:	50 3e       	cpi	r21, 0xE0	; 224
    3e24:	68 f1       	brcs	.+90     	; 0x3e80 <__addsf3x+0x9c>
    3e26:	1a 16       	cp	r1, r26
    3e28:	f0 40       	sbci	r31, 0x00	; 0
    3e2a:	a2 2f       	mov	r26, r18
    3e2c:	23 2f       	mov	r18, r19
    3e2e:	34 2f       	mov	r19, r20
    3e30:	44 27       	eor	r20, r20
    3e32:	58 5f       	subi	r21, 0xF8	; 248
    3e34:	f3 cf       	rjmp	.-26     	; 0x3e1c <__addsf3x+0x38>
    3e36:	46 95       	lsr	r20
    3e38:	37 95       	ror	r19
    3e3a:	27 95       	ror	r18
    3e3c:	a7 95       	ror	r26
    3e3e:	f0 40       	sbci	r31, 0x00	; 0
    3e40:	53 95       	inc	r21
    3e42:	c9 f7       	brne	.-14     	; 0x3e36 <__addsf3x+0x52>
    3e44:	7e f4       	brtc	.+30     	; 0x3e64 <__addsf3x+0x80>
    3e46:	1f 16       	cp	r1, r31
    3e48:	ba 0b       	sbc	r27, r26
    3e4a:	62 0b       	sbc	r22, r18
    3e4c:	73 0b       	sbc	r23, r19
    3e4e:	84 0b       	sbc	r24, r20
    3e50:	ba f0       	brmi	.+46     	; 0x3e80 <__addsf3x+0x9c>
    3e52:	91 50       	subi	r25, 0x01	; 1
    3e54:	a1 f0       	breq	.+40     	; 0x3e7e <__addsf3x+0x9a>
    3e56:	ff 0f       	add	r31, r31
    3e58:	bb 1f       	adc	r27, r27
    3e5a:	66 1f       	adc	r22, r22
    3e5c:	77 1f       	adc	r23, r23
    3e5e:	88 1f       	adc	r24, r24
    3e60:	c2 f7       	brpl	.-16     	; 0x3e52 <__addsf3x+0x6e>
    3e62:	0e c0       	rjmp	.+28     	; 0x3e80 <__addsf3x+0x9c>
    3e64:	ba 0f       	add	r27, r26
    3e66:	62 1f       	adc	r22, r18
    3e68:	73 1f       	adc	r23, r19
    3e6a:	84 1f       	adc	r24, r20
    3e6c:	48 f4       	brcc	.+18     	; 0x3e80 <__addsf3x+0x9c>
    3e6e:	87 95       	ror	r24
    3e70:	77 95       	ror	r23
    3e72:	67 95       	ror	r22
    3e74:	b7 95       	ror	r27
    3e76:	f7 95       	ror	r31
    3e78:	9e 3f       	cpi	r25, 0xFE	; 254
    3e7a:	08 f0       	brcs	.+2      	; 0x3e7e <__addsf3x+0x9a>
    3e7c:	b0 cf       	rjmp	.-160    	; 0x3dde <__addsf3+0x28>
    3e7e:	93 95       	inc	r25
    3e80:	88 0f       	add	r24, r24
    3e82:	08 f0       	brcs	.+2      	; 0x3e86 <__addsf3x+0xa2>
    3e84:	99 27       	eor	r25, r25
    3e86:	ee 0f       	add	r30, r30
    3e88:	97 95       	ror	r25
    3e8a:	87 95       	ror	r24
    3e8c:	08 95       	ret

00003e8e <__divsf3>:
    3e8e:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__divsf3x>
    3e92:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__fp_round>
    3e96:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__fp_pscB>
    3e9a:	58 f0       	brcs	.+22     	; 0x3eb2 <__divsf3+0x24>
    3e9c:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__fp_pscA>
    3ea0:	40 f0       	brcs	.+16     	; 0x3eb2 <__divsf3+0x24>
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <__divsf3+0x20>
    3ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ea6:	29 f0       	breq	.+10     	; 0x3eb2 <__divsf3+0x24>
    3ea8:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    3eac:	51 11       	cpse	r21, r1
    3eae:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>
__divsf3():
    3eb2:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>

00003eb6 <__divsf3x>:
__divsf3x():
    3eb6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__fp_split3>
    3eba:	68 f3       	brcs	.-38     	; 0x3e96 <__divsf3+0x8>

00003ebc <__divsf3_pse>:
    3ebc:	99 23       	and	r25, r25
    3ebe:	b1 f3       	breq	.-20     	; 0x3eac <__divsf3+0x1e>
    3ec0:	55 23       	and	r21, r21
    3ec2:	91 f3       	breq	.-28     	; 0x3ea8 <__divsf3+0x1a>
    3ec4:	95 1b       	sub	r25, r21
    3ec6:	55 0b       	sbc	r21, r21
    3ec8:	bb 27       	eor	r27, r27
    3eca:	aa 27       	eor	r26, r26
    3ecc:	62 17       	cp	r22, r18
    3ece:	73 07       	cpc	r23, r19
    3ed0:	84 07       	cpc	r24, r20
    3ed2:	38 f0       	brcs	.+14     	; 0x3ee2 <__divsf3_pse+0x26>
    3ed4:	9f 5f       	subi	r25, 0xFF	; 255
    3ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed8:	22 0f       	add	r18, r18
    3eda:	33 1f       	adc	r19, r19
    3edc:	44 1f       	adc	r20, r20
    3ede:	aa 1f       	adc	r26, r26
    3ee0:	a9 f3       	breq	.-22     	; 0x3ecc <__divsf3_pse+0x10>
    3ee2:	35 d0       	rcall	.+106    	; 0x3f4e <__divsf3_pse+0x92>
    3ee4:	0e 2e       	mov	r0, r30
    3ee6:	3a f0       	brmi	.+14     	; 0x3ef6 <__divsf3_pse+0x3a>
    3ee8:	e0 e8       	ldi	r30, 0x80	; 128
    3eea:	32 d0       	rcall	.+100    	; 0x3f50 <__divsf3_pse+0x94>
    3eec:	91 50       	subi	r25, 0x01	; 1
    3eee:	50 40       	sbci	r21, 0x00	; 0
    3ef0:	e6 95       	lsr	r30
    3ef2:	00 1c       	adc	r0, r0
    3ef4:	ca f7       	brpl	.-14     	; 0x3ee8 <__divsf3_pse+0x2c>
    3ef6:	2b d0       	rcall	.+86     	; 0x3f4e <__divsf3_pse+0x92>
    3ef8:	fe 2f       	mov	r31, r30
    3efa:	29 d0       	rcall	.+82     	; 0x3f4e <__divsf3_pse+0x92>
    3efc:	66 0f       	add	r22, r22
    3efe:	77 1f       	adc	r23, r23
    3f00:	88 1f       	adc	r24, r24
    3f02:	bb 1f       	adc	r27, r27
    3f04:	26 17       	cp	r18, r22
    3f06:	37 07       	cpc	r19, r23
    3f08:	48 07       	cpc	r20, r24
    3f0a:	ab 07       	cpc	r26, r27
    3f0c:	b0 e8       	ldi	r27, 0x80	; 128
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <__divsf3_pse+0x56>
    3f10:	bb 0b       	sbc	r27, r27
    3f12:	80 2d       	mov	r24, r0
    3f14:	bf 01       	movw	r22, r30
    3f16:	ff 27       	eor	r31, r31
    3f18:	93 58       	subi	r25, 0x83	; 131
    3f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1c:	3a f0       	brmi	.+14     	; 0x3f2c <__divsf3_pse+0x70>
    3f1e:	9e 3f       	cpi	r25, 0xFE	; 254
    3f20:	51 05       	cpc	r21, r1
    3f22:	78 f0       	brcs	.+30     	; 0x3f42 <__divsf3_pse+0x86>
    3f24:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    3f28:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>
    3f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2e:	e4 f3       	brlt	.-8      	; 0x3f28 <__divsf3_pse+0x6c>
    3f30:	98 3e       	cpi	r25, 0xE8	; 232
    3f32:	d4 f3       	brlt	.-12     	; 0x3f28 <__divsf3_pse+0x6c>
    3f34:	86 95       	lsr	r24
    3f36:	77 95       	ror	r23
    3f38:	67 95       	ror	r22
    3f3a:	b7 95       	ror	r27
    3f3c:	f7 95       	ror	r31
    3f3e:	9f 5f       	subi	r25, 0xFF	; 255
    3f40:	c9 f7       	brne	.-14     	; 0x3f34 <__divsf3_pse+0x78>
    3f42:	88 0f       	add	r24, r24
    3f44:	91 1d       	adc	r25, r1
    3f46:	96 95       	lsr	r25
    3f48:	87 95       	ror	r24
    3f4a:	97 f9       	bld	r25, 7
    3f4c:	08 95       	ret
    3f4e:	e1 e0       	ldi	r30, 0x01	; 1
    3f50:	66 0f       	add	r22, r22
    3f52:	77 1f       	adc	r23, r23
    3f54:	88 1f       	adc	r24, r24
    3f56:	bb 1f       	adc	r27, r27
    3f58:	62 17       	cp	r22, r18
    3f5a:	73 07       	cpc	r23, r19
    3f5c:	84 07       	cpc	r24, r20
    3f5e:	ba 07       	cpc	r27, r26
    3f60:	20 f0       	brcs	.+8      	; 0x3f6a <__divsf3_pse+0xae>
    3f62:	62 1b       	sub	r22, r18
    3f64:	73 0b       	sbc	r23, r19
    3f66:	84 0b       	sbc	r24, r20
    3f68:	ba 0b       	sbc	r27, r26
    3f6a:	ee 1f       	adc	r30, r30
    3f6c:	88 f7       	brcc	.-30     	; 0x3f50 <__divsf3_pse+0x94>
    3f6e:	e0 95       	com	r30
    3f70:	08 95       	ret

00003f72 <__fixsfsi>:
    3f72:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__fixunssfsi>
    3f76:	68 94       	set
    3f78:	b1 11       	cpse	r27, r1
    3f7a:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>
    3f7e:	08 95       	ret

00003f80 <__fixunssfsi>:
    3f80:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fp_splitA>
    3f84:	88 f0       	brcs	.+34     	; 0x3fa8 <__fixunssfsi+0x28>
    3f86:	9f 57       	subi	r25, 0x7F	; 127
    3f88:	98 f0       	brcs	.+38     	; 0x3fb0 <__fixunssfsi+0x30>
    3f8a:	b9 2f       	mov	r27, r25
    3f8c:	99 27       	eor	r25, r25
    3f8e:	b7 51       	subi	r27, 0x17	; 23
    3f90:	b0 f0       	brcs	.+44     	; 0x3fbe <__fixunssfsi+0x3e>
__fixunssfsi():
    3f92:	e1 f0       	breq	.+56     	; 0x3fcc <__fixunssfsi+0x4c>
    3f94:	66 0f       	add	r22, r22
    3f96:	77 1f       	adc	r23, r23
    3f98:	88 1f       	adc	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	1a f0       	brmi	.+6      	; 0x3fa4 <__fixunssfsi+0x24>
    3f9e:	ba 95       	dec	r27
    3fa0:	c9 f7       	brne	.-14     	; 0x3f94 <__fixunssfsi+0x14>
    3fa2:	14 c0       	rjmp	.+40     	; 0x3fcc <__fixunssfsi+0x4c>
    3fa4:	b1 30       	cpi	r27, 0x01	; 1
    3fa6:	91 f0       	breq	.+36     	; 0x3fcc <__fixunssfsi+0x4c>
    3fa8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__fp_zero>
    3fac:	b1 e0       	ldi	r27, 0x01	; 1
    3fae:	08 95       	ret
    3fb0:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__fp_zero>
    3fb4:	67 2f       	mov	r22, r23
    3fb6:	78 2f       	mov	r23, r24
    3fb8:	88 27       	eor	r24, r24
    3fba:	b8 5f       	subi	r27, 0xF8	; 248
    3fbc:	39 f0       	breq	.+14     	; 0x3fcc <__fixunssfsi+0x4c>
    3fbe:	b9 3f       	cpi	r27, 0xF9	; 249
    3fc0:	cc f3       	brlt	.-14     	; 0x3fb4 <__fixunssfsi+0x34>
    3fc2:	86 95       	lsr	r24
    3fc4:	77 95       	ror	r23
    3fc6:	67 95       	ror	r22
    3fc8:	b3 95       	inc	r27
    3fca:	d9 f7       	brne	.-10     	; 0x3fc2 <__fixunssfsi+0x42>
    3fcc:	3e f4       	brtc	.+14     	; 0x3fdc <__fixunssfsi+0x5c>
    3fce:	90 95       	com	r25
    3fd0:	80 95       	com	r24
    3fd2:	70 95       	com	r23
    3fd4:	61 95       	neg	r22
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fda:	9f 4f       	sbci	r25, 0xFF	; 255
    3fdc:	08 95       	ret

00003fde <__gesf2>:
__gesf2():
    3fde:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <__fp_cmp>
    3fe2:	08 f4       	brcc	.+2      	; 0x3fe6 <__gesf2+0x8>
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	08 95       	ret

00003fe8 <pow>:
pow():
    3fe8:	fa 01       	movw	r30, r20
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	30 96       	adiw	r30, 0x00	; 0
    3ff0:	21 05       	cpc	r18, r1
    3ff2:	31 05       	cpc	r19, r1
    3ff4:	a1 f1       	breq	.+104    	; 0x405e <pow+0x76>
    3ff6:	61 15       	cp	r22, r1
    3ff8:	71 05       	cpc	r23, r1
    3ffa:	61 f4       	brne	.+24     	; 0x4014 <pow+0x2c>
    3ffc:	80 38       	cpi	r24, 0x80	; 128
    3ffe:	bf e3       	ldi	r27, 0x3F	; 63
    4000:	9b 07       	cpc	r25, r27
    4002:	49 f1       	breq	.+82     	; 0x4056 <pow+0x6e>
    4004:	68 94       	set
    4006:	90 38       	cpi	r25, 0x80	; 128
    4008:	81 05       	cpc	r24, r1
    400a:	61 f0       	breq	.+24     	; 0x4024 <pow+0x3c>
    400c:	80 38       	cpi	r24, 0x80	; 128
    400e:	bf ef       	ldi	r27, 0xFF	; 255
    4010:	9b 07       	cpc	r25, r27
    4012:	41 f0       	breq	.+16     	; 0x4024 <pow+0x3c>
    4014:	99 23       	and	r25, r25
    4016:	4a f5       	brpl	.+82     	; 0x406a <pow+0x82>
    4018:	ff 3f       	cpi	r31, 0xFF	; 255
    401a:	e1 05       	cpc	r30, r1
    401c:	31 05       	cpc	r19, r1
    401e:	21 05       	cpc	r18, r1
    4020:	19 f1       	breq	.+70     	; 0x4068 <pow+0x80>
    4022:	e8 94       	clt
    4024:	08 94       	sec
    4026:	e7 95       	ror	r30
    4028:	d9 01       	movw	r26, r18
    402a:	aa 23       	and	r26, r26
    402c:	29 f4       	brne	.+10     	; 0x4038 <pow+0x50>
    402e:	ab 2f       	mov	r26, r27
    4030:	be 2f       	mov	r27, r30
    4032:	f8 5f       	subi	r31, 0xF8	; 248
    4034:	d0 f3       	brcs	.-12     	; 0x402a <pow+0x42>
    4036:	10 c0       	rjmp	.+32     	; 0x4058 <pow+0x70>
    4038:	ff 5f       	subi	r31, 0xFF	; 255
    403a:	70 f4       	brcc	.+28     	; 0x4058 <pow+0x70>
    403c:	a6 95       	lsr	r26
    403e:	e0 f7       	brcc	.-8      	; 0x4038 <pow+0x50>
    4040:	f7 39       	cpi	r31, 0x97	; 151
    4042:	50 f0       	brcs	.+20     	; 0x4058 <pow+0x70>
    4044:	19 f0       	breq	.+6      	; 0x404c <pow+0x64>
    4046:	ff 3a       	cpi	r31, 0xAF	; 175
    4048:	38 f4       	brcc	.+14     	; 0x4058 <pow+0x70>
    404a:	9f 77       	andi	r25, 0x7F	; 127
    404c:	9f 93       	push	r25
    404e:	0d d0       	rcall	.+26     	; 0x406a <pow+0x82>
    4050:	0f 90       	pop	r0
    4052:	07 fc       	sbrc	r0, 7
    4054:	90 58       	subi	r25, 0x80	; 128
    4056:	08 95       	ret
    4058:	46 f0       	brts	.+16     	; 0x406a <pow+0x82>
    405a:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	80 e8       	ldi	r24, 0x80	; 128
    4064:	9f e3       	ldi	r25, 0x3F	; 63
    4066:	08 95       	ret
    4068:	4f e7       	ldi	r20, 0x7F	; 127
    406a:	9f 77       	andi	r25, 0x7F	; 127
    406c:	5f 93       	push	r21
    406e:	4f 93       	push	r20
    4070:	3f 93       	push	r19
    4072:	2f 93       	push	r18
    4074:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <log>
    4078:	2f 91       	pop	r18
    407a:	3f 91       	pop	r19
    407c:	4f 91       	pop	r20
    407e:	5f 91       	pop	r21
    4080:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    4084:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <exp>

00004088 <__unordsf2>:
__unordsf2():
    4088:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <__fp_cmp>
    408c:	88 0b       	sbc	r24, r24
    408e:	99 0b       	sbc	r25, r25
    4090:	08 95       	ret
    4092:	29 f4       	brne	.+10     	; 0x409e <__unordsf2+0x16>
    4094:	16 f0       	brts	.+4      	; 0x409a <__unordsf2+0x12>
    4096:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    409a:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__fp_zero>
    409e:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>

000040a2 <exp>:
exp():
    40a2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fp_splitA>
    40a6:	a8 f3       	brcs	.-22     	; 0x4092 <__unordsf2+0xa>
    40a8:	96 38       	cpi	r25, 0x86	; 134
    40aa:	a0 f7       	brcc	.-24     	; 0x4094 <__unordsf2+0xc>
    40ac:	07 f8       	bld	r0, 7
    40ae:	0f 92       	push	r0
    40b0:	e8 94       	clt
    40b2:	2b e3       	ldi	r18, 0x3B	; 59
    40b4:	3a ea       	ldi	r19, 0xAA	; 170
    40b6:	48 eb       	ldi	r20, 0xB8	; 184
    40b8:	5f e7       	ldi	r21, 0x7F	; 127
    40ba:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__mulsf3_pse>
    40be:	0f 92       	push	r0
    40c0:	0f 92       	push	r0
    40c2:	0f 92       	push	r0
    40c4:	4d b7       	in	r20, 0x3d	; 61
    40c6:	5e b7       	in	r21, 0x3e	; 62
    40c8:	0f 92       	push	r0
    40ca:	0e 94 3c 21 	call	0x4278	; 0x4278 <modf>
    40ce:	e4 eb       	ldi	r30, 0xB4	; 180
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	0e 94 83 20 	call	0x4106	; 0x4106 <__fp_powser>
    40d6:	4f 91       	pop	r20
    40d8:	5f 91       	pop	r21
    40da:	ef 91       	pop	r30
    40dc:	ff 91       	pop	r31
    40de:	e5 95       	asr	r30
    40e0:	ee 1f       	adc	r30, r30
    40e2:	ff 1f       	adc	r31, r31
    40e4:	49 f0       	breq	.+18     	; 0x40f8 <exp+0x56>
    40e6:	fe 57       	subi	r31, 0x7E	; 126
    40e8:	e0 68       	ori	r30, 0x80	; 128
    40ea:	44 27       	eor	r20, r20
    40ec:	ee 0f       	add	r30, r30
    40ee:	44 1f       	adc	r20, r20
    40f0:	fa 95       	dec	r31
    40f2:	e1 f7       	brne	.-8      	; 0x40ec <exp+0x4a>
    40f4:	41 95       	neg	r20
    40f6:	55 0b       	sbc	r21, r21
    40f8:	0e 94 b6 20 	call	0x416c	; 0x416c <ldexp>
    40fc:	0f 90       	pop	r0
    40fe:	07 fe       	sbrs	r0, 7
    4100:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <inverse>
    4104:	08 95       	ret

00004106 <__fp_powser>:
    4106:	df 93       	push	r29
    4108:	cf 93       	push	r28
    410a:	1f 93       	push	r17
    410c:	0f 93       	push	r16
    410e:	ff 92       	push	r15
    4110:	ef 92       	push	r14
    4112:	df 92       	push	r13
    4114:	7b 01       	movw	r14, r22
__fp_powser():
    4116:	8c 01       	movw	r16, r24
    4118:	68 94       	set
    411a:	06 c0       	rjmp	.+12     	; 0x4128 <__fp_powser+0x22>
    411c:	da 2e       	mov	r13, r26
    411e:	ef 01       	movw	r28, r30
    4120:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__mulsf3x>
    4124:	fe 01       	movw	r30, r28
    4126:	e8 94       	clt
    4128:	a5 91       	lpm	r26, Z+
    412a:	25 91       	lpm	r18, Z+
    412c:	35 91       	lpm	r19, Z+
    412e:	45 91       	lpm	r20, Z+
    4130:	55 91       	lpm	r21, Z+
    4132:	a6 f3       	brts	.-24     	; 0x411c <__fp_powser+0x16>
    4134:	ef 01       	movw	r28, r30
    4136:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__addsf3x>
    413a:	fe 01       	movw	r30, r28
    413c:	97 01       	movw	r18, r14
    413e:	a8 01       	movw	r20, r16
    4140:	da 94       	dec	r13
    4142:	69 f7       	brne	.-38     	; 0x411e <__fp_powser+0x18>
    4144:	df 90       	pop	r13
    4146:	ef 90       	pop	r14
    4148:	ff 90       	pop	r15
    414a:	0f 91       	pop	r16
    414c:	1f 91       	pop	r17
    414e:	cf 91       	pop	r28
    4150:	df 91       	pop	r29
    4152:	08 95       	ret

00004154 <inverse>:
inverse():
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	80 e8       	ldi	r24, 0x80	; 128
    415e:	9f e3       	ldi	r25, 0x3F	; 63
    4160:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__divsf3>
    4164:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>
    4168:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__fp_mpack>

0000416c <ldexp>:
ldexp():
    416c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fp_splitA>
    4170:	d8 f3       	brcs	.-10     	; 0x4168 <inverse+0x14>
    4172:	99 23       	and	r25, r25
    4174:	c9 f3       	breq	.-14     	; 0x4168 <inverse+0x14>
    4176:	94 0f       	add	r25, r20
    4178:	51 1d       	adc	r21, r1
    417a:	a3 f3       	brvs	.-24     	; 0x4164 <inverse+0x10>
    417c:	91 50       	subi	r25, 0x01	; 1
    417e:	50 40       	sbci	r21, 0x00	; 0
    4180:	94 f0       	brlt	.+36     	; 0x41a6 <ldexp+0x3a>
    4182:	59 f0       	breq	.+22     	; 0x419a <ldexp+0x2e>
    4184:	88 23       	and	r24, r24
    4186:	32 f0       	brmi	.+12     	; 0x4194 <ldexp+0x28>
    4188:	66 0f       	add	r22, r22
    418a:	77 1f       	adc	r23, r23
    418c:	88 1f       	adc	r24, r24
    418e:	91 50       	subi	r25, 0x01	; 1
    4190:	50 40       	sbci	r21, 0x00	; 0
    4192:	c1 f7       	brne	.-16     	; 0x4184 <ldexp+0x18>
    4194:	9e 3f       	cpi	r25, 0xFE	; 254
    4196:	51 05       	cpc	r21, r1
    4198:	2c f7       	brge	.-54     	; 0x4164 <inverse+0x10>
    419a:	88 0f       	add	r24, r24
    419c:	91 1d       	adc	r25, r1
    419e:	96 95       	lsr	r25
    41a0:	87 95       	ror	r24
    41a2:	97 f9       	bld	r25, 7
    41a4:	08 95       	ret
    41a6:	5f 3f       	cpi	r21, 0xFF	; 255
    41a8:	ac f0       	brlt	.+42     	; 0x41d4 <ldexp+0x68>
    41aa:	98 3e       	cpi	r25, 0xE8	; 232
    41ac:	9c f0       	brlt	.+38     	; 0x41d4 <ldexp+0x68>
    41ae:	bb 27       	eor	r27, r27
    41b0:	86 95       	lsr	r24
    41b2:	77 95       	ror	r23
    41b4:	67 95       	ror	r22
    41b6:	b7 95       	ror	r27
    41b8:	08 f4       	brcc	.+2      	; 0x41bc <ldexp+0x50>
    41ba:	b1 60       	ori	r27, 0x01	; 1
    41bc:	93 95       	inc	r25
    41be:	c1 f7       	brne	.-16     	; 0x41b0 <ldexp+0x44>
    41c0:	bb 0f       	add	r27, r27
    41c2:	58 f7       	brcc	.-42     	; 0x419a <ldexp+0x2e>
    41c4:	11 f4       	brne	.+4      	; 0x41ca <ldexp+0x5e>
    41c6:	60 ff       	sbrs	r22, 0
    41c8:	e8 cf       	rjmp	.-48     	; 0x419a <ldexp+0x2e>
    41ca:	6f 5f       	subi	r22, 0xFF	; 255
    41cc:	7f 4f       	sbci	r23, 0xFF	; 255
    41ce:	8f 4f       	sbci	r24, 0xFF	; 255
    41d0:	9f 4f       	sbci	r25, 0xFF	; 255
    41d2:	e3 cf       	rjmp	.-58     	; 0x419a <ldexp+0x2e>
    41d4:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__fp_szero>
    41d8:	16 f0       	brts	.+4      	; 0x41de <ldexp+0x72>
    41da:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__fp_mpack>
    41de:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__fp_nan>
    41e2:	68 94       	set
    41e4:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_inf>

000041e8 <log>:
log():
    41e8:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fp_splitA>
    41ec:	a8 f3       	brcs	.-22     	; 0x41d8 <ldexp+0x6c>
    41ee:	99 23       	and	r25, r25
    41f0:	c1 f3       	breq	.-16     	; 0x41e2 <ldexp+0x76>
    41f2:	ae f3       	brts	.-22     	; 0x41de <ldexp+0x72>
    41f4:	df 93       	push	r29
    41f6:	cf 93       	push	r28
    41f8:	1f 93       	push	r17
    41fa:	0f 93       	push	r16
    41fc:	ff 92       	push	r15
    41fe:	c9 2f       	mov	r28, r25
    4200:	dd 27       	eor	r29, r29
    4202:	88 23       	and	r24, r24
    4204:	2a f0       	brmi	.+10     	; 0x4210 <log+0x28>
    4206:	21 97       	sbiw	r28, 0x01	; 1
    4208:	66 0f       	add	r22, r22
    420a:	77 1f       	adc	r23, r23
    420c:	88 1f       	adc	r24, r24
    420e:	da f7       	brpl	.-10     	; 0x4206 <log+0x1e>
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	40 e8       	ldi	r20, 0x80	; 128
    4216:	5f eb       	ldi	r21, 0xBF	; 191
    4218:	9f e3       	ldi	r25, 0x3F	; 63
    421a:	88 39       	cpi	r24, 0x98	; 152
    421c:	20 f0       	brcs	.+8      	; 0x4226 <log+0x3e>
    421e:	80 3e       	cpi	r24, 0xE0	; 224
    4220:	38 f0       	brcs	.+14     	; 0x4230 <log+0x48>
    4222:	21 96       	adiw	r28, 0x01	; 1
    4224:	8f 77       	andi	r24, 0x7F	; 127
    4226:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__addsf3>
    422a:	ec ed       	ldi	r30, 0xDC	; 220
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	04 c0       	rjmp	.+8      	; 0x4238 <log+0x50>
    4230:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__addsf3>
    4234:	e9 e0       	ldi	r30, 0x09	; 9
    4236:	f1 e0       	ldi	r31, 0x01	; 1
    4238:	0e 94 83 20 	call	0x4106	; 0x4106 <__fp_powser>
    423c:	8b 01       	movw	r16, r22
    423e:	be 01       	movw	r22, r28
    4240:	ec 01       	movw	r28, r24
    4242:	fb 2e       	mov	r15, r27
    4244:	6f 57       	subi	r22, 0x7F	; 127
    4246:	71 09       	sbc	r23, r1
    4248:	75 95       	asr	r23
    424a:	77 1f       	adc	r23, r23
    424c:	88 0b       	sbc	r24, r24
    424e:	99 0b       	sbc	r25, r25
    4250:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__floatsisf>
    4254:	28 e1       	ldi	r18, 0x18	; 24
    4256:	32 e7       	ldi	r19, 0x72	; 114
    4258:	41 e3       	ldi	r20, 0x31	; 49
    425a:	5f e3       	ldi	r21, 0x3F	; 63
    425c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__mulsf3x>
    4260:	af 2d       	mov	r26, r15
    4262:	98 01       	movw	r18, r16
    4264:	ae 01       	movw	r20, r28
    4266:	ff 90       	pop	r15
    4268:	0f 91       	pop	r16
    426a:	1f 91       	pop	r17
    426c:	cf 91       	pop	r28
    426e:	df 91       	pop	r29
    4270:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__addsf3x>
    4274:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__fp_round>

00004278 <modf>:
    4278:	fa 01       	movw	r30, r20
    427a:	dc 01       	movw	r26, r24
    427c:	aa 0f       	add	r26, r26
    427e:	bb 1f       	adc	r27, r27
    4280:	9b 01       	movw	r18, r22
    4282:	ac 01       	movw	r20, r24
    4284:	bf 57       	subi	r27, 0x7F	; 127
    4286:	28 f4       	brcc	.+10     	; 0x4292 <modf+0x1a>
modf():
    4288:	22 27       	eor	r18, r18
    428a:	33 27       	eor	r19, r19
    428c:	44 27       	eor	r20, r20
    428e:	50 78       	andi	r21, 0x80	; 128
    4290:	20 c0       	rjmp	.+64     	; 0x42d2 <modf+0x5a>
    4292:	b7 51       	subi	r27, 0x17	; 23
    4294:	90 f4       	brcc	.+36     	; 0x42ba <modf+0x42>
    4296:	ab 2f       	mov	r26, r27
    4298:	00 24       	eor	r0, r0
    429a:	46 95       	lsr	r20
    429c:	37 95       	ror	r19
    429e:	27 95       	ror	r18
    42a0:	01 1c       	adc	r0, r1
    42a2:	a3 95       	inc	r26
    42a4:	d2 f3       	brmi	.-12     	; 0x429a <modf+0x22>
    42a6:	00 20       	and	r0, r0
    42a8:	71 f0       	breq	.+28     	; 0x42c6 <modf+0x4e>
    42aa:	22 0f       	add	r18, r18
    42ac:	33 1f       	adc	r19, r19
    42ae:	44 1f       	adc	r20, r20
    42b0:	b3 95       	inc	r27
    42b2:	da f3       	brmi	.-10     	; 0x42aa <modf+0x32>
    42b4:	0e d0       	rcall	.+28     	; 0x42d2 <modf+0x5a>
    42b6:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__subsf3>
    42ba:	61 30       	cpi	r22, 0x01	; 1
    42bc:	71 05       	cpc	r23, r1
    42be:	a0 e8       	ldi	r26, 0x80	; 128
    42c0:	8a 07       	cpc	r24, r26
    42c2:	b9 46       	sbci	r27, 0x69	; 105
    42c4:	30 f4       	brcc	.+12     	; 0x42d2 <modf+0x5a>
    42c6:	9b 01       	movw	r18, r22
    42c8:	ac 01       	movw	r20, r24
    42ca:	66 27       	eor	r22, r22
    42cc:	77 27       	eor	r23, r23
    42ce:	88 27       	eor	r24, r24
    42d0:	90 78       	andi	r25, 0x80	; 128
    42d2:	30 96       	adiw	r30, 0x00	; 0
    42d4:	21 f0       	breq	.+8      	; 0x42de <modf+0x66>
    42d6:	20 83       	st	Z, r18
    42d8:	31 83       	std	Z+1, r19	; 0x01
    42da:	42 83       	std	Z+2, r20	; 0x02
    42dc:	53 83       	std	Z+3, r21	; 0x03
    42de:	08 95       	ret

000042e0 <__fp_mpack>:
__fp_mpack():
    42e0:	9f 3f       	cpi	r25, 0xFF	; 255
    42e2:	31 f0       	breq	.+12     	; 0x42f0 <__fp_mpack_finite+0xc>

000042e4 <__fp_mpack_finite>:
    42e4:	91 50       	subi	r25, 0x01	; 1
    42e6:	20 f4       	brcc	.+8      	; 0x42f0 <__fp_mpack_finite+0xc>
    42e8:	87 95       	ror	r24
    42ea:	77 95       	ror	r23
    42ec:	67 95       	ror	r22
    42ee:	b7 95       	ror	r27
    42f0:	88 0f       	add	r24, r24
    42f2:	91 1d       	adc	r25, r1
    42f4:	96 95       	lsr	r25
    42f6:	87 95       	ror	r24
    42f8:	97 f9       	bld	r25, 7
    42fa:	08 95       	ret

000042fc <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    42fc:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    42fe:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4300:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4302:	07 c0       	rjmp	.+14     	; 0x4312 <__udivmodhi4_ep>

00004304 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4304:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4306:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4308:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    430a:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    430c:	10 f0       	brcs	.+4      	; 0x4312 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    430e:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4310:	b7 0b       	sbc	r27, r23

00004312 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4312:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4314:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4316:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4318:	a9 f7       	brne	.-22     	; 0x4304 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    431a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    431c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    431e:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4320:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4322:	08 95       	ret

00004324 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    4324:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    4326:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    4328:	16 f4       	brtc	.+4      	; 0x432e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    432a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    432c:	07 d0       	rcall	.+14     	; 0x433c <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    432e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    4330:	09 d0       	rcall	.+18     	; 0x4344 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    4332:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    4336:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    4338:	05 d0       	rcall	.+10     	; 0x4344 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    433a:	3e f4       	brtc	.+14     	; 0x434a <__divmodhi4_exit>

0000433c <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    433c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    433e:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    4340:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    4342:	08 95       	ret

00004344 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    4344:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    4346:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    4348:	7f 4f       	sbci	r23, 0xFF	; 255

0000434a <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    434a:	08 95       	ret

0000434c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    434c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    434e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4350:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4352:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4354:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4356:	09 94       	ijmp

00004358 <malloc>:
malloc():
    4358:	0f 93       	push	r16
    435a:	1f 93       	push	r17
    435c:	cf 93       	push	r28
    435e:	df 93       	push	r29
    4360:	82 30       	cpi	r24, 0x02	; 2
    4362:	91 05       	cpc	r25, r1
    4364:	10 f4       	brcc	.+4      	; 0x436a <malloc+0x12>
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <__flp>
    436e:	f0 91 f7 05 	lds	r31, 0x05F7	; 0x8005f7 <__flp+0x1>
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	a0 e0       	ldi	r26, 0x00	; 0
    437a:	30 97       	sbiw	r30, 0x00	; 0
    437c:	99 f4       	brne	.+38     	; 0x43a4 <malloc+0x4c>
    437e:	21 15       	cp	r18, r1
    4380:	31 05       	cpc	r19, r1
    4382:	09 f4       	brne	.+2      	; 0x4386 <malloc+0x2e>
    4384:	4a c0       	rjmp	.+148    	; 0x441a <malloc+0xc2>
    4386:	28 1b       	sub	r18, r24
    4388:	39 0b       	sbc	r19, r25
    438a:	24 30       	cpi	r18, 0x04	; 4
    438c:	31 05       	cpc	r19, r1
    438e:	d8 f5       	brcc	.+118    	; 0x4406 <malloc+0xae>
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	9b 81       	ldd	r25, Y+3	; 0x03
    4394:	61 15       	cp	r22, r1
    4396:	71 05       	cpc	r23, r1
    4398:	89 f1       	breq	.+98     	; 0x43fc <malloc+0xa4>
    439a:	fb 01       	movw	r30, r22
    439c:	93 83       	std	Z+3, r25	; 0x03
    439e:	82 83       	std	Z+2, r24	; 0x02
    43a0:	fe 01       	movw	r30, r28
    43a2:	11 c0       	rjmp	.+34     	; 0x43c6 <malloc+0x6e>
    43a4:	40 81       	ld	r20, Z
    43a6:	51 81       	ldd	r21, Z+1	; 0x01
    43a8:	02 81       	ldd	r16, Z+2	; 0x02
    43aa:	13 81       	ldd	r17, Z+3	; 0x03
    43ac:	48 17       	cp	r20, r24
    43ae:	59 07       	cpc	r21, r25
    43b0:	e0 f0       	brcs	.+56     	; 0x43ea <malloc+0x92>
    43b2:	48 17       	cp	r20, r24
    43b4:	59 07       	cpc	r21, r25
    43b6:	99 f4       	brne	.+38     	; 0x43de <malloc+0x86>
    43b8:	10 97       	sbiw	r26, 0x00	; 0
    43ba:	61 f0       	breq	.+24     	; 0x43d4 <malloc+0x7c>
    43bc:	12 96       	adiw	r26, 0x02	; 2
    43be:	0c 93       	st	X, r16
    43c0:	12 97       	sbiw	r26, 0x02	; 2
    43c2:	13 96       	adiw	r26, 0x03	; 3
    43c4:	1c 93       	st	X, r17
    43c6:	32 96       	adiw	r30, 0x02	; 2
    43c8:	cf 01       	movw	r24, r30
    43ca:	df 91       	pop	r29
    43cc:	cf 91       	pop	r28
    43ce:	1f 91       	pop	r17
    43d0:	0f 91       	pop	r16
    43d2:	08 95       	ret
    43d4:	00 93 f6 05 	sts	0x05F6, r16	; 0x8005f6 <__flp>
    43d8:	10 93 f7 05 	sts	0x05F7, r17	; 0x8005f7 <__flp+0x1>
    43dc:	f4 cf       	rjmp	.-24     	; 0x43c6 <malloc+0x6e>
    43de:	21 15       	cp	r18, r1
    43e0:	31 05       	cpc	r19, r1
    43e2:	51 f0       	breq	.+20     	; 0x43f8 <malloc+0xa0>
    43e4:	42 17       	cp	r20, r18
    43e6:	53 07       	cpc	r21, r19
    43e8:	38 f0       	brcs	.+14     	; 0x43f8 <malloc+0xa0>
    43ea:	a9 01       	movw	r20, r18
    43ec:	db 01       	movw	r26, r22
    43ee:	9a 01       	movw	r18, r20
    43f0:	bd 01       	movw	r22, r26
    43f2:	df 01       	movw	r26, r30
    43f4:	f8 01       	movw	r30, r16
    43f6:	c1 cf       	rjmp	.-126    	; 0x437a <malloc+0x22>
    43f8:	ef 01       	movw	r28, r30
    43fa:	f9 cf       	rjmp	.-14     	; 0x43ee <malloc+0x96>
    43fc:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <__flp+0x1>
    4400:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <__flp>
    4404:	cd cf       	rjmp	.-102    	; 0x43a0 <malloc+0x48>
    4406:	fe 01       	movw	r30, r28
    4408:	e2 0f       	add	r30, r18
    440a:	f3 1f       	adc	r31, r19
    440c:	81 93       	st	Z+, r24
    440e:	91 93       	st	Z+, r25
    4410:	22 50       	subi	r18, 0x02	; 2
    4412:	31 09       	sbc	r19, r1
    4414:	39 83       	std	Y+1, r19	; 0x01
    4416:	28 83       	st	Y, r18
    4418:	d7 cf       	rjmp	.-82     	; 0x43c8 <malloc+0x70>
    441a:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <__brkval>
    441e:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <__brkval+0x1>
    4422:	23 2b       	or	r18, r19
    4424:	41 f4       	brne	.+16     	; 0x4436 <malloc+0xde>
    4426:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_start>
    442a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_start+0x1>
    442e:	30 93 f5 05 	sts	0x05F5, r19	; 0x8005f5 <__brkval+0x1>
    4432:	20 93 f4 05 	sts	0x05F4, r18	; 0x8005f4 <__brkval>
    4436:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_end>
    443a:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_end+0x1>
    443e:	21 15       	cp	r18, r1
    4440:	31 05       	cpc	r19, r1
    4442:	41 f4       	brne	.+16     	; 0x4454 <malloc+0xfc>
    4444:	2d b7       	in	r18, 0x3d	; 61
    4446:	3e b7       	in	r19, 0x3e	; 62
    4448:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <__malloc_margin>
    444c:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <__malloc_margin+0x1>
    4450:	24 1b       	sub	r18, r20
    4452:	35 0b       	sbc	r19, r21
    4454:	e0 91 f4 05 	lds	r30, 0x05F4	; 0x8005f4 <__brkval>
    4458:	f0 91 f5 05 	lds	r31, 0x05F5	; 0x8005f5 <__brkval+0x1>
    445c:	e2 17       	cp	r30, r18
    445e:	f3 07       	cpc	r31, r19
    4460:	a0 f4       	brcc	.+40     	; 0x448a <malloc+0x132>
    4462:	2e 1b       	sub	r18, r30
    4464:	3f 0b       	sbc	r19, r31
    4466:	28 17       	cp	r18, r24
    4468:	39 07       	cpc	r19, r25
    446a:	78 f0       	brcs	.+30     	; 0x448a <malloc+0x132>
    446c:	ac 01       	movw	r20, r24
    446e:	4e 5f       	subi	r20, 0xFE	; 254
    4470:	5f 4f       	sbci	r21, 0xFF	; 255
    4472:	24 17       	cp	r18, r20
    4474:	35 07       	cpc	r19, r21
    4476:	48 f0       	brcs	.+18     	; 0x448a <malloc+0x132>
    4478:	4e 0f       	add	r20, r30
    447a:	5f 1f       	adc	r21, r31
    447c:	50 93 f5 05 	sts	0x05F5, r21	; 0x8005f5 <__brkval+0x1>
    4480:	40 93 f4 05 	sts	0x05F4, r20	; 0x8005f4 <__brkval>
    4484:	81 93       	st	Z+, r24
    4486:	91 93       	st	Z+, r25
    4488:	9f cf       	rjmp	.-194    	; 0x43c8 <malloc+0x70>
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	e0 e0       	ldi	r30, 0x00	; 0
    448e:	9c cf       	rjmp	.-200    	; 0x43c8 <malloc+0x70>

00004490 <free>:
free():
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	e9 f0       	breq	.+58     	; 0x44d2 <free+0x42>
    4498:	fc 01       	movw	r30, r24
    449a:	32 97       	sbiw	r30, 0x02	; 2
    449c:	13 82       	std	Z+3, r1	; 0x03
    449e:	12 82       	std	Z+2, r1	; 0x02
    44a0:	a0 91 f6 05 	lds	r26, 0x05F6	; 0x8005f6 <__flp>
    44a4:	b0 91 f7 05 	lds	r27, 0x05F7	; 0x8005f7 <__flp+0x1>
    44a8:	ed 01       	movw	r28, r26
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	10 97       	sbiw	r26, 0x00	; 0
    44b0:	a1 f4       	brne	.+40     	; 0x44da <free+0x4a>
    44b2:	20 81       	ld	r18, Z
    44b4:	31 81       	ldd	r19, Z+1	; 0x01
    44b6:	82 0f       	add	r24, r18
    44b8:	93 1f       	adc	r25, r19
    44ba:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <__brkval>
    44be:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <__brkval+0x1>
    44c2:	28 17       	cp	r18, r24
    44c4:	39 07       	cpc	r19, r25
    44c6:	09 f0       	breq	.+2      	; 0x44ca <free+0x3a>
    44c8:	61 c0       	rjmp	.+194    	; 0x458c <free+0xfc>
    44ca:	f0 93 f5 05 	sts	0x05F5, r31	; 0x8005f5 <__brkval+0x1>
    44ce:	e0 93 f4 05 	sts	0x05F4, r30	; 0x8005f4 <__brkval>
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	08 95       	ret
    44d8:	ea 01       	movw	r28, r20
    44da:	ce 17       	cp	r28, r30
    44dc:	df 07       	cpc	r29, r31
    44de:	e8 f5       	brcc	.+122    	; 0x455a <free+0xca>
    44e0:	4a 81       	ldd	r20, Y+2	; 0x02
    44e2:	5b 81       	ldd	r21, Y+3	; 0x03
    44e4:	9e 01       	movw	r18, r28
    44e6:	41 15       	cp	r20, r1
    44e8:	51 05       	cpc	r21, r1
    44ea:	b1 f7       	brne	.-20     	; 0x44d8 <free+0x48>
    44ec:	e9 01       	movw	r28, r18
    44ee:	fb 83       	std	Y+3, r31	; 0x03
    44f0:	ea 83       	std	Y+2, r30	; 0x02
    44f2:	49 91       	ld	r20, Y+
    44f4:	59 91       	ld	r21, Y+
    44f6:	c4 0f       	add	r28, r20
    44f8:	d5 1f       	adc	r29, r21
    44fa:	ec 17       	cp	r30, r28
    44fc:	fd 07       	cpc	r31, r29
    44fe:	61 f4       	brne	.+24     	; 0x4518 <free+0x88>
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	02 96       	adiw	r24, 0x02	; 2
    4506:	84 0f       	add	r24, r20
    4508:	95 1f       	adc	r25, r21
    450a:	e9 01       	movw	r28, r18
    450c:	99 83       	std	Y+1, r25	; 0x01
    450e:	88 83       	st	Y, r24
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	9b 83       	std	Y+3, r25	; 0x03
    4516:	8a 83       	std	Y+2, r24	; 0x02
    4518:	f0 e0       	ldi	r31, 0x00	; 0
    451a:	e0 e0       	ldi	r30, 0x00	; 0
    451c:	12 96       	adiw	r26, 0x02	; 2
    451e:	8d 91       	ld	r24, X+
    4520:	9c 91       	ld	r25, X
    4522:	13 97       	sbiw	r26, 0x03	; 3
    4524:	00 97       	sbiw	r24, 0x00	; 0
    4526:	b9 f5       	brne	.+110    	; 0x4596 <free+0x106>
    4528:	2d 91       	ld	r18, X+
    452a:	3c 91       	ld	r19, X
    452c:	11 97       	sbiw	r26, 0x01	; 1
    452e:	cd 01       	movw	r24, r26
    4530:	02 96       	adiw	r24, 0x02	; 2
    4532:	82 0f       	add	r24, r18
    4534:	93 1f       	adc	r25, r19
    4536:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <__brkval>
    453a:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <__brkval+0x1>
    453e:	28 17       	cp	r18, r24
    4540:	39 07       	cpc	r19, r25
    4542:	39 f6       	brne	.-114    	; 0x44d2 <free+0x42>
    4544:	30 97       	sbiw	r30, 0x00	; 0
    4546:	51 f5       	brne	.+84     	; 0x459c <free+0x10c>
    4548:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <__flp+0x1>
    454c:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <__flp>
    4550:	b0 93 f5 05 	sts	0x05F5, r27	; 0x8005f5 <__brkval+0x1>
    4554:	a0 93 f4 05 	sts	0x05F4, r26	; 0x8005f4 <__brkval>
    4558:	bc cf       	rjmp	.-136    	; 0x44d2 <free+0x42>
    455a:	d3 83       	std	Z+3, r29	; 0x03
    455c:	c2 83       	std	Z+2, r28	; 0x02
    455e:	40 81       	ld	r20, Z
    4560:	51 81       	ldd	r21, Z+1	; 0x01
    4562:	84 0f       	add	r24, r20
    4564:	95 1f       	adc	r25, r21
    4566:	c8 17       	cp	r28, r24
    4568:	d9 07       	cpc	r29, r25
    456a:	61 f4       	brne	.+24     	; 0x4584 <free+0xf4>
    456c:	4e 5f       	subi	r20, 0xFE	; 254
    456e:	5f 4f       	sbci	r21, 0xFF	; 255
    4570:	88 81       	ld	r24, Y
    4572:	99 81       	ldd	r25, Y+1	; 0x01
    4574:	48 0f       	add	r20, r24
    4576:	59 1f       	adc	r21, r25
    4578:	51 83       	std	Z+1, r21	; 0x01
    457a:	40 83       	st	Z, r20
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	9b 81       	ldd	r25, Y+3	; 0x03
    4580:	93 83       	std	Z+3, r25	; 0x03
    4582:	82 83       	std	Z+2, r24	; 0x02
    4584:	21 15       	cp	r18, r1
    4586:	31 05       	cpc	r19, r1
    4588:	09 f0       	breq	.+2      	; 0x458c <free+0xfc>
    458a:	b0 cf       	rjmp	.-160    	; 0x44ec <free+0x5c>
    458c:	f0 93 f7 05 	sts	0x05F7, r31	; 0x8005f7 <__flp+0x1>
    4590:	e0 93 f6 05 	sts	0x05F6, r30	; 0x8005f6 <__flp>
    4594:	9e cf       	rjmp	.-196    	; 0x44d2 <free+0x42>
    4596:	fd 01       	movw	r30, r26
    4598:	dc 01       	movw	r26, r24
    459a:	c0 cf       	rjmp	.-128    	; 0x451c <free+0x8c>
    459c:	13 82       	std	Z+3, r1	; 0x03
    459e:	12 82       	std	Z+2, r1	; 0x02
    45a0:	d7 cf       	rjmp	.-82     	; 0x4550 <free+0xc0>

000045a2 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    45a2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    45a4:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    45a6:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    45a8:	04 c0       	rjmp	.+8      	; 0x45b2 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    45aa:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    45ac:	0e 94 a6 21 	call	0x434c	; 0x434c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    45b0:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    45b2:	c7 34       	cpi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    45b4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    45b6:	c9 f7       	brne	.-14     	; 0x45aa <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    45b8:	f8 94       	cli

000045ba <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    45ba:	ff cf       	rjmp	.-2      	; 0x45ba <__stop_program>
