
C:\Users\dlcks\AppData\Local\Temp\arduino_build_658117/123123123.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
       0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__vector_7>
../../../../crt1/gcrt1.S:74
      20:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
      b4:	07 63       	ori	r16, 0x37	; 55
      b6:	42 36       	cpi	r20, 0x62	; 98
      b8:	b7 9b       	sbis	0x16, 7	; 22
      ba:	d8 a7       	std	Y+40, r29	; 0x28
      bc:	1a 39       	cpi	r17, 0x9A	; 154
      be:	68 56       	subi	r22, 0x68	; 104
      c0:	18 ae       	std	Y+56, r1	; 0x38
      c2:	ba ab       	std	Y+50, r27	; 0x32
      c4:	55 8c       	ldd	r5, Z+29	; 0x1d
      c6:	1d 3c       	cpi	r17, 0xCD	; 205
      c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
      ca:	57 63       	ori	r21, 0x37	; 55
      cc:	bd 6d       	ori	r27, 0xDD	; 221
      ce:	ed fd       	.word	0xfded	; ????
      d0:	75 3e       	cpi	r23, 0xE5	; 229
      d2:	f6 17       	cp	r31, r22
      d4:	72 31       	cpi	r23, 0x12	; 18
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	08 00       	.word	0x0008	; ????
      de:	00 00       	nop
      e0:	be 92       	st	-X, r11
      e2:	24 49       	sbci	r18, 0x94	; 148
      e4:	12 3e       	cpi	r17, 0xE2	; 226
      e6:	ab aa       	std	Y+51, r10	; 0x33
      e8:	aa 2a       	or	r10, r26
      ea:	be cd       	rjmp	.-1156   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
      ec:	cc cc       	rjmp	.-1640   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
      ee:	4c 3e       	cpi	r20, 0xEC	; 236
      f0:	00 00       	nop
      f2:	00 80       	ld	r0, Z
      f4:	be ab       	std	Y+54, r27	; 0x36
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	aa 3e       	cpi	r26, 0xEA	; 234
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	bf 00       	.word	0x00bf	; ????
     100:	00 00       	nop
     102:	80 3f       	cpi	r24, 0xF0	; 240
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 08       	sbc	r0, r0
     10a:	41 78       	andi	r20, 0x81	; 129
     10c:	d3 bb       	out	0x13, r29	; 19
     10e:	43 87       	std	Z+11, r20	; 0x0b
     110:	d1 13       	cpse	r29, r17
     112:	3d 19       	sub	r19, r13
     114:	0e 3c       	cpi	r16, 0xCE	; 206
     116:	c3 bd       	out	0x23, r28	; 35
     118:	42 82       	std	Z+2, r4	; 0x02
     11a:	ad 2b       	or	r26, r29
     11c:	3e 68       	ori	r19, 0x8E	; 142
     11e:	ec 82       	std	Y+4, r14	; 0x04
     120:	76 be       	out	0x36, r7	; 54
     122:	d9 8f       	std	Y+25, r29	; 0x19
     124:	e1 a9       	ldd	r30, Z+49	; 0x31
     126:	3e 4c       	sbci	r19, 0xCE	; 206
     128:	80 ef       	ldi	r24, 0xF0	; 240
     12a:	ff be       	out	0x3f, r15	; 63
     12c:	01 c4       	rjmp	.+2050   	; 0x930 <__stack+0x31>
     12e:	ff 7f       	andi	r31, 0xFF	; 255
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
	...

00000136 <__trampolines_end>:
__trampolines_start():
     136:	00 86       	std	Z+8, r0	; 0x08
     138:	22 7e       	andi	r18, 0xE2	; 226
     13a:	6d 00       	.word	0x006d	; ????
     13c:	00 02       	muls	r16, r16
     13e:	30 06       	cpc	r3, r16
     140:	63 00       	.word	0x0063	; ????
     142:	04 40       	sbci	r16, 0x04	; 4
     144:	80 52       	subi	r24, 0x20	; 32
     146:	3f 06       	cpc	r3, r31
     148:	5b 4f       	sbci	r21, 0xFB	; 251
     14a:	66 6d       	ori	r22, 0xD6	; 214
     14c:	7d 27       	eor	r23, r29
     14e:	7f 6f       	ori	r23, 0xFF	; 255
     150:	00 00       	nop
     152:	00 48       	sbci	r16, 0x80	; 128
     154:	00 53       	subi	r16, 0x30	; 48
     156:	5f 77       	andi	r21, 0x7F	; 127
     158:	7f 39       	cpi	r23, 0x9F	; 159
     15a:	3f 79       	andi	r19, 0x9F	; 159
     15c:	71 3d       	cpi	r23, 0xD1	; 209
     15e:	76 06       	cpc	r7, r22
     160:	1e 69       	ori	r17, 0x9E	; 158
     162:	38 15       	cp	r19, r8
     164:	37 3f       	cpi	r19, 0xF7	; 247
     166:	73 67       	ori	r23, 0x73	; 115
     168:	31 6d       	ori	r19, 0xD1	; 209
     16a:	78 3e       	cpi	r23, 0xE8	; 232
     16c:	2a 1d       	adc	r18, r10
     16e:	76 6e       	ori	r23, 0xE6	; 230
     170:	5b 39       	cpi	r21, 0x9B	; 155
     172:	64 0f       	add	r22, r20
     174:	00 08       	sbc	r0, r0
     176:	20 5f       	subi	r18, 0xF0	; 240
     178:	7c 58       	subi	r23, 0x8C	; 140
     17a:	5e 7b       	andi	r21, 0xBE	; 190
     17c:	31 6f       	ori	r19, 0xF1	; 241
     17e:	74 04       	cpc	r7, r4
     180:	0e 75       	andi	r16, 0x5E	; 94
     182:	30 55       	subi	r19, 0x50	; 80
     184:	54 5c       	subi	r21, 0xC4	; 196
     186:	73 67       	ori	r23, 0x73	; 115
     188:	50 6d       	ori	r21, 0xD0	; 208
     18a:	78 1c       	adc	r7, r8
     18c:	2a 1d       	adc	r18, r10
     18e:	76 6e       	ori	r23, 0xE6	; 230
     190:	47 46       	sbci	r20, 0x67	; 103
     192:	06 70       	andi	r16, 0x06	; 6
     194:	01 3f       	Address 0x00000194 is out of bounds.
.word	0xffff	; ????

00000195 <_ZL18TM16XX_NUMBER_FONT.lto_priv.126>:
     195:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

000001a5 <port_to_mode_PGM>:
     1a5:	00 00 00 00 24 00 27 00 2a 00 2d 00                 ....$.'.*.-.

000001b1 <port_to_output_PGM>:
     1b1:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

000001bd <port_to_input_PGM>:
     1bd:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

000001c9 <digital_pin_to_port_PGM>:
     1c9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1d9:	03 03 03 03 02 02 03 05 05 05 05                    ...........

000001e4 <digital_pin_to_bit_mask_PGM>:
     1e4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1f4:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000001ff <_ZL18TM16XX_NUMBER_FONT.lto_priv.125>:
     1ff:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

0000020f <_ZL19TM16XX_FONT_DEFAULT.lto_priv.123>:
     20f:	00 86 22 7e 6d 00 00 02 30 06 63 00 04 40 80 52     .."~m...0.c..@.R
     21f:	3f 06 5b 4f 66 6d 7d 27 7f 6f 00 00 00 48 00 53     ?.[Ofm}'.o...H.S
     22f:	5f 77 7f 39 3f 79 71 3d 76 06 1e 69 38 15 37 3f     _w.9?yq=v..i8.7?
     23f:	73 67 31 6d 78 3e 2a 1d 76 6e 5b 39 64 0f 00 08     sg1mx>*.vn[9d...
     24f:	20 5f 7c 58 5e 7b 31 6f 74 04 0e 75 30 55 54 5c      _|X^{1ot..u0UT\
     25f:	73 67 50 6d 78 1c 2a 1d 76 6e 47 46 06 70 01        sgPmx.*.vnGF.p.

0000026e <digital_pin_to_timer_PGM>:
     26e:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

0000028a <__ctors_start>:
__ctors_start():
     28a:	9e 11       	cpse	r25, r14

0000028c <__ctors_end>:
__dtors_start():
     28c:	b8 20       	and	r11, r8

0000028e <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     28e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     290:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     292:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
     294:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
     296:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
     298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     29a:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     29c:	a6 e9       	ldi	r26, 0x96	; 150
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     29e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <.do_clear_bss_start>

000002a2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2a2:	1d 92       	st	X+, r1

000002a4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2a4:	a0 34       	cpi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2a6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <.do_clear_bss_loop>

000002aa <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2aa:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2ae:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     2b0:	e6 e8       	ldi	r30, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     2b2:	fc e4       	ldi	r31, 0x4C	; 76
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     2b6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     2b8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     2ba:	a6 39       	cpi	r26, 0x96	; 150
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     2bc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <__do_copy_data+0xc>

000002c0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c2:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2c4:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2c8:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2ca:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2cc:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d0:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2d4:	c9 f7       	brne	.-14     	; 0x2c8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2d6:	0e 94 8b 12 	call	0x2516	; 0x2516 <main>
../../../../crt1/gcrt1.S:315
     2da:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__do_global_dtors>

000002de <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     2de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e2 <twi_setAddress>:
twi_setAddress():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:131
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     2e2:	88 0f       	add	r24, r24
     2e4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:132
}
     2e8:	08 95       	ret

000002ea <twi_setFrequency>:
twi_setFrequency():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:141
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:142
  TWBR = ((F_CPU / frequency) - 16) / 2;
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	72 e1       	ldi	r23, 0x12	; 18
     2f2:	8a e7       	ldi	r24, 0x7A	; 122
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodsi4>
     2fa:	20 51       	subi	r18, 0x10	; 16
     2fc:	31 09       	sbc	r19, r1
     2fe:	41 09       	sbc	r20, r1
     300:	51 09       	sbc	r21, r1
     302:	56 95       	lsr	r21
     304:	47 95       	ror	r20
     306:	37 95       	ror	r19
     308:	27 95       	ror	r18
     30a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:148

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
     30e:	08 95       	ret

00000310 <twi_reply>:
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:420
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     310:	88 23       	and	r24, r24
     312:	21 f0       	breq	.+8      	; 0x31c <twi_reply+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     314:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:425
  }
}
     31a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     31c:	85 e8       	ldi	r24, 0x85	; 133
     31e:	fb cf       	rjmp	.-10     	; 0x316 <twi_reply+0x6>

00000320 <twi_stop>:
twi_stop():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     320:	85 ed       	ldi	r24, 0xD5	; 213
     322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     326:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     32a:	84 fd       	sbrc	r24, 4
     32c:	fc cf       	rjmp	.-8      	; 0x326 <twi_stop+0x6>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     32e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:463
}
     332:	08 95       	ret

00000334 <twi_releaseBus>:
twi_releaseBus():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     334:	85 ec       	ldi	r24, 0xC5	; 197
     336:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     33a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:478
}
     33e:	08 95       	ret

00000340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]>:
getEnvCorrectRatio():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:173

/**
 * Get correction to apply on Rs depending on environmental
 * conditions
 */
 float MQ131Class::getEnvCorrectRatio() {
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:176
 	// Select the right equation based on humidity
 	// If default value, ignore correction ratio
 	if(humidityPercent == 60 && temperatureCelsuis == 20) {
     344:	d0 91 4e 04 	lds	r29, 0x044E	; 0x80044e <MQ131+0x1e>
     348:	c0 91 4d 04 	lds	r28, 0x044D	; 0x80044d <MQ131+0x1d>
     34c:	dc 33       	cpi	r29, 0x3C	; 60
     34e:	39 f4       	brne	.+14     	; 0x35e <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x1e>
     350:	c4 31       	cpi	r28, 0x14	; 20
     352:	01 f5       	brne	.+64     	; 0x394 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:177
 		return 1.0;
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	9f e3       	ldi	r25, 0x3F	; 63
     35c:	16 c0       	rjmp	.+44     	; 0x38a <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x4a>
     35e:	6c 2f       	mov	r22, r28
     360:	0c 2e       	mov	r0, r28
     362:	00 0c       	add	r0, r0
     364:	77 0b       	sbc	r23, r23
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatsisf>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:180
 	}
 	// For humidity > 75%, use the 85% curve
 	if(humidityPercent > 75) {
     36e:	dc 34       	cpi	r29, 0x4C	; 76
     370:	78 f0       	brcs	.+30     	; 0x390 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:182
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
     372:	25 e5       	ldi	r18, 0x55	; 85
     374:	31 ec       	ldi	r19, 0xC1	; 193
     376:	48 e2       	ldi	r20, 0x28	; 40
     378:	5c eb       	ldi	r21, 0xBC	; 188
     37a:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
     37e:	23 e2       	ldi	r18, 0x23	; 35
     380:	3a e4       	ldi	r19, 0x4A	; 74
     382:	43 e9       	ldi	r20, 0x93	; 147
     384:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 		return -0.0119 * temperatureCelsuis + 1.3261;
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     386:	0e 94 40 22 	call	0x4480	; 0x4480 <__addsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:193
 }
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:185
 	if(humidityPercent > 75) {
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
 	}
 	// For humidity > 50%, use the 60% curve
 	if(humidityPercent > 50) {
     390:	d3 33       	cpi	r29, 0x33	; 51
     392:	90 f0       	brcs	.+36     	; 0x3b8 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:187
 		// R^2 = 0.9976
 		return -0.0119 * temperatureCelsuis + 1.3261;
     394:	6c 2f       	mov	r22, r28
     396:	cc 0f       	add	r28, r28
     398:	77 0b       	sbc	r23, r23
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatsisf>
     3a2:	28 e3       	ldi	r18, 0x38	; 56
     3a4:	38 ef       	ldi	r19, 0xF8	; 248
     3a6:	42 e4       	ldi	r20, 0x42	; 66
     3a8:	5c eb       	ldi	r21, 0xBC	; 188
     3aa:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
     3ae:	25 ea       	ldi	r18, 0xA5	; 165
     3b0:	3d eb       	ldi	r19, 0xBD	; 189
     3b2:	49 ea       	ldi	r20, 0xA9	; 169
     3b4:	5f e3       	ldi	r21, 0x3F	; 63
     3b6:	e7 cf       	rjmp	.-50     	; 0x386 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x46>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     3b8:	20 eb       	ldi	r18, 0xB0	; 176
     3ba:	33 e0       	ldi	r19, 0x03	; 3
     3bc:	47 e6       	ldi	r20, 0x67	; 103
     3be:	5c eb       	ldi	r21, 0xBC	; 188
     3c0:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
     3c4:	22 e7       	ldi	r18, 0x72	; 114
     3c6:	39 ef       	ldi	r19, 0xF9	; 249
     3c8:	47 ec       	ldi	r20, 0xC7	; 199
     3ca:	5f e3       	ldi	r21, 0x3F	; 63
     3cc:	dc cf       	rjmp	.-72     	; 0x386 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]+0x46>

000003ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>:
getRClevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:13
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel(decode_results *results, unsigned int *offset, int *used, int t1) {
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	7c 01       	movw	r14, r24
     3e4:	6b 01       	movw	r12, r22
     3e6:	5a 01       	movw	r10, r20
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:19
    int width;
    int val;
    int correction;
    int avail;

    if (*offset >= results->rawlen) {
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <irrecv+0xf>
     3f2:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <irrecv+0x10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:20
        return SPACE;  // After end of recorded buffer, assume SPACE.
     3f6:	c1 e0       	ldi	r28, 0x01	; 1
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:19
    int width;
    int val;
    int correction;
    int avail;

    if (*offset >= results->rawlen) {
     3fa:	82 17       	cp	r24, r18
     3fc:	93 07       	cpc	r25, r19
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	62 c0       	rjmp	.+196    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:22
        return SPACE;  // After end of recorded buffer, assume SPACE.
    }
    width = results->rawbuf[*offset];
     402:	9c 01       	movw	r18, r24
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	e0 91 2f 05 	lds	r30, 0x052F	; 0x80052f <irrecv+0xd>
     40c:	f0 91 30 05 	lds	r31, 0x0530	; 0x800530 <irrecv+0xe>
     410:	e2 0f       	add	r30, r18
     412:	f3 1f       	adc	r31, r19
     414:	00 81       	ld	r16, Z
     416:	11 81       	ldd	r17, Z+1	; 0x01
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:23
    val = ((*offset) % 2) ? MARK : SPACE;
     418:	ec 01       	movw	r28, r24
     41a:	c0 95       	com	r28
     41c:	d0 95       	com	r29
     41e:	c1 70       	andi	r28, 0x01	; 1
     420:	dd 27       	eor	r29, r29
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:24
    correction = (val == MARK) ? MARK_EXCESS_MICROS : - MARK_EXCESS_MICROS;
     422:	2c e9       	ldi	r18, 0x9C	; 156
     424:	3f ef       	ldi	r19, 0xFF	; 255
     426:	80 ff       	sbrs	r24, 0
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	24 e6       	ldi	r18, 0x64	; 100
     42c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:26

    if (MATCH(width, (t1) + correction)) {
     42e:	2a 0d       	add	r18, r10
     430:	3b 1d       	adc	r19, r11
MATCH():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:47
    Serial.print(F(" <= "));
    Serial.print(measured, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired), DEC);
#endif
    bool passed = ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
     432:	c9 01       	movw	r24, r18
     434:	63 e4       	ldi	r22, 0x43	; 67
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     43c:	06 17       	cp	r16, r22
     43e:	17 07       	cpc	r17, r23
     440:	54 f0       	brlt	.+20     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     442:	c9 01       	movw	r24, r18
     444:	68 e2       	ldi	r22, 0x28	; 40
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	60 17       	cp	r22, r16
     452:	71 07       	cpc	r23, r17
     454:	6c f5       	brge	.+90     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
getRClevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:28
        avail = 1;
    } else if (MATCH(width, (2 * t1) + correction)) {
     456:	2a 0d       	add	r18, r10
     458:	3b 1d       	adc	r19, r11
MATCH():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:47
     45a:	c9 01       	movw	r24, r18
     45c:	63 e4       	ldi	r22, 0x43	; 67
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     464:	06 17       	cp	r16, r22
     466:	17 07       	cpc	r17, r23
     468:	54 f0       	brlt	.+20     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     46a:	c9 01       	movw	r24, r18
     46c:	68 e2       	ldi	r22, 0x28	; 40
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     474:	6f 5f       	subi	r22, 0xFF	; 255
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	60 17       	cp	r22, r16
     47a:	71 07       	cpc	r23, r17
     47c:	84 f5       	brge	.+96     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
getRClevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:30
        avail = 2;
    } else if (MATCH(width, (3 * t1) + correction)) {
     47e:	2a 0d       	add	r18, r10
     480:	3b 1d       	adc	r19, r11
MATCH():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:47
     482:	c9 01       	movw	r24, r18
     484:	63 e4       	ldi	r22, 0x43	; 67
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     48c:	06 17       	cp	r16, r22
     48e:	17 07       	cpc	r17, r23
     490:	64 f0       	brlt	.+24     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     492:	c9 01       	movw	r24, r18
     494:	68 e2       	ldi	r22, 0x28	; 40
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     49c:	6f 5f       	subi	r22, 0xFF	; 255
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
getRClevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:31
        avail = 3;
     4a0:	23 e0       	ldi	r18, 0x03	; 3
     4a2:	30 e0       	ldi	r19, 0x00	; 0
MATCH():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:47
     4a4:	60 17       	cp	r22, r16
     4a6:	71 07       	cpc	r23, r17
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
getRClevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:33
    } else {
        return -1;
     4aa:	cf ef       	ldi	r28, 0xFF	; 255
     4ac:	df ef       	ldi	r29, 0xFF	; 255
     4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:27
    width = results->rawbuf[*offset];
    val = ((*offset) % 2) ? MARK : SPACE;
    correction = (val == MARK) ? MARK_EXCESS_MICROS : - MARK_EXCESS_MICROS;

    if (MATCH(width, (t1) + correction)) {
        avail = 1;
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:36
        avail = 3;
    } else {
        return -1;
    }

    (*used)++;
     4b4:	f6 01       	movw	r30, r12
     4b6:	80 81       	ld	r24, Z
     4b8:	91 81       	ldd	r25, Z+1	; 0x01
     4ba:	01 96       	adiw	r24, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:37
    if (*used >= avail) {
     4bc:	82 17       	cp	r24, r18
     4be:	93 07       	cpc	r25, r19
     4c0:	8c f4       	brge	.+34     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:39
        *used = 0;
        (*offset)++;
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:45
    }

    DBG_PRINTLN((val == MARK) ? "MARK" : "SPACE");

    return val;
}
     4c6:	ce 01       	movw	r24, r28
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	bf 90       	pop	r11
     4da:	af 90       	pop	r10
     4dc:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:29
    correction = (val == MARK) ? MARK_EXCESS_MICROS : - MARK_EXCESS_MICROS;

    if (MATCH(width, (t1) + correction)) {
        avail = 1;
    } else if (MATCH(width, (2 * t1) + correction)) {
        avail = 2;
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	e8 cf       	rjmp	.-48     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:38
        return -1;
    }

    (*used)++;
    if (*used >= avail) {
        *used = 0;
     4e4:	11 82       	std	Z+1, r1	; 0x01
     4e6:	10 82       	st	Z, r1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:39
        (*offset)++;
     4e8:	f7 01       	movw	r30, r14
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	e8 cf       	rjmp	.-48     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>

000004f2 <delayMicroseconds.constprop.5>:
delayMicroseconds():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     4f2:	00 00       	nop
     4f4:	00 00       	nop
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     4f6:	85 e0       	ldi	r24, 0x05	; 5
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <delayMicroseconds.constprop.5+0x8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     4fe:	08 95       	ret

00000500 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	6c 01       	movw	r12, r24
     516:	7b 01       	movw	r14, r22
     518:	8b 01       	movw	r16, r22
     51a:	04 0f       	add	r16, r20
     51c:	15 1f       	adc	r17, r21
     51e:	eb 01       	movw	r28, r22
     520:	5e 01       	movw	r10, r28
     522:	ae 18       	sub	r10, r14
     524:	bf 08       	sbc	r11, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     526:	c0 17       	cp	r28, r16
     528:	d1 07       	cpc	r29, r17
     52a:	59 f0       	breq	.+22     	; 0x542 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     52c:	69 91       	ld	r22, Y+
     52e:	d6 01       	movw	r26, r12
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	01 90       	ld	r0, Z+
     536:	f0 81       	ld	r31, Z
     538:	e0 2d       	mov	r30, r0
     53a:	c6 01       	movw	r24, r12
     53c:	09 95       	icall
     53e:	89 2b       	or	r24, r25
     540:	79 f7       	brne	.-34     	; 0x520 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     542:	c5 01       	movw	r24, r10
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	08 95       	ret

0000055a <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     55a:	fc 01       	movw	r30, r24
     55c:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     55e:	44 8d       	ldd	r20, Z+28	; 0x1c
     560:	25 2f       	mov	r18, r21
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	84 2f       	mov	r24, r20
     566:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     568:	82 1b       	sub	r24, r18
     56a:	93 0b       	sbc	r25, r19
     56c:	54 17       	cp	r21, r20
     56e:	10 f0       	brcs	.+4      	; 0x574 <HardwareSerial::availableForWrite()+0x1a>
     570:	cf 96       	adiw	r24, 0x3f	; 63
     572:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     574:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     576:	08 95       	ret

00000578 <HardwareSerial::read()>:
read():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     578:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     57a:	91 8d       	ldd	r25, Z+25	; 0x19
     57c:	82 8d       	ldd	r24, Z+26	; 0x1a
     57e:	98 17       	cp	r25, r24
     580:	61 f0       	breq	.+24     	; 0x59a <HardwareSerial::read()+0x22>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     582:	a2 8d       	ldd	r26, Z+26	; 0x1a
     584:	ae 0f       	add	r26, r30
     586:	bf 2f       	mov	r27, r31
     588:	b1 1d       	adc	r27, r1
     58a:	5d 96       	adiw	r26, 0x1d	; 29
     58c:	8c 91       	ld	r24, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     58e:	92 8d       	ldd	r25, Z+26	; 0x1a
     590:	9f 5f       	subi	r25, 0xFF	; 255
     592:	9f 73       	andi	r25, 0x3F	; 63
     594:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     59e:	08 95       	ret

000005a0 <HardwareSerial::peek()>:
peek():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     5a0:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     5a2:	91 8d       	ldd	r25, Z+25	; 0x19
     5a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     5a6:	98 17       	cp	r25, r24
     5a8:	31 f0       	breq	.+12     	; 0x5b6 <HardwareSerial::peek()+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     5aa:	82 8d       	ldd	r24, Z+26	; 0x1a
     5ac:	e8 0f       	add	r30, r24
     5ae:	f1 1d       	adc	r31, r1
     5b0:	85 8d       	ldd	r24, Z+29	; 0x1d
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     5ba:	08 95       	ret

000005bc <HardwareSerial::available()>:
available():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5bc:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5be:	91 8d       	ldd	r25, Z+25	; 0x19
     5c0:	22 8d       	ldd	r18, Z+26	; 0x1a
     5c2:	89 2f       	mov	r24, r25
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	80 5c       	subi	r24, 0xC0	; 192
     5c8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ca:	82 1b       	sub	r24, r18
     5cc:	91 09       	sbc	r25, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     5ce:	8f 73       	andi	r24, 0x3F	; 63
     5d0:	99 27       	eor	r25, r25
     5d2:	08 95       	ret

000005d4 <Serial0_available()>:
Serial0_available():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     5d4:	8f e5       	ldi	r24, 0x5F	; 95
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <HardwareSerial::available()>
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	89 2b       	or	r24, r25
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <Serial0_available()+0x10>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     5e4:	82 2f       	mov	r24, r18
     5e6:	08 95       	ret

000005e8 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     5e8:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5ea:	a4 8d       	ldd	r26, Z+28	; 0x1c
     5ec:	a8 0f       	add	r26, r24
     5ee:	b9 2f       	mov	r27, r25
     5f0:	b1 1d       	adc	r27, r1
     5f2:	a3 5a       	subi	r26, 0xA3	; 163
     5f4:	bf 4f       	sbci	r27, 0xFF	; 255
     5f6:	2c 91       	ld	r18, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5f8:	84 8d       	ldd	r24, Z+28	; 0x1c
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	99 27       	eor	r25, r25
     602:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     604:	a6 89       	ldd	r26, Z+22	; 0x16
     606:	b7 89       	ldd	r27, Z+23	; 0x17
     608:	2c 93       	st	X, r18
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     60a:	a0 89       	ldd	r26, Z+16	; 0x10
     60c:	b1 89       	ldd	r27, Z+17	; 0x11
     60e:	8c 91       	ld	r24, X
     610:	83 70       	andi	r24, 0x03	; 3
     612:	80 64       	ori	r24, 0x40	; 64
     614:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     616:	93 8d       	ldd	r25, Z+27	; 0x1b
     618:	84 8d       	ldd	r24, Z+28	; 0x1c
     61a:	98 13       	cpse	r25, r24
     61c:	06 c0       	rjmp	.+12     	; 0x62a <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     61e:	02 88       	ldd	r0, Z+18	; 0x12
     620:	f3 89       	ldd	r31, Z+19	; 0x13
     622:	e0 2d       	mov	r30, r0
     624:	80 81       	ld	r24, Z
     626:	8f 7d       	andi	r24, 0xDF	; 223
     628:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     62a:	08 95       	ret

0000062c <HardwareSerial::write(unsigned char)>:
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     63e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     640:	8c 8d       	ldd	r24, Y+28	; 0x1c
     642:	98 13       	cpse	r25, r24
     644:	1a c0       	rjmp	.+52     	; 0x67a <HardwareSerial::write(unsigned char)+0x4e>
     646:	e8 89       	ldd	r30, Y+16	; 0x10
     648:	f9 89       	ldd	r31, Y+17	; 0x11
     64a:	80 81       	ld	r24, Z
     64c:	85 ff       	sbrs	r24, 5
     64e:	15 c0       	rjmp	.+42     	; 0x67a <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     650:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     652:	f8 94       	cli
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     654:	ee 89       	ldd	r30, Y+22	; 0x16
     656:	ff 89       	ldd	r31, Y+23	; 0x17
     658:	60 83       	st	Z, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     65a:	e8 89       	ldd	r30, Y+16	; 0x10
     65c:	f9 89       	ldd	r31, Y+17	; 0x11
     65e:	80 81       	ld	r24, Z
     660:	83 70       	andi	r24, 0x03	; 3
     662:	80 64       	ori	r24, 0x40	; 64
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     664:	80 83       	st	Z, r24
__iRestore():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     666:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	08 95       	ret
     67a:	f6 2e       	mov	r15, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     67c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	0f 5f       	subi	r16, 0xFF	; 255
     682:	1f 4f       	sbci	r17, 0xFF	; 255
     684:	0f 73       	andi	r16, 0x3F	; 63
     686:	11 27       	eor	r17, r17
     688:	e0 2e       	mov	r14, r16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     68a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     68c:	8e 11       	cpse	r24, r14
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	07 fc       	sbrc	r0, 7
     694:	fa cf       	rjmp	.-12     	; 0x68a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     696:	e8 89       	ldd	r30, Y+16	; 0x10
     698:	f9 89       	ldd	r31, Y+17	; 0x11
     69a:	80 81       	ld	r24, Z
     69c:	85 ff       	sbrs	r24, 5
     69e:	f5 cf       	rjmp	.-22     	; 0x68a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     6a0:	ce 01       	movw	r24, r28
     6a2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <HardwareSerial::_tx_udr_empty_irq()>
     6a6:	f1 cf       	rjmp	.-30     	; 0x68a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     6a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 2f       	mov	r31, r29
     6ae:	f1 1d       	adc	r31, r1
     6b0:	e3 5a       	subi	r30, 0xA3	; 163
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	f0 82       	st	Z, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     6b6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6b8:	f8 94       	cli
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     6ba:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     6bc:	ea 89       	ldd	r30, Y+18	; 0x12
     6be:	fb 89       	ldd	r31, Y+19	; 0x13
     6c0:	80 81       	ld	r24, Z
     6c2:	80 62       	ori	r24, 0x20	; 32
     6c4:	cf cf       	rjmp	.-98     	; 0x664 <HardwareSerial::write(unsigned char)+0x38>

000006c6 <HardwareSerial::flush()>:
flush():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6cc:	88 8d       	ldd	r24, Y+24	; 0x18
     6ce:	88 23       	and	r24, r24
     6d0:	b9 f0       	breq	.+46     	; 0x700 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6d2:	aa 89       	ldd	r26, Y+18	; 0x12
     6d4:	bb 89       	ldd	r27, Y+19	; 0x13
     6d6:	e8 89       	ldd	r30, Y+16	; 0x10
     6d8:	f9 89       	ldd	r31, Y+17	; 0x11
     6da:	8c 91       	ld	r24, X
     6dc:	85 fd       	sbrc	r24, 5
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <HardwareSerial::flush()+0x20>
     6e0:	80 81       	ld	r24, Z
     6e2:	86 fd       	sbrc	r24, 6
     6e4:	0d c0       	rjmp	.+26     	; 0x700 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	07 fc       	sbrc	r0, 7
     6ea:	f7 cf       	rjmp	.-18     	; 0x6da <HardwareSerial::flush()+0x14>
     6ec:	8c 91       	ld	r24, X
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	f2 cf       	rjmp	.-28     	; 0x6d6 <HardwareSerial::flush()+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     6f2:	80 81       	ld	r24, Z
     6f4:	85 ff       	sbrs	r24, 5
     6f6:	ed cf       	rjmp	.-38     	; 0x6d2 <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     6f8:	ce 01       	movw	r24, r28
     6fa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <HardwareSerial::_tx_udr_empty_irq()>
     6fe:	e9 cf       	rjmp	.-46     	; 0x6d2 <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <serialEventRun()>:
serialEventRun():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	89 2b       	or	r24, r25
     70c:	29 f0       	breq	.+10     	; 0x718 <serialEventRun()+0x12>
     70e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Serial0_available()>
     712:	81 11       	cpse	r24, r1
     714:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	89 2b       	or	r24, r25
     71e:	49 f0       	breq	.+18     	; 0x732 <serialEventRun()+0x2c>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	89 2b       	or	r24, r25
     726:	29 f0       	breq	.+10     	; 0x732 <serialEventRun()+0x2c>
     728:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     72c:	81 11       	cpse	r24, r1
     72e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     732:	08 95       	ret

00000734 <turnOffPWM>:
turnOffPWM():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     734:	82 50       	subi	r24, 0x02	; 2
     736:	8d 30       	cpi	r24, 0x0D	; 13
     738:	08 f0       	brcs	.+2      	; 0x73c <turnOffPWM+0x8>
     73a:	3e c0       	rjmp	.+124    	; 0x7b8 <turnOffPWM+0x84>
     73c:	e8 2f       	mov	r30, r24
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ec 55       	subi	r30, 0x5C	; 92
     742:	fc 4f       	sbci	r31, 0xFC	; 252
     744:	0c 94 f7 24 	jmp	0x49ee	; 0x49ee <__tablejump2__>
     748:	d9 03       	fmulsu	r21, r17
     74a:	dd 03       	fmulsu	r21, r21
     74c:	b1 03       	fmuls	r19, r17
     74e:	b7 03       	fmuls	r19, r23
     750:	dc 03       	fmulsu	r21, r20
     752:	dc 03       	fmulsu	r21, r20
     754:	bb 03       	fmulsu	r19, r19
     756:	c1 03       	fmuls	r20, r17
     758:	c5 03       	fmuls	r20, r21
     75a:	cb 03       	fmulsu	r20, r19
     75c:	dc 03       	fmulsu	r21, r20
     75e:	cf 03       	fmulsu	r20, r23
     760:	d5 03       	fmuls	r21, r21
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     762:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     766:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     768:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     76c:	08 95       	ret
     76e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     772:	8f 7d       	andi	r24, 0xDF	; 223
     774:	f9 cf       	rjmp	.-14     	; 0x768 <turnOffPWM+0x34>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     776:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     77a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     77c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     780:	08 95       	ret
     782:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     786:	8f 7d       	andi	r24, 0xDF	; 223
     788:	f9 cf       	rjmp	.-14     	; 0x77c <turnOffPWM+0x48>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     78a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     78e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     790:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     794:	08 95       	ret
     796:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     79a:	8f 7d       	andi	r24, 0xDF	; 223
     79c:	f9 cf       	rjmp	.-14     	; 0x790 <turnOffPWM+0x5c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     79e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     7a2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     7a4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     7a8:	08 95       	ret
     7aa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     7ae:	8f 7d       	andi	r24, 0xDF	; 223
     7b0:	f9 cf       	rjmp	.-14     	; 0x7a4 <turnOffPWM+0x70>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     7b2:	84 b5       	in	r24, 0x24	; 36
     7b4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     7b6:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     7b8:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     7ba:	84 b5       	in	r24, 0x24	; 36
     7bc:	8f 7d       	andi	r24, 0xDF	; 223
     7be:	fb cf       	rjmp	.-10     	; 0x7b6 <turnOffPWM+0x82>

000007c0 <digitalRead>:
digitalRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     7c4:	28 2f       	mov	r18, r24
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	e2 59       	subi	r30, 0x92	; 146
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     7d0:	f9 01       	movw	r30, r18
     7d2:	ec 51       	subi	r30, 0x1C	; 28
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     7d8:	f9 01       	movw	r30, r18
     7da:	e7 53       	subi	r30, 0x37	; 55
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     7e0:	cc 23       	and	r28, r28
     7e2:	a1 f0       	breq	.+40     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     7e4:	81 11       	cpse	r24, r1
     7e6:	0e 94 9a 03 	call	0x734	; 0x734 <turnOffPWM>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     7ea:	ec 2f       	mov	r30, r28
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e3 54       	subi	r30, 0x43	; 67
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	a5 91       	lpm	r26, Z+
     7f8:	b4 91       	lpm	r27, Z
     7fa:	ec 91       	ld	r30, X
     7fc:	ed 23       	and	r30, r29
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	09 f4       	brne	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	fa cf       	rjmp	.-12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>

00000812 <digitalWrite>:
digitalWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     818:	28 2f       	mov	r18, r24
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	e2 59       	subi	r30, 0x92	; 146
     820:	fd 4f       	sbci	r31, 0xFD	; 253
     822:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     824:	f9 01       	movw	r30, r18
     826:	ec 51       	subi	r30, 0x1C	; 28
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     82c:	f9 01       	movw	r30, r18
     82e:	e7 53       	subi	r30, 0x37	; 55
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     834:	cc 23       	and	r28, r28
     836:	a9 f0       	breq	.+42     	; 0x862 <digitalWrite+0x50>
     838:	16 2f       	mov	r17, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     83a:	81 11       	cpse	r24, r1
     83c:	0e 94 9a 03 	call	0x734	; 0x734 <turnOffPWM>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     840:	ec 2f       	mov	r30, r28
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ef 54       	subi	r30, 0x4F	; 79
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	a5 91       	lpm	r26, Z+
     84e:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     850:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     852:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     854:	ec 91       	ld	r30, X
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     856:	11 11       	cpse	r17, r1
     858:	08 c0       	rjmp	.+16     	; 0x86a <digitalWrite+0x58>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     85a:	d0 95       	com	r29
     85c:	de 23       	and	r29, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     85e:	dc 93       	st	X, r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     860:	8f bf       	out	0x3f, r24	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     86a:	de 2b       	or	r29, r30
     86c:	f8 cf       	rjmp	.-16     	; 0x85e <digitalWrite+0x4c>

0000086e <twi_init>:
twi_init():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     86e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:85
  twi_sendStop = true; // default value
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:86
  twi_inRepStart = false;
     878:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	82 e1       	ldi	r24, 0x12	; 18
     880:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:90
  digitalWrite(SCL, 1);
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	83 e1       	ldi	r24, 0x13	; 19
     888:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     88c:	e9 eb       	ldi	r30, 0xB9	; 185
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	8e 7f       	andi	r24, 0xFE	; 254
     894:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:94
  cbi(TWSR, TWPS1);
     896:	80 81       	ld	r24, Z
     898:	8d 7f       	andi	r24, 0xFD	; 253
     89a:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     89c:	80 e2       	ldi	r24, 0x20	; 32
     89e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     8a2:	85 e4       	ldi	r24, 0x45	; 69
     8a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:104
}
     8a8:	08 95       	ret

000008aa <twi_disable>:
twi_disable():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:115
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
     8aa:	ec eb       	ldi	r30, 0xBC	; 188
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8a 7b       	andi	r24, 0xBA	; 186
     8b2:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:118

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	82 e1       	ldi	r24, 0x12	; 18
     8b8:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:119
  digitalWrite(SCL, 0);
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	83 e1       	ldi	r24, 0x13	; 19
     8c0:	0c 94 09 04 	jmp	0x812	; 0x812 <digitalWrite>

000008c4 <analogWrite.part.0.constprop.110>:
analogWrite.part.0():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
     8c4:	e7 e7       	ldi	r30, 0x77	; 119
     8c6:	f2 e0       	ldi	r31, 0x02	; 2
     8c8:	e4 91       	lpm	r30, Z
     8ca:	e2 50       	subi	r30, 0x02	; 2
     8cc:	ed 30       	cpi	r30, 0x0D	; 13
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <analogWrite.part.0.constprop.110+0xe>
     8d0:	6f c0       	rjmp	.+222    	; 0x9b0 <__stack+0xb1>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e2 59       	subi	r30, 0x92	; 146
     8d6:	fb 4f       	sbci	r31, 0xFB	; 251
     8d8:	0c 94 f7 24 	jmp	0x49ee	; 0x49ee <__tablejump2__>
     8dc:	7b 04       	cpc	r7, r11
     8de:	80 04       	cpc	r8, r0
     8e0:	85 04       	cpc	r8, r5
     8e2:	8f 04       	cpc	r8, r15
     8e4:	d8 04       	cpc	r13, r8
     8e6:	d8 04       	cpc	r13, r8
     8e8:	99 04       	cpc	r9, r9
     8ea:	a1 04       	cpc	r10, r1
     8ec:	a9 04       	cpc	r10, r9
     8ee:	b3 04       	cpc	r11, r3
     8f0:	d8 04       	cpc	r13, r8
     8f2:	be 04       	cpc	r11, r14
     8f4:	cd 04       	cpc	r12, r13
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:132
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
     8f6:	94 b5       	in	r25, 0x24	; 36
     8f8:	90 68       	ori	r25, 0x80	; 128
     8fa:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:133
        OCR0A = val; // set pwm duty
     8fc:	87 bd       	out	0x27, r24	; 39
     8fe:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:140
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
     900:	94 b5       	in	r25, 0x24	; 36
     902:	90 62       	ori	r25, 0x20	; 32
     904:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:141
        OCR0B = val; // set pwm duty
     906:	88 bd       	out	0x28, r24	; 40
     908:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     90a:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     90e:	20 68       	ori	r18, 0x80	; 128
     910:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     914:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     918:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     91c:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     91e:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     922:	20 62       	ori	r18, 0x20	; 32
     924:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     928:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     92c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     930:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:180
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
     932:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     936:	90 68       	ori	r25, 0x80	; 128
     938:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:181
        OCR2A = val; // set pwm duty
     93c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     940:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:188
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
     942:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     946:	90 62       	ori	r25, 0x20	; 32
     948:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:189
        OCR2B = val; // set pwm duty
     94c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     950:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
     952:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     956:	20 68       	ori	r18, 0x80	; 128
     958:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
     95c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     960:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
     964:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:205

      #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        // connect pwm to pin on timer 3, channel B
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
     966:	5a 9a       	sbi	0x0b, 2	; 11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:209
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
     968:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     96c:	20 62       	ori	r18, 0x20	; 32
     96e:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
     972:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
     976:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
     97a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:225
      #endif

      #if defined(TCCR4A)
      case TIMER4A:
        //connect pwm to pin on timer 4, channel A
        TCCR4A |= _BV(COM4A1);
     97c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     980:	20 68       	ori	r18, 0x80	; 128
     982:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:227
        #if defined(COM4A0)    // only used on 32U4
          TCCR4A &= ~_BV(COM4A0);
     986:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     98a:	2f 7b       	andi	r18, 0xBF	; 191
     98c:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:229
        #endif
        OCR4A = val;  // set pwm duty
     990:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
     994:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
     998:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:237
      
      #if defined(TCCR4A) && defined(COM4B1)
      case TIMER4B:
        // connect pwm to pin on timer 4, channel B
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
     99a:	5a 9a       	sbi	0x0b, 2	; 11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:241
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR4A |= _BV(COM4B1);
     99c:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     9a0:	20 62       	ori	r18, 0x20	; 32
     9a2:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:242
        OCR4B = val; // set pwm duty
     9a6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
     9aa:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
     9ae:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:293
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
          digitalWrite(pin, LOW);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     9b2:	80 38       	cpi	r24, 0x80	; 128
     9b4:	91 05       	cpc	r25, r1
     9b6:	0c f0       	brlt	.+2      	; 0x9ba <__stack+0xbb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:295
          digitalWrite(pin, LOW);
        } else {
          digitalWrite(pin, HIGH);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	89 e0       	ldi	r24, 0x09	; 9
     9bc:	0c 94 09 04 	jmp	0x812	; 0x812 <digitalWrite>

000009c0 <pinMode>:
pinMode():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	ec 51       	subi	r30, 0x1C	; 28
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	24 91       	lpm	r18, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     9ce:	87 53       	subi	r24, 0x37	; 55
     9d0:	9e 4f       	sbci	r25, 0xFE	; 254
     9d2:	fc 01       	movw	r30, r24
     9d4:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     9d6:	88 23       	and	r24, r24
     9d8:	d1 f0       	breq	.+52     	; 0xa0e <pinMode+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	fc 01       	movw	r30, r24
     9e2:	eb 55       	subi	r30, 0x5B	; 91
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	a5 91       	lpm	r26, Z+
     9e8:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     9ea:	fc 01       	movw	r30, r24
     9ec:	ef 54       	subi	r30, 0x4F	; 79
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	c5 91       	lpm	r28, Z+
     9f2:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     9f4:	61 11       	cpse	r22, r1
     9f6:	0e c0       	rjmp	.+28     	; 0xa14 <pinMode+0x54>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     9f8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     9fa:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     9fc:	8c 91       	ld	r24, X
     9fe:	e2 2f       	mov	r30, r18
     a00:	e0 95       	com	r30
     a02:	8e 23       	and	r24, r30
     a04:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     a06:	28 81       	ld	r18, Y
     a08:	e2 23       	and	r30, r18
     a0a:	e8 83       	st	Y, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     a0c:	9f bf       	out	0x3f, r25	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     a14:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     a16:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     a18:	ec 91       	ld	r30, X
     a1a:	e2 2b       	or	r30, r18
     a1c:	ec 93       	st	X, r30
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     a1e:	8f bf       	out	0x3f, r24	; 63
     a20:	f6 cf       	rjmp	.-20     	; 0xa0e <pinMode+0x4e>

00000a22 <micros>:
micros():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     a22:	3f b7       	in	r19, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     a24:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     a26:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timer0_overflow_count>
     a2a:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <timer0_overflow_count+0x1>
     a2e:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <timer0_overflow_count+0x2>
     a32:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     a36:	26 b5       	in	r18, 0x26	; 38
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a38:	a8 9b       	sbis	0x15, 0	; 21
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <micros+0x24>
     a3c:	2f 3f       	cpi	r18, 0xFF	; 255
     a3e:	19 f0       	breq	.+6      	; 0xa46 <micros+0x24>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	a1 1d       	adc	r26, r1
     a44:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     a46:	3f bf       	out	0x3f, r19	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     a48:	ba 2f       	mov	r27, r26
     a4a:	a9 2f       	mov	r26, r25
     a4c:	98 2f       	mov	r25, r24
     a4e:	88 27       	eor	r24, r24
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	62 0f       	add	r22, r18
     a56:	71 1d       	adc	r23, r1
     a58:	81 1d       	adc	r24, r1
     a5a:	91 1d       	adc	r25, r1
     a5c:	43 e0       	ldi	r20, 0x03	; 3
     a5e:	66 0f       	add	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	88 1f       	adc	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	4a 95       	dec	r20
     a68:	d1 f7       	brne	.-12     	; 0xa5e <micros+0x3c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     a6a:	08 95       	ret

00000a6c <delay.constprop.102>:
delay():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:395

void delay(unsigned long ms)
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:397
{
  unsigned long start = micros();
     a74:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
     a78:	6b 01       	movw	r12, r22
     a7a:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     a7c:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
     a80:	6c 19       	sub	r22, r12
     a82:	7d 09       	sbc	r23, r13
     a84:	8e 09       	sbc	r24, r14
     a86:	9f 09       	sbc	r25, r15
     a88:	68 3e       	cpi	r22, 0xE8	; 232
     a8a:	73 40       	sbci	r23, 0x03	; 3
     a8c:	81 05       	cpc	r24, r1
     a8e:	91 05       	cpc	r25, r1
     a90:	a8 f3       	brcs	.-22     	; 0xa7c <delay.constprop.102+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <TM16xx::receive()>:
receive():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:242
  send(data);
  stop();
}

byte TM16xx::receive()
{
     a9c:	cf 92       	push	r12
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:246
  byte temp = 0;

  // Pull-up on
  pinMode(dataPin, INPUT);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:247
  digitalWrite(dataPin, HIGH);
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
     abc:	98 e0       	ldi	r25, 0x08	; 8
     abe:	c9 2e       	mov	r12, r25
     ac0:	d1 2c       	mov	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:243
  stop();
}

byte TM16xx::receive()
{
  byte temp = 0;
     ac2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:250
  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
    temp >>= 1;
     ac4:	e1 2e       	mov	r14, r17
     ac6:	f1 2c       	mov	r15, r1
     ac8:	f5 94       	asr	r15
     aca:	e7 94       	ror	r14
     acc:	1e 2d       	mov	r17, r14
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:252

    digitalWrite(clockPin, LOW);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	8e 81       	ldd	r24, Y+6	; 0x06
     ad2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:253
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
     ad6:	e8 81       	ld	r30, Y
     ad8:	f9 81       	ldd	r31, Y+1	; 0x01
     ada:	02 8c       	ldd	r0, Z+26	; 0x1a
     adc:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ade:	e0 2d       	mov	r30, r0
     ae0:	ce 01       	movw	r24, r28
     ae2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:255

    if (digitalRead(dataPin)) {
     ae4:	8d 81       	ldd	r24, Y+5	; 0x05
     ae6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <digitalRead>
     aea:	89 2b       	or	r24, r25
     aec:	09 f0       	breq	.+2      	; 0xaf0 <TM16xx::receive()+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:256
      temp |= 0x80;
     aee:	10 68       	ori	r17, 0x80	; 128
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:259
    }

    digitalWrite(clockPin, HIGH);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	8e 81       	ldd	r24, Y+6	; 0x06
     af4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:260
    bitDelay();
     af8:	e8 81       	ld	r30, Y
     afa:	f9 81       	ldd	r31, Y+1	; 0x01
     afc:	02 8c       	ldd	r0, Z+26	; 0x1a
     afe:	f3 8d       	ldd	r31, Z+27	; 0x1b
     b00:	e0 2d       	mov	r30, r0
     b02:	ce 01       	movw	r24, r28
     b04:	09 95       	icall
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	c8 1a       	sub	r12, r24
     b0a:	d1 08       	sbc	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:249

  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
     b0c:	d9 f6       	brne	.-74     	; 0xac4 <TM16xx::receive()+0x28>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:264
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }

  // Pull-up off
  pinMode(dataPin, OUTPUT);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:265
  digitalWrite(dataPin, LOW);
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
     b1a:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:268

  return temp;
}
     b1e:	81 2f       	mov	r24, r17
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	08 95       	ret

00000b30 <TM16xx::sendData(unsigned char, unsigned char)>:
sendData():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:233
  send(cmd);
  stop();
}

void TM16xx::sendData(byte address, byte data)
{
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	16 2f       	mov	r17, r22
     b3c:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:234
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
     b3e:	e8 81       	ld	r30, Y
     b40:	f9 81       	ldd	r31, Y+1	; 0x01
     b42:	02 a0       	ldd	r0, Z+34	; 0x22
     b44:	f3 a1       	ldd	r31, Z+35	; 0x23
     b46:	e0 2d       	mov	r30, r0
     b48:	64 e4       	ldi	r22, 0x44	; 68
     b4a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:235
	start();
     b4c:	e8 81       	ld	r30, Y
     b4e:	f9 81       	ldd	r31, Y+1	; 0x01
     b50:	04 8c       	ldd	r0, Z+28	; 0x1c
     b52:	f5 8d       	ldd	r31, Z+29	; 0x1d
     b54:	e0 2d       	mov	r30, r0
     b56:	ce 01       	movw	r24, r28
     b58:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:236
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
     b5a:	61 2f       	mov	r22, r17
     b5c:	60 6c       	ori	r22, 0xC0	; 192
     b5e:	e8 81       	ld	r30, Y
     b60:	f9 81       	ldd	r31, Y+1	; 0x01
     b62:	00 a0       	ldd	r0, Z+32	; 0x20
     b64:	f1 a1       	ldd	r31, Z+33	; 0x21
     b66:	e0 2d       	mov	r30, r0
     b68:	ce 01       	movw	r24, r28
     b6a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:237
  send(data);
     b6c:	e8 81       	ld	r30, Y
     b6e:	f9 81       	ldd	r31, Y+1	; 0x01
     b70:	00 a0       	ldd	r0, Z+32	; 0x20
     b72:	f1 a1       	ldd	r31, Z+33	; 0x21
     b74:	e0 2d       	mov	r30, r0
     b76:	60 2f       	mov	r22, r16
     b78:	ce 01       	movw	r24, r28
     b7a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
  stop();
     b7c:	e8 81       	ld	r30, Y
     b7e:	f9 81       	ldd	r31, Y+1	; 0x01
     b80:	06 8c       	ldd	r0, Z+30	; 0x1e
     b82:	f7 8d       	ldd	r31, Z+31	; 0x1f
     b84:	e0 2d       	mov	r30, r0
     b86:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:239
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
{
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
	start();
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
  send(data);
  stop();
     b90:	09 94       	ijmp

00000b92 <TM16xx::sendCommand(unsigned char)>:
sendCommand():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:226
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
}

void TM16xx::sendCommand(byte cmd)
{
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
     b9a:	16 2f       	mov	r17, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:227
	start();
     b9c:	e8 81       	ld	r30, Y
     b9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ba0:	04 8c       	ldd	r0, Z+28	; 0x1c
     ba2:	f5 8d       	ldd	r31, Z+29	; 0x1d
     ba4:	e0 2d       	mov	r30, r0
     ba6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:228
  send(cmd);
     ba8:	e8 81       	ld	r30, Y
     baa:	f9 81       	ldd	r31, Y+1	; 0x01
     bac:	00 a0       	ldd	r0, Z+32	; 0x20
     bae:	f1 a1       	ldd	r31, Z+33	; 0x21
     bb0:	e0 2d       	mov	r30, r0
     bb2:	61 2f       	mov	r22, r17
     bb4:	ce 01       	movw	r24, r28
     bb6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229
  stop();
     bb8:	e8 81       	ld	r30, Y
     bba:	f9 81       	ldd	r31, Y+1	; 0x01
     bbc:	06 8c       	ldd	r0, Z+30	; 0x1e
     bbe:	f7 8d       	ldd	r31, Z+31	; 0x1f
     bc0:	e0 2d       	mov	r30, r0
     bc2:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:230
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229

void TM16xx::sendCommand(byte cmd)
{
	start();
  send(cmd);
  stop();
     bca:	09 94       	ijmp

00000bcc <TM16xx::send(unsigned char)>:
send():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:210
  digitalWrite(strobePin, HIGH);
  bitDelay();
}

void TM16xx::send(byte data)
{
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	f6 2e       	mov	r15, r22
     bda:	08 e0       	ldi	r16, 0x08	; 8
     bdc:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:214
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	8e 81       	ldd	r24, Y+6	; 0x06
     be2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:215
    bitDelay();
     be6:	e8 81       	ld	r30, Y
     be8:	f9 81       	ldd	r31, Y+1	; 0x01
     bea:	02 8c       	ldd	r0, Z+26	; 0x1a
     bec:	f3 8d       	ldd	r31, Z+27	; 0x1b
     bee:	e0 2d       	mov	r30, r0
     bf0:	ce 01       	movw	r24, r28
     bf2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:216
    digitalWrite(dataPin, data & 1 ? HIGH : LOW);
     bf4:	6f 2d       	mov	r22, r15
     bf6:	61 70       	andi	r22, 0x01	; 1
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:217
    bitDelay();
     bfe:	e8 81       	ld	r30, Y
     c00:	f9 81       	ldd	r31, Y+1	; 0x01
     c02:	02 8c       	ldd	r0, Z+26	; 0x1a
     c04:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c06:	e0 2d       	mov	r30, r0
     c08:	ce 01       	movw	r24, r28
     c0a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:218
    data >>= 1;
     c0c:	f6 94       	lsr	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:219
    digitalWrite(clockPin, HIGH);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	8e 81       	ldd	r24, Y+6	; 0x06
     c12:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:220
    bitDelay();
     c16:	e8 81       	ld	r30, Y
     c18:	f9 81       	ldd	r31, Y+1	; 0x01
     c1a:	02 8c       	ldd	r0, Z+26	; 0x1a
     c1c:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c1e:	e0 2d       	mov	r30, r0
     c20:	ce 01       	movw	r24, r28
     c22:	09 95       	icall
     c24:	01 50       	subi	r16, 0x01	; 1
     c26:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:213

void TM16xx::send(byte data)
{
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
     c28:	d1 f6       	brne	.-76     	; 0xbde <TM16xx::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     c2a:	e8 81       	ld	r30, Y
     c2c:	f9 81       	ldd	r31, Y+1	; 0x01
     c2e:	02 8c       	ldd	r0, Z+26	; 0x1a
     c30:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c32:	e0 2d       	mov	r30, r0
     c34:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:223
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     c40:	09 94       	ijmp

00000c42 <TM16xx::stop()>:
stop():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:204
  digitalWrite(strobePin, LOW);
  bitDelay();
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:205
  digitalWrite(strobePin, HIGH);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	8f 81       	ldd	r24, Y+7	; 0x07
     c4c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
  bitDelay();
     c50:	e8 81       	ld	r30, Y
     c52:	f9 81       	ldd	r31, Y+1	; 0x01
     c54:	02 8c       	ldd	r0, Z+26	; 0x1a
     c56:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c58:	e0 2d       	mov	r30, r0
     c5a:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:207
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
  digitalWrite(strobePin, HIGH);
  bitDelay();
     c60:	09 94       	ijmp

00000c62 <TM16xx::start()>:
start():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:198
  	delayMicroseconds(1);
  #endif
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:199
  digitalWrite(strobePin, LOW);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	8f 81       	ldd	r24, Y+7	; 0x07
     c6c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
  bitDelay();
     c70:	e8 81       	ld	r30, Y
     c72:	f9 81       	ldd	r31, Y+1	; 0x01
     c74:	02 8c       	ldd	r0, Z+26	; 0x1a
     c76:	f3 8d       	ldd	r31, Z+27	; 0x1b
     c78:	e0 2d       	mov	r30, r0
     c7a:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:201
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
  digitalWrite(strobePin, LOW);
  bitDelay();
     c80:	09 94       	ijmp

00000c82 <TM16xx::bitDelay()>:
flush():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:712
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     c82:	08 95       	ret

00000c84 <TM16xx::getButtons()>:
getButtons():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:174

// key-scanning method, implemented in chip specific derived class
uint32_t TM16xx::getButtons()
{	// return state of up to 32 keys.
	return(0);
}
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	08 95       	ret

00000c8c <TM16xx::getNumDigits()>:
getNumDigits():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:168
}

byte TM16xx::getNumDigits()
{	// get the number of digits used (needed by TM16xxDisplay to combine modules)
  return(digits);
}
     c8c:	fc 01       	movw	r30, r24
     c8e:	84 81       	ldd	r24, Z+4	; 0x04
     c90:	08 95       	ret

00000c92 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>:
setDisplayToString():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:154
    sendChar(i, pgm_read_byte_near(values+i), 0);
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
     c92:	7f 92       	push	r7
     c94:	8f 92       	push	r8
     c96:	9f 92       	push	r9
     c98:	af 92       	push	r10
     c9a:	bf 92       	push	r11
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	7c 01       	movw	r14, r24
     cae:	6a 01       	movw	r12, r20
     cb0:	72 2e       	mov	r7, r18
     cb2:	8b 01       	movw	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  for (int i = 0; i < digits - pos; i++) {
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	c0 e0       	ldi	r28, 0x00	; 0
     cb8:	a2 2e       	mov	r10, r18
     cba:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
  	if (string[i] != '\0') {
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     cbc:	88 24       	eor	r8, r8
     cbe:	83 94       	inc	r8
     cc0:	91 2c       	mov	r9, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     cc2:	d7 01       	movw	r26, r14
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	8c 91       	ld	r24, X
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	9c 01       	movw	r18, r24
     ccc:	2a 19       	sub	r18, r10
     cce:	3b 09       	sbc	r19, r11
     cd0:	c2 17       	cp	r28, r18
     cd2:	d3 07       	cpc	r29, r19
     cd4:	0c f5       	brge	.+66     	; 0xd18 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:156
  	if (string[i] != '\0') {
     cd6:	f8 01       	movw	r30, r16
     cd8:	41 91       	ld	r20, Z+
     cda:	8f 01       	movw	r16, r30
     cdc:	44 23       	and	r20, r20
     cde:	e1 f0       	breq	.+56     	; 0xd18 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     ce0:	8c 1b       	sub	r24, r28
     ce2:	9d 0b       	sbc	r25, r29
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	94 01       	movw	r18, r8
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x5c>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	8a 95       	dec	r24
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x58>
     cf2:	c9 01       	movw	r24, r18
     cf4:	8c 21       	and	r24, r12
     cf6:	9d 21       	and	r25, r13
     cf8:	21 e0       	ldi	r18, 0x01	; 1
     cfa:	89 2b       	or	r24, r25
     cfc:	09 f4       	brne	.+2      	; 0xd00 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x6e>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	6c 2f       	mov	r22, r28
     d02:	67 0d       	add	r22, r7
     d04:	d7 01       	movw	r26, r14
     d06:	ed 91       	ld	r30, X+
     d08:	fc 91       	ld	r31, X
     d0a:	06 88       	ldd	r0, Z+22	; 0x16
     d0c:	f7 89       	ldd	r31, Z+23	; 0x17
     d0e:	e0 2d       	mov	r30, r0
     d10:	c7 01       	movw	r24, r14
     d12:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     d14:	21 96       	adiw	r28, 0x01	; 1
     d16:	d5 cf       	rjmp	.-86     	; 0xcc2 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x30>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:163
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
		} else {
		  break;
		}
  }
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	9f 90       	pop	r9
     d2e:	8f 90       	pop	r8
     d30:	7f 90       	pop	r7
     d32:	08 95       	ret

00000d34 <TM16xx::setDisplay(unsigned char const*, unsigned char)>:
setDisplay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:147
{
  sendChar(pos, 0, dot);
}

void TM16xx::setDisplay(const byte values[], byte size)
{	// send an array of values to the display
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	7c 01       	movw	r14, r24
     d46:	6b 01       	movw	r12, r22
     d48:	04 2f       	mov	r16, r20
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:148
  for (byte i = 0; i < size; i++) {
     d50:	c0 17       	cp	r28, r16
     d52:	d1 07       	cpc	r29, r17
     d54:	81 f0       	breq	.+32     	; 0xd76 <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x42>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:149
    sendChar(i, pgm_read_byte_near(values+i), 0);
     d56:	f6 01       	movw	r30, r12
     d58:	ec 0f       	add	r30, r28
     d5a:	fd 1f       	adc	r31, r29
     d5c:	44 91       	lpm	r20, Z
     d5e:	d7 01       	movw	r26, r14
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	02 88       	ldd	r0, Z+18	; 0x12
     d66:	f3 89       	ldd	r31, Z+19	; 0x13
     d68:	e0 2d       	mov	r30, r0
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	6c 2f       	mov	r22, r28
     d6e:	c7 01       	movw	r24, r14
     d70:	09 95       	icall
     d72:	21 96       	adiw	r28, 0x01	; 1
     d74:	ed cf       	rjmp	.-38     	; 0xd50 <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x1c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:151
  }
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <TM16xx::clearDisplayDigit(unsigned char, bool)>:
clearDisplayDigit():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:142
    nNumber/=10;
  }
}

void TM16xx::clearDisplayDigit(byte pos, boolean dot)
{
     d88:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:143
  sendChar(pos, 0, dot);
     d8a:	dc 01       	movw	r26, r24
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	02 88       	ldd	r0, Z+18	; 0x12
     d92:	f3 89       	ldd	r31, Z+19	; 0x13
     d94:	e0 2d       	mov	r30, r0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	09 94       	ijmp

00000d9a <TM16xx::setDisplayToDecNumber(int, unsigned char)>:
setDisplayToDecNumber():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:129
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
}

void TM16xx::setDisplayToDecNumber(int nNumber, byte bDots)		// byte bDots=0
{	// Function to display a decimal number on a n-digit clock display.
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     db2:	c1 e0       	ldi	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     db4:	c4 2e       	mov	r12, r20
     db6:	d1 2c       	mov	r13, r1
     db8:	8a e0       	ldi	r24, 0x0A	; 10
     dba:	a8 2e       	mov	r10, r24
     dbc:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     dbe:	d7 01       	movw	r26, r14
     dc0:	14 96       	adiw	r26, 0x04	; 4
     dc2:	4c 91       	ld	r20, X
     dc4:	4c 17       	cp	r20, r28
     dc6:	f0 f0       	brcs	.+60     	; 0xe04 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     dc8:	96 01       	movw	r18, r12
     dca:	0c 2e       	mov	r0, r28
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x38>
     dce:	35 95       	asr	r19
     dd0:	27 95       	ror	r18
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x34>
     dd6:	21 70       	andi	r18, 0x01	; 1
     dd8:	4c 1b       	sub	r20, r28
     dda:	cb 01       	movw	r24, r22
     ddc:	b5 01       	movw	r22, r10
     dde:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
     de2:	96 2e       	mov	r9, r22
     de4:	d7 2f       	mov	r29, r23
     de6:	d7 01       	movw	r26, r14
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	00 84       	ldd	r0, Z+8	; 0x08
     dee:	f1 85       	ldd	r31, Z+9	; 0x09
     df0:	e0 2d       	mov	r30, r0
     df2:	05 e9       	ldi	r16, 0x95	; 149
     df4:	11 e0       	ldi	r17, 0x01	; 1
     df6:	68 2f       	mov	r22, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:137
    nNumber/=10;
     dfc:	69 2d       	mov	r22, r9
     dfe:	7d 2f       	mov	r23, r29
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     e00:	cf 5f       	subi	r28, 0xFF	; 255
     e02:	dd cf       	rjmp	.-70     	; 0xdbe <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x24>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:139
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
    nNumber/=10;
  }
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	08 95       	ret

00000e1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>:
setDisplayDigit():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:124
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	e6 2f       	mov	r30, r22
     e22:	64 2f       	mov	r22, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     e24:	ef 70       	andi	r30, 0x0F	; 15
     e26:	e0 0f       	add	r30, r16
     e28:	f1 2f       	mov	r31, r17
     e2a:	f1 1d       	adc	r31, r1
     e2c:	44 91       	lpm	r20, Z
     e2e:	dc 01       	movw	r26, r24
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	02 88       	ldd	r0, Z+18	; 0x12
     e36:	f3 89       	ldd	r31, Z+19	; 0x13
     e38:	e0 2d       	mov	r30, r0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:126
}
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     e3e:	09 94       	ijmp

00000e40 <TM16xx::sendAsciiChar(unsigned char, char, bool)>:
sendAsciiChar():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:119
void TM16xx::sendAsciiChar(byte pos, char c, boolean fDot)
{ // Method to send an Ascii character to the display
  // This method is also called by TM16xxDisplay.print to display characters
  // The base class uses the default 7-segment font to find the LED pattern.
  // Derived classes for multi-segment displays or alternate layout displays can override this method
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
     e40:	e4 2f       	mov	r30, r20
     e42:	44 0f       	add	r20, r20
     e44:	ff 0b       	sbc	r31, r31
     e46:	ea 5e       	subi	r30, 0xEA	; 234
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	44 91       	lpm	r20, Z
     e4c:	dc 01       	movw	r26, r24
     e4e:	ed 91       	ld	r30, X+
     e50:	fc 91       	ld	r31, X
     e52:	02 88       	ldd	r0, Z+18	; 0x12
     e54:	f3 89       	ldd	r31, Z+19	; 0x13
     e56:	e0 2d       	mov	r30, r0
     e58:	09 94       	ijmp

00000e5a <TM16xx::sendChar(unsigned char, unsigned char, bool)>:
sendChar():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:106
  // Depending on the module this method should shift the segments to the proper data position.
}


void TM16xx::sendChar(byte pos, byte data, boolean dot)
{
     e5a:	36 2f       	mov	r19, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:111
/*
	if(pos<_maxDisplays)
	  sendData(pos, data | (dot ? 0b10000000 : 0));
*/
	setSegments(data | (dot ? 0b10000000 : 0), pos);
     e5c:	dc 01       	movw	r26, r24
     e5e:	ed 91       	ld	r30, X+
     e60:	fc 91       	ld	r31, X
     e62:	04 80       	ldd	r0, Z+4	; 0x04
     e64:	f5 81       	ldd	r31, Z+5	; 0x05
     e66:	e0 2d       	mov	r30, r0
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	21 11       	cpse	r18, r1
     e6c:	60 e8       	ldi	r22, 0x80	; 128
     e6e:	64 2b       	or	r22, r20
     e70:	43 2f       	mov	r20, r19
     e72:	09 94       	ijmp

00000e74 <TM16xx::setSegments16(unsigned int, unsigned char)>:
setSegments16():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:102
  // The position of the additional segments in the second data byte can be different per module,
  // For that reason this module has no implementation in the base class.
  // E.g. for TM1638/TM1668 segments 8-9 are in bits 0-1, for TM1630 segment 14 is in bit 5
  // This method assumes segments 0-7 to be in the lower byte and the extra segments in the upper byte
  // Depending on the module this method should shift the segments to the proper data position.
}
     e74:	08 95       	ret

00000e76 <TM16xx::setSegments(unsigned char, unsigned char)>:
setSegments():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:88
	stop();

}

void TM16xx::setSegments(byte segments, byte position)
{	// set 8 leds on common grd as specified
     e76:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:90
	// TODO: support 10-14 segments on chips like TM1638/TM1668
	if(position<_maxDisplays)
     e78:	dc 01       	movw	r26, r24
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	3c 91       	ld	r19, X
     e7e:	12 97       	sbiw	r26, 0x02	; 2
     e80:	43 17       	cp	r20, r19
     e82:	40 f4       	brcc	.+16     	; 0xe94 <TM16xx::setSegments(unsigned char, unsigned char)+0x1e>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:91
		sendData(position, segments);
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	04 a0       	ldd	r0, Z+36	; 0x24
     e8a:	f5 a1       	ldd	r31, Z+37	; 0x25
     e8c:	e0 2d       	mov	r30, r0
     e8e:	46 2f       	mov	r20, r22
     e90:	62 2f       	mov	r22, r18
     e92:	09 94       	ijmp
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:93
		//sendData(TM16XX_CMD_ADDRESS | position, segments);
}
     e94:	08 95       	ret

00000e96 <TM16xx::clearDisplay()>:
clearDisplay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:68
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
}

void TM16xx::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:73
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode
     ea0:	e8 81       	ld	r30, Y
     ea2:	f9 81       	ldd	r31, Y+1	; 0x01
     ea4:	02 a0       	ldd	r0, Z+34	; 0x22
     ea6:	f3 a1       	ldd	r31, Z+35	; 0x23
     ea8:	e0 2d       	mov	r30, r0
     eaa:	60 e4       	ldi	r22, 0x40	; 64
     eac:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:76

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	04 8c       	ldd	r0, Z+28	; 0x1c
     eb4:	f5 8d       	ldd	r31, Z+29	; 0x1d
     eb6:	e0 2d       	mov	r30, r0
     eb8:	ce 01       	movw	r24, r28
     eba:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:77
  send(TM16XX_CMD_ADDRESS);
     ebc:	e8 81       	ld	r30, Y
     ebe:	f9 81       	ldd	r31, Y+1	; 0x01
     ec0:	00 a0       	ldd	r0, Z+32	; 0x20
     ec2:	f1 a1       	ldd	r31, Z+33	; 0x21
     ec4:	e0 2d       	mov	r30, r0
     ec6:	60 ec       	ldi	r22, 0xC0	; 192
     ec8:	ce 01       	movw	r24, r28
     eca:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  for (int i = 0; i < _maxDisplays; i++) {
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	e8 81       	ld	r30, Y
     ed2:	f9 81       	ldd	r31, Y+1	; 0x01
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 17       	cp	r24, r16
     ed8:	11 06       	cpc	r1, r17
     eda:	a9 f0       	breq	.+42     	; 0xf06 <TM16xx::clearDisplay()+0x70>
     edc:	a4 f0       	brlt	.+40     	; 0xf06 <TM16xx::clearDisplay()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:79
    send(0x00);
     ede:	00 a0       	ldd	r0, Z+32	; 0x20
     ee0:	f1 a1       	ldd	r31, Z+33	; 0x21
     ee2:	e0 2d       	mov	r30, r0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	ce 01       	movw	r24, r28
     ee8:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:80
    if(_maxSegments>8)
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	89 30       	cpi	r24, 0x09	; 9
     eee:	40 f0       	brcs	.+16     	; 0xf00 <TM16xx::clearDisplay()+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:81
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
     ef0:	e8 81       	ld	r30, Y
     ef2:	f9 81       	ldd	r31, Y+1	; 0x01
     ef4:	00 a0       	ldd	r0, Z+32	; 0x20
     ef6:	f1 a1       	ldd	r31, Z+33	; 0x21
     ef8:	e0 2d       	mov	r30, r0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	ce 01       	movw	r24, r28
     efe:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
  send(TM16XX_CMD_ADDRESS);
  for (int i = 0; i < _maxDisplays; i++) {
     f00:	0f 5f       	subi	r16, 0xFF	; 255
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	e5 cf       	rjmp	.-54     	; 0xed0 <TM16xx::clearDisplay()+0x3a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     f06:	06 8c       	ldd	r0, Z+30	; 0x1e
     f08:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f0a:	e0 2d       	mov	r30, r0
     f0c:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:85

}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
  for (int i = 0; i < _maxDisplays; i++) {
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     f16:	09 94       	ijmp

00000f18 <TM16xx::setupDisplay(bool, unsigned char)>:
setupDisplay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:64
*/
}

void TM16xx::setupDisplay(boolean active, byte intensity)
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
     f18:	dc 01       	movw	r26, r24
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	02 a0       	ldd	r0, Z+34	; 0x22
     f20:	f3 a1       	ldd	r31, Z+35	; 0x23
     f22:	e0 2d       	mov	r30, r0
     f24:	61 11       	cpse	r22, r1
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <TM16xx::setupDisplay(bool, unsigned char)+0x1c>
     f28:	60 e8       	ldi	r22, 0x80	; 128
     f2a:	48 30       	cpi	r20, 0x08	; 8
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <TM16xx::setupDisplay(bool, unsigned char)+0x18>
     f2e:	47 e0       	ldi	r20, 0x07	; 7
     f30:	64 2b       	or	r22, r20
     f32:	09 94       	ijmp
     f34:	68 e8       	ldi	r22, 0x88	; 136
     f36:	f9 cf       	rjmp	.-14     	; 0xf2a <TM16xx::setupDisplay(bool, unsigned char)+0x12>

00000f38 <TM1650::getButtons()>:
getButtons():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:177

  return temp;
}

uint32_t TM1650::getButtons()
{	// Keyscan data on the TM1650/TM1637 is one byte, with index of the button that is pressed.
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:190
	//		0x64-0x67 for DIG1 to DIG4 on KeyInput5 (E)
	//		0x6C-0x6F for DIG1 to DIG4 on KeyInput6 (F)
	//		0x74-0x77 for DIG1 to DIG4 on KeyInput7 (G)
	// Button state is reset when another command is issued
	// For compatibility with the rest of the library the buttonstate is returned as a 32-bit value
  start();
     f40:	dc 01       	movw	r26, r24
     f42:	ed 91       	ld	r30, X+
     f44:	fc 91       	ld	r31, X
     f46:	04 8c       	ldd	r0, Z+28	; 0x1c
     f48:	f5 8d       	ldd	r31, Z+29	; 0x1d
     f4a:	e0 2d       	mov	r30, r0
     f4c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:191
  send(TM1650_CMD_DATA_READ);		// send read buttons command
     f4e:	d8 01       	movw	r26, r16
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	00 a0       	ldd	r0, Z+32	; 0x20
     f56:	f1 a1       	ldd	r31, Z+33	; 0x21
     f58:	e0 2d       	mov	r30, r0
     f5a:	69 e4       	ldi	r22, 0x49	; 73
     f5c:	c8 01       	movw	r24, r16
     f5e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:192
	byte received=receive();
     f60:	d8 01       	movw	r26, r16
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	06 a0       	ldd	r0, Z+38	; 0x26
     f68:	f7 a1       	ldd	r31, Z+39	; 0x27
     f6a:	e0 2d       	mov	r30, r0
     f6c:	c8 01       	movw	r24, r16
     f6e:	09 95       	icall
     f70:	c8 2f       	mov	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:193
	stop();
     f72:	d8 01       	movw	r26, r16
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	06 8c       	ldd	r0, Z+30	; 0x1e
     f7a:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f7c:	e0 2d       	mov	r30, r0
     f7e:	c8 01       	movw	r24, r16
     f80:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:200
	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
		return(0);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	cb 01       	movw	r24, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:199

	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
     f88:	c4 34       	cpi	r28, 0x44	; 68
     f8a:	70 f0       	brcs	.+28     	; 0xfa8 <TM1650::getButtons()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:203
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
     f8c:	c8 34       	cpi	r28, 0x48	; 72
     f8e:	80 f4       	brcc	.+32     	; 0xfb0 <TM1650::getButtons()+0x78>
     f90:	c4 54       	subi	r28, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:211
	else if(received<=0x5F) received=received-0x5C+12;
	else if(received<=0x67) received=received-0x64+16;
	else if(received<=0x6F) received=received-0x6C+20;
	else if(received<=0x77) received=received-0x74+24;

	return(bit(received)); 		// return bit set for the number of the button that is pressed (bits 0-27)
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <TM1650::getButtons()+0x6c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	ca 95       	dec	r28
     fa6:	d2 f7       	brpl	.-12     	; 0xf9c <TM1650::getButtons()+0x64>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:212
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:204
	if(received<0x44)
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
	else if(received<=0x4F) received=received-0x4C+4;
     fb0:	c0 35       	cpi	r28, 0x50	; 80
     fb2:	10 f4       	brcc	.+4      	; 0xfb8 <TM1650::getButtons()+0x80>
     fb4:	c8 54       	subi	r28, 0x48	; 72
     fb6:	ed cf       	rjmp	.-38     	; 0xf92 <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:205
	else if(received<=0x57) received=received-0x54+8;
     fb8:	c8 35       	cpi	r28, 0x58	; 88
     fba:	10 f4       	brcc	.+4      	; 0xfc0 <TM1650::getButtons()+0x88>
     fbc:	cc 54       	subi	r28, 0x4C	; 76
     fbe:	e9 cf       	rjmp	.-46     	; 0xf92 <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:206
	else if(received<=0x5F) received=received-0x5C+12;
     fc0:	c0 36       	cpi	r28, 0x60	; 96
     fc2:	10 f4       	brcc	.+4      	; 0xfc8 <TM1650::getButtons()+0x90>
     fc4:	c0 55       	subi	r28, 0x50	; 80
     fc6:	e5 cf       	rjmp	.-54     	; 0xf92 <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:207
	else if(received<=0x67) received=received-0x64+16;
     fc8:	c8 36       	cpi	r28, 0x68	; 104
     fca:	10 f4       	brcc	.+4      	; 0xfd0 <TM1650::getButtons()+0x98>
     fcc:	c4 55       	subi	r28, 0x54	; 84
     fce:	e1 cf       	rjmp	.-62     	; 0xf92 <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:208
	else if(received<=0x6F) received=received-0x6C+20;
     fd0:	c0 37       	cpi	r28, 0x70	; 112
     fd2:	10 f4       	brcc	.+4      	; 0xfd8 <TM1650::getButtons()+0xa0>
     fd4:	c8 55       	subi	r28, 0x58	; 88
     fd6:	dd cf       	rjmp	.-70     	; 0xf92 <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:209
	else if(received<=0x77) received=received-0x74+24;
     fd8:	c8 37       	cpi	r28, 0x78	; 120
     fda:	d8 f6       	brcc	.-74     	; 0xf92 <TM1650::getButtons()+0x5a>
     fdc:	cc 55       	subi	r28, 0x5C	; 92
     fde:	d9 cf       	rjmp	.-78     	; 0xf92 <TM1650::getButtons()+0x5a>

00000fe0 <TM1650::receive()>:
receive():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:134
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:138
  byte temp = 0;

  // Pull-up on
  digitalWrite(clockPin, LOW);
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:139
  pinMode(dataPin, INPUT);
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:140
  digitalWrite(dataPin, HIGH);
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	e8 2e       	mov	r14, r24
    1008:	f1 2c       	mov	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:135
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
  byte temp = 0;
    100a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:144
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
  {
    temp <<= 1;  // MSB first on TM1650, so shift left
    100c:	11 0f       	add	r17, r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:146

    digitalWrite(clockPin, HIGH);
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	8e 81       	ldd	r24, Y+6	; 0x06
    1012:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:147
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
    1016:	e8 81       	ld	r30, Y
    1018:	f9 81       	ldd	r31, Y+1	; 0x01
    101a:	02 8c       	ldd	r0, Z+26	; 0x1a
    101c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    101e:	e0 2d       	mov	r30, r0
    1020:	ce 01       	movw	r24, r28
    1022:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:149

    if (digitalRead(dataPin)) {
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <digitalRead>
    102a:	89 2b       	or	r24, r25
    102c:	09 f0       	breq	.+2      	; 0x1030 <TM1650::receive()+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:150
      temp |= 0x01;	 // MSB first on TM1650, so set lowest bit
    102e:	11 60       	ori	r17, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:153
    }

    digitalWrite(clockPin, LOW);
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:154
    bitDelay();
    1038:	e8 81       	ld	r30, Y
    103a:	f9 81       	ldd	r31, Y+1	; 0x01
    103c:	02 8c       	ldd	r0, Z+26	; 0x1a
    103e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1040:	e0 2d       	mov	r30, r0
    1042:	ce 01       	movw	r24, r28
    1044:	09 95       	icall
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	e8 1a       	sub	r14, r24
    104a:	f1 08       	sbc	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:142
  // Pull-up on
  digitalWrite(clockPin, LOW);
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
    104c:	f9 f6       	brne	.-66     	; 0x100c <TM1650::receive()+0x2c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:160
  }

	// receive Ack
	// TODO: currently the logical analyzer reports a NAK for the received value.
	// I'd like to see an ACK instead as all data transfer seems okay.
  digitalWrite(clockPin, LOW);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8e 81       	ldd	r24, Y+6	; 0x06
    1052:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:162
  //digitalWrite(dataPin, HIGH);
  pinMode(dataPin, INPUT);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:163
  digitalWrite(dataPin, HIGH);
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:164
  bitDelay();
    1066:	e8 81       	ld	r30, Y
    1068:	f9 81       	ldd	r31, Y+1	; 0x01
    106a:	02 8c       	ldd	r0, Z+26	; 0x1a
    106c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    106e:	e0 2d       	mov	r30, r0
    1070:	ce 01       	movw	r24, r28
    1072:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:165
  digitalWrite(clockPin, HIGH);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:166
  bitDelay();
    107c:	e8 81       	ld	r30, Y
    107e:	f9 81       	ldd	r31, Y+1	; 0x01
    1080:	02 8c       	ldd	r0, Z+26	; 0x1a
    1082:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1084:	e0 2d       	mov	r30, r0
    1086:	ce 01       	movw	r24, r28
    1088:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:167
  uint8_t ack = digitalRead(dataPin);
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <digitalRead>
    1090:	f8 2e       	mov	r15, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:168
  digitalWrite(clockPin, LOW);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:169
  if (ack == 0)
    109a:	f1 10       	cpse	r15, r1
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <TM1650::receive()+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:170
	  digitalWrite(dataPin, LOW);
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:171
  pinMode(dataPin, OUTPUT);
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:174

  return temp;
}
    10ae:	81 2f       	mov	r24, r17
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <TM1650::setupDisplay(bool, unsigned char)>:
setupDisplay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:122
  	sendData(i, 0);
  }
}

void TM1650::setupDisplay(boolean active, byte intensity)
{	// For the TM1650 level 0 is maximum brightness, 1-7 is low to high.
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
    10c6:	06 2f       	mov	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:124
	// To align with other TM16XX chips we translate this to the same levels (0-7)
	intensity=min(7, intensity);
    10c8:	48 30       	cpi	r20, 0x08	; 8
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <TM1650::setupDisplay(bool, unsigned char)+0x12>
    10cc:	47 e0       	ldi	r20, 0x07	; 7
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:125
	intensity+=1;
    10ce:	11 e0       	ldi	r17, 0x01	; 1
    10d0:	14 0f       	add	r17, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:126
	if(intensity==8) intensity=0;
    10d2:	18 30       	cpi	r17, 0x08	; 8
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <TM1650::setupDisplay(bool, unsigned char)+0x1c>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:127
	start();
    10d8:	e8 81       	ld	r30, Y
    10da:	f9 81       	ldd	r31, Y+1	; 0x01
    10dc:	04 8c       	ldd	r0, Z+28	; 0x1c
    10de:	f5 8d       	ldd	r31, Z+29	; 0x1d
    10e0:	e0 2d       	mov	r30, r0
    10e2:	ce 01       	movw	r24, r28
    10e4:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:128
  send(TM1650_CMD_MODE);
    10e6:	e8 81       	ld	r30, Y
    10e8:	f9 81       	ldd	r31, Y+1	; 0x01
    10ea:	00 a0       	ldd	r0, Z+32	; 0x20
    10ec:	f1 a1       	ldd	r31, Z+33	; 0x21
    10ee:	e0 2d       	mov	r30, r0
    10f0:	68 e4       	ldi	r22, 0x48	; 72
    10f2:	ce 01       	movw	r24, r28
    10f4:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:129
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
    10f6:	e8 81       	ld	r30, Y
    10f8:	f9 81       	ldd	r31, Y+1	; 0x01
    10fa:	00 a0       	ldd	r0, Z+32	; 0x20
    10fc:	f1 a1       	ldd	r31, Z+33	; 0x21
    10fe:	e0 2d       	mov	r30, r0
    1100:	80 e1       	ldi	r24, 0x10	; 16
    1102:	18 9f       	mul	r17, r24
    1104:	a0 01       	movw	r20, r0
    1106:	11 24       	eor	r1, r1
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	87 30       	cpi	r24, 0x07	; 7
    110e:	09 f4       	brne	.+2      	; 0x1112 <TM1650::setupDisplay(bool, unsigned char)+0x56>
    1110:	68 e0       	ldi	r22, 0x08	; 8
    1112:	40 2b       	or	r20, r16
    1114:	64 2b       	or	r22, r20
    1116:	ce 01       	movw	r24, r28
    1118:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
  stop();
    111a:	e8 81       	ld	r30, Y
    111c:	f9 81       	ldd	r31, Y+1	; 0x01
    111e:	06 8c       	ldd	r0, Z+30	; 0x1e
    1120:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1122:	e0 2d       	mov	r30, r0
    1124:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:131
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
	intensity+=1;
	if(intensity==8) intensity=0;
	start();
  send(TM1650_CMD_MODE);
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
    112e:	09 94       	ijmp

00001130 <TM1650::clearDisplay()>:
clearDisplay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:110
  send(data);
  stop();
}

void TM1650::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
    113a:	d0 e0       	ldi	r29, 0x00	; 0
    113c:	c0 e0       	ldi	r28, 0x00	; 0
    113e:	d8 01       	movw	r26, r16
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	8c 91       	ld	r24, X
    1144:	12 97       	sbiw	r26, 0x02	; 2
    1146:	8c 17       	cp	r24, r28
    1148:	1d 06       	cpc	r1, r29
    114a:	61 f0       	breq	.+24     	; 0x1164 <TM1650::clearDisplay()+0x34>
    114c:	5c f0       	brlt	.+22     	; 0x1164 <TM1650::clearDisplay()+0x34>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:117
  	sendData(i, 0);
    114e:	ed 91       	ld	r30, X+
    1150:	fc 91       	ld	r31, X
    1152:	04 a0       	ldd	r0, Z+36	; 0x24
    1154:	f5 a1       	ldd	r31, Z+37	; 0x25
    1156:	e0 2d       	mov	r30, r0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	6c 2f       	mov	r22, r28
    115c:	c8 01       	movw	r24, r16
    115e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
    1160:	21 96       	adiw	r28, 0x01	; 1
    1162:	ed cf       	rjmp	.-38     	; 0x113e <TM1650::clearDisplay()+0xe>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:119
  	sendData(i, 0);
  }
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	08 95       	ret

0000116e <TM1650::sendData(unsigned char, unsigned char)>:
sendData():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:102
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
}

void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	16 2f       	mov	r17, r22
    117a:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:103
	start();
    117c:	e8 81       	ld	r30, Y
    117e:	f9 81       	ldd	r31, Y+1	; 0x01
    1180:	04 8c       	ldd	r0, Z+28	; 0x1c
    1182:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1184:	e0 2d       	mov	r30, r0
    1186:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:104
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
    1188:	61 2f       	mov	r22, r17
    118a:	66 0f       	add	r22, r22
    118c:	68 66       	ori	r22, 0x68	; 104
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	00 a0       	ldd	r0, Z+32	; 0x20
    1194:	f1 a1       	ldd	r31, Z+33	; 0x21
    1196:	e0 2d       	mov	r30, r0
    1198:	ce 01       	movw	r24, r28
    119a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:105
  send(data);
    119c:	e8 81       	ld	r30, Y
    119e:	f9 81       	ldd	r31, Y+1	; 0x01
    11a0:	00 a0       	ldd	r0, Z+32	; 0x20
    11a2:	f1 a1       	ldd	r31, Z+33	; 0x21
    11a4:	e0 2d       	mov	r30, r0
    11a6:	60 2f       	mov	r22, r16
    11a8:	ce 01       	movw	r24, r28
    11aa:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
  stop();
    11ac:	e8 81       	ld	r30, Y
    11ae:	f9 81       	ldd	r31, Y+1	; 0x01
    11b0:	06 8c       	ldd	r0, Z+30	; 0x1e
    11b2:	f7 8d       	ldd	r31, Z+31	; 0x1f
    11b4:	e0 2d       	mov	r30, r0
    11b6:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:107
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
	start();
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
  send(data);
  stop();
    11c0:	09 94       	ijmp

000011c2 <TM1650::send(unsigned char)>:
send():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:69
  digitalWrite(dataPin, HIGH);
	bitDelay();
}

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
    11ce:	f6 2e       	mov	r15, r22
    11d0:	08 e0       	ldi	r16, 0x08	; 8
    11d2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:74
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
  {
    digitalWrite(clockPin, LOW);
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:75
    bitDelay();
    11dc:	e8 81       	ld	r30, Y
    11de:	f9 81       	ldd	r31, Y+1	; 0x01
    11e0:	02 8c       	ldd	r0, Z+26	; 0x1a
    11e2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    11e4:	e0 2d       	mov	r30, r0
    11e6:	ce 01       	movw	r24, r28
    11e8:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:77

    digitalWrite(dataPin, data & 0x80 ? HIGH : LOW);		// in contrast to other TM16xx chips, the TM1650 expects MSB first
    11ea:	6f 2d       	mov	r22, r15
    11ec:	66 1f       	adc	r22, r22
    11ee:	66 27       	eor	r22, r22
    11f0:	66 1f       	adc	r22, r22
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:78
    data <<= 1;
    11f8:	ff 0c       	add	r15, r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:80

    digitalWrite(clockPin, HIGH);
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:81
    bitDelay();
    1202:	e8 81       	ld	r30, Y
    1204:	f9 81       	ldd	r31, Y+1	; 0x01
    1206:	02 8c       	ldd	r0, Z+26	; 0x1a
    1208:	f3 8d       	ldd	r31, Z+27	; 0x1b
    120a:	e0 2d       	mov	r30, r0
    120c:	ce 01       	movw	r24, r28
    120e:	09 95       	icall
    1210:	01 50       	subi	r16, 0x01	; 1
    1212:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:72

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
    1214:	f9 f6       	brne	.-66     	; 0x11d4 <TM1650::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:83
    data <<= 1;

    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();
    1216:	e8 81       	ld	r30, Y
    1218:	f9 81       	ldd	r31, Y+1	; 0x01
    121a:	02 8c       	ldd	r0, Z+26	; 0x1a
    121c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    121e:	e0 2d       	mov	r30, r0
    1220:	ce 01       	movw	r24, r28
    1222:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:84
  bitDelay();
    1224:	e8 81       	ld	r30, Y
    1226:	f9 81       	ldd	r31, Y+1	; 0x01
    1228:	02 8c       	ldd	r0, Z+26	; 0x1a
    122a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    122c:	e0 2d       	mov	r30, r0
    122e:	ce 01       	movw	r24, r28
    1230:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:90

	// unlike TM1638/TM1668 and TM1640, the TM1650 and TM1637 uses an ACK to confirm reception of command/data
  // read the acknowledgement
  // TODO? return the ack?
	// (method derived from https://github.com/avishorp/TM1637 but using pins in standard output mode when writing)
  digitalWrite(clockPin, LOW);
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	8e 81       	ldd	r24, Y+6	; 0x06
    1236:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:91
  pinMode(dataPin, INPUT);
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:92
  bitDelay();
    1242:	e8 81       	ld	r30, Y
    1244:	f9 81       	ldd	r31, Y+1	; 0x01
    1246:	02 8c       	ldd	r0, Z+26	; 0x1a
    1248:	f3 8d       	ldd	r31, Z+27	; 0x1b
    124a:	e0 2d       	mov	r30, r0
    124c:	ce 01       	movw	r24, r28
    124e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:93
  digitalWrite(clockPin, HIGH);
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:94
  bitDelay();
    1258:	e8 81       	ld	r30, Y
    125a:	f9 81       	ldd	r31, Y+1	; 0x01
    125c:	02 8c       	ldd	r0, Z+26	; 0x1a
    125e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1260:	e0 2d       	mov	r30, r0
    1262:	ce 01       	movw	r24, r28
    1264:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:95
  uint8_t ack = digitalRead(dataPin);
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <digitalRead>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:96
  if (ack == 0)
    126c:	81 11       	cpse	r24, r1
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <TM1650::send(unsigned char)+0xb6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:97
	  digitalWrite(dataPin, LOW);
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  pinMode(dataPin, OUTPUT);
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:99
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  digitalWrite(clockPin, HIGH);
  bitDelay();
  uint8_t ack = digitalRead(dataPin);
  if (ack == 0)
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
    1286:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <pinMode>

0000128a <TM1650::stop()>:
stop():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:57
	bitDelay();

}

void TM1650::stop()
{ // to stop TM1650 expects the clock to go high, when strobing DIO high
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:60
	// Datasheet p.3: "End signal: keep SCL at "1" level, SDA jumps from "0" to "1", which is considered to be the end signal."
	// TM1650 expects start and stop like I2C: at stop clock is high, then data changes from low to high.
  digitalWrite(clockPin, LOW);
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:61
  digitalWrite(dataPin, LOW);
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:62
	bitDelay();
    12a0:	e8 81       	ld	r30, Y
    12a2:	f9 81       	ldd	r31, Y+1	; 0x01
    12a4:	02 8c       	ldd	r0, Z+26	; 0x1a
    12a6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12a8:	e0 2d       	mov	r30, r0
    12aa:	ce 01       	movw	r24, r28
    12ac:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:63
  digitalWrite(clockPin, HIGH);
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:64
  digitalWrite(dataPin, HIGH);
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
	bitDelay();
    12be:	e8 81       	ld	r30, Y
    12c0:	f9 81       	ldd	r31, Y+1	; 0x01
    12c2:	02 8c       	ldd	r0, Z+26	; 0x1a
    12c4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12c6:	e0 2d       	mov	r30, r0
    12c8:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:66
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
  digitalWrite(clockPin, LOW);
  digitalWrite(dataPin, LOW);
	bitDelay();
  digitalWrite(clockPin, HIGH);
  digitalWrite(dataPin, HIGH);
	bitDelay();
    12ce:	09 94       	ijmp

000012d0 <TM1650::start()>:
start():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:44
}
#endif


void TM1650::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:47
	// Datasheet p.3: "Start signal: keep SCL at "1" level, SDA jumps from "1" to "0", which is considered to be the start signal."
	// TM1650 expects start and stop like I2C: at start data is low, then clock changes from high to low.
  digitalWrite(dataPin, HIGH);
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:48
  digitalWrite(clockPin, HIGH);
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:49
  bitDelay();
    12e6:	e8 81       	ld	r30, Y
    12e8:	f9 81       	ldd	r31, Y+1	; 0x01
    12ea:	02 8c       	ldd	r0, Z+26	; 0x1a
    12ec:	f3 8d       	ldd	r31, Z+27	; 0x1b
    12ee:	e0 2d       	mov	r30, r0
    12f0:	ce 01       	movw	r24, r28
    12f2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:50
  digitalWrite(dataPin, LOW);
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:51
  digitalWrite(clockPin, LOW);
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
	bitDelay();
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	02 8c       	ldd	r0, Z+26	; 0x1a
    130a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    130c:	e0 2d       	mov	r30, r0
    130e:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:54

}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
  digitalWrite(dataPin, HIGH);
  digitalWrite(clockPin, HIGH);
  bitDelay();
  digitalWrite(dataPin, LOW);
  digitalWrite(clockPin, LOW);
	bitDelay();
    1314:	09 94       	ijmp

00001316 <TM1628::bitDelay()>:
bitDelay():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1628.cpp:54
	setupDisplay(activateDisplay, intensity);
}

void TM1628::bitDelay()
{
	delayMicroseconds(5);
    1316:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <delayMicroseconds.constprop.5>

0000131a <twi_transmit>:
twi_transmit():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    131a:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <twi_txBufferLength>
    131e:	26 0f       	add	r18, r22
    1320:	33 27       	eor	r19, r19
    1322:	33 1f       	adc	r19, r19
    1324:	21 32       	cpi	r18, 0x21	; 33
    1326:	31 05       	cpc	r19, r1
    1328:	ec f4       	brge	.+58     	; 0x1364 <twi_transmit+0x4a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    132a:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <twi_state>
    132e:	fc 01       	movw	r30, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	24 30       	cpi	r18, 0x04	; 4
    1336:	69 f0       	breq	.+26     	; 0x1352 <twi_transmit+0x38>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:377
    return 2;
    1338:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    133a:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    133c:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <twi_txBufferLength>
    1340:	21 91       	ld	r18, Z+
    1342:	ac 01       	movw	r20, r24
    1344:	42 56       	subi	r20, 0x62	; 98
    1346:	5d 4f       	sbci	r21, 0xFD	; 253
    1348:	a4 0f       	add	r26, r20
    134a:	b5 2f       	mov	r27, r21
    134c:	b1 1d       	adc	r27, r1
    134e:	2c 93       	st	X, r18
    1350:	01 96       	adiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1352:	86 17       	cp	r24, r22
    1354:	98 f3       	brcs	.-26     	; 0x133c <twi_transmit+0x22>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    1356:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_txBufferLength>
    135a:	68 0f       	add	r22, r24
    135c:	60 93 be 02 	sts	0x02BE, r22	; 0x8002be <twi_txBufferLength>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	08 95       	ret

00001368 <twi_writeTo>:
twi_writeTo():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:266
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    1368:	0f 93       	push	r16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:268
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    136a:	41 32       	cpi	r20, 0x21	; 33
    136c:	08 f0       	brcs	.+2      	; 0x1370 <twi_writeTo+0x8>
    136e:	44 c0       	rjmp	.+136    	; 0x13f8 <twi_writeTo+0x90>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
    1370:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <twi_state>
    1374:	91 11       	cpse	r25, r1
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <twi_writeTo+0x8>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:288
  twi_sendStop = sendStop;
    137e:	00 93 e4 02 	sts	0x02E4, r16	; 0x8002e4 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    1384:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1388:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <twi_masterBuffer+0x1>
    138c:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <twi_masterBuffer>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:294
  twi_masterBufferIndex = 0;
    1390:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:295
  twi_masterBufferLength = length;
    1394:	40 93 e7 02 	sts	0x02E7, r20	; 0x8002e7 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    1398:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:299
  twi_slarw |= address << 1;
    139c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_slarw>
    13a0:	88 0f       	add	r24, r24
    13a2:	89 2b       	or	r24, r25
    13a4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    13a8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_inRepStart>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	11 f5       	brne	.+68     	; 0x13f4 <twi_writeTo+0x8c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    13b0:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    13b4:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    13b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:323
      } while(TWCR & _BV(TWWC));
    13bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    13c0:	83 fd       	sbrc	r24, 3
    13c2:	f8 cf       	rjmp	.-16     	; 0x13b4 <twi_writeTo+0x4c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    13c4:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    13c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
    13ca:	22 23       	and	r18, r18
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <twi_writeTo+0x6e>
    13ce:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_state>
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	d1 f3       	breq	.-12     	; 0x13ca <twi_writeTo+0x62>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    13d6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_error>
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	79 f0       	breq	.+30     	; 0x13fc <twi_writeTo+0x94>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    13de:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_error>
    13e2:	80 32       	cpi	r24, 0x20	; 32
    13e4:	69 f0       	breq	.+26     	; 0x1400 <twi_writeTo+0x98>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    13e6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_error>
    13ea:	80 33       	cpi	r24, 0x30	; 48
    13ec:	59 f0       	breq	.+22     	; 0x1404 <twi_writeTo+0x9c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    13ee:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:354
}
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    13f4:	85 ee       	ldi	r24, 0xE5	; 229
    13f6:	e7 cf       	rjmp	.-50     	; 0x13c6 <twi_writeTo+0x5e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	fa cf       	rjmp	.-12     	; 0x13f0 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	f8 cf       	rjmp	.-16     	; 0x13f0 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	f6 cf       	rjmp	.-20     	; 0x13f0 <twi_writeTo+0x88>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	f4 cf       	rjmp	.-24     	; 0x13f0 <twi_writeTo+0x88>

00001408 <twi_readFrom>:
twi_readFrom():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:163
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    1408:	41 32       	cpi	r20, 0x21	; 33
    140a:	e0 f5       	brcc	.+120    	; 0x1484 <twi_readFrom+0x7c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    140c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <twi_state>
    1410:	91 11       	cpse	r25, r1
    1412:	fc cf       	rjmp	.-8      	; 0x140c <twi_readFrom+0x4>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:182
  twi_sendStop = sendStop;
    141a:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <twi_sendStop>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1424:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <twi_masterBuffer+0x1>
    1428:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <twi_masterBuffer>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:188
  twi_masterBufferIndex = 0;
    142c:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1430:	24 0f       	add	r18, r20
    1432:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1436:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:198
  twi_slarw |= address << 1;
    143a:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_slarw>
    143e:	88 0f       	add	r24, r24
    1440:	89 2b       	or	r24, r25
    1442:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:200

  if (true == twi_inRepStart) {
    1446:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_inRepStart>
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	c9 f4       	brne	.+50     	; 0x1480 <twi_readFrom+0x78>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    144e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    1452:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    1456:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:220
      } while(TWCR & _BV(TWWC));
    145a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    145e:	83 fd       	sbrc	r24, 3
    1460:	f8 cf       	rjmp	.-16     	; 0x1452 <twi_readFrom+0x4a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1462:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1464:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    1468:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_state>
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	e1 f3       	breq	.-8      	; 0x1468 <twi_readFrom+0x60>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    1470:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    1474:	84 17       	cp	r24, r20
    1476:	10 f4       	brcc	.+4      	; 0x147c <twi_readFrom+0x74>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:244
    length = twi_masterBufferIndex;
    1478:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:247

  return length;
}
    147c:	84 2f       	mov	r24, r20
    147e:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1480:	85 ee       	ldi	r24, 0xE5	; 229
    1482:	f0 cf       	rjmp	.-32     	; 0x1464 <twi_readFrom+0x5c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:164
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	fa cf       	rjmp	.-12     	; 0x147c <twi_readFrom+0x74>

00001488 <{lambda()#2}::_FUN()>:
onRequestService():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:743

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    1488:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <Wire+0x18>
    148c:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <Wire+0x19>
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	29 f0       	breq	.+10     	; 0x149e <{lambda()#2}::_FUN()+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:748
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    1494:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <Wire+0x15>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:749
  txBufferLength = 0;
    1498:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Wire+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:751
  // alert user program
  user_onRequest();
    149c:	09 94       	ijmp
_FUN():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    149e:	08 95       	ret

000014a0 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:785
                         twi_setTimeoutInMicros,
                         twi_handleTimeout,
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
    14a0:	dc 01       	movw	r26, r24
onReceiveService():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:718

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    14a2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <Wire+0x1a>
    14a6:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <Wire+0x1b>
    14aa:	89 2b       	or	r24, r25
    14ac:	19 f1       	breq	.+70     	; 0x14f4 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x54>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:724
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    14ae:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <Wire+0x10>
    14b2:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <Wire+0x11>
    14b6:	98 17       	cp	r25, r24
    14b8:	e8 f0       	brcs	.+58     	; 0x14f4 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x54>
_FUN():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:729
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    14ba:	90 e0       	ldi	r25, 0x00	; 0
onReceiveService():
    14bc:	29 2f       	mov	r18, r25
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	26 17       	cp	r18, r22
    14c2:	37 07       	cpc	r19, r23
    14c4:	6c f4       	brge	.+26     	; 0x14e0 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x40>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:730
    rxBuffer[i] = inBytes[i];
    14c6:	fd 01       	movw	r30, r26
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	40 81       	ld	r20, Z
    14ce:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <Wire+0xe>
    14d2:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <Wire+0xf>
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	40 83       	st	Z, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:729
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    14dc:	9f 5f       	subi	r25, 0xFF	; 255
    14de:	ee cf       	rjmp	.-36     	; 0x14bc <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)+0x1c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:733
    rxBuffer[i] = inBytes[i];
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    14e0:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <Wire+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:734
  rxBufferLength = numBytes;
    14e4:	60 93 11 04 	sts	0x0411, r22	; 0x800411 <Wire+0x11>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:736
  // alert user program
  user_onReceive(numBytes);
    14e8:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <Wire+0x1a>
    14ec:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <Wire+0x1b>
    14f0:	cb 01       	movw	r24, r22
    14f2:	09 94       	ijmp
_FUN():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:785
                         twi_setTimeoutInMicros,
                         twi_handleTimeout,
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
    14f4:	08 95       	ret

000014f6 <TwoWire::peek()>:
peek():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:699

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    14f6:	dc 01       	movw	r26, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:702
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    14f8:	50 96       	adiw	r26, 0x10	; 16
    14fa:	ec 91       	ld	r30, X
    14fc:	50 97       	sbiw	r26, 0x10	; 16
    14fe:	51 96       	adiw	r26, 0x11	; 17
    1500:	8c 91       	ld	r24, X
    1502:	51 97       	sbiw	r26, 0x11	; 17
    1504:	e8 17       	cp	r30, r24
    1506:	48 f4       	brcc	.+18     	; 0x151a <TwoWire::peek()+0x24>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:703
    value = rxBuffer[rxBufferIndex];
    1508:	1e 96       	adiw	r26, 0x0e	; 14
    150a:	8d 91       	ld	r24, X+
    150c:	9c 91       	ld	r25, X
    150e:	e8 0f       	add	r30, r24
    1510:	f9 2f       	mov	r31, r25
    1512:	f1 1d       	adc	r31, r1
    1514:	80 81       	ld	r24, Z
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:700
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:707
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    151e:	08 95       	ret

00001520 <TwoWire::read()>:
read():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:683

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    1520:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:687
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1522:	90 89       	ldd	r25, Z+16	; 0x10
    1524:	81 89       	ldd	r24, Z+17	; 0x11
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:684
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1526:	2f ef       	ldi	r18, 0xFF	; 255
    1528:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:687

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    152a:	98 17       	cp	r25, r24
    152c:	40 f4       	brcc	.+16     	; 0x153e <TwoWire::read()+0x1e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:688
    value = rxBuffer[rxBufferIndex];
    152e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1530:	b7 85       	ldd	r27, Z+15	; 0x0f
    1532:	a9 0f       	add	r26, r25
    1534:	b1 1d       	adc	r27, r1
    1536:	2c 91       	ld	r18, X
    1538:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:689
    ++rxBufferIndex;
    153a:	9f 5f       	subi	r25, 0xFF	; 255
    153c:	90 8b       	std	Z+16, r25	; 0x10
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:693
  }

  return value;
}
    153e:	c9 01       	movw	r24, r18
    1540:	08 95       	ret

00001542 <TwoWire::available()>:
available():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:675

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    1542:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:676
  return rxBufferLength - rxBufferIndex;
    1544:	81 89       	ldd	r24, Z+17	; 0x11
    1546:	90 89       	ldd	r25, Z+16	; 0x10
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:677
}
    1548:	89 1b       	sub	r24, r25
    154a:	99 0b       	sbc	r25, r25
    154c:	08 95       	ret

0000154e <TwoWire::write(unsigned char const*, unsigned int)>:
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:657

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	8c 01       	movw	r16, r24
    1560:	cb 01       	movw	r24, r22
    1562:	7a 01       	movw	r14, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:658
  if(transmitting){
    1564:	d8 01       	movw	r26, r16
    1566:	57 96       	adiw	r26, 0x17	; 23
    1568:	2c 91       	ld	r18, X
    156a:	57 97       	sbiw	r26, 0x17	; 23
    156c:	22 23       	and	r18, r18
    156e:	89 f0       	breq	.+34     	; 0x1592 <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    1570:	eb 01       	movw	r28, r22
    1572:	6b 01       	movw	r12, r22
    1574:	c4 0e       	add	r12, r20
    1576:	d5 1e       	adc	r13, r21
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:660
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1578:	cc 15       	cp	r28, r12
    157a:	dd 05       	cpc	r29, r13
    157c:	79 f0       	breq	.+30     	; 0x159c <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:661
      write(data[i]);
    157e:	69 91       	ld	r22, Y+
    1580:	d8 01       	movw	r26, r16
    1582:	ed 91       	ld	r30, X+
    1584:	fc 91       	ld	r31, X
    1586:	01 90       	ld	r0, Z+
    1588:	f0 81       	ld	r31, Z
    158a:	e0 2d       	mov	r30, r0
    158c:	c8 01       	movw	r24, r16
    158e:	09 95       	icall
    1590:	f3 cf       	rjmp	.-26     	; 0x1578 <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:666
    }
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(data, quantity);
    1592:	98 96       	adiw	r26, 0x28	; 40
    1594:	ed 91       	ld	r30, X+
    1596:	fc 91       	ld	r31, X
    1598:	64 2f       	mov	r22, r20
    159a:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:669
  }
  return quantity;
}
    159c:	c7 01       	movw	r24, r14
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <TwoWire::write(unsigned char)>:
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:632

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	1f 92       	push	r1
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	fc 01       	movw	r30, r24
    15bc:	69 83       	std	Y+1, r22	; 0x01
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:633
  if(transmitting){
    15be:	87 89       	ldd	r24, Z+23	; 0x17
    15c0:	88 23       	and	r24, r24
    15c2:	f9 f0       	breq	.+62     	; 0x1602 <TwoWire::write(unsigned char)+0x52>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:636
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= bufferLength){
    15c4:	26 89       	ldd	r18, Z+22	; 0x16
    15c6:	84 85       	ldd	r24, Z+12	; 0x0c
    15c8:	95 85       	ldd	r25, Z+13	; 0x0d
    15ca:	28 17       	cp	r18, r24
    15cc:	19 06       	cpc	r1, r25
    15ce:	54 f0       	brlt	.+20     	; 0x15e4 <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	93 83       	std	Z+3, r25	; 0x03
    15d6:	82 83       	std	Z+2, r24	; 0x02
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:638
      setWriteError();
      return 0;
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:651
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
  }
  return 1;
}
    15dc:	0f 90       	pop	r0
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:641
    if(txBufferLength >= bufferLength){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	a5 89       	ldd	r26, Z+21	; 0x15
    15e8:	23 89       	ldd	r18, Z+19	; 0x13
    15ea:	34 89       	ldd	r19, Z+20	; 0x14
    15ec:	a2 0f       	add	r26, r18
    15ee:	b3 2f       	mov	r27, r19
    15f0:	b1 1d       	adc	r27, r1
    15f2:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:642
    ++txBufferIndex;
    15f4:	85 89       	ldd	r24, Z+21	; 0x15
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	85 8b       	std	Z+21, r24	; 0x15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:644
    // update amount in buffer
    txBufferLength = txBufferIndex;
    15fa:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:650
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
  }
  return 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	ed cf       	rjmp	.-38     	; 0x15dc <TwoWire::write(unsigned char)+0x2c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:648
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    tw_transmit(&data, 1);
    1602:	00 a4       	ldd	r0, Z+40	; 0x28
    1604:	f1 a5       	ldd	r31, Z+41	; 0x29
    1606:	e0 2d       	mov	r30, r0
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	09 95       	icall
    1610:	f5 cf       	rjmp	.-22     	; 0x15fc <TwoWire::write(unsigned char)+0x4c>

00001612 <Print::availableForWrite()>:
availableForWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	08 95       	ret

00001618 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>:
_ZN10MQ131Class7convertEf9MQ131UnitS0_.part.2():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:254
    return input;
  }

  float concentration = 0;

  switch(unitOut) {
    1618:	22 30       	cpi	r18, 0x02	; 2
    161a:	31 05       	cpc	r19, r1
    161c:	a1 f0       	breq	.+40     	; 0x1646 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x2e>
    161e:	23 30       	cpi	r18, 0x03	; 3
    1620:	31 05       	cpc	r19, r1
    1622:	21 f1       	breq	.+72     	; 0x166c <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x54>
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	39 f0       	breq	.+14     	; 0x1638 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x20>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:259
    case PPM :
      // We assume that the unit IN is PPB as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPB to PPM
      return input / 1000.0;
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	54 e4       	ldi	r21, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    1632:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:282
    default :
      return input;
  }
}
    1636:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:264
      return input / 1000.0;
    case PPB :
      // We assume that the unit IN is PPM as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPM to PPB
      return input * 1000.0;
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	54 e4       	ldi	r21, 0x44	; 68
    1640:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1644:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:266
    case MG_M3 :
      if(unitIn == PPM) {
    1646:	45 2b       	or	r20, r21
    1648:	31 f0       	breq	.+12     	; 0x1656 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:269
        concentration = input;
      } else {
        concentration = input / 1000.0;
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e4       	ldi	r20, 0x40	; 64
    165c:	52 e4       	ldi	r21, 0x42	; 66
    165e:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1662:	2b e4       	ldi	r18, 0x4B	; 75
    1664:	30 eb       	ldi	r19, 0xB0	; 176
    1666:	45 eb       	ldi	r20, 0xB5	; 181
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	e3 cf       	rjmp	.-58     	; 0x1632 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x1a>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:273
      } else {
        concentration = input / 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    case UG_M3 :
      if(unitIn == PPB) {
    166c:	41 30       	cpi	r20, 0x01	; 1
    166e:	51 05       	cpc	r21, r1
    1670:	91 f3       	breq	.-28     	; 0x1656 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:276
        concentration = input;
      } else {
        concentration = input * 1000.0;
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a e7       	ldi	r20, 0x7A	; 122
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    167e:	eb cf       	rjmp	.-42     	; 0x1656 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>

00001680 <MQ131Class::~MQ131Class()>:
__base_dtor ():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:44

/**
 * Destructor, nothing special to do
 */
MQ131Class::~MQ131Class() {
}
    1680:	08 95       	ret

00001682 <setSegmentFloat(float, bool)>:
setSegmentFloat():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:180
      temperature = am1008w_k_i2c.get_temperature()*10;
    }
  }
}

void setSegmentFloat(float input,bool sign){
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	4b 01       	movw	r8, r22
    1698:	5c 01       	movw	r10, r24
    169a:	f4 2e       	mov	r15, r20
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:181
  module.clearDisplay();
    169c:	84 e3       	ldi	r24, 0x34	; 52
    169e:	95 e0       	ldi	r25, 0x05	; 5
    16a0:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:182
  int tmp = (int)input;
    16a4:	c5 01       	movw	r24, r10
    16a6:	b4 01       	movw	r22, r8
    16a8:	0e 94 1e 23 	call	0x463c	; 0x463c <__fixsfsi>
    16ac:	eb 01       	movw	r28, r22
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:183
  module.setDisplayToDecNumber(tmp%100,2); // 값, 위치
    16ae:	cb 01       	movw	r24, r22
    16b0:	64 e6       	ldi	r22, 0x64	; 100
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    16b8:	e6 2e       	mov	r14, r22
    16ba:	42 e0       	ldi	r20, 0x02	; 2
    16bc:	bc 01       	movw	r22, r24
    16be:	84 e3       	ldi	r24, 0x34	; 52
    16c0:	95 e0       	ldi	r25, 0x05	; 5
    16c2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <TM16xx::setDisplayToDecNumber(int, unsigned char)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:184
  tmp = tmp/10;
    16c6:	2a e0       	ldi	r18, 0x0A	; 10
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	ce 01       	movw	r24, r28
    16cc:	b9 01       	movw	r22, r18
    16ce:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    16d2:	cb 01       	movw	r24, r22
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:185
  module.setDisplayDigit(tmp%10,1,true);// 원하는 값, 위치, dot 찍을거임?
    16d4:	b9 01       	movw	r22, r18
    16d6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    16da:	0f ef       	ldi	r16, 0xFF	; 255
    16dc:	11 e0       	ldi	r17, 0x01	; 1
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	68 2f       	mov	r22, r24
    16e4:	84 e3       	ldi	r24, 0x34	; 52
    16e6:	95 e0       	ldi	r25, 0x05	; 5
    16e8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:187
  tmp = tmp/10;
  module.setDisplayDigit(tmp,0,false); // 3번 자리에 숫자 2설정, 퍼센트
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	6e 2d       	mov	r22, r14
    16f2:	84 e3       	ldi	r24, 0x34	; 52
    16f4:	95 e0       	ldi	r25, 0x05	; 5
    16f6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:189
  
  if(sign) module.setDisplayDigit(1,3,false); // 퍼센트
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	43 e0       	ldi	r20, 0x03	; 3
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	f1 10       	cpse	r15, r1
    1702:	05 c0       	rjmp	.+10     	; 0x170e <setSegmentFloat(float, bool)+0x8c>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:190
  else module.setDisplayDigit(5,3,false); // 온도
    1704:	0f ef       	ldi	r16, 0xFF	; 255
    1706:	11 e0       	ldi	r17, 0x01	; 1
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	43 e0       	ldi	r20, 0x03	; 3
    170c:	65 e0       	ldi	r22, 0x05	; 5
    170e:	84 e3       	ldi	r24, 0x34	; 52
    1710:	95 e0       	ldi	r25, 0x05	; 5
    1712:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:191
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	08 95       	ret

0000172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>:
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:287
/*
 * Each bit looks like: MARK + SPACE_1 -> 1
 *                 or : MARK + SPACE_0 -> 0
 * Data is read MSB first.
 */
unsigned long IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, unsigned int aBitMarkMicros,
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	f8 2f       	mov	r31, r24
    174e:	e6 2f       	mov	r30, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:294
    unsigned long aDecodedData = 0;

    if (aMSBfirst) {
        for (uint8_t i = 0; i < aNumberOfBits; i++) {
            // Check for constant length mark
            if (!MATCH_MARK(results.rawbuf[aStartOffset], aBitMarkMicros)) {
    1750:	c0 90 2f 05 	lds	r12, 0x052F	; 0x80052f <irrecv+0xd>
    1754:	d0 90 30 05 	lds	r13, 0x0530	; 0x800530 <irrecv+0xe>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:75
    Serial.print(measured_ticks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
    1758:	4a 01       	movw	r8, r20
    175a:	84 e6       	ldi	r24, 0x64	; 100
    175c:	88 0e       	add	r8, r24
    175e:	91 1c       	adc	r9, r1
    1760:	83 e4       	ldi	r24, 0x43	; 67
    1762:	e8 2e       	mov	r14, r24
    1764:	f1 2c       	mov	r15, r1
    1766:	c4 01       	movw	r24, r8
    1768:	b7 01       	movw	r22, r14
    176a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    176e:	5b 01       	movw	r10, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    1770:	c8 e2       	ldi	r28, 0x28	; 40
    1772:	d0 e0       	ldi	r29, 0x00	; 0
    1774:	c4 01       	movw	r24, r8
    1776:	be 01       	movw	r22, r28
    1778:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    177c:	2b 01       	movw	r4, r22
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	48 1a       	sub	r4, r24
    1782:	58 0a       	sbc	r5, r24
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:104
    Serial.print(measured_ticks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
    1784:	24 56       	subi	r18, 0x64	; 100
    1786:	31 09       	sbc	r19, r1
    1788:	c9 01       	movw	r24, r18
    178a:	b7 01       	movw	r22, r14
    178c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    1790:	4b 01       	movw	r8, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    1792:	c9 01       	movw	r24, r18
    1794:	be 01       	movw	r22, r28
    1796:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    179a:	3b 01       	movw	r6, r22
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	68 1a       	sub	r6, r24
    17a0:	78 0a       	sbc	r7, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:104
    Serial.print(measured_ticks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
    17a2:	04 56       	subi	r16, 0x64	; 100
    17a4:	11 09       	sbc	r17, r1
    17a6:	c8 01       	movw	r24, r16
    17a8:	b7 01       	movw	r22, r14
    17aa:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    17ae:	9b 01       	movw	r18, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    17b0:	c8 01       	movw	r24, r16
    17b2:	be 01       	movw	r22, r28
    17b4:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    17b8:	ab 01       	movw	r20, r22
    17ba:	4f 5f       	subi	r20, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	ff 0f       	add	r31, r31
    17c0:	fe 0f       	add	r31, r30
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:289
 *                 or : MARK + SPACE_0 -> 0
 * Data is read MSB first.
 */
unsigned long IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, unsigned int aBitMarkMicros,
        unsigned int aOneSpaceMicros, unsigned int aZeroSpaceMicros, bool aMSBfirst) {
    unsigned long aDecodedData = 0;
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	cb 01       	movw	r24, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:294

    if (aMSBfirst) {
        for (uint8_t i = 0; i < aNumberOfBits; i++) {
            // Check for constant length mark
            if (!MATCH_MARK(results.rawbuf[aStartOffset], aBitMarkMicros)) {
    17c8:	ae 2f       	mov	r26, r30
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	aa 0f       	add	r26, r26
    17ce:	bb 1f       	adc	r27, r27
    17d0:	ac 0d       	add	r26, r12
    17d2:	bd 1d       	adc	r27, r13
    17d4:	0d 90       	ld	r0, X+
    17d6:	bc 91       	ld	r27, X
    17d8:	a0 2d       	mov	r26, r0
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    17da:	aa 15       	cp	r26, r10
    17dc:	bb 05       	cpc	r27, r11
    17de:	7c f1       	brlt	.+94     	; 0x183e <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x112>
    17e0:	4a 16       	cp	r4, r26
    17e2:	5b 06       	cpc	r5, r27
    17e4:	64 f1       	brlt	.+88     	; 0x183e <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x112>
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:297
                return false;
            }
            aStartOffset++;
    17e6:	a1 e0       	ldi	r26, 0x01	; 1
    17e8:	ae 0f       	add	r26, r30
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:300

            // Check for variable length space indicating a 0 or 1
            if (MATCH_SPACE(results.rawbuf[aStartOffset], aOneSpaceMicros)) {
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	aa 0f       	add	r26, r26
    17ee:	bb 1f       	adc	r27, r27
    17f0:	ac 0d       	add	r26, r12
    17f2:	bd 1d       	adc	r27, r13
    17f4:	0d 90       	ld	r0, X+
    17f6:	bc 91       	ld	r27, X
    17f8:	a0 2d       	mov	r26, r0
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    17fa:	a8 15       	cp	r26, r8
    17fc:	b9 05       	cpc	r27, r9
    17fe:	e4 f0       	brlt	.+56     	; 0x1838 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x10c>
    1800:	6a 16       	cp	r6, r26
    1802:	7b 06       	cpc	r7, r27
    1804:	04 f1       	brlt	.+64     	; 0x1846 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x11a>
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:301
                aDecodedData = (aDecodedData << 1) | 1;
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	61 60       	ori	r22, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:307
            } else if (MATCH_SPACE(results.rawbuf[aStartOffset], aZeroSpaceMicros)) {
                aDecodedData = (aDecodedData << 1) | 0;
            } else {
                return false;
            }
            aStartOffset++;
    1810:	ee 5f       	subi	r30, 0xFE	; 254
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:292
unsigned long IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, unsigned int aBitMarkMicros,
        unsigned int aOneSpaceMicros, unsigned int aZeroSpaceMicros, bool aMSBfirst) {
    unsigned long aDecodedData = 0;

    if (aMSBfirst) {
        for (uint8_t i = 0; i < aNumberOfBits; i++) {
    1812:	fe 13       	cpse	r31, r30
    1814:	d9 cf       	rjmp	.-78     	; 0x17c8 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x9c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:333
            aStartOffset++;
        }
    }
#endif
    return aDecodedData;
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	bf 90       	pop	r11
    1828:	af 90       	pop	r10
    182a:	9f 90       	pop	r9
    182c:	8f 90       	pop	r8
    182e:	7f 90       	pop	r7
    1830:	6f 90       	pop	r6
    1832:	5f 90       	pop	r5
    1834:	4f 90       	pop	r4
    1836:	08 95       	ret
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    1838:	a2 17       	cp	r26, r18
    183a:	b3 07       	cpc	r27, r19
    183c:	24 f4       	brge	.+8      	; 0x1846 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x11a>
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:295

    if (aMSBfirst) {
        for (uint8_t i = 0; i < aNumberOfBits; i++) {
            // Check for constant length mark
            if (!MATCH_MARK(results.rawbuf[aStartOffset], aBitMarkMicros)) {
                return false;
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	cb 01       	movw	r24, r22
    1844:	e8 cf       	rjmp	.-48     	; 0x1816 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0xea>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    1846:	4a 17       	cp	r20, r26
    1848:	5b 07       	cpc	r21, r27
    184a:	cc f3       	brlt	.-14     	; 0x183e <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0x112>
decodePulseDistanceData():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:303

            // Check for variable length space indicating a 0 or 1
            if (MATCH_SPACE(results.rawbuf[aStartOffset], aOneSpaceMicros)) {
                aDecodedData = (aDecodedData << 1) | 1;
            } else if (MATCH_SPACE(results.rawbuf[aStartOffset], aZeroSpaceMicros)) {
                aDecodedData = (aDecodedData << 1) | 0;
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	dd cf       	rjmp	.-70     	; 0x1810 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]+0xe4>

00001856 <WindDirectionControl()>:
WindDirectionControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:372
    irrecv.resume();        //계속해서 다음 신호 받기
  }
}

void WindDirectionControl(){
  switch(wind_flag){
    1856:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <wind_flag>
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	b1 f0       	breq	.+44     	; 0x188a <WindDirectionControl()+0x34>
    185e:	28 f0       	brcs	.+10     	; 0x186a <WindDirectionControl()+0x14>
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	19 f1       	breq	.+70     	; 0x18aa <WindDirectionControl()+0x54>
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	59 f1       	breq	.+86     	; 0x18be <WindDirectionControl()+0x68>
    1868:	08 95       	ret
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:374
    case wind_off:
      digitalWrite(FAN_BLED,0);
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	80 e1       	ldi	r24, 0x10	; 16
    186e:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:375
      digitalWrite(FAN_RLED,0);
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	8f e0       	ldi	r24, 0x0F	; 15
    1876:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	89 e0       	ldi	r24, 0x09	; 9
    187e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
    1882:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1884:	89 e0       	ldi	r24, 0x09	; 9
    1886:	0c 94 09 04 	jmp	0x812	; 0x812 <digitalWrite>
WindDirectionControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:379
      analogWrite(FAN1_EN,N_FAN_OFF);
    break;
    case low:
      digitalWrite(FAN_BLED,1);
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	80 e1       	ldi	r24, 0x10	; 16
    188e:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:380
      digitalWrite(FAN_RLED,1);
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	8f e0       	ldi	r24, 0x0F	; 15
    1896:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	89 e0       	ldi	r24, 0x09	; 9
    189e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
    18a2:	8c ed       	ldi	r24, 0xDC	; 220
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <analogWrite.part.0.constprop.110>
WindDirectionControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:384
      analogWrite(FAN1_EN,N_FAN_LOW);
    break;
    case mid:
      digitalWrite(FAN_RLED,0);
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	8f e0       	ldi	r24, 0x0F	; 15
    18ae:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	89 e0       	ldi	r24, 0x09	; 9
    18b6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	e3 cf       	rjmp	.-58     	; 0x1884 <WindDirectionControl()+0x2e>
WindDirectionControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:388
      analogWrite(FAN1_EN,N_FAN_MIDDLE);
    break;
    case hi:
      digitalWrite(FAN_BLED,0);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	80 e1       	ldi	r24, 0x10	; 16
    18c2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:389
      digitalWrite(FAN_RLED,1);
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	8f e0       	ldi	r24, 0x0F	; 15
    18ca:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	89 e0       	ldi	r24, 0x09	; 9
    18d2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
    18d6:	84 eb       	ldi	r24, 0xB4	; 180
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	e5 cf       	rjmp	.-54     	; 0x18a6 <WindDirectionControl()+0x50>

000018dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    18dc:	fc 01       	movw	r30, r24
    18de:	01 90       	ld	r0, Z+
    18e0:	00 20       	and	r0, r0
    18e2:	e9 f7       	brne	.-6      	; 0x18de <Print::write(char const*) [clone .part.2] [clone .constprop.108]+0x2>
    18e4:	31 97       	sbiw	r30, 0x01	; 1
    18e6:	af 01       	movw	r20, r30
    18e8:	48 1b       	sub	r20, r24
    18ea:	59 0b       	sbc	r21, r25
    18ec:	bc 01       	movw	r22, r24
    18ee:	8f e5       	ldi	r24, 0x5F	; 95
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0c 94 80 02 	jmp	0x500	; 0x500 <Print::write(unsigned char const*, unsigned int)>

000018f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>:
printNumber():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    18f6:	8f 92       	push	r8
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	a1 97       	sbiw	r28, 0x21	; 33
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1916:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1918:	42 30       	cpi	r20, 0x02	; 2
    191a:	08 f4       	brcc	.+2      	; 0x191e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]+0x28>
    191c:	4a e0       	ldi	r20, 0x0A	; 10
    191e:	8e 01       	movw	r16, r28
    1920:	0f 5d       	subi	r16, 0xDF	; 223
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    1924:	84 2e       	mov	r8, r20
    1926:	91 2c       	mov	r9, r1
    1928:	b1 2c       	mov	r11, r1
    192a:	a1 2c       	mov	r10, r1
    192c:	a5 01       	movw	r20, r10
    192e:	94 01       	movw	r18, r8
    1930:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodsi4>
    1934:	e6 2f       	mov	r30, r22
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    1936:	b9 01       	movw	r22, r18
    1938:	ca 01       	movw	r24, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    193a:	ea 30       	cpi	r30, 0x0A	; 10
    193c:	f4 f4       	brge	.+60     	; 0x197a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]+0x84>
    193e:	e0 5d       	subi	r30, 0xD0	; 208
    1940:	d8 01       	movw	r26, r16
    1942:	ee 93       	st	-X, r30
    1944:	8d 01       	movw	r16, r26
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    1946:	23 2b       	or	r18, r19
    1948:	24 2b       	or	r18, r20
    194a:	25 2b       	or	r18, r21
    194c:	79 f7       	brne	.-34     	; 0x192c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]+0x36>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	80 e0       	ldi	r24, 0x00	; 0
write():
    1952:	10 97       	sbiw	r26, 0x00	; 0
    1954:	19 f0       	breq	.+6      	; 0x195c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]+0x66>
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
printNumber():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    195c:	a1 96       	adiw	r28, 0x21	; 33
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	08 95       	ret
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    197a:	e9 5c       	subi	r30, 0xC9	; 201
    197c:	e1 cf       	rjmp	.-62     	; 0x1940 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]+0x4a>

0000197e <Print::println(char const*) [clone .constprop.105]>:
println():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
write():
    1982:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
    1986:	ec 01       	movw	r28, r24
    1988:	82 e9       	ldi	r24, 0x92	; 146
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
println():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
    1990:	8c 0f       	add	r24, r28
    1992:	9d 1f       	adc	r25, r29
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <Print::print(char const*) [clone .constprop.98]>:
write():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:62
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
    199a:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>

0000199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>:
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	6f 92       	push	r6
    19a4:	7f 92       	push	r7
    19a6:	8f 92       	push	r8
    19a8:	9f 92       	push	r9
    19aa:	af 92       	push	r10
    19ac:	bf 92       	push	r11
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	6b 01       	movw	r12, r22
    19be:	7c 01       	movw	r14, r24
    19c0:	74 2e       	mov	r7, r20
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    19c2:	ac 01       	movw	r20, r24
    19c4:	9b 01       	movw	r18, r22
    19c6:	0e 94 a9 23 	call	0x4752	; 0x4752 <__unordsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	99 f0       	breq	.+38     	; 0x19f4 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x56>
write():
    19ce:	85 e9       	ldi	r24, 0x95	; 149
    19d0:	91 e0       	ldi	r25, 0x01	; 1
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	9f 90       	pop	r9
    19e6:	8f 90       	pop	r8
    19e8:	7f 90       	pop	r7
    19ea:	6f 90       	pop	r6
    19ec:	5f 90       	pop	r5
    19ee:	4f 90       	pop	r4
write():
    19f0:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    19f4:	46 01       	movw	r8, r12
    19f6:	57 01       	movw	r10, r14
    19f8:	e8 94       	clt
    19fa:	b7 f8       	bld	r11, 7
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	5f e7       	ldi	r21, 0x7F	; 127
    1a04:	c5 01       	movw	r24, r10
    1a06:	b4 01       	movw	r22, r8
    1a08:	0e 94 a9 23 	call	0x4752	; 0x4752 <__unordsf2>
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	0d c0       	rjmp	.+26     	; 0x1a2a <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x8c>
    1a10:	2f ef       	ldi	r18, 0xFF	; 255
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	5f e7       	ldi	r21, 0x7F	; 127
    1a18:	c5 01       	movw	r24, r10
    1a1a:	b4 01       	movw	r22, r8
    1a1c:	0e 94 cf 20 	call	0x419e	; 0x419e <__cmpsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	1c f4       	brge	.+6      	; 0x1a2a <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x8c>
write():
    1a24:	89 e9       	ldi	r24, 0x99	; 153
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	d4 cf       	rjmp	.-88     	; 0x19d2 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x34>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1a2a:	2f ef       	ldi	r18, 0xFF	; 255
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	5f e4       	ldi	r21, 0x4F	; 79
    1a32:	c7 01       	movw	r24, r14
    1a34:	b6 01       	movw	r22, r12
    1a36:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__gesf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	1c f4       	brge	.+6      	; 0x1a44 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0xa6>
write():
    1a3e:	8d e9       	ldi	r24, 0x9D	; 157
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	c7 cf       	rjmp	.-114    	; 0x19d2 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x34>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a44:	2f ef       	ldi	r18, 0xFF	; 255
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	5f ec       	ldi	r21, 0xCF	; 207
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 cf 20 	call	0x419e	; 0x419e <__cmpsf2>
    1a54:	87 fd       	sbrc	r24, 7
    1a56:	f3 cf       	rjmp	.-26     	; 0x1a3e <Print::printFloat(double, unsigned char) [clone .constprop.87]+0xa0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	c7 01       	movw	r24, r14
    1a60:	b6 01       	movw	r22, r12
    1a62:	0e 94 cf 20 	call	0x419e	; 0x419e <__cmpsf2>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1a66:	10 e0       	ldi	r17, 0x00	; 0
    1a68:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1a6a:	87 ff       	sbrs	r24, 7
    1a6c:	0a c0       	rjmp	.+20     	; 0x1a82 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0xe4>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1a6e:	6d e2       	ldi	r22, 0x2D	; 45
    1a70:	8f e5       	ldi	r24, 0x5F	; 95
    1a72:	93 e0       	ldi	r25, 0x03	; 3
    1a74:	0e 94 16 03 	call	0x62c	; 0x62c <HardwareSerial::write(unsigned char)>
    1a78:	8c 01       	movw	r16, r24
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1a7a:	f7 fa       	bst	r15, 7
    1a7c:	f0 94       	com	r15
    1a7e:	f7 f8       	bld	r15, 7
    1a80:	f0 94       	com	r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a82:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    1a8c:	7c 16       	cp	r7, r28
    1a8e:	41 f0       	breq	.+16     	; 0x1aa0 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x102>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a9c:	cf 5f       	subi	r28, 0xFF	; 255
    1a9e:	f6 cf       	rjmp	.-20     	; 0x1a8c <Print::printFloat(double, unsigned char) [clone .constprop.87]+0xee>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    1aa0:	a7 01       	movw	r20, r14
    1aa2:	96 01       	movw	r18, r12
    1aa4:	0e 94 40 22 	call	0x4480	; 0x4480 <__addsf3>
    1aa8:	2b 01       	movw	r4, r22
    1aaa:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1aac:	0e 94 25 23 	call	0x464a	; 0x464a <__fixunssfsi>
    1ab0:	4b 01       	movw	r8, r22
    1ab2:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1ab4:	4a e0       	ldi	r20, 0x0A	; 10
    1ab6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1aba:	7c 01       	movw	r14, r24
    1abc:	e0 0e       	add	r14, r16
    1abe:	f1 1e       	adc	r15, r17
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1ac0:	cc 23       	and	r28, r28
    1ac2:	c1 f1       	breq	.+112    	; 0x1b34 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x196>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	b4 01       	movw	r22, r8
    1ac8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__floatunsisf>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	c3 01       	movw	r24, r6
    1ad2:	b2 01       	movw	r22, r4
    1ad4:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1ad8:	4b 01       	movw	r8, r22
    1ada:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1adc:	6e e2       	ldi	r22, 0x2E	; 46
    1ade:	8f e5       	ldi	r24, 0x5F	; 95
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	0e 94 16 03 	call	0x62c	; 0x62c <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1ae6:	e8 0e       	add	r14, r24
    1ae8:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1aea:	c1 50       	subi	r28, 0x01	; 1
    1aec:	18 f1       	brcs	.+70     	; 0x1b34 <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x196>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	c5 01       	movw	r24, r10
    1af8:	b4 01       	movw	r22, r8
    1afa:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1afe:	2b 01       	movw	r4, r22
    1b00:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    1b02:	0e 94 25 23 	call	0x464a	; 0x464a <__fixunssfsi>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1b06:	4b 01       	movw	r8, r22
    1b08:	b1 2c       	mov	r11, r1
    1b0a:	a1 2c       	mov	r10, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1b0c:	4a e0       	ldi	r20, 0x0A	; 10
    1b0e:	c5 01       	movw	r24, r10
    1b10:	b4 01       	movw	r22, r8
    1b12:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
printFloat():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1b16:	e8 0e       	add	r14, r24
    1b18:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    1b1a:	c5 01       	movw	r24, r10
    1b1c:	b4 01       	movw	r22, r8
    1b1e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__floatunsisf>
    1b22:	9b 01       	movw	r18, r22
    1b24:	ac 01       	movw	r20, r24
    1b26:	c3 01       	movw	r24, r6
    1b28:	b2 01       	movw	r22, r4
    1b2a:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1b2e:	4b 01       	movw	r8, r22
    1b30:	5c 01       	movw	r10, r24
    1b32:	db cf       	rjmp	.-74     	; 0x1aea <Print::printFloat(double, unsigned char) [clone .constprop.87]+0x14c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    1b34:	c7 01       	movw	r24, r14
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	9f 90       	pop	r9
    1b4a:	8f 90       	pop	r8
    1b4c:	7f 90       	pop	r7
    1b4e:	6f 90       	pop	r6
    1b50:	5f 90       	pop	r5
    1b52:	4f 90       	pop	r4
    1b54:	08 95       	ret

00001b56 <Print::println(int, int) [clone .constprop.16]>:
println():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:159
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1b62:	6c 01       	movw	r12, r24
    1b64:	99 0f       	add	r25, r25
    1b66:	ee 08       	sbc	r14, r14
    1b68:	ff 08       	sbc	r15, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1b6a:	f7 fe       	sbrs	r15, 7
    1b6c:	1f c0       	rjmp	.+62     	; 0x1bac <Print::println(int, int) [clone .constprop.16]+0x56>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1b6e:	6d e2       	ldi	r22, 0x2D	; 45
    1b70:	8f e5       	ldi	r24, 0x5F	; 95
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 16 03 	call	0x62c	; 0x62c <HardwareSerial::write(unsigned char)>
    1b78:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    1b7a:	66 27       	eor	r22, r22
    1b7c:	77 27       	eor	r23, r23
    1b7e:	cb 01       	movw	r24, r22
    1b80:	6c 19       	sub	r22, r12
    1b82:	7d 09       	sbc	r23, r13
    1b84:	8e 09       	sbc	r24, r14
    1b86:	9f 09       	sbc	r25, r15
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1b88:	4a e0       	ldi	r20, 0x0A	; 10
    1b8a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
    1b8e:	c8 0f       	add	r28, r24
    1b90:	d9 1f       	adc	r29, r25
write():
    1b92:	82 e9       	ldi	r24, 0x92	; 146
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
println():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:164
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b9a:	8c 0f       	add	r24, r28
    1b9c:	9d 1f       	adc	r25, r29
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	08 95       	ret
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1bac:	4a e0       	ldi	r20, 0x0A	; 10
    1bae:	c7 01       	movw	r24, r14
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	ec cf       	rjmp	.-40     	; 0x1b92 <Print::println(int, int) [clone .constprop.16]+0x3c>

00001bba <setSegmentInt(int)>:
setSegmentInt():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:193
  
  if(sign) module.setDisplayDigit(1,3,false); // 퍼센트
  else module.setDisplayDigit(5,3,false); // 온도
}

void setSegmentInt(int input){
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	7c 01       	movw	r14, r24
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:194
  module.clearDisplay();
    1bc8:	84 e3       	ldi	r24, 0x34	; 52
    1bca:	95 e0       	ldi	r25, 0x05	; 5
    1bcc:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:195
  Serial.print("setsegmentInt: ");
    1bd0:	81 ea       	ldi	r24, 0xA1	; 161
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:196
  Serial.println(tmp);
    1bd8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1bdc:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1be0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:197
  tmp = input;
    1be4:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <tmp+0x1>
    1be8:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <tmp>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:198
  module.setDisplayDigit(tmp % 10,2,false); // 값, 위치
    1bec:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1bf0:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1bf4:	ca e0       	ldi	r28, 0x0A	; 10
    1bf6:	d0 e0       	ldi	r29, 0x00	; 0
    1bf8:	be 01       	movw	r22, r28
    1bfa:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    1bfe:	0f ef       	ldi	r16, 0xFF	; 255
    1c00:	11 e0       	ldi	r17, 0x01	; 1
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	42 e0       	ldi	r20, 0x02	; 2
    1c06:	68 2f       	mov	r22, r24
    1c08:	84 e3       	ldi	r24, 0x34	; 52
    1c0a:	95 e0       	ldi	r25, 0x05	; 5
    1c0c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:199
  if(input > 9)
    1c10:	8a e0       	ldi	r24, 0x0A	; 10
    1c12:	e8 16       	cp	r14, r24
    1c14:	f1 04       	cpc	r15, r1
    1c16:	0c f4       	brge	.+2      	; 0x1c1a <setSegmentInt(int)+0x60>
    1c18:	46 c0       	rjmp	.+140    	; 0x1ca6 <setSegmentInt(int)+0xec>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:201
  {
    tmp = tmp/10;
    1c1a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1c1e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1c22:	be 01       	movw	r22, r28
    1c24:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    1c28:	70 93 9d 02 	sts	0x029D, r23	; 0x80029d <tmp+0x1>
    1c2c:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <tmp>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:202
    Serial.print("setsegmentInt: ");
    1c30:	81 ea       	ldi	r24, 0xA1	; 161
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:203
    Serial.println(tmp);
    1c38:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1c3c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1c40:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:204
    module.setDisplayDigit(tmp%10,1,false);// 원하는 값, 위치, dot 찍을거임?
    1c44:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1c48:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1c4c:	be 01       	movw	r22, r28
    1c4e:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	68 2f       	mov	r22, r24
    1c58:	84 e3       	ldi	r24, 0x34	; 52
    1c5a:	95 e0       	ldi	r25, 0x05	; 5
    1c5c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:205
    if(input > 99)
    1c60:	84 e6       	ldi	r24, 0x64	; 100
    1c62:	e8 16       	cp	r14, r24
    1c64:	f1 04       	cpc	r15, r1
    1c66:	fc f0       	brlt	.+62     	; 0x1ca6 <setSegmentInt(int)+0xec>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:207
    {
      tmp = tmp/10;
    1c68:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1c6c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1c70:	be 01       	movw	r22, r28
    1c72:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__divmodhi4>
    1c76:	70 93 9d 02 	sts	0x029D, r23	; 0x80029d <tmp+0x1>
    1c7a:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <tmp>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:208
      Serial.print("setsegmentInt: ");
    1c7e:	81 ea       	ldi	r24, 0xA1	; 161
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:209
      Serial.println(tmp);
    1c86:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <tmp>
    1c8a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <tmp+0x1>
    1c8e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:210
      module.setDisplayDigit(tmp,0,false);
    1c92:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <tmp>
    1c96:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <tmp+0x1>
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	84 e3       	ldi	r24, 0x34	; 52
    1ca0:	95 e0       	ldi	r25, 0x05	; 5
    1ca2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:214
    }
  }
  
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	08 95       	ret

00001cb4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]>:
getO3():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:198
 }

 /**
 * Get gas concentration for O3 in ppm
 */
 float MQ131Class::getO3(MQ131Unit unit) {
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:200
 	// If no value Rs read, return 0.0
 	if(lastValueRs < 0) {
    1cc2:	c0 90 49 04 	lds	r12, 0x0449	; 0x800449 <MQ131+0x19>
    1cc6:	d0 90 4a 04 	lds	r13, 0x044A	; 0x80044a <MQ131+0x1a>
    1cca:	e0 90 4b 04 	lds	r14, 0x044B	; 0x80044b <MQ131+0x1b>
    1cce:	f0 90 4c 04 	lds	r15, 0x044C	; 0x80044c <MQ131+0x1c>
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	c7 01       	movw	r24, r14
    1cda:	b6 01       	movw	r22, r12
    1cdc:	0e 94 cf 20 	call	0x419e	; 0x419e <__cmpsf2>
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	0c c0       	rjmp	.+24     	; 0x1cfc <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x48>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:206
 		return 0.0;
 	}

  float ratio = 0.0;

 	switch(model) {
    1ce4:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <MQ131+0x2>
    1ce8:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <MQ131+0x3>
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x40>
    1cf2:	42 c0       	rjmp	.+132    	; 0x1d78 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0xc4>
    1cf4:	90 f0       	brcs	.+36     	; 0x1d1a <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x66>
    1cf6:	02 97       	sbiw	r24, 0x02	; 2
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x48>
    1cfa:	78 c0       	rjmp	.+240    	; 0x1dec <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x138>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:240
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
      break;
      
 		default :
 			return 0.0;
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
  }
}
    1d04:	65 2f       	mov	r22, r21
    1d06:	74 2f       	mov	r23, r20
    1d08:	83 2f       	mov	r24, r19
    1d0a:	92 2f       	mov	r25, r18
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:210

 	switch(model) {
 		case LOW_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    1d1a:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <MQ131+0x15>
    1d1e:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <MQ131+0x16>
    1d22:	40 91 47 04 	lds	r20, 0x0447	; 0x800447 <MQ131+0x17>
    1d26:	50 91 48 04 	lds	r21, 0x0448	; 0x800448 <MQ131+0x18>
    1d2a:	c7 01       	movw	r24, r14
    1d2c:	b6 01       	movw	r22, r12
    1d2e:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    1d32:	6b 01       	movw	r12, r22
    1d34:	7c 01       	movw	r14, r24
    1d36:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b6 01       	movw	r22, r12
    1d42:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:213
      // R^2 = 0.9906
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(9.4783 * pow(ratio, 2.3348), PPB, unit);
    1d46:	2d e5       	ldi	r18, 0x5D	; 93
    1d48:	3d e6       	ldi	r19, 0x6D	; 109
    1d4a:	45 e1       	ldi	r20, 0x15	; 21
    1d4c:	50 e4       	ldi	r21, 0x40	; 64
    1d4e:	0e 94 59 23 	call	0x46b2	; 0x46b2 <pow>
    1d52:	2e e1       	ldi	r18, 0x1E	; 30
    1d54:	37 ea       	ldi	r19, 0xA7	; 167
    1d56:	47 e1       	ldi	r20, 0x17	; 23
    1d58:	51 e4       	ldi	r21, 0x41	; 65
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    1d5a:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1d5e:	b6 2f       	mov	r27, r22
    1d60:	a7 2f       	mov	r26, r23
    1d62:	f8 2f       	mov	r31, r24
    1d64:	e9 2f       	mov	r30, r25
    1d66:	ad 01       	movw	r20, r26
    1d68:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    1d6a:	c1 30       	cpi	r28, 0x01	; 1
    1d6c:	d1 05       	cpc	r29, r1
    1d6e:	51 f2       	breq	.-108    	; 0x1d04 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x50>
    1d70:	9e 01       	movw	r18, r28
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	2e c0       	rjmp	.+92     	; 0x1dd4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x120>
getO3():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:223

 		case HIGH_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
 			
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    1d78:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <MQ131+0x15>
    1d7c:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <MQ131+0x16>
    1d80:	40 91 47 04 	lds	r20, 0x0447	; 0x800447 <MQ131+0x17>
    1d84:	50 91 48 04 	lds	r21, 0x0448	; 0x800448 <MQ131+0x18>
    1d88:	c7 01       	movw	r24, r14
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    1d90:	6b 01       	movw	r12, r22
    1d92:	7c 01       	movw	r14, r24
    1d94:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]>
    1d98:	9b 01       	movw	r18, r22
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	b6 01       	movw	r22, r12
    1da0:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:226
      // R^2 = 0.9900
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(8.1399 * pow(ratio, 2.3297), PPM, unit);
    1da4:	2e ec       	ldi	r18, 0xCE	; 206
    1da6:	39 e1       	ldi	r19, 0x19	; 25
    1da8:	45 e1       	ldi	r20, 0x15	; 21
    1daa:	50 e4       	ldi	r21, 0x40	; 64
    1dac:	0e 94 59 23 	call	0x46b2	; 0x46b2 <pow>
    1db0:	28 e0       	ldi	r18, 0x08	; 8
    1db2:	3d e3       	ldi	r19, 0x3D	; 61
    1db4:	42 e0       	ldi	r20, 0x02	; 2
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1dbc:	b6 2f       	mov	r27, r22
    1dbe:	a7 2f       	mov	r26, r23
    1dc0:	f8 2f       	mov	r31, r24
    1dc2:	e9 2f       	mov	r30, r25
    1dc4:	ad 01       	movw	r20, r26
    1dc6:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    1dc8:	20 97       	sbiw	r28, 0x00	; 0
    1dca:	09 f4       	brne	.+2      	; 0x1dce <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x11a>
    1dcc:	9b cf       	rjmp	.-202    	; 0x1d04 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0x50>
    1dce:	9e 01       	movw	r18, r28
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	6b 2f       	mov	r22, r27
    1dd6:	7a 2f       	mov	r23, r26
    1dd8:	8f 2f       	mov	r24, r31
    1dda:	9e 2f       	mov	r25, r30
getO3():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
      break;
      
 		default :
 			return 0.0;
  }
}
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
convert():
    1de8:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>
getO3():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:234
      // Use this if you are constantly monitoring high concentration of O3
      // return convert((8.37768358 * pow(ratio, 2.30375446) - 8.37768358), PPM, unit);

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
    1dec:	26 e6       	ldi	r18, 0x66	; 102
    1dee:	36 e6       	ldi	r19, 0x66	; 102
    1df0:	42 e4       	ldi	r20, 0x42	; 66
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	c7 01       	movw	r24, r14
    1df6:	b6 01       	movw	r22, r12
    1df8:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    1dfc:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <MQ131+0x15>
    1e00:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <MQ131+0x16>
    1e04:	40 91 47 04 	lds	r20, 0x0447	; 0x800447 <MQ131+0x17>
    1e08:	50 91 48 04 	lds	r21, 0x0448	; 0x800448 <MQ131+0x18>
    1e0c:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    1e10:	6b 01       	movw	r12, r22
    1e12:	7c 01       	movw	r14, r24
    1e14:	0e 94 a0 01 	call	0x340	; 0x340 <MQ131Class::getEnvCorrectRatio() [clone .constprop.95]>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	b6 01       	movw	r22, r12
    1e20:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    1e24:	21 ee       	ldi	r18, 0xE1	; 225
    1e26:	3a e7       	ldi	r19, 0x7A	; 122
    1e28:	44 e9       	ldi	r20, 0x94	; 148
    1e2a:	5f eb       	ldi	r21, 0xBF	; 191
    1e2c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <pow>
    1e30:	2b e2       	ldi	r18, 0x2B	; 43
    1e32:	37 e8       	ldi	r19, 0x87	; 135
    1e34:	47 ed       	ldi	r20, 0xD7	; 215
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	90 cf       	rjmp	.-224    	; 0x1d5a <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]+0xa6>

00001e3a <MQ131Class::~MQ131Class()>:
operator delete():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    1e3a:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <free>

00001e3e <__vector_19>:
__vector_19():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1e60:	8f e5       	ldi	r24, 0x5F	; 95
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1e68:	ff 91       	pop	r31
    1e6a:	ef 91       	pop	r30
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <__vector_18>:
__vector_18():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e8a:	1f 92       	push	r1
    1e8c:	0f 92       	push	r0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	0f 92       	push	r0
    1e92:	11 24       	eor	r1, r1
    1e94:	2f 93       	push	r18
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	ef 93       	push	r30
    1e9c:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e9e:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <Serial+0x10>
    1ea2:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <Serial+0x11>
    1ea6:	80 81       	ld	r24, Z
    1ea8:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <Serial+0x16>
    1eac:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <Serial+0x17>
    1eb0:	82 fd       	sbrc	r24, 2
    1eb2:	1b c0       	rjmp	.+54     	; 0x1eea <__vector_18+0x60>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1eb4:	90 81       	ld	r25, Z
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1eb6:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <Serial+0x19>
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1ebe:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <Serial+0x1a>
    1ec2:	82 17       	cp	r24, r18
    1ec4:	41 f0       	breq	.+16     	; 0x1ed6 <__vector_18+0x4c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1ec6:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <Serial+0x19>
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	e1 5a       	subi	r30, 0xA1	; 161
    1ece:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1ed2:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <Serial+0x19>
__vector_18():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1ed6:	ff 91       	pop	r31
    1ed8:	ef 91       	pop	r30
    1eda:	9f 91       	pop	r25
    1edc:	8f 91       	pop	r24
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1eea:	80 81       	ld	r24, Z
    1eec:	f4 cf       	rjmp	.-24     	; 0x1ed6 <__vector_18+0x4c>

00001eee <__vector_16>:
__vector_16():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1f04:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <timer0_millis>
    1f08:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <timer0_millis+0x1>
    1f0c:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <timer0_millis+0x2>
    1f10:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1f14:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <timer0_fract>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1f18:	26 e0       	ldi	r18, 0x06	; 6
    1f1a:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1f1c:	2d 37       	cpi	r18, 0x7D	; 125
    1f1e:	68 f1       	brcs	.+90     	; 0x1f7a <__vector_16+0x8c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1f20:	29 e8       	ldi	r18, 0x89	; 137
    1f22:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1f24:	03 96       	adiw	r24, 0x03	; 3
    1f26:	a1 1d       	adc	r26, r1
    1f28:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1f2a:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <timer0_fract>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1f2e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <timer0_millis>
    1f32:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <timer0_millis+0x1>
    1f36:	a0 93 5a 03 	sts	0x035A, r26	; 0x80035a <timer0_millis+0x2>
    1f3a:	b0 93 5b 03 	sts	0x035B, r27	; 0x80035b <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1f3e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timer0_overflow_count>
    1f42:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <timer0_overflow_count+0x1>
    1f46:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <timer0_overflow_count+0x2>
    1f4a:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <timer0_overflow_count+0x3>
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	a1 1d       	adc	r26, r1
    1f52:	b1 1d       	adc	r27, r1
    1f54:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <timer0_overflow_count>
    1f58:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <timer0_overflow_count+0x1>
    1f5c:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <timer0_overflow_count+0x2>
    1f60:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	3f 91       	pop	r19
    1f6e:	2f 91       	pop	r18
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	0f 90       	pop	r0
    1f76:	1f 90       	pop	r1
    1f78:	18 95       	reti
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1f7a:	02 96       	adiw	r24, 0x02	; 2
    1f7c:	a1 1d       	adc	r26, r1
    1f7e:	b1 1d       	adc	r27, r1
    1f80:	d4 cf       	rjmp	.-88     	; 0x1f2a <__vector_16+0x3c>

00001f82 <__vector_24>:
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
    1fa4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1fa8:	88 7f       	andi	r24, 0xF8	; 248
    1faa:	80 36       	cpi	r24, 0x60	; 96
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <__vector_24+0x2e>
    1fae:	4c c0       	rjmp	.+152    	; 0x2048 <__vector_24+0xc6>
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <__vector_24+0x32>
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <__vector_24+0xb0>
    1fb4:	88 32       	cpi	r24, 0x28	; 40
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <__vector_24+0x38>
    1fb8:	a8 c0       	rjmp	.+336    	; 0x210a <__vector_24+0x188>
    1fba:	18 f5       	brcc	.+70     	; 0x2002 <__vector_24+0x80>
    1fbc:	80 31       	cpi	r24, 0x10	; 16
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <__vector_24+0x40>
    1fc0:	9c c0       	rjmp	.+312    	; 0x20fa <__vector_24+0x178>
    1fc2:	b8 f4       	brcc	.+46     	; 0x1ff2 <__vector_24+0x70>
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <__vector_24+0x48>
    1fc8:	05 c1       	rjmp	.+522    	; 0x21d4 <__vector_24+0x252>
    1fca:	88 30       	cpi	r24, 0x08	; 8
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <__vector_24+0x4e>
    1fce:	95 c0       	rjmp	.+298    	; 0x20fa <__vector_24+0x178>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	bf 91       	pop	r27
    1fd6:	af 91       	pop	r26
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	7f 91       	pop	r23
    1fde:	6f 91       	pop	r22
    1fe0:	5f 91       	pop	r21
    1fe2:	4f 91       	pop	r20
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ff2:	88 31       	cpi	r24, 0x18	; 24
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__vector_24+0x76>
    1ff6:	89 c0       	rjmp	.+274    	; 0x210a <__vector_24+0x188>
    1ff8:	80 32       	cpi	r24, 0x20	; 32
    1ffa:	51 f7       	brne	.-44     	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1ffc:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_error>
    2000:	15 c0       	rjmp	.+42     	; 0x202c <__vector_24+0xaa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2002:	80 34       	cpi	r24, 0x40	; 64
    2004:	09 f4       	brne	.+2      	; 0x2008 <__vector_24+0x86>
    2006:	a6 c0       	rjmp	.+332    	; 0x2154 <__vector_24+0x1d2>
    2008:	48 f4       	brcc	.+18     	; 0x201c <__vector_24+0x9a>
    200a:	80 33       	cpi	r24, 0x30	; 48
    200c:	b9 f3       	breq	.-18     	; 0x1ffc <__vector_24+0x7a>
    200e:	88 33       	cpi	r24, 0x38	; 56
    2010:	f9 f6       	brne	.-66     	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2012:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_error>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:575
      twi_releaseBus();
    2016:	0e 94 9a 01 	call	0x334	; 0x334 <twi_releaseBus>
    201a:	da cf       	rjmp	.-76     	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    201c:	80 35       	cpi	r24, 0x50	; 80
    201e:	09 f4       	brne	.+2      	; 0x2022 <__vector_24+0xa0>
    2020:	89 c0       	rjmp	.+274    	; 0x2134 <__vector_24+0x1b2>
    2022:	88 35       	cpi	r24, 0x58	; 88
    2024:	09 f4       	brne	.+2      	; 0x2028 <__vector_24+0xa6>
    2026:	9e c0       	rjmp	.+316    	; 0x2164 <__vector_24+0x1e2>
    2028:	88 34       	cpi	r24, 0x48	; 72
    202a:	91 f6       	brne	.-92     	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    202c:	0e 94 90 01 	call	0x320	; 0x320 <twi_stop>
    2030:	cf cf       	rjmp	.-98     	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2032:	88 39       	cpi	r24, 0x98	; 152
    2034:	09 f4       	brne	.+2      	; 0x2038 <__vector_24+0xb6>
    2036:	94 c0       	rjmp	.+296    	; 0x2160 <__vector_24+0x1de>
    2038:	38 f5       	brcc	.+78     	; 0x2088 <__vector_24+0x106>
    203a:	88 37       	cpi	r24, 0x78	; 120
    203c:	29 f0       	breq	.+10     	; 0x2048 <__vector_24+0xc6>
    203e:	50 f4       	brcc	.+20     	; 0x2054 <__vector_24+0xd2>
    2040:	88 36       	cpi	r24, 0x68	; 104
    2042:	11 f0       	breq	.+4      	; 0x2048 <__vector_24+0xc6>
    2044:	80 37       	cpi	r24, 0x70	; 112
    2046:	21 f6       	brne	.-120    	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    204e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi_rxBufferIndex>
    2052:	57 c0       	rjmp	.+174    	; 0x2102 <__vector_24+0x180>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2054:	88 38       	cpi	r24, 0x88	; 136
    2056:	09 f4       	brne	.+2      	; 0x205a <__vector_24+0xd8>
    2058:	83 c0       	rjmp	.+262    	; 0x2160 <__vector_24+0x1de>
    205a:	80 39       	cpi	r24, 0x90	; 144
    205c:	19 f0       	breq	.+6      	; 0x2064 <__vector_24+0xe2>
    205e:	80 38       	cpi	r24, 0x80	; 128
    2060:	09 f0       	breq	.+2      	; 0x2064 <__vector_24+0xe2>
    2062:	b6 cf       	rjmp	.-148    	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2064:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_rxBufferIndex>
    2068:	80 32       	cpi	r24, 0x20	; 32
    206a:	08 f0       	brcs	.+2      	; 0x206e <__vector_24+0xec>
    206c:	79 c0       	rjmp	.+242    	; 0x2160 <__vector_24+0x1de>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    206e:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <twi_rxBufferIndex>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8e 0f       	add	r24, r30
    2076:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_rxBufferIndex>
    207a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	e0 54       	subi	r30, 0x40	; 64
    2082:	fd 4f       	sbci	r31, 0xFD	; 253
    2084:	80 83       	st	Z, r24
    2086:	3d c0       	rjmp	.+122    	; 0x2102 <__vector_24+0x180>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2088:	80 3b       	cpi	r24, 0xB0	; 176
    208a:	39 f0       	breq	.+14     	; 0x209a <__vector_24+0x118>
    208c:	e0 f4       	brcc	.+56     	; 0x20c6 <__vector_24+0x144>
    208e:	80 3a       	cpi	r24, 0xA0	; 160
    2090:	09 f4       	brne	.+2      	; 0x2094 <__vector_24+0x112>
    2092:	85 c0       	rjmp	.+266    	; 0x219e <__vector_24+0x21c>
    2094:	88 3a       	cpi	r24, 0xA8	; 168
    2096:	09 f0       	breq	.+2      	; 0x209a <__vector_24+0x118>
    2098:	9b cf       	rjmp	.-202    	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_state>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    20a0:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <twi_txBufferIndex>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    20a4:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    20a8:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <twi_onSlaveTransmit>
    20ac:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <twi_onSlaveTransmit+0x1>
    20b0:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    20b2:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_txBufferLength>
    20b6:	81 11       	cpse	r24, r1
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <__vector_24+0x156>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    20c0:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi_txBuffer>
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <__vector_24+0x156>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20c6:	80 3c       	cpi	r24, 0xC0	; 192
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__vector_24+0x14a>
    20ca:	82 c0       	rjmp	.+260    	; 0x21d0 <__vector_24+0x24e>
    20cc:	88 3c       	cpi	r24, 0xC8	; 200
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__vector_24+0x150>
    20d0:	7f c0       	rjmp	.+254    	; 0x21d0 <__vector_24+0x24e>
    20d2:	88 3b       	cpi	r24, 0xB8	; 184
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <__vector_24+0x156>
    20d6:	7c cf       	rjmp	.-264    	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    20d8:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi_txBufferIndex>
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	8e 0f       	add	r24, r30
    20e0:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_txBufferIndex>
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	e2 56       	subi	r30, 0x62	; 98
    20e8:	fd 4f       	sbci	r31, 0xFD	; 253
    20ea:	80 81       	ld	r24, Z
    20ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20f0:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi_txBufferIndex>
    20f4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_txBufferLength>
    20f8:	31 c0       	rjmp	.+98     	; 0x215c <__vector_24+0x1da>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    20fa:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    20fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2102:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2108:	63 cf       	rjmp	.-314    	; 0x1fd0 <__vector_24+0x4e>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    210a:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    210e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_masterBufferLength>
    2112:	98 17       	cp	r25, r24
    2114:	b8 f5       	brcc	.+110    	; 0x2184 <__vector_24+0x202>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2116:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <twi_masterBuffer>
    211a:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <twi_masterBuffer+0x1>
    211e:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	2e 0f       	add	r18, r30
    2126:	20 93 e8 02 	sts	0x02E8, r18	; 0x8002e8 <twi_masterBufferIndex>
    212a:	e8 0f       	add	r30, r24
    212c:	f9 2f       	mov	r31, r25
    212e:	f1 1d       	adc	r31, r1
    2130:	80 81       	ld	r24, Z
    2132:	e5 cf       	rjmp	.-54     	; 0x20fe <__vector_24+0x17c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2134:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <twi_masterBuffer>
    2138:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <twi_masterBuffer+0x1>
    213c:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8e 0f       	add	r24, r30
    2144:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_masterBufferIndex>
    2148:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    214c:	e2 0f       	add	r30, r18
    214e:	f3 2f       	mov	r31, r19
    2150:	f1 1d       	adc	r31, r1
    2152:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2154:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    2158:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    215c:	98 17       	cp	r25, r24
    215e:	88 f2       	brcs	.-94     	; 0x2102 <__vector_24+0x180>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2160:	85 e8       	ldi	r24, 0x85	; 133
    2162:	d0 cf       	rjmp	.-96     	; 0x2104 <__vector_24+0x182>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2164:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <twi_masterBuffer>
    2168:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <twi_masterBuffer+0x1>
    216c:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <twi_masterBufferIndex>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	8e 0f       	add	r24, r30
    2174:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_masterBufferIndex>
    2178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    217c:	e2 0f       	add	r30, r18
    217e:	f3 2f       	mov	r31, r19
    2180:	f1 1d       	adc	r31, r1
    2182:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
    2184:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_sendStop>
    2188:	81 11       	cpse	r24, r1
    218a:	50 cf       	rjmp	.-352    	; 0x202c <__vector_24+0xaa>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_inRepStart>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2192:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2198:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
    219c:	19 cf       	rjmp	.-462    	; 0x1fd0 <__vector_24+0x4e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    219e:	0e 94 9a 01 	call	0x334	; 0x334 <twi_releaseBus>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    21a2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_rxBufferIndex>
    21a6:	80 32       	cpi	r24, 0x20	; 32
    21a8:	30 f4       	brcc	.+12     	; 0x21b6 <__vector_24+0x234>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    21aa:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <twi_rxBufferIndex>
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	e0 54       	subi	r30, 0x40	; 64
    21b2:	fd 4f       	sbci	r31, 0xFD	; 253
    21b4:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    21b6:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <twi_rxBufferIndex>
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <twi_onSlaveReceive>
    21c0:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <twi_onSlaveReceive+0x1>
    21c4:	80 ec       	ldi	r24, 0xC0	; 192
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    21ca:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi_rxBufferIndex>
    21ce:	00 cf       	rjmp	.-512    	; 0x1fd0 <__vector_24+0x4e>
twi_reply():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21d0:	85 ec       	ldi	r24, 0xC5	; 197
    21d2:	e0 cf       	rjmp	.-64     	; 0x2194 <__vector_24+0x212>
__vector_24():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    21d4:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_error>
    21d8:	29 cf       	rjmp	.-430    	; 0x202c <__vector_24+0xaa>

000021da <__vector_7>:
__vector_7():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:128
// As soon as a the first [SPACE] entry gets long:
//   Ready is set; State switches to IDLE; Timing of SPACE continues.
// As soon as first MARK arrives:
//   Gap width is recorded; Ready is cleared; New logging starts
//
ISR (TIMER_INTR_NAME) {
    21da:	1f 92       	push	r1
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	0f 92       	push	r0
    21e2:	11 24       	eor	r1, r1
    21e4:	2f 93       	push	r18
    21e6:	3f 93       	push	r19
    21e8:	4f 93       	push	r20
    21ea:	5f 93       	push	r21
    21ec:	6f 93       	push	r22
    21ee:	7f 93       	push	r23
    21f0:	8f 93       	push	r24
    21f2:	9f 93       	push	r25
    21f4:	af 93       	push	r26
    21f6:	bf 93       	push	r27
    21f8:	ef 93       	push	r30
    21fa:	ff 93       	push	r31
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:133
    TIMER_RESET_INTR_PENDING; // reset timer interrupt flag if required (currently only for Teensy and ATmega4809)

    // Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
    // digitalRead() is very slow. Optimisation is possible, but makes the code unportable
    uint8_t irdata = (uint8_t) digitalRead(irparams.recvpin);
    21fc:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <irparams+0x1>
    2200:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <digitalRead>
    2204:	98 2f       	mov	r25, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:135

    irparams.timer++;  // One more 50uS tick
    2206:	40 91 55 04 	lds	r20, 0x0455	; 0x800455 <irparams+0x6>
    220a:	50 91 56 04 	lds	r21, 0x0456	; 0x800456 <irparams+0x7>
    220e:	4f 5f       	subi	r20, 0xFF	; 255
    2210:	5f 4f       	sbci	r21, 0xFF	; 255
    2212:	50 93 56 04 	sts	0x0456, r21	; 0x800456 <irparams+0x7>
    2216:	40 93 55 04 	sts	0x0455, r20	; 0x800455 <irparams+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:136
    if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
    221a:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <irparams+0x4>
    221e:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <irparams+0x5>
    2222:	25 36       	cpi	r18, 0x65	; 101
    2224:	31 05       	cpc	r19, r1
    2226:	30 f0       	brcs	.+12     	; 0x2234 <__vector_7+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:138
        // Flag up a read overflow; Stop the State Machine
        irparams.overflow = true;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <irparams+0xd2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:139
        irparams.rcvstate = IR_REC_STATE_STOP;
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <irparams>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:148
     * Due to a ESP32 compiler bug https://github.com/espressif/esp-idf/issues/1552 no switch statements are possible for ESP32
     * So we change the code to if / else if
     */
//    switch (irparams.rcvstate) {
    //......................................................................
    if (irparams.rcvstate == IR_REC_STATE_IDLE) { // In the middle of a gap
    2234:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <irparams>
    2238:	81 11       	cpse	r24, r1
    223a:	38 c0       	rjmp	.+112    	; 0x22ac <__vector_7+0xd2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:149
        if (irdata == MARK) {
    223c:	91 11       	cpse	r25, r1
    223e:	07 c0       	rjmp	.+14     	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:150
            if (irparams.timer < GAP_TICKS) {  // Not big enough to be a gap.
    2240:	44 36       	cpi	r20, 0x64	; 100
    2242:	51 05       	cpc	r21, r1
    2244:	08 f5       	brcc	.+66     	; 0x2288 <__vector_7+0xae>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:151
                irparams.timer = 0;
    2246:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <irparams+0x7>
    224a:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <irparams+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:189
        }
    }

#ifdef BLINKLED
    // If requested, flash LED while receiving IR data
    if (irparams.blinkflag) {
    224e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <irparams+0x3>
    2252:	88 23       	and	r24, r24
    2254:	41 f0       	breq	.+16     	; 0x2266 <__vector_7+0x8c>
    2256:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <irparams+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:190
        if (irdata == MARK) {
    225a:	91 11       	cpse	r25, r1
    225c:	67 c0       	rjmp	.+206    	; 0x232c <__vector_7+0x152>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:192
            if (irparams.blinkpin) {
                digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    225e:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:191

#ifdef BLINKLED
    // If requested, flash LED while receiving IR data
    if (irparams.blinkflag) {
        if (irdata == MARK) {
            if (irparams.blinkpin) {
    2260:	81 11       	cpse	r24, r1
    2262:	67 c0       	rjmp	.+206    	; 0x2332 <__vector_7+0x158>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:194
                digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
            } else {
                BLINKLED_ON();   // if no user defined LED pin, turn default LED pin for the hardware on
    2264:	2d 9a       	sbi	0x05, 5	; 5
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:205
                BLINKLED_OFF();   // if no user defined LED pin, turn default LED pin for the hardware on
            }
        }
    }
#endif // BLINKLED
}
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	bf 91       	pop	r27
    226c:	af 91       	pop	r26
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	7f 91       	pop	r23
    2274:	6f 91       	pop	r22
    2276:	5f 91       	pop	r21
    2278:	4f 91       	pop	r20
    227a:	3f 91       	pop	r19
    227c:	2f 91       	pop	r18
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:155
            if (irparams.timer < GAP_TICKS) {  // Not big enough to be a gap.
                irparams.timer = 0;
            } else {
                // Gap just ended; Record gap duration; Start recording transmission
                // Initialize all state machine variables
                irparams.overflow = false;
    2288:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <irparams+0xd2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:157
                irparams.rawlen = 0;
                irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    228c:	21 e0       	ldi	r18, 0x01	; 1
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <irparams+0x5>
    2294:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <irparams+0x4>
    2298:	50 93 58 04 	sts	0x0458, r21	; 0x800458 <irparams+0x9>
    229c:	40 93 57 04 	sts	0x0457, r20	; 0x800457 <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:171
            irparams.rcvstate = IR_REC_STATE_SPACE;
        }
    } else if (irparams.rcvstate == IR_REC_STATE_SPACE) {  // Timing Space
        if (irdata == MARK) {  // Space just ended; Record time
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
            irparams.timer = 0;
    22a0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <irparams+0x7>
    22a4:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <irparams+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:172
            irparams.rcvstate = IR_REC_STATE_MARK;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	19 c0       	rjmp	.+50     	; 0x22de <__vector_7+0x104>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:162
                irparams.rawbuf[irparams.rawlen++] = irparams.timer;
                irparams.timer = 0;
                irparams.rcvstate = IR_REC_STATE_MARK;
            }
        }
    } else if (irparams.rcvstate == IR_REC_STATE_MARK) {  // Timing Mark
    22ac:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <irparams>
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	c1 f4       	brne	.+48     	; 0x22e4 <__vector_7+0x10a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:163
        if (irdata == SPACE) {   // Mark ended; Record time
    22b4:	91 30       	cpi	r25, 0x01	; 1
    22b6:	59 f6       	brne	.-106    	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:164
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    22b8:	b9 01       	movw	r22, r18
    22ba:	6f 5f       	subi	r22, 0xFF	; 255
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	70 93 54 04 	sts	0x0454, r23	; 0x800454 <irparams+0x5>
    22c2:	60 93 53 04 	sts	0x0453, r22	; 0x800453 <irparams+0x4>
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	f9 01       	movw	r30, r18
    22cc:	e9 5a       	subi	r30, 0xA9	; 169
    22ce:	fb 4f       	sbci	r31, 0xFB	; 251
    22d0:	51 83       	std	Z+1, r21	; 0x01
    22d2:	40 83       	st	Z, r20
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:165
            irparams.timer = 0;
    22d4:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <irparams+0x7>
    22d8:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <irparams+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:166
            irparams.rcvstate = IR_REC_STATE_SPACE;
    22dc:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:179
        } else if (irparams.timer > GAP_TICKS) {  // Space
            // A long Space, indicates gap between codes
            // Flag the current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting Space width
            irparams.rcvstate = IR_REC_STATE_STOP;
    22de:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <irparams>
    22e2:	b5 cf       	rjmp	.-150    	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:168
        if (irdata == SPACE) {   // Mark ended; Record time
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
            irparams.timer = 0;
            irparams.rcvstate = IR_REC_STATE_SPACE;
        }
    } else if (irparams.rcvstate == IR_REC_STATE_SPACE) {  // Timing Space
    22e4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <irparams>
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	b9 f4       	brne	.+46     	; 0x231a <__vector_7+0x140>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:169
        if (irdata == MARK) {  // Space just ended; Record time
    22ec:	91 11       	cpse	r25, r1
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <__vector_7+0x134>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:170
            irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    22f0:	b9 01       	movw	r22, r18
    22f2:	6f 5f       	subi	r22, 0xFF	; 255
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	70 93 54 04 	sts	0x0454, r23	; 0x800454 <irparams+0x5>
    22fa:	60 93 53 04 	sts	0x0453, r22	; 0x800453 <irparams+0x4>
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	f9 01       	movw	r30, r18
    2304:	e9 5a       	subi	r30, 0xA9	; 169
    2306:	fb 4f       	sbci	r31, 0xFB	; 251
    2308:	51 83       	std	Z+1, r21	; 0x01
    230a:	40 83       	st	Z, r20
    230c:	c9 cf       	rjmp	.-110    	; 0x22a0 <__vector_7+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:174
            irparams.timer = 0;
            irparams.rcvstate = IR_REC_STATE_MARK;

        } else if (irparams.timer > GAP_TICKS) {  // Space
    230e:	45 36       	cpi	r20, 0x65	; 101
    2310:	51 05       	cpc	r21, r1
    2312:	08 f4       	brcc	.+2      	; 0x2316 <__vector_7+0x13c>
    2314:	9c cf       	rjmp	.-200    	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:179
            // A long Space, indicates gap between codes
            // Flag the current code as ready for processing
            // Switch to STOP
            // Don't reset timer; keep counting Space width
            irparams.rcvstate = IR_REC_STATE_STOP;
    2316:	83 e0       	ldi	r24, 0x03	; 3
    2318:	e2 cf       	rjmp	.-60     	; 0x22de <__vector_7+0x104>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:181
        }
    } else if (irparams.rcvstate == IR_REC_STATE_STOP) {  // Waiting; Measuring Gap
    231a:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <irparams>
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	09 f0       	breq	.+2      	; 0x2324 <__vector_7+0x14a>
    2322:	95 cf       	rjmp	.-214    	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:182
        if (irdata == MARK) {
    2324:	99 23       	and	r25, r25
    2326:	09 f4       	brne	.+2      	; 0x232a <__vector_7+0x150>
    2328:	8e cf       	rjmp	.-228    	; 0x2246 <__vector_7+0x6c>
    232a:	91 cf       	rjmp	.-222    	; 0x224e <__vector_7+0x74>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:197
                digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
            } else {
                BLINKLED_ON();   // if no user defined LED pin, turn default LED pin for the hardware on
            }
        } else {
            if (irparams.blinkpin) {
    232c:	88 23       	and	r24, r24
    232e:	21 f0       	breq	.+8      	; 0x2338 <__vector_7+0x15e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:198
                digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    2336:	97 cf       	rjmp	.-210    	; 0x2266 <__vector_7+0x8c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:200
            } else {
                BLINKLED_OFF();   // if no user defined LED pin, turn default LED pin for the hardware on
    2338:	2d 98       	cbi	0x05, 5	; 5
    233a:	95 cf       	rjmp	.-214    	; 0x2266 <__vector_7+0x8c>

0000233c <global constructors keyed to 65535_0_123123123.ino.cpp.o.6171>:
_GLOBAL__I_65535_0_123123123.ino.cpp.o.6171():
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	ef e5       	ldi	r30, 0x5F	; 95
    2346:	f3 e0       	ldi	r31, 0x03	; 3
    2348:	13 82       	std	Z+3, r1	; 0x03
    234a:	12 82       	std	Z+2, r1	; 0x02
    234c:	88 ee       	ldi	r24, 0xE8	; 232
    234e:	93 e0       	ldi	r25, 0x03	; 3
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	84 83       	std	Z+4, r24	; 0x04
    2356:	95 83       	std	Z+5, r25	; 0x05
    2358:	a6 83       	std	Z+6, r26	; 0x06
    235a:	b7 83       	std	Z+7, r27	; 0x07
    235c:	22 e1       	ldi	r18, 0x12	; 18
    235e:	31 e0       	ldi	r19, 0x01	; 1
    2360:	31 83       	std	Z+1, r19	; 0x01
    2362:	20 83       	st	Z, r18
    2364:	25 ec       	ldi	r18, 0xC5	; 197
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	35 87       	std	Z+13, r19	; 0x0d
    236a:	24 87       	std	Z+12, r18	; 0x0c
    236c:	24 ec       	ldi	r18, 0xC4	; 196
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	37 87       	std	Z+15, r19	; 0x0f
    2372:	26 87       	std	Z+14, r18	; 0x0e
    2374:	20 ec       	ldi	r18, 0xC0	; 192
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	31 8b       	std	Z+17, r19	; 0x11
    237a:	20 8b       	std	Z+16, r18	; 0x10
    237c:	21 ec       	ldi	r18, 0xC1	; 193
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	33 8b       	std	Z+19, r19	; 0x13
    2382:	22 8b       	std	Z+18, r18	; 0x12
    2384:	22 ec       	ldi	r18, 0xC2	; 194
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	35 8b       	std	Z+21, r19	; 0x15
    238a:	24 8b       	std	Z+20, r18	; 0x14
    238c:	26 ec       	ldi	r18, 0xC6	; 198
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	37 8b       	std	Z+23, r19	; 0x17
    2392:	26 8b       	std	Z+22, r18	; 0x16
    2394:	11 8e       	std	Z+25, r1	; 0x19
    2396:	12 8e       	std	Z+26, r1	; 0x1a
    2398:	13 8e       	std	Z+27, r1	; 0x1b
    239a:	14 8e       	std	Z+28, r1	; 0x1c
    239c:	c0 e0       	ldi	r28, 0x00	; 0
    239e:	d4 e0       	ldi	r29, 0x04	; 4
    23a0:	1b 82       	std	Y+3, r1	; 0x03
    23a2:	1a 82       	std	Y+2, r1	; 0x02
    23a4:	8c 83       	std	Y+4, r24	; 0x04
    23a6:	9d 83       	std	Y+5, r25	; 0x05
    23a8:	ae 83       	std	Y+6, r26	; 0x06
    23aa:	bf 83       	std	Y+7, r27	; 0x07
    23ac:	84 e2       	ldi	r24, 0x24	; 36
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	99 83       	std	Y+1, r25	; 0x01
    23b2:	88 83       	st	Y, r24
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9d 87       	std	Y+13, r25	; 0x0d
    23ba:	8c 87       	std	Y+12, r24	; 0x0c
    23bc:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    23c0:	9f 87       	std	Y+15, r25	; 0x0f
    23c2:	8e 87       	std	Y+14, r24	; 0x0e
    23c4:	18 8a       	std	Y+16, r1	; 0x10
    23c6:	19 8a       	std	Y+17, r1	; 0x11
    23c8:	1a 8a       	std	Y+18, r1	; 0x12
    23ca:	80 e2       	ldi	r24, 0x20	; 32
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 11 25 	call	0x4a22	; 0x4a22 <malloc>
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
    23d6:	1d 8a       	std	Y+21, r1	; 0x15
    23d8:	1e 8a       	std	Y+22, r1	; 0x16
    23da:	1f 8a       	std	Y+23, r1	; 0x17
    23dc:	87 e3       	ldi	r24, 0x37	; 55
    23de:	94 e0       	ldi	r25, 0x04	; 4
    23e0:	9d 8f       	std	Y+29, r25	; 0x1d
    23e2:	8c 8f       	std	Y+28, r24	; 0x1c
    23e4:	85 e5       	ldi	r24, 0x55	; 85
    23e6:	94 e0       	ldi	r25, 0x04	; 4
    23e8:	9f 8f       	std	Y+31, r25	; 0x1f
    23ea:	8e 8f       	std	Y+30, r24	; 0x1e
    23ec:	81 e7       	ldi	r24, 0x71	; 113
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	99 a3       	std	Y+33, r25	; 0x21
    23f2:	88 a3       	std	Y+32, r24	; 0x20
    23f4:	85 e7       	ldi	r24, 0x75	; 117
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	9b a3       	std	Y+35, r25	; 0x23
    23fa:	8a a3       	std	Y+34, r24	; 0x22
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	9a e0       	ldi	r25, 0x0A	; 10
    2400:	9d a3       	std	Y+37, r25	; 0x25
    2402:	8c a3       	std	Y+36, r24	; 0x24
    2404:	84 eb       	ldi	r24, 0xB4	; 180
    2406:	99 e0       	ldi	r25, 0x09	; 9
    2408:	9f a3       	std	Y+39, r25	; 0x27
    240a:	8e a3       	std	Y+38, r24	; 0x26
    240c:	8d e8       	ldi	r24, 0x8D	; 141
    240e:	99 e0       	ldi	r25, 0x09	; 9
    2410:	99 a7       	std	Y+41, r25	; 0x29
    2412:	88 a7       	std	Y+40, r24	; 0x28
    2414:	88 e8       	ldi	r24, 0x88	; 136
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	9b a7       	std	Y+43, r25	; 0x2b
    241a:	8a a7       	std	Y+42, r24	; 0x2a
    241c:	80 e9       	ldi	r24, 0x90	; 144
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	9d a7       	std	Y+45, r25	; 0x2d
    2422:	8c a7       	std	Y+44, r24	; 0x2c
    2424:	8a e9       	ldi	r24, 0x9A	; 154
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	9f a7       	std	Y+47, r25	; 0x2f
    242a:	8e a7       	std	Y+46, r24	; 0x2e
    242c:	80 e5       	ldi	r24, 0x50	; 80
    242e:	9a e0       	ldi	r25, 0x0A	; 10
    2430:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <twi_onSlaveReceive+0x1>
    2434:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <twi_onSlaveReceive>
    2438:	84 e4       	ldi	r24, 0x44	; 68
    243a:	9a e0       	ldi	r25, 0x0A	; 10
    243c:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <twi_onSlaveTransmit+0x1>
    2440:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <twi_onSlaveTransmit>
    2444:	e0 e3       	ldi	r30, 0x30	; 48
    2446:	f4 e0       	ldi	r31, 0x04	; 4
    2448:	86 e3       	ldi	r24, 0x36	; 54
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	15 82       	std	Z+5, r1	; 0x05
    2452:	14 82       	std	Z+4, r1	; 0x04
    2454:	16 82       	std	Z+6, r1	; 0x06
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	87 83       	std	Z+7, r24	; 0x07
    245a:	80 87       	std	Z+8, r24	; 0x08
    245c:	8f ef       	ldi	r24, 0xFF	; 255
    245e:	9f ef       	ldi	r25, 0xFF	; 255
    2460:	dc 01       	movw	r26, r24
    2462:	85 87       	std	Z+13, r24	; 0x0d
    2464:	96 87       	std	Z+14, r25	; 0x0e
    2466:	a7 87       	std	Z+15, r26	; 0x0f
    2468:	b0 8b       	std	Z+16, r27	; 0x10
    246a:	81 8b       	std	Z+17, r24	; 0x11
    246c:	92 8b       	std	Z+18, r25	; 0x12
    246e:	a3 8b       	std	Z+19, r26	; 0x13
    2470:	b4 8b       	std	Z+20, r27	; 0x14
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e8       	ldi	r26, 0x80	; 128
    2478:	bf eb       	ldi	r27, 0xBF	; 191
    247a:	85 8b       	std	Z+21, r24	; 0x15
    247c:	96 8b       	std	Z+22, r25	; 0x16
    247e:	a7 8b       	std	Z+23, r26	; 0x17
    2480:	b0 8f       	std	Z+24, r27	; 0x18
    2482:	81 8f       	std	Z+25, r24	; 0x19
    2484:	92 8f       	std	Z+26, r25	; 0x1a
    2486:	a3 8f       	std	Z+27, r26	; 0x1b
    2488:	b4 8f       	std	Z+28, r27	; 0x1c
    248a:	14 e1       	ldi	r17, 0x14	; 20
    248c:	15 8f       	std	Z+29, r17	; 0x1d
    248e:	81 e4       	ldi	r24, 0x41	; 65
    2490:	86 8f       	std	Z+30, r24	; 0x1e
    2492:	80 e4       	ldi	r24, 0x40	; 64
    2494:	92 e4       	ldi	r25, 0x42	; 66
    2496:	af e0       	ldi	r26, 0x0F	; 15
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	81 87       	std	Z+9, r24	; 0x09
    249c:	92 87       	std	Z+10, r25	; 0x0a
    249e:	a3 87       	std	Z+11, r26	; 0x0b
    24a0:	b4 87       	std	Z+12, r27	; 0x0c
    24a2:	c4 e3       	ldi	r28, 0x34	; 52
    24a4:	d5 e0       	ldi	r29, 0x05	; 5
    24a6:	8e e3       	ldi	r24, 0x3E	; 62
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	99 83       	std	Y+1, r25	; 0x01
    24ac:	88 83       	st	Y, r24
    24ae:	08 e0       	ldi	r16, 0x08	; 8
    24b0:	0b 83       	std	Y+3, r16	; 0x03
    24b2:	8b e0       	ldi	r24, 0x0B	; 11
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	9c e0       	ldi	r25, 0x0C	; 12
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8f 83       	std	Y+7, r24	; 0x07
    24bc:	84 e0       	ldi	r24, 0x04	; 4
    24be:	8a 83       	std	Y+2, r24	; 0x02
    24c0:	8c 83       	std	Y+4, r24	; 0x04
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	8b e0       	ldi	r24, 0x0B	; 11
    24c6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	8c e0       	ldi	r24, 0x0C	; 12
    24ce:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	8b e0       	ldi	r24, 0x0B	; 11
    24d6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	8b e0       	ldi	r24, 0x0B	; 11
    24de:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    24ea:	8a e6       	ldi	r24, 0x6A	; 106
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	99 83       	std	Y+1, r25	; 0x01
    24f0:	88 83       	st	Y, r24
    24f2:	ce 01       	movw	r24, r28
    24f4:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
    24f8:	0b 83       	std	Y+3, r16	; 0x03
    24fa:	47 e0       	ldi	r20, 0x07	; 7
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	ce 01       	movw	r24, r28
    2500:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TM1650::setupDisplay(bool, unsigned char)>
    2504:	ef e4       	ldi	r30, 0x4F	; 79
    2506:	f4 e0       	ldi	r31, 0x04	; 4
    2508:	11 83       	std	Z+1, r17	; 0x01
    250a:	13 82       	std	Z+3, r1	; 0x03
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	08 95       	ret

00002516 <main>:
main():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	28 97       	sbiw	r28, 0x08	; 8
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    252a:	78 94       	sei
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    252c:	84 b5       	in	r24, 0x24	; 36
    252e:	83 60       	ori	r24, 0x03	; 3
    2530:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2532:	85 b5       	in	r24, 0x25	; 37
    2534:	83 60       	ori	r24, 0x03	; 3
    2536:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2538:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    253c:	81 60       	ori	r24, 0x01	; 1
    253e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2542:	12 e0       	ldi	r17, 0x02	; 2
    2544:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2548:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    254c:	81 60       	ori	r24, 0x01	; 1
    254e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2552:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2556:	81 60       	ori	r24, 0x01	; 1
    2558:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    255c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2560:	84 60       	ori	r24, 0x04	; 4
    2562:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2566:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    256a:	81 60       	ori	r24, 0x01	; 1
    256c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2570:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    2574:	83 60       	ori	r24, 0x03	; 3
    2576:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    257a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    257e:	81 60       	ori	r24, 0x01	; 1
    2580:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2584:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
    2588:	83 60       	ori	r24, 0x03	; 3
    258a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    258e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    2598:	86 e8       	ldi	r24, 0x86	; 134
    259a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    259e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
begin():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    25a2:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <Serial+0x10>
    25a6:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <Serial+0x11>
    25aa:	10 83       	st	Z, r17
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    25ac:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <Serial+0xc>
    25b0:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <Serial+0xd>
    25b4:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    25b6:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <Serial+0xe>
    25ba:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <Serial+0xf>
    25be:	83 e3       	ldi	r24, 0x33	; 51
    25c0:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    25c2:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <Serial+0x18>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    25c6:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <Serial+0x14>
    25ca:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <Serial+0x15>
    25ce:	86 e0       	ldi	r24, 0x06	; 6
    25d0:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    25d2:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Serial+0x12>
    25d6:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Serial+0x13>
    25da:	80 81       	ld	r24, Z
    25dc:	88 69       	ori	r24, 0x98	; 152
    25de:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    25e0:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Serial+0x12>
    25e4:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Serial+0x13>
    25e8:	80 81       	ld	r24, Z
    25ea:	8f 7d       	andi	r24, 0xDF	; 223
    25ec:	80 83       	st	Z, r24
setup():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:461
}

void setup()
{
  Serial.begin(19200);   //시리얼 프린트를 시작합니다
  Serial.println("motor speed...");
    25ee:	81 eb       	ldi	r24, 0xB1	; 177
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:462
  TCCR1B = TCCR1B & B11111000 | B00000010; // for PWM frequency of 3921.16 Hz
    25f6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    25fa:	88 7f       	andi	r24, 0xF8	; 248
    25fc:	82 60       	ori	r24, 0x02	; 2
    25fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:464
  
  Serial.println("am1008w start...");
    2602:	80 ec       	ldi	r24, 0xC0	; 192
    2604:	91 e0       	ldi	r25, 0x01	; 1
    2606:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:36
 *         {@code 3} Frame length is different
 *         {@code 4} Checksum is wrong
 */
void AM1008W_K_I2C::begin(TwoWire &wirePort)
{
  _i2cPort = &wirePort; //Grab which port the user wants us to use
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	94 e0       	ldi	r25, 0x04	; 4
    260e:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <am1008w_k_i2c+0x21>
    2612:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <am1008w_k_i2c+0x20>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:449

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2616:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <Wire+0x10>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:450
  rxBufferLength = 0;
    261a:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <Wire+0x11>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:452

  txBufferIndex = 0;
    261e:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <Wire+0x15>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:453
  txBufferLength = 0;
    2622:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <Wire+0x16>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:455

  tw_init();
    2626:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <Wire+0x1c>
    262a:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <Wire+0x1d>
    262e:	09 95       	icall
setup():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:467
  am1008w_k_i2c.begin(); // 0x50
  //am1008w_k_i2c.pm_sensor_mode_cotinuously_measurement();
  Serial.println("ir start...");
    2630:	81 ed       	ldi	r24, 0xD1	; 209
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:184
// initialization
//
#ifdef USE_DEFAULT_ENABLE_IR_IN
void IRrecv::enableIRIn() {
// the interrupt Service Routine fires every 50 uS
    noInterrupts();
    2638:	f8 94       	cli
timerConfigForReceive():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src\private/IRremoteBoardDefs.h:461
    TCCR2A = _BV(WGM21);
    TCCR2B = _BV(CS20);
    OCR2A  = TIMER_COUNT_TOP;
    TCNT2  = 0;
#else
    TCCR2A = _BV(WGM21);
    263a:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src\private/IRremoteBoardDefs.h:462
    TCCR2B = _BV(CS21);
    263e:	10 93 b1 00 	sts	0x00B1, r17	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src\private/IRremoteBoardDefs.h:463
    OCR2A = TIMER_COUNT_TOP / 8;
    2642:	82 e3       	ldi	r24, 0x32	; 50
    2644:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src\private/IRremoteBoardDefs.h:464
    TCNT2 = 0;
    2648:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:192
    // Therefore, the timer interval can range from 0.5 to 128 microseconds
    // Depending on the reset value (255 to 0)
    timerConfigForReceive();

    // Timer2 Overflow Interrupt Enable
    TIMER_ENABLE_RECEIVE_INTR;
    264c:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:196

    TIMER_RESET_INTR_PENDING;

    interrupts();
    2650:	78 94       	sei
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:199

    // Initialize state machine state
    irparams.rcvstate = IR_REC_STATE_IDLE;
    2652:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <irparams>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:203
    //    irparams.rawlen = 0; // not required

    // Set pin modes
    pinMode(irparams.recvpin, INPUT);
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <irparams+0x1>
    265c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
setup():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:469
  irrecv.enableIRIn();  //적외선 센서 활성화
  Serial.println("mq131 start...");
    2660:	8d ed       	ldi	r24, 0xDD	; 221
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:51
/**
 * Init core variables
 */
 void MQ131Class::begin(uint8_t _pinPower, uint8_t _pinSensor, MQ131Model _model, uint32_t _RL, Stream* _debugStream) { 
  // Define if debug is requested
  enableDebug = _debugStream != NULL;
    2668:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <MQ131+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:52
  debugStream = _debugStream;
    266c:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <MQ131+0x5>
    2670:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <MQ131+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:55
  
 	// Setup the model
 	model = _model;
    2674:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <MQ131+0x3>
    2678:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <MQ131+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:58

 	// Store the circuit info (pin and load resistance)
 	pinPower = _pinPower;
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <MQ131+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:59
 	pinSensor = _pinSensor;
    2682:	89 e1       	ldi	r24, 0x19	; 25
    2684:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <MQ131+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:60
 	valueRL = _RL;
    2688:	80 e4       	ldi	r24, 0x40	; 64
    268a:	92 e4       	ldi	r25, 0x42	; 66
    268c:	af e0       	ldi	r26, 0x0F	; 15
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <MQ131+0x9>
    2694:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <MQ131+0xa>
    2698:	a0 93 3b 04 	sts	0x043B, r26	; 0x80043b <MQ131+0xb>
    269c:	b0 93 3c 04 	sts	0x043C, r27	; 0x80043c <MQ131+0xc>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    26a0:	8a e0       	ldi	r24, 0x0A	; 10
    26a2:	97 ea       	ldi	r25, 0xA7	; 167
    26a4:	af ee       	ldi	r26, 0xEF	; 239
    26a6:	b4 e4       	ldi	r27, 0x44	; 68
    26a8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <MQ131+0x15>
    26ac:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <MQ131+0x16>
    26b0:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <MQ131+0x17>
    26b4:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    26b8:	80 e5       	ldi	r24, 0x50	; 80
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <MQ131+0x11>
    26c4:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <MQ131+0x12>
    26c8:	a0 93 43 04 	sts	0x0443, r26	; 0x800443 <MQ131+0x13>
    26cc:	b0 93 44 04 	sts	0x0444, r27	; 0x800444 <MQ131+0x14>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:80
      setTimeToRead(MQ131_DEFAULT_LO_CONCENTRATION_TIME2READ);
      break;
  }

 	// Setup pin mode
 	pinMode(pinPower, OUTPUT);
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:81
 	pinMode(pinSensor, INPUT);
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <MQ131+0x8>
    26de:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:84

  // Switch off the heater as default status
  digitalWrite(pinPower, LOW);
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <MQ131+0x7>
    26e8:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    26ec:	88 e4       	ldi	r24, 0x48	; 72
    26ee:	91 e6       	ldi	r25, 0x61	; 97
    26f0:	a4 e7       	ldi	r26, 0x74	; 116
    26f2:	b4 e4       	ldi	r27, 0x44	; 68
    26f4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <MQ131+0x15>
    26f8:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <MQ131+0x16>
    26fc:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <MQ131+0x17>
    2700:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    2704:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <MQ131+0x11>
    2708:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <MQ131+0x12>
    270c:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <MQ131+0x13>
    2710:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <MQ131+0x14>
setup():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:474
  MQ131.begin(DC18_EN, OZONE, LOW_CONCENTRATION, 1000000);
  MQ131.setR0(977.52);
  MQ131.setTimeToRead(0);
  
  Serial.println("pin config start...");
    2714:	8c ee       	ldi	r24, 0xEC	; 236
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:475
  pinMode(FAN1_EN,OUTPUT);
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	89 e0       	ldi	r24, 0x09	; 9
    2720:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:476
  pinMode(DC18_EN, OUTPUT);
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:477
  pinMode(PLASMA1_EN,OUTPUT);
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	85 e0       	ldi	r24, 0x05	; 5
    2730:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:478
  pinMode(PLASMA2_EN,OUTPUT);
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	86 e0       	ldi	r24, 0x06	; 6
    2738:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:479
  pinMode(AUTO_LED,OUTPUT);
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	8a e1       	ldi	r24, 0x1A	; 26
    2740:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:480
  pinMode(FAN1_EN, OUTPUT);
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	89 e0       	ldi	r24, 0x09	; 9
    2748:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:481
  pinMode(PWR_LED, OUTPUT);
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	8d e0       	ldi	r24, 0x0D	; 13
    2750:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:482
  pinMode(FAN_RLED,OUTPUT);
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	8f e0       	ldi	r24, 0x0F	; 15
    2758:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:483
  pinMode(FAN_BLED,OUTPUT);
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	80 e1       	ldi	r24, 0x10	; 16
    2760:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:484
  pinMode(PLASMA_LED,OUTPUT);
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	8e e0       	ldi	r24, 0x0E	; 14
    2768:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:485
  pinMode(UV_EN,OUTPUT);
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	85 e1       	ldi	r24, 0x15	; 21
    2770:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:486
  module.clearDisplay();
    2774:	84 e3       	ldi	r24, 0x34	; 52
    2776:	95 e0       	ldi	r25, 0x05	; 5
    2778:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:488
  
  pinMode(PLASMA1_CH,INPUT);
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	87 e0       	ldi	r24, 0x07	; 7
    2780:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:489
  pinMode(FAN1_CH,INPUT);
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	8a e0       	ldi	r24, 0x0A	; 10
    2788:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:490
  pinMode(PLASMA2_CH,INPUT);
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	88 e0       	ldi	r24, 0x08	; 8
    2790:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:491
  pinMode(UV_CH,INPUT);
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pinMode>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:492
  Serial.println("end...");
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	92 e0       	ldi	r25, 0x02	; 2
    27a0:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:500
 * DEPRECATED
 * With parameter aResults for backwards compatibility
 * Contains no new (since 5/2020) protocols.
 */
bool IRrecv::decode(decode_results *aResults) {
    if (irparams.rcvstate != IR_REC_STATE_STOP) {
    27a4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <irparams>
    27a8:	83 30       	cpi	r24, 0x03	; 3
    27aa:	09 f0       	breq	.+2      	; 0x27ae <main+0x298>
    27ac:	42 c7       	rjmp	.+3716   	; 0x3632 <main+0x111c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:507
    }

    /*
     * First copy 3 values from irparams to internal results structure
     */
    results.rawbuf = irparams.rawbuf;
    27ae:	87 e5       	ldi	r24, 0x57	; 87
    27b0:	94 e0       	ldi	r25, 0x04	; 4
    27b2:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <irrecv+0xe>
    27b6:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <irrecv+0xd>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:508
    results.rawlen = irparams.rawlen;
    27ba:	c0 90 53 04 	lds	r12, 0x0453	; 0x800453 <irparams+0x4>
    27be:	d0 90 54 04 	lds	r13, 0x0454	; 0x800454 <irparams+0x5>
    27c2:	d0 92 32 05 	sts	0x0532, r13	; 0x800532 <irrecv+0x10>
    27c6:	c0 92 31 05 	sts	0x0531, r12	; 0x800531 <irrecv+0xf>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:509
    results.overflow = irparams.overflow;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <irparams+0xd2>
    27d0:	91 11       	cpse	r25, r1
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <main+0x2c0>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <irrecv+0x11>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:512

    // reset optional values
    results.address = 0;
    27da:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <irrecv+0x3>
    27de:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:513
    results.isRepeat = false;
    27e2:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <irrecv+0xc>
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:119
bool IRrecv::decodeNEC() {
    long data = 0;  // We decode in to here; Start with nothing
    int offset = 1;  // Index in to results; Skip first entry!?

// Check header "mark"
    if (!MATCH_MARK(results.rawbuf[offset], NEC_HEADER_MARK)) {
    27e6:	20 90 59 04 	lds	r2, 0x0459	; 0x800459 <irparams+0xa>
    27ea:	30 90 5a 04 	lds	r3, 0x045A	; 0x80045a <irparams+0xb>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    27ee:	c1 01       	movw	r24, r2
    27f0:	87 58       	subi	r24, 0x87	; 135
    27f2:	91 09       	sbc	r25, r1
    27f4:	8e 35       	cpi	r24, 0x5E	; 94
    27f6:	91 05       	cpc	r25, r1
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <main+0x2e6>
    27fa:	14 c1       	rjmp	.+552    	; 0x2a24 <main+0x50e>
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:126
    }
    offset++;

// Check for repeat
    if ((results.rawlen == 4) && MATCH_SPACE(results.rawbuf[offset], NEC_REPEAT_SPACE)
            && MATCH_MARK(results.rawbuf[offset + 1], NEC_BIT_MARK)) {
    27fc:	94 e0       	ldi	r25, 0x04	; 4
    27fe:	c9 16       	cp	r12, r25
    2800:	d1 04       	cpc	r13, r1
    2802:	09 f0       	breq	.+2      	; 0x2806 <main+0x2f0>
    2804:	ea c0       	rjmp	.+468    	; 0x29da <main+0x4c4>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2806:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <irparams+0xc>
    280a:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <irparams+0xd>
    280e:	80 97       	sbiw	r24, 0x20	; 32
    2810:	47 97       	sbiw	r24, 0x17	; 23
    2812:	08 f0       	brcs	.+2      	; 0x2816 <main+0x300>
    2814:	07 c1       	rjmp	.+526    	; 0x2a24 <main+0x50e>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2816:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <irparams+0xe>
    281a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <irparams+0xf>
    281e:	09 97       	sbiw	r24, 0x09	; 9
    2820:	09 97       	sbiw	r24, 0x09	; 9
    2822:	08 f0       	brcs	.+2      	; 0x2826 <main+0x310>
    2824:	ff c0       	rjmp	.+510    	; 0x2a24 <main+0x50e>
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:127
        results.bits = 0;
    2826:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    282a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:128
        results.value = REPEAT;
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	9f ef       	ldi	r25, 0xFF	; 255
    2832:	dc 01       	movw	r26, r24
    2834:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    2838:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    283c:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    2840:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:129
        results.isRepeat = true;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:149
    data = decodePulseDistanceData(NEC_BITS, offset, NEC_BIT_MARK, NEC_ONE_SPACE, NEC_ZERO_SPACE);

// Success
    results.bits = NEC_BITS;
    results.value = data;
    results.decode_type = NEC;
    284a:	8b e0       	ldi	r24, 0x0B	; 11
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2852:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:151

    return true;
    2856:	ff 24       	eor	r15, r15
    2858:	f3 94       	inc	r15
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:155
}
bool IRrecv::decodeNEC(decode_results *aResults) {
    bool aReturnValue = decodeNEC();
    *aResults = results;
    285a:	82 e1       	ldi	r24, 0x12	; 18
    285c:	e2 e2       	ldi	r30, 0x22	; 34
    285e:	f5 e0       	ldi	r31, 0x05	; 5
    2860:	a3 ef       	ldi	r26, 0xF3	; 243
    2862:	b2 e0       	ldi	r27, 0x02	; 2
    2864:	01 90       	ld	r0, Z+
    2866:	0d 92       	st	X+, r0
    2868:	8a 95       	dec	r24
    286a:	e1 f7       	brne	.-8      	; 0x2864 <main+0x34e>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:517

#if DECODE_NEC
    DBG_PRINTLN("Attempting NEC decode");
    if (decodeNEC(aResults)) {
    286c:	f1 10       	cpse	r15, r1
    286e:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <main+0x152c>
decodeSharp():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:106
    int loops = 1; //number of bursts

    // Check we have the right amount of data
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
    2872:	a0 e2       	ldi	r26, 0x20	; 32
    2874:	ca 16       	cp	r12, r26
    2876:	d1 04       	cpc	r13, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <main+0x366>
    287a:	d6 c0       	rjmp	.+428    	; 0x2a28 <main+0x512>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:109
        loops = 1;
    else if (irparams.rawlen == (SHARP_BITS + 1) * 2 * 3)
        loops = 3;
    287c:	73 e0       	ldi	r23, 0x03	; 3
    287e:	87 2e       	mov	r8, r23
    2880:	91 2c       	mov	r9, r1
decodeSharp():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:108
    // Check we have the right amount of data
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
        loops = 1;
    else if (irparams.rawlen == (SHARP_BITS + 1) * 2 * 3)
    2882:	b0 e6       	ldi	r27, 0x60	; 96
    2884:	cb 16       	cp	r12, r27
    2886:	d1 04       	cpc	r13, r1
    2888:	09 f4       	brne	.+2      	; 0x288c <main+0x376>
    288a:	d1 c0       	rjmp	.+418    	; 0x2a2e <main+0x518>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:177
    results.decode_type = SHARP;
    return true;
}
bool IRrecv::decodeSharp(decode_results *aResults) {
    bool aReturnValue = decodeSharp();
    *aResults = results;
    288c:	82 e1       	ldi	r24, 0x12	; 18
    288e:	e2 e2       	ldi	r30, 0x22	; 34
    2890:	f5 e0       	ldi	r31, 0x05	; 5
    2892:	a3 ef       	ldi	r26, 0xF3	; 243
    2894:	b2 e0       	ldi	r27, 0x02	; 2
    2896:	01 90       	ld	r0, Z+
    2898:	0d 92       	st	X+, r0
    289a:	8a 95       	dec	r24
    289c:	e1 f7       	brne	.-8      	; 0x2896 <main+0x380>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:524
    }
#endif

#if DECODE_SHARP
    DBG_PRINTLN("Attempting Sharp decode");
    if (decodeSharp(aResults)) {
    289e:	f1 10       	cpse	r15, r1
    28a0:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <main+0x152c>
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:73
#if DECODE_SHARP_ALT
bool IRrecv::decodeSharpAlt() {
    static boolean is_first_repeat = true;

    // Check we have enough data.
    if (results.rawlen < (SHARP_ALT_RAWLEN))
    28a4:	90 e2       	ldi	r25, 0x20	; 32
    28a6:	c9 16       	cp	r12, r25
    28a8:	d1 04       	cpc	r13, r1
    28aa:	08 f4       	brcc	.+2      	; 0x28ae <main+0x398>
    28ac:	5c c0       	rjmp	.+184    	; 0x2966 <main+0x450>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    28ae:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <irparams+0x46>
    28b2:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <irparams+0x47>
    28b6:	03 97       	sbiw	r24, 0x03	; 3
    28b8:	05 97       	sbiw	r24, 0x05	; 5
    28ba:	08 f0       	brcs	.+2      	; 0x28be <main+0x3a8>
    28bc:	54 c0       	rjmp	.+168    	; 0x2966 <main+0x450>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    28be:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <irparams+0x44>
    28c2:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <irparams+0x45>
    28c6:	08 97       	sbiw	r24, 0x08	; 8
    28c8:	09 97       	sbiw	r24, 0x09	; 9
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <main+0x3b8>
    28cc:	4c c0       	rjmp	.+152    	; 0x2966 <main+0x450>
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:86
    // frame, which we ignore.
    if (!MATCH_SPACE(results.rawbuf[SHARP_ALT_RAWLEN - 2], SHARP_ALT_ZERO_SPACE))
        return false;

    // Check for repeat.
    long initial_space = ((long) results.rawbuf[0]) * MICROS_PER_TICK;
    28ce:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <irparams+0x8>
    28d2:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <irparams+0x9>
    28d6:	a2 e3       	ldi	r26, 0x32	; 50
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	0e 94 30 22 	call	0x4460	; 0x4460 <__umulhisi3>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:87
    if (initial_space <= SHARP_ALT_REPEAT_SPACE) {
    28de:	61 35       	cpi	r22, 0x51	; 81
    28e0:	73 4c       	sbci	r23, 0xC3	; 195
    28e2:	81 05       	cpc	r24, r1
    28e4:	91 05       	cpc	r25, r1
    28e6:	0c f4       	brge	.+2      	; 0x28ea <main+0x3d4>
    28e8:	16 c1       	rjmp	.+556    	; 0x2b16 <main+0x600>
    28ea:	ef e4       	ldi	r30, 0x4F	; 79
    28ec:	f4 e0       	ldi	r31, 0x04	; 4
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:105
    }

    // Decode bits. SHARP_ALT_RAWLEN-6 because index starts with 0 (-1) and we
    // omit the timings for the stop mark (-1), the check bit (-2), and the
    // expansion bit (-2).
    uint16_t bits = 0;
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	80 e0       	ldi	r24, 0x00	; 0
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:107
    for (uint8_t i = SHARP_ALT_RAWLEN - 6; i > 1; i -= 2) {
        if (MATCH_SPACE(results.rawbuf[i], SHARP_ALT_ONE_SPACE)) {
    28f2:	24 ad       	ldd	r18, Z+60	; 0x3c
    28f4:	35 ad       	ldd	r19, Z+61	; 0x3d
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    28f6:	28 31       	cpi	r18, 0x18	; 24
    28f8:	31 05       	cpc	r19, r1
    28fa:	0c f4       	brge	.+2      	; 0x28fe <main+0x3e8>
    28fc:	01 c1       	rjmp	.+514    	; 0x2b00 <main+0x5ea>
    28fe:	2b 32       	cpi	r18, 0x2B	; 43
    2900:	31 05       	cpc	r19, r1
    2902:	8c f5       	brge	.+98     	; 0x2966 <main+0x450>
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:108
            bits = (bits << 1) | 1;
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	81 60       	ori	r24, 0x01	; 1
    290a:	34 97       	sbiw	r30, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:106

    // Decode bits. SHARP_ALT_RAWLEN-6 because index starts with 0 (-1) and we
    // omit the timings for the stop mark (-1), the check bit (-2), and the
    // expansion bit (-2).
    uint16_t bits = 0;
    for (uint8_t i = SHARP_ALT_RAWLEN - 6; i > 1; i -= 2) {
    290c:	b4 e0       	ldi	r27, 0x04	; 4
    290e:	eb 31       	cpi	r30, 0x1B	; 27
    2910:	fb 07       	cpc	r31, r27
    2912:	79 f7       	brne	.-34     	; 0x28f2 <main+0x3dc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:116
        } else {
            return false;
        }
    }

    results.bits = SHARP_ALT_ADDRESS_BITS + SHARP_ALT_COMMAND_BITS;
    2914:	2d e0       	ldi	r18, 0x0D	; 13
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    291c:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:117
    results.address = (bits & (1 << (SHARP_ALT_ADDRESS_BITS))) - 1;
    2920:	9c 01       	movw	r18, r24
    2922:	20 72       	andi	r18, 0x20	; 32
    2924:	33 27       	eor	r19, r19
    2926:	21 50       	subi	r18, 0x01	; 1
    2928:	31 09       	sbc	r19, r1
    292a:	30 93 25 05 	sts	0x0525, r19	; 0x800525 <irrecv+0x3>
    292e:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:118
    results.value = bits >> SHARP_ALT_ADDRESS_BITS; // command
    2932:	35 e0       	ldi	r19, 0x05	; 5
    2934:	96 95       	lsr	r25
    2936:	87 95       	ror	r24
    2938:	3a 95       	dec	r19
    293a:	e1 f7       	brne	.-8      	; 0x2934 <main+0x41e>
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	a0 e0       	ldi	r26, 0x00	; 0
    2940:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    2944:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    2948:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    294c:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:119
    results.decode_type = SHARP_ALT;
    2950:	82 e1       	ldi	r24, 0x12	; 18
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2958:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:120
    is_first_repeat = true;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:93
        if (!is_first_repeat) {
            results.bits = 0;
            results.value = REPEAT;
            results.isRepeat = true;
            results.decode_type = SHARP;
            return true;
    2962:	ff 24       	eor	r15, r15
    2964:	f3 94       	inc	r15
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:125
    is_first_repeat = true;
    return true;
}
bool IRrecv::decodeSharpAlt(decode_results *aResults) {
    bool aReturnValue = decodeSharpAlt();
    *aResults = results;
    2966:	82 e1       	ldi	r24, 0x12	; 18
    2968:	e2 e2       	ldi	r30, 0x22	; 34
    296a:	f5 e0       	ldi	r31, 0x05	; 5
    296c:	a3 ef       	ldi	r26, 0xF3	; 243
    296e:	b2 e0       	ldi	r27, 0x02	; 2
    2970:	01 90       	ld	r0, Z+
    2972:	0d 92       	st	X+, r0
    2974:	8a 95       	dec	r24
    2976:	e1 f7       	brne	.-8      	; 0x2970 <main+0x45a>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:531
    }
#endif

#if DECODE_SHARP_ALT
    DBG_PRINTLN("Attempting SharpAlt decode");
    if (decodeSharpAlt(aResults)) {
    2978:	f1 10       	cpse	r15, r1
    297a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <main+0x152c>
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:51
#if DECODE_SONY
bool IRrecv::decodeSony() {
    long data = 0;
    unsigned int offset = 0;  // Dont skip first space, check its size

    if (results.rawlen < (2 * SONY_BITS) + 2) {
    297e:	9a e1       	ldi	r25, 0x1A	; 26
    2980:	c9 16       	cp	r12, r25
    2982:	d1 04       	cpc	r13, r1
    2984:	08 f4       	brcc	.+2      	; 0x2988 <main+0x472>
    2986:	1e c1       	rjmp	.+572    	; 0x2bc4 <main+0x6ae>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:57
        return false;
    }

    // Some Sony's deliver repeats fast after first
    // unfortunately can't spot difference from of repeat from two fast clicks
    if (results.rawbuf[offset] * MICROS_PER_TICK < SONY_DOUBLE_SPACE_USECS) {
    2988:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <irparams+0x8>
    298c:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <irparams+0x9>
    2990:	42 e3       	ldi	r20, 0x32	; 50
    2992:	42 9f       	mul	r20, r18
    2994:	c0 01       	movw	r24, r0
    2996:	43 9f       	mul	r20, r19
    2998:	90 0d       	add	r25, r0
    299a:	11 24       	eor	r1, r1
    299c:	84 3f       	cpi	r24, 0xF4	; 244
    299e:	91 40       	sbci	r25, 0x01	; 1
    29a0:	08 f0       	brcs	.+2      	; 0x29a4 <main+0x48e>
    29a2:	d9 c0       	rjmp	.+434    	; 0x2b56 <main+0x640>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:59
        DBG_PRINTLN("IR Gap found");
        results.bits = 0;
    29a4:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    29a8:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:60
        results.value = REPEAT;
    29ac:	8f ef       	ldi	r24, 0xFF	; 255
    29ae:	9f ef       	ldi	r25, 0xFF	; 255
    29b0:	dc 01       	movw	r26, r24
    29b2:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    29b6:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    29ba:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    29be:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:61
        results.isRepeat = true;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:62
        results.decode_type = UNKNOWN;
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:96
    if (results.bits < 12) {
        results.bits = 0;
        return false;
    }
    results.value = data;
    results.decode_type = SONY;
    29cc:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    29d0:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:97
    return true;
    29d4:	ff 24       	eor	r15, r15
    29d6:	f3 94       	inc	r15
    29d8:	f5 c0       	rjmp	.+490    	; 0x2bc4 <main+0x6ae>
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:135
        results.decode_type = NEC;
        return true;
    }

// Check we have enough data
    if (results.rawlen < (2 * NEC_BITS) + 4) {
    29da:	94 e4       	ldi	r25, 0x44	; 68
    29dc:	c9 16       	cp	r12, r25
    29de:	d1 04       	cpc	r13, r1
    29e0:	08 f1       	brcs	.+66     	; 0x2a24 <main+0x50e>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    29e2:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <irparams+0xc>
    29e6:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <irparams+0xd>
    29ea:	81 54       	subi	r24, 0x41	; 65
    29ec:	91 09       	sbc	r25, r1
    29ee:	8f 97       	sbiw	r24, 0x2f	; 47
    29f0:	c8 f4       	brcc	.+50     	; 0x2a24 <main+0x50e>
decodeNEC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:144
    if (!MATCH_SPACE(results.rawbuf[offset], NEC_HEADER_SPACE)) {
        return false;
    }
    offset++;

    data = decodePulseDistanceData(NEC_BITS, offset, NEC_BIT_MARK, NEC_ONE_SPACE, NEC_ZERO_SPACE);
    29f2:	00 e3       	ldi	r16, 0x30	; 48
    29f4:	12 e0       	ldi	r17, 0x02	; 2
    29f6:	2a e9       	ldi	r18, 0x9A	; 154
    29f8:	36 e0       	ldi	r19, 0x06	; 6
    29fa:	40 e3       	ldi	r20, 0x30	; 48
    29fc:	52 e0       	ldi	r21, 0x02	; 2
    29fe:	63 e0       	ldi	r22, 0x03	; 3
    2a00:	80 e2       	ldi	r24, 0x20	; 32
    2a02:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:147

// Success
    results.bits = NEC_BITS;
    2a06:	20 e2       	ldi	r18, 0x20	; 32
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    2a0e:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:148
    results.value = data;
    2a12:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    2a16:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    2a1a:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    2a1e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
    2a22:	13 cf       	rjmp	.-474    	; 0x284a <main+0x334>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_NEC.cpp:120
    long data = 0;  // We decode in to here; Start with nothing
    int offset = 1;  // Index in to results; Skip first entry!?

// Check header "mark"
    if (!MATCH_MARK(results.rawbuf[offset], NEC_HEADER_MARK)) {
        return false;
    2a24:	f1 2c       	mov	r15, r1
    2a26:	19 cf       	rjmp	.-462    	; 0x285a <main+0x344>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:107

    // Check we have the right amount of data
    // Either one burst or three where second is inverted
    // The setting #define _GAP 5000 in IRremoteInt.h will give one burst and possibly three calls to this function
    if (irparams.rawlen == (SHARP_BITS + 1) * 2)
        loops = 1;
    2a28:	88 24       	eor	r8, r8
    2a2a:	83 94       	inc	r8
    2a2c:	91 2c       	mov	r9, r1
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2a2e:	c1 01       	movw	r24, r2
    2a30:	03 97       	sbiw	r24, 0x03	; 3
    2a32:	05 97       	sbiw	r24, 0x05	; 5
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <main+0x522>
    2a36:	2a cf       	rjmp	.-428    	; 0x288c <main+0x376>
decodeSharp():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:117

    // Check the first mark to see if it fits the SHARP_BIT_MARK_RECV length
    if (!MATCH_MARK(results.rawbuf[offset], SHARP_BIT_MARK_RECV))
        return false;
    //check the first pause and see if it fits the SHARP_ONE_SPACE or SHARP_ZERO_SPACE length
    if (!(MATCH_SPACE(results.rawbuf[offset + 1], SHARP_ONE_SPACE) || MATCH_SPACE(results.rawbuf[offset + 1], SHARP_ZERO_SPACE)))
    2a38:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <irparams+0xc>
    2a3c:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <irparams+0xd>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2a40:	89 31       	cpi	r24, 0x19	; 25
    2a42:	91 05       	cpc	r25, r1
    2a44:	0c f4       	brge	.+2      	; 0x2a48 <main+0x532>
    2a46:	54 c0       	rjmp	.+168    	; 0x2af0 <main+0x5da>
    2a48:	8c 97       	sbiw	r24, 0x2c	; 44
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <main+0x538>
    2a4c:	1f cf       	rjmp	.-450    	; 0x288c <main+0x376>
    2a4e:	ee 24       	eor	r14, r14
    2a50:	e3 94       	inc	r14
    2a52:	41 2c       	mov	r4, r1
    2a54:	51 2c       	mov	r5, r1
    2a56:	32 01       	movw	r6, r4
    2a58:	b1 2c       	mov	r11, r1
    2a5a:	a1 2c       	mov	r10, r1
decodeSharp():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:124

    // Read the bits in
    for (int j = 0; j < loops; j++) {
        data = 0;
        addr = 0;
        addr = decodePulseDistanceData(SHARP_ADDR_BITS, offset, SHARP_BIT_MARK_SEND, SHARP_ONE_SPACE, SHARP_ZERO_SPACE);
    2a5c:	0b e1       	ldi	r16, 0x1B	; 27
    2a5e:	13 e0       	ldi	r17, 0x03	; 3
    2a60:	2d e0       	ldi	r18, 0x0D	; 13
    2a62:	37 e0       	ldi	r19, 0x07	; 7
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	6e 2d       	mov	r22, r14
    2a6a:	85 e0       	ldi	r24, 0x05	; 5
    2a6c:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
    2a70:	6d 83       	std	Y+5, r22	; 0x05
    2a72:	7e 83       	std	Y+6, r23	; 0x06
    2a74:	8f 83       	std	Y+7, r24	; 0x07
    2a76:	98 87       	std	Y+8, r25	; 0x08
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:139
//                addr = addr;
//            else
//                return false;
//            offset++;
//        }
        data = decodePulseDistanceData( SHARP_DATA_BITS, offset + SHARP_ADDR_BITS, SHARP_BIT_MARK_SEND, SHARP_ONE_SPACE,
    2a78:	2d e0       	ldi	r18, 0x0D	; 13
    2a7a:	37 e0       	ldi	r19, 0x07	; 7
    2a7c:	4a ef       	ldi	r20, 0xFA	; 250
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	65 e0       	ldi	r22, 0x05	; 5
    2a82:	6e 0d       	add	r22, r14
    2a84:	88 e0       	ldi	r24, 0x08	; 8
    2a86:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:162
//    }
        //skip exp bit (mark+pause), chk bit (mark+pause), mark and long pause before next burst
        offset += 6;

        //Check if last burst data is equal to this burst (lastData already inverted)
        if (lastData != 0 && data != lastData)
    2a8a:	41 14       	cp	r4, r1
    2a8c:	51 04       	cpc	r5, r1
    2a8e:	61 04       	cpc	r6, r1
    2a90:	71 04       	cpc	r7, r1
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <main+0x58a>
    2a94:	64 15       	cp	r22, r4
    2a96:	75 05       	cpc	r23, r5
    2a98:	86 05       	cpc	r24, r6
    2a9a:	97 05       	cpc	r25, r7
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <main+0x58a>
    2a9e:	f6 ce       	rjmp	.-532    	; 0x288c <main+0x376>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:165
            return false;
        //save current burst of data but invert (XOR) the last 10 bits (8 data bits + exp bit + chk bit)
        lastData = data ^ 0xFF;
    2aa0:	2b 01       	movw	r4, r22
    2aa2:	3c 01       	movw	r6, r24
    2aa4:	40 94       	com	r4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:121
    //check the first pause and see if it fits the SHARP_ONE_SPACE or SHARP_ZERO_SPACE length
    if (!(MATCH_SPACE(results.rawbuf[offset + 1], SHARP_ONE_SPACE) || MATCH_SPACE(results.rawbuf[offset + 1], SHARP_ZERO_SPACE)))
        return false;

    // Read the bits in
    for (int j = 0; j < loops; j++) {
    2aa6:	ef ef       	ldi	r30, 0xFF	; 255
    2aa8:	ae 1a       	sub	r10, r30
    2aaa:	be 0a       	sbc	r11, r30
    2aac:	f6 e0       	ldi	r31, 0x06	; 6
    2aae:	ef 0e       	add	r14, r31
    2ab0:	8a 14       	cp	r8, r10
    2ab2:	9b 04       	cpc	r9, r11
    2ab4:	99 f6       	brne	.-90     	; 0x2a5c <main+0x546>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:169
        //save current burst of data but invert (XOR) the last 10 bits (8 data bits + exp bit + chk bit)
        lastData = data ^ 0xFF;
    }

// Success
    results.bits = SHARP_BITS;
    2ab6:	2f e0       	ldi	r18, 0x0F	; 15
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    2abe:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:170
    results.value = data;
    2ac2:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    2ac6:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    2aca:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    2ace:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:171
    results.address = addr;
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <irrecv+0x3>
    2ada:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:172
    results.decode_type = SHARP;
    2ade:	81 e1       	ldi	r24, 0x11	; 17
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2ae6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp.cpp:173
    return true;
    2aea:	ff 24       	eor	r15, r15
    2aec:	f3 94       	inc	r15
    2aee:	ce ce       	rjmp	.-612    	; 0x288c <main+0x376>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    2af0:	8a 30       	cpi	r24, 0x0A	; 10
    2af2:	91 05       	cpc	r25, r1
    2af4:	0c f4       	brge	.+2      	; 0x2af8 <main+0x5e2>
    2af6:	ca ce       	rjmp	.-620    	; 0x288c <main+0x376>
    2af8:	43 97       	sbiw	r24, 0x13	; 19
    2afa:	0c f4       	brge	.+2      	; 0x2afe <main+0x5e8>
    2afc:	a8 cf       	rjmp	.-176    	; 0x2a4e <main+0x538>
    2afe:	c6 ce       	rjmp	.-628    	; 0x288c <main+0x376>
    2b00:	28 30       	cpi	r18, 0x08	; 8
    2b02:	31 05       	cpc	r19, r1
    2b04:	0c f4       	brge	.+2      	; 0x2b08 <main+0x5f2>
    2b06:	2f cf       	rjmp	.-418    	; 0x2966 <main+0x450>
    2b08:	21 31       	cpi	r18, 0x11	; 17
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	0c f0       	brlt	.+2      	; 0x2b10 <main+0x5fa>
    2b0e:	2b cf       	rjmp	.-426    	; 0x2966 <main+0x450>
decodeSharpAlt():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:110
    uint16_t bits = 0;
    for (uint8_t i = SHARP_ALT_RAWLEN - 6; i > 1; i -= 2) {
        if (MATCH_SPACE(results.rawbuf[i], SHARP_ALT_ONE_SPACE)) {
            bits = (bits << 1) | 1;
        } else if (MATCH_SPACE(results.rawbuf[i], SHARP_ALT_ZERO_SPACE)) {
            bits = (bits << 1) | 0;
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	fa ce       	rjmp	.-524    	; 0x290a <main+0x3f4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:88
        return false;

    // Check for repeat.
    long initial_space = ((long) results.rawbuf[0]) * MICROS_PER_TICK;
    if (initial_space <= SHARP_ALT_REPEAT_SPACE) {
        if (!is_first_repeat) {
    2b16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	19 c0       	rjmp	.+50     	; 0x2b50 <main+0x63a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:89
            results.bits = 0;
    2b1e:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    2b22:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:90
            results.value = REPEAT;
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	9f ef       	ldi	r25, 0xFF	; 255
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    2b30:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    2b34:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    2b38:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:91
            results.isRepeat = true;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:92
            results.decode_type = SHARP;
    2b42:	81 e1       	ldi	r24, 0x11	; 17
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2b4a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
    2b4e:	09 cf       	rjmp	.-494    	; 0x2962 <main+0x44c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sharp_alt.cpp:97
            return true;
        } else {
            // Ignore the first repeat that always comes after the
            // inverted frame (even if the button was pressed only once).
            is_first_repeat = false;
    2b50:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b54:	08 cf       	rjmp	.-496    	; 0x2966 <main+0x450>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2b56:	c1 01       	movw	r24, r2
    2b58:	85 97       	sbiw	r24, 0x25	; 37
    2b5a:	4b 97       	sbiw	r24, 0x1b	; 27
    2b5c:	98 f5       	brcc	.+102    	; 0x2bc4 <main+0x6ae>
    2b5e:	ef e4       	ldi	r30, 0x4F	; 79
    2b60:	f4 e0       	ldi	r31, 0x04	; 4
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:71

    // Initial mark
    if (!MATCH_MARK(results.rawbuf[offset], SONY_HEADER_MARK)) {
        return false;
    }
    offset++;
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:48
#endif

//+=============================================================================
#if DECODE_SONY
bool IRrecv::decodeSony() {
    long data = 0;
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	ba 01       	movw	r22, r20
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:73
    if (!MATCH_MARK(results.rawbuf[offset], SONY_HEADER_MARK)) {
        return false;
    }
    offset++;

    while (offset + 1 < results.rawlen) {
    2b6c:	9c 01       	movw	r18, r24
    2b6e:	2f 5f       	subi	r18, 0xFF	; 255
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	2c 15       	cp	r18, r12
    2b74:	3d 05       	cpc	r19, r13
    2b76:	c8 f4       	brcc	.+50     	; 0x2baa <main+0x694>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2b78:	24 85       	ldd	r18, Z+12	; 0x0c
    2b7a:	35 85       	ldd	r19, Z+13	; 0x0d
    2b7c:	27 50       	subi	r18, 0x07	; 7
    2b7e:	31 09       	sbc	r19, r1
    2b80:	27 30       	cpi	r18, 0x07	; 7
    2b82:	31 05       	cpc	r19, r1
    2b84:	90 f4       	brcc	.+36     	; 0x2baa <main+0x694>
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:79
        if (!MATCH_SPACE(results.rawbuf[offset], SONY_HEADER_SPACE)) {
            break;
        }
        offset++;

        if (MATCH_MARK(results.rawbuf[offset], SONY_ONE_MARK)) {
    2b86:	26 85       	ldd	r18, Z+14	; 0x0e
    2b88:	37 85       	ldd	r19, Z+15	; 0x0f
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2b8a:	23 31       	cpi	r18, 0x13	; 19
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	14 f4       	brge	.+4      	; 0x2b94 <main+0x67e>
    2b90:	0c 94 ad 20 	jmp	0x415a	; 0x415a <main+0x1c44>
    2b94:	22 32       	cpi	r18, 0x22	; 34
    2b96:	31 05       	cpc	r19, r1
    2b98:	ac f4       	brge	.+42     	; 0x2bc4 <main+0x6ae>
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:80
            data = (data << 1) | 1;
    2b9a:	44 0f       	add	r20, r20
    2b9c:	55 1f       	adc	r21, r21
    2b9e:	66 1f       	adc	r22, r22
    2ba0:	77 1f       	adc	r23, r23
    2ba2:	41 60       	ori	r20, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:86
        } else if (MATCH_MARK(results.rawbuf[offset], SONY_ZERO_MARK)) {
            data = (data << 1) | 0;
        } else {
            return false;
        }
        offset++;
    2ba4:	02 96       	adiw	r24, 0x02	; 2
    2ba6:	34 96       	adiw	r30, 0x04	; 4
    2ba8:	e1 cf       	rjmp	.-62     	; 0x2b6c <main+0x656>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:90
    }

    // Success
    results.bits = (offset - 1) / 2;
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <irrecv+0x9>
    2bb4:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:91
    if (results.bits < 12) {
    2bb8:	0c 97       	sbiw	r24, 0x0c	; 12
    2bba:	e0 f5       	brcc	.+120    	; 0x2c34 <main+0x71e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:92
        results.bits = 0;
    2bbc:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    2bc0:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:101
    results.decode_type = SONY;
    return true;
}
bool IRrecv::decodeSony(decode_results *aResults) {
    bool aReturnValue = decodeSony();
    *aResults = results;
    2bc4:	82 e1       	ldi	r24, 0x12	; 18
    2bc6:	e2 e2       	ldi	r30, 0x22	; 34
    2bc8:	f5 e0       	ldi	r31, 0x05	; 5
    2bca:	a3 ef       	ldi	r26, 0xF3	; 243
    2bcc:	b2 e0       	ldi	r27, 0x02	; 2
    2bce:	01 90       	ld	r0, Z+
    2bd0:	0d 92       	st	X+, r0
    2bd2:	8a 95       	dec	r24
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <main+0x6b8>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:538
    }
#endif

#if DECODE_SONY
    DBG_PRINTLN("Attempting Sony decode");
    if (decodeSony(aResults)) {
    2bd6:	f1 10       	cpse	r15, r1
    2bd8:	34 c7       	rjmp	.+3688   	; 0x3a42 <main+0x152c>
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:28
#if DECODE_SANYO
bool IRrecv::decodeSanyo() {
    long data = 0;
    unsigned int offset = 0;  // Skip first space  <-- CHECK THIS!

    if (results.rawlen < (2 * SANYO_BITS) + 2) {
    2bda:	9a e1       	ldi	r25, 0x1A	; 26
    2bdc:	c9 16       	cp	r12, r25
    2bde:	d1 04       	cpc	r13, r1
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <main+0x6ce>
    2be2:	7c c0       	rjmp	.+248    	; 0x2cdc <main+0x7c6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:41
	Serial.println( "test against:");
	Serial.println(SANYO_DOUBLE_SPACE_USECS);
#endif

// Initial space
    if ((results.rawbuf[offset] * MICROS_PER_TICK) < SANYO_DOUBLE_SPACE_USECS) {
    2be4:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <irparams+0x8>
    2be8:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <irparams+0x9>
    2bec:	42 e3       	ldi	r20, 0x32	; 50
    2bee:	42 9f       	mul	r20, r18
    2bf0:	c0 01       	movw	r24, r0
    2bf2:	43 9f       	mul	r20, r19
    2bf4:	90 0d       	add	r25, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	80 32       	cpi	r24, 0x20	; 32
    2bfa:	93 40       	sbci	r25, 0x03	; 3
    2bfc:	30 f5       	brcc	.+76     	; 0x2c4a <main+0x734>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:43
        //Serial.print("IR Gap found: ");
        results.bits = 0;
    2bfe:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    2c02:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:44
        results.value = REPEAT;
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	9f ef       	ldi	r25, 0xFF	; 255
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    2c10:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    2c14:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    2c18:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:45
        results.isRepeat = true;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:87
        results.bits = 0;
        return false;
    }

    results.value = data;
    results.decode_type = SANYO;
    2c22:	80 e1       	ldi	r24, 0x10	; 16
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2c2a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:88
    return true;
    2c2e:	ff 24       	eor	r15, r15
    2c30:	f3 94       	inc	r15
    2c32:	54 c0       	rjmp	.+168    	; 0x2cdc <main+0x7c6>
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:95
    results.bits = (offset - 1) / 2;
    if (results.bits < 12) {
        results.bits = 0;
        return false;
    }
    results.value = data;
    2c34:	40 93 26 05 	sts	0x0526, r20	; 0x800526 <irrecv+0x4>
    2c38:	50 93 27 05 	sts	0x0527, r21	; 0x800527 <irrecv+0x5>
    2c3c:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <irrecv+0x6>
    2c40:	70 93 29 05 	sts	0x0529, r23	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:96
    results.decode_type = SONY;
    2c44:	83 e1       	ldi	r24, 0x13	; 19
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	c1 ce       	rjmp	.-638    	; 0x29cc <main+0x4b6>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    2c4a:	c1 01       	movw	r24, r2
    2c4c:	c5 97       	sbiw	r24, 0x35	; 53
    2c4e:	87 97       	sbiw	r24, 0x27	; 39
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <main+0x73e>
    2c52:	44 c0       	rjmp	.+136    	; 0x2cdc <main+0x7c6>
    2c54:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <irparams+0xc>
    2c58:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <irparams+0xd>
    2c5c:	c5 97       	sbiw	r24, 0x35	; 53
    2c5e:	87 97       	sbiw	r24, 0x27	; 39
    2c60:	e8 f5       	brcc	.+122    	; 0x2cdc <main+0x7c6>
    2c62:	ef e4       	ldi	r30, 0x4F	; 79
    2c64:	f4 e0       	ldi	r31, 0x04	; 4
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:61

    // Skip Second Mark
    if (!MATCH_MARK(results.rawbuf[offset], SANYO_HEADER_MARK)) {
        return false;
    }
    offset++;
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:25
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
bool IRrecv::decodeSanyo() {
    long data = 0;
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	ba 01       	movw	r22, r20
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:63
    if (!MATCH_MARK(results.rawbuf[offset], SANYO_HEADER_MARK)) {
        return false;
    }
    offset++;

    while (offset + 1 < irparams.rawlen) {
    2c70:	9c 01       	movw	r18, r24
    2c72:	2f 5f       	subi	r18, 0xFF	; 255
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	2c 15       	cp	r18, r12
    2c78:	3d 05       	cpc	r19, r13
    2c7a:	10 f5       	brcc	.+68     	; 0x2cc0 <main+0x7aa>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2c7c:	26 85       	ldd	r18, Z+14	; 0x0e
    2c7e:	37 85       	ldd	r19, Z+15	; 0x0f
    2c80:	2c 50       	subi	r18, 0x0C	; 12
    2c82:	31 09       	sbc	r19, r1
    2c84:	2b 30       	cpi	r18, 0x0B	; 11
    2c86:	31 05       	cpc	r19, r1
    2c88:	d8 f4       	brcc	.+54     	; 0x2cc0 <main+0x7aa>
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:69
        if (!MATCH_SPACE(results.rawbuf[offset], SANYO_HEADER_SPACE)) {
            break;
        }
        offset++;

        if (MATCH_MARK(results.rawbuf[offset], SANYO_ONE_MARK)) {
    2c8a:	20 89       	ldd	r18, Z+16	; 0x10
    2c8c:	31 89       	ldd	r19, Z+17	; 0x11
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2c8e:	25 32       	cpi	r18, 0x25	; 37
    2c90:	31 05       	cpc	r19, r1
    2c92:	5c f0       	brlt	.+22     	; 0x2caa <main+0x794>
    2c94:	20 34       	cpi	r18, 0x40	; 64
    2c96:	31 05       	cpc	r19, r1
    2c98:	0c f5       	brge	.+66     	; 0x2cdc <main+0x7c6>
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:70
            data = (data << 1) | 1;
    2c9a:	44 0f       	add	r20, r20
    2c9c:	55 1f       	adc	r21, r21
    2c9e:	66 1f       	adc	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	41 60       	ori	r20, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:76
        } else if (MATCH_MARK(results.rawbuf[offset], SANYO_ZERO_MARK)) {
            data = (data << 1) | 0;
        } else {
            return false;
        }
        offset++;
    2ca4:	02 96       	adiw	r24, 0x02	; 2
    2ca6:	34 96       	adiw	r30, 0x04	; 4
    2ca8:	e3 cf       	rjmp	.-58     	; 0x2c70 <main+0x75a>
MATCH_MARK():
    2caa:	2b 30       	cpi	r18, 0x0B	; 11
    2cac:	31 05       	cpc	r19, r1
    2cae:	b4 f0       	brlt	.+44     	; 0x2cdc <main+0x7c6>
    2cb0:	26 31       	cpi	r18, 0x16	; 22
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	9c f4       	brge	.+38     	; 0x2cdc <main+0x7c6>
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:72
        offset++;

        if (MATCH_MARK(results.rawbuf[offset], SANYO_ONE_MARK)) {
            data = (data << 1) | 1;
        } else if (MATCH_MARK(results.rawbuf[offset], SANYO_ZERO_MARK)) {
            data = (data << 1) | 0;
    2cb6:	44 0f       	add	r20, r20
    2cb8:	55 1f       	adc	r21, r21
    2cba:	66 1f       	adc	r22, r22
    2cbc:	77 1f       	adc	r23, r23
    2cbe:	f2 cf       	rjmp	.-28     	; 0x2ca4 <main+0x78e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:80
        }
        offset++;
    }

    // Success
    results.bits = (offset - 1) / 2;
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	96 95       	lsr	r25
    2cc4:	87 95       	ror	r24
    2cc6:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <irrecv+0x9>
    2cca:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:81
    if (results.bits < 12) {
    2cce:	0c 97       	sbiw	r24, 0x0c	; 12
    2cd0:	08 f0       	brcs	.+2      	; 0x2cd4 <main+0x7be>
    2cd2:	c6 c0       	rjmp	.+396    	; 0x2e60 <main+0x94a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:82
        results.bits = 0;
    2cd4:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    2cd8:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:92
    results.decode_type = SANYO;
    return true;
}
bool IRrecv::decodeSanyo(decode_results *aResults) {
    bool aReturnValue = decodeSanyo();
    *aResults = results;
    2cdc:	82 e1       	ldi	r24, 0x12	; 18
    2cde:	e2 e2       	ldi	r30, 0x22	; 34
    2ce0:	f5 e0       	ldi	r31, 0x05	; 5
    2ce2:	a3 ef       	ldi	r26, 0xF3	; 243
    2ce4:	b2 e0       	ldi	r27, 0x02	; 2
    2ce6:	01 90       	ld	r0, Z+
    2ce8:	0d 92       	st	X+, r0
    2cea:	8a 95       	dec	r24
    2cec:	e1 f7       	brne	.-8      	; 0x2ce6 <main+0x7d0>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:545
    }
#endif

#if DECODE_SANYO
    DBG_PRINTLN("Attempting Sanyo decode");
    if (decodeSanyo(aResults)) {
    2cee:	f1 10       	cpse	r15, r1
    2cf0:	a8 c6       	rjmp	.+3408   	; 0x3a42 <main+0x152c>
decodeMitsubishi():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:29
//+=============================================================================
#if DECODE_MITSUBISHI
bool IRrecv::decodeMitsubishi() {
    // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
    long data = 0;
    if (results.rawlen < 2 * MITSUBISHI_BITS + 2)
    2cf2:	92 e2       	ldi	r25, 0x22	; 34
    2cf4:	c9 16       	cp	r12, r25
    2cf6:	d1 04       	cpc	r13, r1
    2cf8:	08 f4       	brcc	.+2      	; 0x2cfc <main+0x7e6>
    2cfa:	47 c0       	rjmp	.+142    	; 0x2d8a <main+0x874>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    2cfc:	a6 e0       	ldi	r26, 0x06	; 6
    2cfe:	2a 1a       	sub	r2, r26
    2d00:	31 08       	sbc	r3, r1
    2d02:	b7 e0       	ldi	r27, 0x07	; 7
    2d04:	2b 16       	cp	r2, r27
    2d06:	31 04       	cpc	r3, r1
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <main+0x7f6>
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <main+0x874>
    2d0c:	ef e4       	ldi	r30, 0x4F	; 79
    2d0e:	ae 2e       	mov	r10, r30
    2d10:	e4 e0       	ldi	r30, 0x04	; 4
    2d12:	be 2e       	mov	r11, r30
    2d14:	43 e0       	ldi	r20, 0x03	; 3
    2d16:	50 e0       	ldi	r21, 0x00	; 0
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:28

//+=============================================================================
#if DECODE_MITSUBISHI
bool IRrecv::decodeMitsubishi() {
    // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
    long data = 0;
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	9a 01       	movw	r18, r20
    2d20:	21 50       	subi	r18, 0x01	; 1
    2d22:	31 09       	sbc	r19, r1
decodeMitsubishi():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:61
    // Initial Space
    if (!MATCH_MARK(results.rawbuf[offset], MITSUBISHI_HEADER_SPACE))
        return false;
    offset++;

    while (offset + 1 < irparams.rawlen) {
    2d24:	4c 15       	cp	r20, r12
    2d26:	5d 05       	cpc	r21, r13
    2d28:	00 f5       	brcc	.+64     	; 0x2d6a <main+0x854>
    2d2a:	85 01       	movw	r16, r10
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:62
        if (MATCH_MARK(results.rawbuf[offset], MITSUBISHI_ONE_MARK))
    2d2c:	f5 01       	movw	r30, r10
    2d2e:	24 85       	ldd	r18, Z+12	; 0x0c
    2d30:	35 85       	ldd	r19, Z+13	; 0x0d
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    2d32:	2e 31       	cpi	r18, 0x1E	; 30
    2d34:	31 05       	cpc	r19, r1
    2d36:	0c f4       	brge	.+2      	; 0x2d3a <main+0x824>
    2d38:	9e c0       	rjmp	.+316    	; 0x2e76 <main+0x960>
    2d3a:	25 33       	cpi	r18, 0x35	; 53
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	2c f5       	brge	.+74     	; 0x2d8a <main+0x874>
decodeMitsubishi():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:63
            data = (data << 1) | 1;
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	aa 1f       	adc	r26, r26
    2d46:	bb 1f       	adc	r27, r27
    2d48:	81 60       	ori	r24, 0x01	; 1
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	6e 5f       	subi	r22, 0xFE	; 254
    2d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d50:	f4 e0       	ldi	r31, 0x04	; 4
    2d52:	af 0e       	add	r10, r31
    2d54:	b1 1c       	adc	r11, r1
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2d56:	f8 01       	movw	r30, r16
    2d58:	26 85       	ldd	r18, Z+14	; 0x0e
    2d5a:	37 85       	ldd	r19, Z+15	; 0x0f
    2d5c:	23 50       	subi	r18, 0x03	; 3
    2d5e:	31 09       	sbc	r19, r1
    2d60:	25 30       	cpi	r18, 0x05	; 5
    2d62:	31 05       	cpc	r19, r1
    2d64:	08 f4       	brcc	.+2      	; 0x2d68 <main+0x852>
    2d66:	85 c0       	rjmp	.+266    	; 0x2e72 <main+0x95c>
    2d68:	9a 01       	movw	r18, r20
decodeMitsubishi():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:76
            break;
        offset++;
    }

    // Success
    results.bits = (offset - 1) / 2;
    2d6a:	21 50       	subi	r18, 0x01	; 1
    2d6c:	31 09       	sbc	r19, r1
    2d6e:	36 95       	lsr	r19
    2d70:	27 95       	ror	r18
    2d72:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    2d76:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:77
    if (results.bits < MITSUBISHI_BITS) {
    2d7a:	20 31       	cpi	r18, 0x10	; 16
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	08 f0       	brcs	.+2      	; 0x2d82 <main+0x86c>
    2d80:	87 c0       	rjmp	.+270    	; 0x2e90 <main+0x97a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:78
        results.bits = 0;
    2d82:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    2d86:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:88
    results.decode_type = MITSUBISHI;
    return true;
}
bool IRrecv::decodeMitsubishi(decode_results *aResults) {
    bool aReturnValue = decodeMitsubishi();
    *aResults = results;
    2d8a:	82 e1       	ldi	r24, 0x12	; 18
    2d8c:	e2 e2       	ldi	r30, 0x22	; 34
    2d8e:	f5 e0       	ldi	r31, 0x05	; 5
    2d90:	a3 ef       	ldi	r26, 0xF3	; 243
    2d92:	b2 e0       	ldi	r27, 0x02	; 2
    2d94:	01 90       	ld	r0, Z+
    2d96:	0d 92       	st	X+, r0
    2d98:	8a 95       	dec	r24
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <main+0x87e>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:552
    }
#endif

#if DECODE_MITSUBISHI
    DBG_PRINTLN("Attempting Mitsubishi decode");
    if (decodeMitsubishi(aResults)) {
    2d9c:	f1 10       	cpse	r15, r1
    2d9e:	51 c6       	rjmp	.+3234   	; 0x3a42 <main+0x152c>
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:158
//+=============================================================================
#if DECODE_RC5
bool IRrecv::decodeRC5() {
    int nbits;
    long data = 0;
    int used = 0;
    2da0:	1c 82       	std	Y+4, r1	; 0x04
    2da2:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:159
    unsigned int offset = 1;  // Skip gap space
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:161

    if (results.rawlen < MIN_RC5_SAMPLES + 2) {
    2dac:	fd e0       	ldi	r31, 0x0D	; 13
    2dae:	cf 16       	cp	r12, r31
    2db0:	d1 04       	cpc	r13, r1
    2db2:	08 f4       	brcc	.+2      	; 0x2db6 <main+0x8a0>
    2db4:	9b c0       	rjmp	.+310    	; 0x2eec <main+0x9d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:166
        return false;
    }

    // Get start bits
    if (getRClevel(&results, &offset, &used, RC5_T1) != MARK) {
    2db6:	49 e7       	ldi	r20, 0x79	; 121
    2db8:	53 e0       	ldi	r21, 0x03	; 3
    2dba:	be 01       	movw	r22, r28
    2dbc:	6d 5f       	subi	r22, 0xFD	; 253
    2dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2dc8:	89 2b       	or	r24, r25
    2dca:	09 f0       	breq	.+2      	; 0x2dce <main+0x8b8>
    2dcc:	8f c0       	rjmp	.+286    	; 0x2eec <main+0x9d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:169
        return false;
    }
    if (getRClevel(&results, &offset, &used, RC5_T1) != SPACE) {
    2dce:	49 e7       	ldi	r20, 0x79	; 121
    2dd0:	53 e0       	ldi	r21, 0x03	; 3
    2dd2:	be 01       	movw	r22, r28
    2dd4:	6d 5f       	subi	r22, 0xFD	; 253
    2dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd8:	ce 01       	movw	r24, r28
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <main+0x8d0>
    2de4:	83 c0       	rjmp	.+262    	; 0x2eec <main+0x9d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:172
        return false;
    }
    if (getRClevel(&results, &offset, &used, RC5_T1) != MARK) {
    2de6:	49 e7       	ldi	r20, 0x79	; 121
    2de8:	53 e0       	ldi	r21, 0x03	; 3
    2dea:	be 01       	movw	r22, r28
    2dec:	6d 5f       	subi	r22, 0xFD	; 253
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	ce 01       	movw	r24, r28
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2df8:	8c 01       	movw	r16, r24
    2dfa:	89 2b       	or	r24, r25
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <main+0x8ea>
    2dfe:	76 c0       	rjmp	.+236    	; 0x2eec <main+0x9d6>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:157

//+=============================================================================
#if DECODE_RC5
bool IRrecv::decodeRC5() {
    int nbits;
    long data = 0;
    2e00:	81 2c       	mov	r8, r1
    2e02:	91 2c       	mov	r9, r1
    2e04:	54 01       	movw	r10, r8
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:179
    }

    /*
     * Get data bits - MSB first
     */
    for (nbits = 0; offset < results.rawlen; nbits++) {
    2e06:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <irrecv+0xf>
    2e0a:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <irrecv+0x10>
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	82 17       	cp	r24, r18
    2e14:	93 07       	cpc	r25, r19
    2e16:	08 f0       	brcs	.+2      	; 0x2e1a <main+0x904>
    2e18:	55 c0       	rjmp	.+170    	; 0x2ec4 <main+0x9ae>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:180
        int levelA = getRClevel(&results, &offset, &used, RC5_T1);
    2e1a:	49 e7       	ldi	r20, 0x79	; 121
    2e1c:	53 e0       	ldi	r21, 0x03	; 3
    2e1e:	be 01       	movw	r22, r28
    2e20:	6d 5f       	subi	r22, 0xFD	; 253
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	ce 01       	movw	r24, r28
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2e2c:	6c 01       	movw	r12, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:181
        int levelB = getRClevel(&results, &offset, &used, RC5_T1);
    2e2e:	49 e7       	ldi	r20, 0x79	; 121
    2e30:	53 e0       	ldi	r21, 0x03	; 3
    2e32:	be 01       	movw	r22, r28
    2e34:	6d 5f       	subi	r22, 0xFD	; 253
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	ce 01       	movw	r24, r28
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:183

        if ((levelA == SPACE) && (levelB == MARK)) {
    2e40:	21 e0       	ldi	r18, 0x01	; 1
    2e42:	c2 16       	cp	r12, r18
    2e44:	d1 04       	cpc	r13, r1
    2e46:	a9 f5       	brne	.+106    	; 0x2eb2 <main+0x99c>
    2e48:	89 2b       	or	r24, r25
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <main+0x938>
    2e4c:	4f c0       	rjmp	.+158    	; 0x2eec <main+0x9d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:184
            data = (data << 1) | 1;
    2e4e:	88 0c       	add	r8, r8
    2e50:	99 1c       	adc	r9, r9
    2e52:	aa 1c       	adc	r10, r10
    2e54:	bb 1c       	adc	r11, r11
    2e56:	68 94       	set
    2e58:	80 f8       	bld	r8, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:179
    }

    /*
     * Get data bits - MSB first
     */
    for (nbits = 0; offset < results.rawlen; nbits++) {
    2e5a:	0f 5f       	subi	r16, 0xFF	; 255
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	d3 cf       	rjmp	.-90     	; 0x2e06 <main+0x8f0>
decodeSanyo():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sanyo.cpp:86
    if (results.bits < 12) {
        results.bits = 0;
        return false;
    }

    results.value = data;
    2e60:	40 93 26 05 	sts	0x0526, r20	; 0x800526 <irrecv+0x4>
    2e64:	50 93 27 05 	sts	0x0527, r21	; 0x800527 <irrecv+0x5>
    2e68:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <irrecv+0x6>
    2e6c:	70 93 29 05 	sts	0x0529, r23	; 0x800529 <irrecv+0x7>
    2e70:	d8 ce       	rjmp	.-592    	; 0x2c22 <main+0x70c>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    2e72:	ab 01       	movw	r20, r22
    2e74:	54 cf       	rjmp	.-344    	; 0x2d1e <main+0x808>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    2e76:	2c 30       	cpi	r18, 0x0C	; 12
    2e78:	31 05       	cpc	r19, r1
    2e7a:	0c f4       	brge	.+2      	; 0x2e7e <main+0x968>
    2e7c:	86 cf       	rjmp	.-244    	; 0x2d8a <main+0x874>
    2e7e:	27 31       	cpi	r18, 0x17	; 23
    2e80:	31 05       	cpc	r19, r1
    2e82:	0c f0       	brlt	.+2      	; 0x2e86 <main+0x970>
    2e84:	82 cf       	rjmp	.-252    	; 0x2d8a <main+0x874>
decodeMitsubishi():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:65

    while (offset + 1 < irparams.rawlen) {
        if (MATCH_MARK(results.rawbuf[offset], MITSUBISHI_ONE_MARK))
            data = (data << 1) | 1;
        else if (MATCH_MARK(results.rawbuf[offset], MITSUBISHI_ZERO_MARK))
            data <<= 1;
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	aa 1f       	adc	r26, r26
    2e8c:	bb 1f       	adc	r27, r27
    2e8e:	5d cf       	rjmp	.-326    	; 0x2d4a <main+0x834>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:82
    if (results.bits < MITSUBISHI_BITS) {
        results.bits = 0;
        return false;
    }

    results.value = data;
    2e90:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    2e94:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    2e98:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    2e9c:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:83
    results.decode_type = MITSUBISHI;
    2ea0:	89 e0       	ldi	r24, 0x09	; 9
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2ea8:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Mitsubishi.cpp:84
    return true;
    2eac:	ff 24       	eor	r15, r15
    2eae:	f3 94       	inc	r15
    2eb0:	6c cf       	rjmp	.-296    	; 0x2d8a <main+0x874>
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:185
        int levelA = getRClevel(&results, &offset, &used, RC5_T1);
        int levelB = getRClevel(&results, &offset, &used, RC5_T1);

        if ((levelA == SPACE) && (levelB == MARK)) {
            data = (data << 1) | 1;
        } else if ((levelA == MARK) && (levelB == SPACE)) {
    2eb2:	cd 28       	or	r12, r13
    2eb4:	d9 f4       	brne	.+54     	; 0x2eec <main+0x9d6>
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	c9 f4       	brne	.+50     	; 0x2eec <main+0x9d6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:186
            data = (data << 1) | 0;
    2eba:	88 0c       	add	r8, r8
    2ebc:	99 1c       	adc	r9, r9
    2ebe:	aa 1c       	adc	r10, r10
    2ec0:	bb 1c       	adc	r11, r11
    2ec2:	cb cf       	rjmp	.-106    	; 0x2e5a <main+0x944>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:193
            return false;
        }
    }

    // Success
    results.bits = nbits;
    2ec4:	10 93 2b 05 	sts	0x052B, r17	; 0x80052b <irrecv+0x9>
    2ec8:	00 93 2a 05 	sts	0x052A, r16	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:194
    results.value = data;
    2ecc:	80 92 26 05 	sts	0x0526, r8	; 0x800526 <irrecv+0x4>
    2ed0:	90 92 27 05 	sts	0x0527, r9	; 0x800527 <irrecv+0x5>
    2ed4:	a0 92 28 05 	sts	0x0528, r10	; 0x800528 <irrecv+0x6>
    2ed8:	b0 92 29 05 	sts	0x0529, r11	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:195
    results.decode_type = RC5;
    2edc:	8d e0       	ldi	r24, 0x0D	; 13
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    2ee4:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:196
    return true;
    2ee8:	ff 24       	eor	r15, r15
    2eea:	f3 94       	inc	r15
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:200
}
bool IRrecv::decodeRC5(decode_results *aResults) {
    bool aReturnValue = decodeRC5();
    *aResults = results;
    2eec:	82 e1       	ldi	r24, 0x12	; 18
    2eee:	e2 e2       	ldi	r30, 0x22	; 34
    2ef0:	f5 e0       	ldi	r31, 0x05	; 5
    2ef2:	a3 ef       	ldi	r26, 0xF3	; 243
    2ef4:	b2 e0       	ldi	r27, 0x02	; 2
    2ef6:	01 90       	ld	r0, Z+
    2ef8:	0d 92       	st	X+, r0
    2efa:	8a 95       	dec	r24
    2efc:	e1 f7       	brne	.-8      	; 0x2ef6 <main+0x9e0>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:559
    }
#endif

#if DECODE_RC5
    DBG_PRINTLN("Attempting RC5 decode");
    if (decodeRC5(aResults)) {
    2efe:	f1 10       	cpse	r15, r1
    2f00:	a0 c5       	rjmp	.+2880   	; 0x3a42 <main+0x152c>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:255
//+=============================================================================
#if DECODE_RC6
bool IRrecv::decodeRC6() {
    int nbits;
    long data = 0;
    int used = 0;
    2f02:	1c 82       	std	Y+4, r1	; 0x04
    2f04:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:256
    unsigned int offset = 1;  // Skip first space
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:258

    if (results.rawlen < MIN_RC6_SAMPLES) {
    2f0e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <irrecv+0xf>
    2f12:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <irrecv+0x10>
    2f16:	89 2b       	or	r24, r25
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <main+0xa06>
    2f1a:	80 c0       	rjmp	.+256    	; 0x301c <main+0xb06>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:263
        return false;
    }

// Initial mark
    if (!MATCH_MARK(results.rawbuf[offset], RC6_HEADER_MARK)) {
    2f1c:	e0 91 2f 05 	lds	r30, 0x052F	; 0x80052f <irrecv+0xd>
    2f20:	f0 91 30 05 	lds	r31, 0x0530	; 0x800530 <irrecv+0xe>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	89 97       	sbiw	r24, 0x29	; 41
    2f2a:	4e 97       	sbiw	r24, 0x1e	; 30
    2f2c:	08 f0       	brcs	.+2      	; 0x2f30 <main+0xa1a>
    2f2e:	76 c0       	rjmp	.+236    	; 0x301c <main+0xb06>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:266
        return false;
    }
    offset++;
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    2f38:	84 81       	ldd	r24, Z+4	; 0x04
    2f3a:	95 81       	ldd	r25, Z+5	; 0x05
    2f3c:	0b 97       	sbiw	r24, 0x0b	; 11
    2f3e:	0a 97       	sbiw	r24, 0x0a	; 10
    2f40:	08 f0       	brcs	.+2      	; 0x2f44 <main+0xa2e>
    2f42:	6c c0       	rjmp	.+216    	; 0x301c <main+0xb06>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:271

    if (!MATCH_SPACE(results.rawbuf[offset], RC6_HEADER_SPACE)) {
        return false;
    }
    offset++;
    2f44:	83 e0       	ldi	r24, 0x03	; 3
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:274

// Get start bit (1)
    if (getRClevel(&results, &offset, &used, RC6_T1) != MARK) {
    2f4c:	4c eb       	ldi	r20, 0xBC	; 188
    2f4e:	51 e0       	ldi	r21, 0x01	; 1
    2f50:	be 01       	movw	r22, r28
    2f52:	6d 5f       	subi	r22, 0xFD	; 253
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	ce 01       	movw	r24, r28
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2f5e:	6c 01       	movw	r12, r24
    2f60:	89 2b       	or	r24, r25
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <main+0xa50>
    2f64:	5b c0       	rjmp	.+182    	; 0x301c <main+0xb06>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:277
        return false;
    }
    if (getRClevel(&results, &offset, &used, RC6_T1) != SPACE) {
    2f66:	4c eb       	ldi	r20, 0xBC	; 188
    2f68:	51 e0       	ldi	r21, 0x01	; 1
    2f6a:	be 01       	movw	r22, r28
    2f6c:	6d 5f       	subi	r22, 0xFD	; 253
    2f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f70:	ce 01       	movw	r24, r28
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <main+0xa68>
    2f7c:	4f c0       	rjmp	.+158    	; 0x301c <main+0xb06>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:254

//+=============================================================================
#if DECODE_RC6
bool IRrecv::decodeRC6() {
    int nbits;
    long data = 0;
    2f7e:	41 2c       	mov	r4, r1
    2f80:	51 2c       	mov	r5, r1
    2f82:	32 01       	movw	r6, r4
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:281
    }
    if (getRClevel(&results, &offset, &used, RC6_T1) != SPACE) {
        return false;
    }

    for (nbits = 0; offset < results.rawlen; nbits++) {
    2f84:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <irrecv+0xf>
    2f88:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <irrecv+0x10>
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	82 17       	cp	r24, r18
    2f92:	93 07       	cpc	r25, r19
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <main+0xa82>
    2f96:	95 c2       	rjmp	.+1322   	; 0x34c2 <main+0xfac>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:284
        int levelA, levelB;  // Next two levels

        levelA = getRClevel(&results, &offset, &used, RC6_T1);
    2f98:	4c eb       	ldi	r20, 0xBC	; 188
    2f9a:	51 e0       	ldi	r21, 0x01	; 1
    2f9c:	be 01       	movw	r22, r28
    2f9e:	6d 5f       	subi	r22, 0xFD	; 253
    2fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2faa:	4c 01       	movw	r8, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:285
        if (nbits == 3) {
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	c9 16       	cp	r12, r25
    2fb0:	d1 04       	cpc	r13, r1
    2fb2:	41 f1       	breq	.+80     	; 0x3004 <main+0xaee>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:292
            if (levelA != getRClevel(&results, &offset, &used, RC6_T1)) {
                return false;
            }
        }

        levelB = getRClevel(&results, &offset, &used, RC6_T1);
    2fb4:	4c eb       	ldi	r20, 0xBC	; 188
    2fb6:	51 e0       	ldi	r21, 0x01	; 1
    2fb8:	be 01       	movw	r22, r28
    2fba:	6d 5f       	subi	r22, 0xFD	; 253
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2fc6:	5c 01       	movw	r10, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:293
        if (nbits == 3) {
    2fc8:	a3 e0       	ldi	r26, 0x03	; 3
    2fca:	ca 16       	cp	r12, r26
    2fcc:	d1 04       	cpc	r13, r1
    2fce:	61 f4       	brne	.+24     	; 0x2fe8 <main+0xad2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:295
            // T bit is double wide; make sure second half matches
            if (levelB != getRClevel(&results, &offset, &used, RC6_T1)) {
    2fd0:	4c eb       	ldi	r20, 0xBC	; 188
    2fd2:	51 e0       	ldi	r21, 0x01	; 1
    2fd4:	be 01       	movw	r22, r28
    2fd6:	6d 5f       	subi	r22, 0xFD	; 253
    2fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    2fe2:	a8 16       	cp	r10, r24
    2fe4:	b9 06       	cpc	r11, r25
    2fe6:	d1 f4       	brne	.+52     	; 0x301c <main+0xb06>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:300
                return false;
            }
        }

        if ((levelA == MARK) && (levelB == SPACE)) {
    2fe8:	81 14       	cp	r8, r1
    2fea:	91 04       	cpc	r9, r1
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <main+0xada>
    2fee:	5b c2       	rjmp	.+1206   	; 0x34a6 <main+0xf90>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:302
            data = (data << 1) | 1;  // inverted compared to RC5
        } else if ((levelA == SPACE) && (levelB == MARK)) {
    2ff0:	8a 94       	dec	r8
    2ff2:	89 28       	or	r8, r9
    2ff4:	99 f4       	brne	.+38     	; 0x301c <main+0xb06>
    2ff6:	ab 28       	or	r10, r11
    2ff8:	89 f4       	brne	.+34     	; 0x301c <main+0xb06>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:303
            data = (data << 1) | 0;
    2ffa:	44 0c       	add	r4, r4
    2ffc:	55 1c       	adc	r5, r5
    2ffe:	66 1c       	adc	r6, r6
    3000:	77 1c       	adc	r7, r7
    3002:	5b c2       	rjmp	.+1206   	; 0x34ba <main+0xfa4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:287
        int levelA, levelB;  // Next two levels

        levelA = getRClevel(&results, &offset, &used, RC6_T1);
        if (nbits == 3) {
            // T bit is double wide; make sure second half matches
            if (levelA != getRClevel(&results, &offset, &used, RC6_T1)) {
    3004:	4c eb       	ldi	r20, 0xBC	; 188
    3006:	51 e0       	ldi	r21, 0x01	; 1
    3008:	be 01       	movw	r22, r28
    300a:	6d 5f       	subi	r22, 0xFD	; 253
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	ce 01       	movw	r24, r28
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	0e 94 e7 01 	call	0x3ce	; 0x3ce <getRClevel(decode_results*, unsigned int*, int*, int) [clone .constprop.64]>
    3016:	88 16       	cp	r8, r24
    3018:	99 06       	cpc	r9, r25
    301a:	61 f2       	breq	.-104    	; 0x2fb4 <main+0xa9e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:317
    results.decode_type = RC6;
    return true;
}
bool IRrecv::decodeRC6(decode_results *aResults) {
    bool aReturnValue = decodeRC6();
    *aResults = results;
    301c:	82 e1       	ldi	r24, 0x12	; 18
    301e:	e2 e2       	ldi	r30, 0x22	; 34
    3020:	f5 e0       	ldi	r31, 0x05	; 5
    3022:	a3 ef       	ldi	r26, 0xF3	; 243
    3024:	b2 e0       	ldi	r27, 0x02	; 2
    3026:	01 90       	ld	r0, Z+
    3028:	0d 92       	st	X+, r0
    302a:	8a 95       	dec	r24
    302c:	e1 f7       	brne	.-8      	; 0x3026 <main+0xb10>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:566
    }
#endif

#if DECODE_RC6
    DBG_PRINTLN("Attempting RC6 decode");
    if (decodeRC6(aResults)) {
    302e:	f1 10       	cpse	r15, r1
    3030:	08 c5       	rjmp	.+2576   	; 0x3a42 <main+0x152c>
decodePanasonic():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:65
bool IRrecv::decodePanasonic() {
    unsigned long address = 0;
    unsigned long data = 0;
    int offset = 1;

    if (!MATCH_MARK(results.rawbuf[offset], PANASONIC_HEADER_MARK)) {
    3032:	c0 90 2f 05 	lds	r12, 0x052F	; 0x80052f <irrecv+0xd>
    3036:	d0 90 30 05 	lds	r13, 0x0530	; 0x800530 <irrecv+0xe>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    303a:	d6 01       	movw	r26, r12
    303c:	12 96       	adiw	r26, 0x02	; 2
    303e:	8d 91       	ld	r24, X+
    3040:	9c 91       	ld	r25, X
    3042:	13 97       	sbiw	r26, 0x03	; 3
    3044:	c5 97       	sbiw	r24, 0x35	; 53
    3046:	87 97       	sbiw	r24, 0x27	; 39
    3048:	98 f5       	brcc	.+102    	; 0x30b0 <main+0xb9a>
    304a:	14 96       	adiw	r26, 0x04	; 4
    304c:	8d 91       	ld	r24, X+
    304e:	9c 91       	ld	r25, X
    3050:	4b 97       	sbiw	r24, 0x1b	; 27
    3052:	45 97       	sbiw	r24, 0x15	; 21
    3054:	68 f5       	brcc	.+90     	; 0x30b0 <main+0xb9a>
decodePanasonic():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:74
    if (!MATCH_MARK(results.rawbuf[offset], PANASONIC_HEADER_SPACE)) {
        return false;
    }
    offset++;

    address = decodePulseDistanceData(PANASONIC_ADDRESS_BITS, offset, PANASONIC_BIT_MARK, PANASONIC_ONE_SPACE,
    3056:	00 e9       	ldi	r16, 0x90	; 144
    3058:	11 e0       	ldi	r17, 0x01	; 1
    305a:	2c ed       	ldi	r18, 0xDC	; 220
    305c:	34 e0       	ldi	r19, 0x04	; 4
    305e:	46 ef       	ldi	r20, 0xF6	; 246
    3060:	51 e0       	ldi	r21, 0x01	; 1
    3062:	63 e0       	ldi	r22, 0x03	; 3
    3064:	80 e1       	ldi	r24, 0x10	; 16
    3066:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
    306a:	4b 01       	movw	r8, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:76
    PANASONIC_ZERO_SPACE);
    data = decodePulseDistanceData(PANASONIC_DATA_BITS, offset + PANASONIC_ADDRESS_BITS, PANASONIC_BIT_MARK,
    306c:	2c ed       	ldi	r18, 0xDC	; 220
    306e:	34 e0       	ldi	r19, 0x04	; 4
    3070:	46 ef       	ldi	r20, 0xF6	; 246
    3072:	51 e0       	ldi	r21, 0x01	; 1
    3074:	63 e1       	ldi	r22, 0x13	; 19
    3076:	80 e2       	ldi	r24, 0x20	; 32
    3078:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:95
//            return false;
//        }
//        offset++;
//    }

    results.value = data;
    307c:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    3080:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    3084:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    3088:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:96
    results.address = address;
    308c:	90 92 25 05 	sts	0x0525, r9	; 0x800525 <irrecv+0x3>
    3090:	80 92 24 05 	sts	0x0524, r8	; 0x800524 <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:97
    results.decode_type = PANASONIC;
    3094:	8c e0       	ldi	r24, 0x0C	; 12
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    309c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:98
    results.bits = PANASONIC_BITS;
    30a0:	80 e3       	ldi	r24, 0x30	; 48
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <irrecv+0x9>
    30a8:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <irrecv+0x8>
    30ac:	ff 24       	eor	r15, r15
    30ae:	f3 94       	inc	r15
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Panasonic.cpp:104

    return true;
}
bool IRrecv::decodePanasonic(decode_results *aResults) {
    bool aReturnValue = decodePanasonic();
    *aResults = results;
    30b0:	82 e1       	ldi	r24, 0x12	; 18
    30b2:	e2 e2       	ldi	r30, 0x22	; 34
    30b4:	f5 e0       	ldi	r31, 0x05	; 5
    30b6:	a3 ef       	ldi	r26, 0xF3	; 243
    30b8:	b2 e0       	ldi	r27, 0x02	; 2
    30ba:	01 90       	ld	r0, Z+
    30bc:	0d 92       	st	X+, r0
    30be:	8a 95       	dec	r24
    30c0:	e1 f7       	brne	.-8      	; 0x30ba <main+0xba4>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:573
    }
#endif

#if DECODE_PANASONIC
    DBG_PRINTLN("Attempting Panasonic decode");
    if (decodePanasonic(aResults)) {
    30c2:	f1 10       	cpse	r15, r1
    30c4:	be c4       	rjmp	.+2428   	; 0x3a42 <main+0x152c>
decodeLG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:26
bool IRrecv::decodeLG() {
    long data = 0;
    int offset = 1; // Skip first space

    // Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1)
    30c6:	80 90 53 04 	lds	r8, 0x0453	; 0x800453 <irparams+0x4>
    30ca:	90 90 54 04 	lds	r9, 0x0454	; 0x800454 <irparams+0x5>
    30ce:	b9 e3       	ldi	r27, 0x39	; 57
    30d0:	8b 16       	cp	r8, r27
    30d2:	91 04       	cpc	r9, r1
    30d4:	b0 f1       	brcs	.+108    	; 0x3142 <main+0xc2c>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    30d6:	f6 01       	movw	r30, r12
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	8e 57       	subi	r24, 0x7E	; 126
    30de:	91 09       	sbc	r25, r1
    30e0:	88 35       	cpi	r24, 0x58	; 88
    30e2:	91 05       	cpc	r25, r1
    30e4:	70 f5       	brcc	.+92     	; 0x3142 <main+0xc2c>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    30e6:	84 81       	ldd	r24, Z+4	; 0x04
    30e8:	95 81       	ldd	r25, Z+5	; 0x05
    30ea:	cd 97       	sbiw	r24, 0x3d	; 61
    30ec:	8b 97       	sbiw	r24, 0x2b	; 43
    30ee:	48 f5       	brcc	.+82     	; 0x3142 <main+0xc2c>
decodeLG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:40
    if (!MATCH_SPACE(results.rawbuf[offset], LG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    data = decodePulseDistanceData(LG_BITS, offset, LG_BIT_MARK, LG_ONE_SPACE, LG_ZERO_SPACE);
    30f0:	06 e2       	ldi	r16, 0x26	; 38
    30f2:	12 e0       	ldi	r17, 0x02	; 2
    30f4:	20 e4       	ldi	r18, 0x40	; 64
    30f6:	36 e0       	ldi	r19, 0x06	; 6
    30f8:	48 e5       	ldi	r20, 0x58	; 88
    30fa:	52 e0       	ldi	r21, 0x02	; 2
    30fc:	63 e0       	ldi	r22, 0x03	; 3
    30fe:	8c e1       	ldi	r24, 0x1C	; 28
    3100:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    3104:	d6 01       	movw	r26, r12
    3106:	16 96       	adiw	r26, 0x06	; 6
    3108:	2d 91       	ld	r18, X+
    310a:	3c 91       	ld	r19, X
    310c:	2a 50       	subi	r18, 0x0A	; 10
    310e:	31 09       	sbc	r19, r1
    3110:	29 30       	cpi	r18, 0x09	; 9
    3112:	31 05       	cpc	r19, r1
    3114:	b0 f4       	brcc	.+44     	; 0x3142 <main+0xc2c>
decodeLG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:63
    if (!MATCH_MARK(results.rawbuf[offset], LG_BIT_MARK)) {
        return false;
    }

    // Success
    results.bits = LG_BITS;
    3116:	2c e1       	ldi	r18, 0x1C	; 28
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    311e:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:64
    results.value = data;
    3122:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    3126:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    312a:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    312e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:65
    results.decode_type = LG;
    3132:	87 e0       	ldi	r24, 0x07	; 7
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    313a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:66
    return true;
    313e:	ff 24       	eor	r15, r15
    3140:	f3 94       	inc	r15
decodeLG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_LG.cpp:70
}
bool IRrecv::decodeLG(decode_results *aResults) {
    bool aReturnValue = decodeLG();
    *aResults = results;
    3142:	82 e1       	ldi	r24, 0x12	; 18
    3144:	e2 e2       	ldi	r30, 0x22	; 34
    3146:	f5 e0       	ldi	r31, 0x05	; 5
    3148:	a3 ef       	ldi	r26, 0xF3	; 243
    314a:	b2 e0       	ldi	r27, 0x02	; 2
    314c:	01 90       	ld	r0, Z+
    314e:	0d 92       	st	X+, r0
    3150:	8a 95       	dec	r24
    3152:	e1 f7       	brne	.-8      	; 0x314c <main+0xc36>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:580
    }
#endif

#if DECODE_LG
    DBG_PRINTLN("Attempting LG decode");
    if (decodeLG(aResults)) {
    3154:	f1 10       	cpse	r15, r1
    3156:	75 c4       	rjmp	.+2282   	; 0x3a42 <main+0x152c>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:54
bool IRrecv::decodeJVC() {
    long data = 0;
    int offset = 1; // Skip first space

    // Check for repeat
    if ((results.rawlen - 1 == 33) && MATCH_MARK(results.rawbuf[offset], JVC_BIT_MARK)
    3158:	a0 90 31 05 	lds	r10, 0x0531	; 0x800531 <irrecv+0xf>
    315c:	b0 90 32 05 	lds	r11, 0x0532	; 0x800532 <irrecv+0x10>
    3160:	f6 01       	movw	r30, r12
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:55
            && MATCH_MARK(results.rawbuf[results.rawlen - 1], JVC_BIT_MARK)) {
    3166:	f2 e2       	ldi	r31, 0x22	; 34
    3168:	af 16       	cp	r10, r31
    316a:	b1 04       	cpc	r11, r1
    316c:	09 f0       	breq	.+2      	; 0x3170 <main+0xc5a>
    316e:	be c1       	rjmp	.+892    	; 0x34ec <main+0xfd6>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    3170:	9c 01       	movw	r18, r24
    3172:	2a 50       	subi	r18, 0x0A	; 10
    3174:	31 09       	sbc	r19, r1
    3176:	29 30       	cpi	r18, 0x09	; 9
    3178:	31 05       	cpc	r19, r1
    317a:	08 f0       	brcs	.+2      	; 0x317e <main+0xc68>
    317c:	b7 c1       	rjmp	.+878    	; 0x34ec <main+0xfd6>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:55
    317e:	f6 01       	movw	r30, r12
    3180:	ee 5b       	subi	r30, 0xBE	; 190
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    3184:	20 81       	ld	r18, Z
    3186:	31 81       	ldd	r19, Z+1	; 0x01
    3188:	2a 50       	subi	r18, 0x0A	; 10
    318a:	31 09       	sbc	r19, r1
    318c:	29 30       	cpi	r18, 0x09	; 9
    318e:	31 05       	cpc	r19, r1
    3190:	08 f0       	brcs	.+2      	; 0x3194 <main+0xc7e>
    3192:	ac c1       	rjmp	.+856    	; 0x34ec <main+0xfd6>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:56
        results.bits = 0;
    3194:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    3198:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:57
        results.value = REPEAT;
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	dc 01       	movw	r26, r24
    31a2:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    31a6:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    31aa:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    31ae:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:58
        results.isRepeat = true;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:89
    }

    // Success
    results.bits = JVC_BITS;
    results.value = data;
    results.decode_type = JVC;
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    31c0:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:91

    return true;
    31c4:	ff 24       	eor	r15, r15
    31c6:	f3 94       	inc	r15
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:95
}
bool IRrecv::decodeJVC(decode_results *aResults) {
    bool aReturnValue = decodeJVC();
    *aResults = results;
    31c8:	82 e1       	ldi	r24, 0x12	; 18
    31ca:	e2 e2       	ldi	r30, 0x22	; 34
    31cc:	f5 e0       	ldi	r31, 0x05	; 5
    31ce:	a3 ef       	ldi	r26, 0xF3	; 243
    31d0:	b2 e0       	ldi	r27, 0x02	; 2
    31d2:	01 90       	ld	r0, Z+
    31d4:	0d 92       	st	X+, r0
    31d6:	8a 95       	dec	r24
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <main+0xcbc>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:587
    }
#endif

#if DECODE_JVC
    DBG_PRINTLN("Attempting JVC decode");
    if (decodeJVC(aResults)) {
    31da:	f1 10       	cpse	r15, r1
    31dc:	32 c4       	rjmp	.+2148   	; 0x3a42 <main+0x152c>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    31de:	d6 01       	movw	r26, r12
    31e0:	12 96       	adiw	r26, 0x02	; 2
    31e2:	8d 91       	ld	r24, X+
    31e4:	9c 91       	ld	r25, X
    31e6:	84 54       	subi	r24, 0x44	; 68
    31e8:	91 09       	sbc	r25, r1
    31ea:	c1 97       	sbiw	r24, 0x31	; 49
    31ec:	50 f5       	brcc	.+84     	; 0x3242 <main+0xd2c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:54
    }
    offset++;

// Check for repeat
    if ((irparams.rawlen == 4) && MATCH_SPACE(results.rawbuf[offset], SAMSUNG_REPEAT_SPACE)
            && MATCH_MARK(results.rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
    31ee:	b4 e0       	ldi	r27, 0x04	; 4
    31f0:	8b 16       	cp	r8, r27
    31f2:	91 04       	cpc	r9, r1
    31f4:	09 f0       	breq	.+2      	; 0x31f8 <main+0xce2>
    31f6:	af c1       	rjmp	.+862    	; 0x3556 <main+0x1040>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    31f8:	f6 01       	movw	r30, r12
    31fa:	84 81       	ldd	r24, Z+4	; 0x04
    31fc:	95 81       	ldd	r25, Z+5	; 0x05
    31fe:	80 97       	sbiw	r24, 0x20	; 32
    3200:	47 97       	sbiw	r24, 0x17	; 23
    3202:	f8 f4       	brcc	.+62     	; 0x3242 <main+0xd2c>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    3204:	86 81       	ldd	r24, Z+6	; 0x06
    3206:	97 81       	ldd	r25, Z+7	; 0x07
    3208:	09 97       	sbiw	r24, 0x09	; 9
    320a:	09 97       	sbiw	r24, 0x09	; 9
    320c:	d0 f4       	brcc	.+52     	; 0x3242 <main+0xd2c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:55
        results.bits = 0;
    320e:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <irrecv+0x9>
    3212:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:56
        results.value = REPEAT;
    3216:	8f ef       	ldi	r24, 0xFF	; 255
    3218:	9f ef       	ldi	r25, 0xFF	; 255
    321a:	dc 01       	movw	r26, r24
    321c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    3220:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    3224:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    3228:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:57
        results.isRepeat = true;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <irrecv+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:76
    data = decodePulseDistanceData(SAMSUNG_BITS, offset, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE);

// Success
    results.bits = SAMSUNG_BITS;
    results.value = data;
    results.decode_type = SAMSUNG;
    3232:	8f e0       	ldi	r24, 0x0F	; 15
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    323a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:77
    return true;
    323e:	ff 24       	eor	r15, r15
    3240:	f3 94       	inc	r15
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:81
}
bool IRrecv::decodeSAMSUNG(decode_results *aResults) {
    bool aReturnValue = decodeSAMSUNG();
    *aResults = results;
    3242:	82 e1       	ldi	r24, 0x12	; 18
    3244:	e2 e2       	ldi	r30, 0x22	; 34
    3246:	f5 e0       	ldi	r31, 0x05	; 5
    3248:	a3 ef       	ldi	r26, 0xF3	; 243
    324a:	b2 e0       	ldi	r27, 0x02	; 2
    324c:	01 90       	ld	r0, Z+
    324e:	0d 92       	st	X+, r0
    3250:	8a 95       	dec	r24
    3252:	e1 f7       	brne	.-8      	; 0x324c <main+0xd36>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:594
    }
#endif

#if DECODE_SAMSUNG
    DBG_PRINTLN("Attempting SAMSUNG decode");
    if (decodeSAMSUNG(aResults)) {
    3254:	f1 10       	cpse	r15, r1
    3256:	f5 c3       	rjmp	.+2026   	; 0x3a42 <main+0x152c>
decodeWhynter():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:57
bool IRrecv::decodeWhynter() {
    long data = 0;
    int offset = 1;  // skip initial space

    // Check we have the right amount of data
    if (results.rawlen < (2 * WHYNTER_BITS) + 6) {
    3258:	b6 e4       	ldi	r27, 0x46	; 70
    325a:	ab 16       	cp	r10, r27
    325c:	b1 04       	cpc	r11, r1
    325e:	f0 f1       	brcs	.+124    	; 0x32dc <main+0xdc6>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    3260:	f6 01       	movw	r30, r12
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	0c 97       	sbiw	r24, 0x0c	; 12
    3268:	0b 97       	sbiw	r24, 0x0b	; 11
    326a:	c0 f5       	brcc	.+112    	; 0x32dc <main+0xdc6>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    326c:	84 81       	ldd	r24, Z+4	; 0x04
    326e:	95 81       	ldd	r25, Z+5	; 0x05
    3270:	09 97       	sbiw	r24, 0x09	; 9
    3272:	09 97       	sbiw	r24, 0x09	; 9
    3274:	98 f5       	brcc	.+102    	; 0x32dc <main+0xdc6>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    3276:	86 81       	ldd	r24, Z+6	; 0x06
    3278:	97 81       	ldd	r25, Z+7	; 0x07
    327a:	8c 97       	sbiw	r24, 0x2c	; 44
    327c:	4f 97       	sbiw	r24, 0x1f	; 31
    327e:	70 f5       	brcc	.+92     	; 0x32dc <main+0xdc6>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    3280:	80 85       	ldd	r24, Z+8	; 0x08
    3282:	91 85       	ldd	r25, Z+9	; 0x09
    3284:	89 97       	sbiw	r24, 0x29	; 41
    3286:	4d 97       	sbiw	r24, 0x1d	; 29
    3288:	48 f5       	brcc	.+82     	; 0x32dc <main+0xdc6>
decodeWhynter():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:83
    if (!MATCH_SPACE(results.rawbuf[offset], WHYNTER_HEADER_SPACE)) {
        return false;
    }
    offset++;

    data = decodePulseDistanceData(WHYNTER_BITS, offset, WHYNTER_BIT_MARK, WHYNTER_ONE_SPACE, WHYNTER_ZERO_SPACE);
    328a:	0e ee       	ldi	r16, 0xEE	; 238
    328c:	12 e0       	ldi	r17, 0x02	; 2
    328e:	26 e6       	ldi	r18, 0x66	; 102
    3290:	38 e0       	ldi	r19, 0x08	; 8
    3292:	4e ee       	ldi	r20, 0xEE	; 238
    3294:	52 e0       	ldi	r21, 0x02	; 2
    3296:	65 e0       	ldi	r22, 0x05	; 5
    3298:	80 e2       	ldi	r24, 0x20	; 32
    329a:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    329e:	d6 01       	movw	r26, r12
    32a0:	1a 96       	adiw	r26, 0x0a	; 10
    32a2:	2d 91       	ld	r18, X+
    32a4:	3c 91       	ld	r19, X
    32a6:	2c 50       	subi	r18, 0x0C	; 12
    32a8:	31 09       	sbc	r19, r1
    32aa:	2b 30       	cpi	r18, 0x0B	; 11
    32ac:	31 05       	cpc	r19, r1
    32ae:	b0 f4       	brcc	.+44     	; 0x32dc <main+0xdc6>
decodeWhynter():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:107
    if (!MATCH_MARK(results.rawbuf[offset], WHYNTER_BIT_MARK)) {
        return false;
    }

    // Success
    results.bits = WHYNTER_BITS;
    32b0:	20 e2       	ldi	r18, 0x20	; 32
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    32b8:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:108
    results.value = data;
    32bc:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    32c0:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    32c4:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    32c8:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:109
    results.decode_type = WHYNTER;
    32cc:	e4 e1       	ldi	r30, 0x14	; 20
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	f0 93 23 05 	sts	0x0523, r31	; 0x800523 <irrecv+0x1>
    32d4:	e0 93 22 05 	sts	0x0522, r30	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:110
    return true;
    32d8:	ff 24       	eor	r15, r15
    32da:	f3 94       	inc	r15
decodeWhynter():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Whynter.cpp:114
}
bool IRrecv::decodeWhynter(decode_results *aResults) {
    bool aReturnValue = decodeWhynter();
    *aResults = results;
    32dc:	82 e1       	ldi	r24, 0x12	; 18
    32de:	e2 e2       	ldi	r30, 0x22	; 34
    32e0:	f5 e0       	ldi	r31, 0x05	; 5
    32e2:	a3 ef       	ldi	r26, 0xF3	; 243
    32e4:	b2 e0       	ldi	r27, 0x02	; 2
    32e6:	01 90       	ld	r0, Z+
    32e8:	0d 92       	st	X+, r0
    32ea:	8a 95       	dec	r24
    32ec:	e1 f7       	brne	.-8      	; 0x32e6 <main+0xdd0>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:601
    }
#endif

#if DECODE_WHYNTER
    DBG_PRINTLN("Attempting Whynter decode");
    if (decodeWhynter(aResults)) {
    32ee:	f1 10       	cpse	r15, r1
    32f0:	a8 c3       	rjmp	.+1872   	; 0x3a42 <main+0x152c>
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:81
bool IRrecv::decodeAiwaRCT501() {
    int data = 0;
    unsigned int offset = 1;

    // Check SIZE
    if (results.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4) {
    32f2:	f8 e5       	ldi	r31, 0x58	; 88
    32f4:	af 16       	cp	r10, r31
    32f6:	b1 04       	cpc	r11, r1
    32f8:	08 f4       	brcc	.+2      	; 0x32fc <main+0xde6>
    32fa:	56 c0       	rjmp	.+172    	; 0x33a8 <main+0xe92>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    32fc:	d6 01       	movw	r26, r12
    32fe:	12 96       	adiw	r26, 0x02	; 2
    3300:	8d 91       	ld	r24, X+
    3302:	9c 91       	ld	r25, X
    3304:	13 97       	sbiw	r26, 0x03	; 3
    3306:	84 58       	subi	r24, 0x84	; 132
    3308:	91 09       	sbc	r25, r1
    330a:	8c 35       	cpi	r24, 0x5C	; 92
    330c:	91 05       	cpc	r25, r1
    330e:	08 f0       	brcs	.+2      	; 0x3312 <main+0xdfc>
    3310:	4b c0       	rjmp	.+150    	; 0x33a8 <main+0xe92>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    3312:	14 96       	adiw	r26, 0x04	; 4
    3314:	8d 91       	ld	r24, X+
    3316:	9c 91       	ld	r25, X
    3318:	81 54       	subi	r24, 0x41	; 65
    331a:	91 09       	sbc	r25, r1
    331c:	8f 97       	sbiw	r24, 0x2f	; 47
    331e:	08 f0       	brcs	.+2      	; 0x3322 <main+0xe0c>
    3320:	43 c0       	rjmp	.+134    	; 0x33a8 <main+0xe92>
    3322:	f6 01       	movw	r30, r12
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:96
    if (!MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_HEADER_SPACE)) {
        return false;
    }
    offset++;

    offset += 26;  // skip pre-data - optional
    3324:	4d e1       	ldi	r20, 0x1D	; 29
    3326:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:77
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
bool IRrecv::decodeAiwaRCT501() {
    int data = 0;
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	80 e0       	ldi	r24, 0x00	; 0
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:97
        return false;
    }
    offset++;

    offset += 26;  // skip pre-data - optional
    while (offset < results.rawlen - 4) {
    332c:	d5 01       	movw	r26, r10
    332e:	14 97       	sbiw	r26, 0x04	; 4
    3330:	4a 17       	cp	r20, r26
    3332:	5b 07       	cpc	r21, r27
    3334:	08 f0       	brcs	.+2      	; 0x3338 <main+0xe22>
    3336:	40 c1       	rjmp	.+640    	; 0x35b8 <main+0x10a2>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    3338:	22 ad       	ldd	r18, Z+58	; 0x3a
    333a:	33 ad       	ldd	r19, Z+59	; 0x3b
    333c:	28 50       	subi	r18, 0x08	; 8
    333e:	31 09       	sbc	r19, r1
    3340:	29 30       	cpi	r18, 0x09	; 9
    3342:	31 05       	cpc	r19, r1
    3344:	88 f5       	brcc	.+98     	; 0x33a8 <main+0xe92>
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:99
        if (MATCH_MARK(results.rawbuf[offset], AIWA_RC_T501_BIT_MARK)) {
            offset++;
    3346:	9a 01       	movw	r18, r20
    3348:	2f 5f       	subi	r18, 0xFF	; 255
    334a:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:105
        } else {
            return false;
        }

        // ONE & ZERO
        if (MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_ONE_SPACE)) {
    334c:	64 ad       	ldd	r22, Z+60	; 0x3c
    334e:	75 ad       	ldd	r23, Z+61	; 0x3d
MATCH_SPACE():
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    3350:	67 30       	cpi	r22, 0x07	; 7
    3352:	71 05       	cpc	r23, r1
    3354:	54 f0       	brlt	.+20     	; 0x336a <main+0xe54>
    3356:	6e 30       	cpi	r22, 0x0E	; 14
    3358:	71 05       	cpc	r23, r1
    335a:	0c f4       	brge	.+2      	; 0x335e <main+0xe48>
    335c:	23 c1       	rjmp	.+582    	; 0x35a4 <main+0x108e>
    335e:	67 51       	subi	r22, 0x17	; 23
    3360:	71 09       	sbc	r23, r1
    3362:	63 31       	cpi	r22, 0x13	; 19
    3364:	71 05       	cpc	r23, r1
    3366:	08 f4       	brcc	.+2      	; 0x336a <main+0xe54>
    3368:	24 c1       	rjmp	.+584    	; 0x35b2 <main+0x109c>
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:115
            break; // End of one & zero detected
        }
        offset++;
    }

    results.bits = (offset - 1) / 2;
    336a:	21 50       	subi	r18, 0x01	; 1
    336c:	31 09       	sbc	r19, r1
    336e:	36 95       	lsr	r19
    3370:	27 95       	ror	r18
    3372:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    3376:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:116
    if (results.bits < 42) {
    337a:	2a 32       	cpi	r18, 0x2A	; 42
    337c:	31 05       	cpc	r19, r1
    337e:	a0 f0       	brcs	.+40     	; 0x33a8 <main+0xe92>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:120
        return false;
    }

    results.value = data;
    3380:	09 2e       	mov	r0, r25
    3382:	00 0c       	add	r0, r0
    3384:	aa 0b       	sbc	r26, r26
    3386:	bb 0b       	sbc	r27, r27
    3388:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <irrecv+0x4>
    338c:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <irrecv+0x5>
    3390:	a0 93 28 05 	sts	0x0528, r26	; 0x800528 <irrecv+0x6>
    3394:	b0 93 29 05 	sts	0x0529, r27	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:121
    results.decode_type = AIWA_RC_T501;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    33a0:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:122
    return true;
    33a4:	ff 24       	eor	r15, r15
    33a6:	f3 94       	inc	r15
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:126
}
bool IRrecv::decodeAiwaRCT501(decode_results *aResults) {
    bool aReturnValue = decodeAiwaRCT501();
    *aResults = results;
    33a8:	82 e1       	ldi	r24, 0x12	; 18
    33aa:	e2 e2       	ldi	r30, 0x22	; 34
    33ac:	f5 e0       	ldi	r31, 0x05	; 5
    33ae:	a3 ef       	ldi	r26, 0xF3	; 243
    33b0:	b2 e0       	ldi	r27, 0x02	; 2
    33b2:	01 90       	ld	r0, Z+
    33b4:	0d 92       	st	X+, r0
    33b6:	8a 95       	dec	r24
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <main+0xe9c>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:608
    }
#endif

#if DECODE_AIWA_RC_T501
    DBG_PRINTLN("Attempting Aiwa RC-T501 decode");
    if (decodeAiwaRCT501(aResults)) {
    33ba:	f1 10       	cpse	r15, r1
    33bc:	42 c3       	rjmp	.+1668   	; 0x3a42 <main+0x152c>
decodeDenon():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:67
bool IRrecv::decodeDenon() {
    unsigned long data = 0;  // Somewhere to build our code
    int offset = 1;  // Skip the gap reading

    // Check we have the right amount of data
    if (irparams.rawlen != 1 + 2 + (2 * DENON_BITS) + 1) {
    33be:	b0 e2       	ldi	r27, 0x20	; 32
    33c0:	8b 16       	cp	r8, r27
    33c2:	91 04       	cpc	r9, r1
    33c4:	59 f5       	brne	.+86     	; 0x341c <main+0xf06>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    33c6:	f6 01       	movw	r30, r12
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	05 97       	sbiw	r24, 0x05	; 5
    33ce:	07 97       	sbiw	r24, 0x07	; 7
    33d0:	28 f5       	brcc	.+74     	; 0x341c <main+0xf06>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    33d2:	84 81       	ldd	r24, Z+4	; 0x04
    33d4:	95 81       	ldd	r25, Z+5	; 0x05
    33d6:	09 97       	sbiw	r24, 0x09	; 9
    33d8:	09 97       	sbiw	r24, 0x09	; 9
    33da:	00 f5       	brcc	.+64     	; 0x341c <main+0xf06>
decodeDenon():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:83
        return false;
    }
    offset++;

    // Read the bits in
    data = decodePulseDistanceData(DENON_BITS, offset, DENON_BIT_MARK, DENON_ONE_SPACE, DENON_ZERO_SPACE);
    33dc:	0e ee       	ldi	r16, 0xEE	; 238
    33de:	12 e0       	ldi	r17, 0x02	; 2
    33e0:	28 e0       	ldi	r18, 0x08	; 8
    33e2:	37 e0       	ldi	r19, 0x07	; 7
    33e4:	4c e2       	ldi	r20, 0x2C	; 44
    33e6:	51 e0       	ldi	r21, 0x01	; 1
    33e8:	63 e0       	ldi	r22, 0x03	; 3
    33ea:	8e e0       	ldi	r24, 0x0E	; 14
    33ec:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:104
//        }
//        offset++;
//    }

    // Success
    results.bits = DENON_BITS;
    33f0:	2e e0       	ldi	r18, 0x0E	; 14
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    33f8:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:105
    results.value = data;
    33fc:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    3400:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    3404:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    3408:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:106
    results.decode_type = DENON;
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    3414:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
    3418:	ff 24       	eor	r15, r15
    341a:	f3 94       	inc	r15
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Denon.cpp:111
    return true;
}
bool IRrecv::decodeDenon(decode_results *aResults) {
    bool aReturnValue = decodeDenon();
    *aResults = results;
    341c:	82 e1       	ldi	r24, 0x12	; 18
    341e:	e2 e2       	ldi	r30, 0x22	; 34
    3420:	f5 e0       	ldi	r31, 0x05	; 5
    3422:	a3 ef       	ldi	r26, 0xF3	; 243
    3424:	b2 e0       	ldi	r27, 0x02	; 2
    3426:	01 90       	ld	r0, Z+
    3428:	0d 92       	st	X+, r0
    342a:	8a 95       	dec	r24
    342c:	e1 f7       	brne	.-8      	; 0x3426 <main+0xf10>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:615
    }
#endif

#if DECODE_DENON
    DBG_PRINTLN("Attempting Denon decode");
    if (decodeDenon(aResults)) {
    342e:	f1 10       	cpse	r15, r1
    3430:	08 c3       	rjmp	.+1552   	; 0x3a42 <main+0x152c>
decodeHash():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:348

bool IRrecv::decodeHash() {
    long hash = FNV_BASIS_32;

// Require at least 6 samples to prevent triggering on noise
    if (results.rawlen < 6) {
    3432:	f6 e0       	ldi	r31, 0x06	; 6
    3434:	af 16       	cp	r10, r31
    3436:	b1 04       	cpc	r11, r1
    3438:	08 f4       	brcc	.+2      	; 0x343c <main+0xf26>
    343a:	ee c0       	rjmp	.+476    	; 0x3618 <main+0x1102>
    343c:	22 e0       	ldi	r18, 0x02	; 2
    343e:	c2 0e       	add	r12, r18
    3440:	d1 1c       	adc	r13, r1
    3442:	03 e0       	ldi	r16, 0x03	; 3
    3444:	10 e0       	ldi	r17, 0x00	; 0
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:345
//
#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

bool IRrecv::decodeHash() {
    long hash = FNV_BASIS_32;
    3446:	25 ec       	ldi	r18, 0xC5	; 197
    3448:	3d e9       	ldi	r19, 0x9D	; 157
    344a:	4c e1       	ldi	r20, 0x1C	; 28
    344c:	51 e8       	ldi	r21, 0x81	; 129
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:273
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    344e:	7a e0       	ldi	r23, 0x0A	; 10
    3450:	f7 2e       	mov	r15, r23
decodeHash():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:353
    if (results.rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < results.rawlen; i++) {
        int value = compare(results.rawbuf[i], results.rawbuf[i + 2]);
    3452:	d6 01       	movw	r26, r12
    3454:	14 96       	adiw	r26, 0x04	; 4
    3456:	8d 91       	ld	r24, X+
    3458:	9c 91       	ld	r25, X
    345a:	15 97       	sbiw	r26, 0x05	; 5
    345c:	ed 91       	ld	r30, X+
    345e:	fd 91       	ld	r31, X+
    3460:	6d 01       	movw	r12, r26
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:273
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    3462:	f8 9e       	mul	r15, r24
    3464:	40 01       	movw	r8, r0
    3466:	f9 9e       	mul	r15, r25
    3468:	90 0c       	add	r9, r0
    346a:	11 24       	eor	r1, r1
    346c:	df 01       	movw	r26, r30
    346e:	63 e0       	ldi	r22, 0x03	; 3
    3470:	aa 0f       	add	r26, r26
    3472:	bb 1f       	adc	r27, r27
    3474:	6a 95       	dec	r22
    3476:	e1 f7       	brne	.-8      	; 0x3470 <main+0xf5a>
    3478:	8a 16       	cp	r8, r26
    347a:	9b 06       	cpc	r9, r27
    347c:	08 f4       	brcc	.+2      	; 0x3480 <main+0xf6a>
    347e:	9e c0       	rjmp	.+316    	; 0x35bc <main+0x10a6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:276
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    3480:	fe 9e       	mul	r15, r30
    3482:	b0 01       	movw	r22, r0
    3484:	ff 9e       	mul	r15, r31
    3486:	70 0d       	add	r23, r0
    3488:	11 24       	eor	r1, r1
    348a:	e3 e0       	ldi	r30, 0x03	; 3
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	ea 95       	dec	r30
    3492:	e1 f7       	brne	.-8      	; 0x348c <main+0xf76>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:277
        return 2;
    3494:	e2 e0       	ldi	r30, 0x02	; 2
    3496:	f0 e0       	ldi	r31, 0x00	; 0
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:276
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    3498:	68 17       	cp	r22, r24
    349a:	79 07       	cpc	r23, r25
    349c:	08 f4       	brcc	.+2      	; 0x34a0 <main+0xf8a>
    349e:	90 c0       	rjmp	.+288    	; 0x35c0 <main+0x10aa>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:279
        return 2;
    }
    return 1;
    34a0:	e1 e0       	ldi	r30, 0x01	; 1
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	8d c0       	rjmp	.+282    	; 0x35c0 <main+0x10aa>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:300
            if (levelB != getRClevel(&results, &offset, &used, RC6_T1)) {
                return false;
            }
        }

        if ((levelA == MARK) && (levelB == SPACE)) {
    34a6:	aa 94       	dec	r10
    34a8:	ab 28       	or	r10, r11
    34aa:	09 f0       	breq	.+2      	; 0x34ae <main+0xf98>
    34ac:	b7 cd       	rjmp	.-1170   	; 0x301c <main+0xb06>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:301
            data = (data << 1) | 1;  // inverted compared to RC5
    34ae:	44 0c       	add	r4, r4
    34b0:	55 1c       	adc	r5, r5
    34b2:	66 1c       	adc	r6, r6
    34b4:	77 1c       	adc	r7, r7
    34b6:	68 94       	set
    34b8:	40 f8       	bld	r4, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:281
    }
    if (getRClevel(&results, &offset, &used, RC6_T1) != SPACE) {
        return false;
    }

    for (nbits = 0; offset < results.rawlen; nbits++) {
    34ba:	ff ef       	ldi	r31, 0xFF	; 255
    34bc:	cf 1a       	sub	r12, r31
    34be:	df 0a       	sbc	r13, r31
    34c0:	61 cd       	rjmp	.-1342   	; 0x2f84 <main+0xa6e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:310
            return false;            // Error
        }
    }

    // Success
    results.bits = nbits;
    34c2:	d0 92 2b 05 	sts	0x052B, r13	; 0x80052b <irrecv+0x9>
    34c6:	c0 92 2a 05 	sts	0x052A, r12	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:311
    results.value = data;
    34ca:	40 92 26 05 	sts	0x0526, r4	; 0x800526 <irrecv+0x4>
    34ce:	50 92 27 05 	sts	0x0527, r5	; 0x800527 <irrecv+0x5>
    34d2:	60 92 28 05 	sts	0x0528, r6	; 0x800528 <irrecv+0x6>
    34d6:	70 92 29 05 	sts	0x0529, r7	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:312
    results.decode_type = RC6;
    34da:	8e e0       	ldi	r24, 0x0E	; 14
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    34e2:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_RC5_RC6.cpp:313
    return true;
    34e6:	ff 24       	eor	r15, r15
    34e8:	f3 94       	inc	r15
    34ea:	98 cd       	rjmp	.-1232   	; 0x301c <main+0xb06>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    34ec:	8e 57       	subi	r24, 0x7E	; 126
    34ee:	91 09       	sbc	r25, r1
    34f0:	88 35       	cpi	r24, 0x58	; 88
    34f2:	91 05       	cpc	r25, r1
    34f4:	08 f0       	brcs	.+2      	; 0x34f8 <main+0xfe2>
    34f6:	68 ce       	rjmp	.-816    	; 0x31c8 <main+0xcb2>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:69
    if (!MATCH_MARK(results.rawbuf[offset], JVC_HEADER_MARK)) {
        return false;
    }
    offset++;

    if (results.rawlen < (2 * JVC_BITS) + 1) {
    34f8:	91 e2       	ldi	r25, 0x21	; 33
    34fa:	a9 16       	cp	r10, r25
    34fc:	b1 04       	cpc	r11, r1
    34fe:	08 f4       	brcc	.+2      	; 0x3502 <main+0xfec>
    3500:	63 ce       	rjmp	.-826    	; 0x31c8 <main+0xcb2>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    3502:	d6 01       	movw	r26, r12
    3504:	14 96       	adiw	r26, 0x04	; 4
    3506:	8d 91       	ld	r24, X+
    3508:	9c 91       	ld	r25, X
    350a:	cd 97       	sbiw	r24, 0x3d	; 61
    350c:	8b 97       	sbiw	r24, 0x2b	; 43
    350e:	08 f0       	brcs	.+2      	; 0x3512 <main+0xffc>
    3510:	5b ce       	rjmp	.-842    	; 0x31c8 <main+0xcb2>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:79
    if (!MATCH_SPACE(results.rawbuf[offset], JVC_HEADER_SPACE)) {
        return false;
    }
    offset++;

    data = decodePulseDistanceData(JVC_BITS, offset, JVC_BIT_MARK, JVC_ONE_SPACE, JVC_ZERO_SPACE);
    3512:	06 e2       	ldi	r16, 0x26	; 38
    3514:	12 e0       	ldi	r17, 0x02	; 2
    3516:	20 e4       	ldi	r18, 0x40	; 64
    3518:	36 e0       	ldi	r19, 0x06	; 6
    351a:	48 e5       	ldi	r20, 0x58	; 88
    351c:	52 e0       	ldi	r21, 0x02	; 2
    351e:	63 e0       	ldi	r22, 0x03	; 3
    3520:	80 e1       	ldi	r24, 0x10	; 16
    3522:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    3526:	f6 01       	movw	r30, r12
    3528:	26 81       	ldd	r18, Z+6	; 0x06
    352a:	37 81       	ldd	r19, Z+7	; 0x07
    352c:	2a 50       	subi	r18, 0x0A	; 10
    352e:	31 09       	sbc	r19, r1
    3530:	29 30       	cpi	r18, 0x09	; 9
    3532:	31 05       	cpc	r19, r1
    3534:	08 f0       	brcs	.+2      	; 0x3538 <main+0x1022>
    3536:	48 ce       	rjmp	.-880    	; 0x31c8 <main+0xcb2>
decodeJVC():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:87
    if (!MATCH_MARK(results.rawbuf[offset], JVC_BIT_MARK)) {
        return false;
    }

    // Success
    results.bits = JVC_BITS;
    3538:	20 e1       	ldi	r18, 0x10	; 16
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    3540:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_JVC.cpp:88
    results.value = data;
    3544:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    3548:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    354c:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    3550:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
    3554:	31 ce       	rjmp	.-926    	; 0x31b8 <main+0xca2>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:61
        results.value = REPEAT;
        results.isRepeat = true;
        results.decode_type = SAMSUNG;
        return true;
    }
    if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4) {
    3556:	94 e4       	ldi	r25, 0x44	; 68
    3558:	89 16       	cp	r8, r25
    355a:	91 04       	cpc	r9, r1
    355c:	08 f4       	brcc	.+2      	; 0x3560 <main+0x104a>
    355e:	71 ce       	rjmp	.-798    	; 0x3242 <main+0xd2c>
MATCH_SPACE():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:105
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded and spaces shortened by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS_MICROS)));
    3560:	d6 01       	movw	r26, r12
    3562:	14 96       	adiw	r26, 0x04	; 4
    3564:	8d 91       	ld	r24, X+
    3566:	9c 91       	ld	r25, X
    3568:	81 54       	subi	r24, 0x41	; 65
    356a:	91 09       	sbc	r25, r1
    356c:	8f 97       	sbiw	r24, 0x2f	; 47
    356e:	08 f0       	brcs	.+2      	; 0x3572 <main+0x105c>
    3570:	68 ce       	rjmp	.-816    	; 0x3242 <main+0xd2c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:71
    if (!MATCH_SPACE(results.rawbuf[offset], SAMSUNG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    data = decodePulseDistanceData(SAMSUNG_BITS, offset, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE);
    3572:	00 e3       	ldi	r16, 0x30	; 48
    3574:	12 e0       	ldi	r17, 0x02	; 2
    3576:	20 e4       	ldi	r18, 0x40	; 64
    3578:	36 e0       	ldi	r19, 0x06	; 6
    357a:	40 e3       	ldi	r20, 0x30	; 48
    357c:	52 e0       	ldi	r21, 0x02	; 2
    357e:	63 e0       	ldi	r22, 0x03	; 3
    3580:	80 e2       	ldi	r24, 0x20	; 32
    3582:	0e 94 96 0b 	call	0x172c	; 0x172c <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.59]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:74

// Success
    results.bits = SAMSUNG_BITS;
    3586:	20 e2       	ldi	r18, 0x20	; 32
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <irrecv+0x9>
    358e:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Samsung.cpp:75
    results.value = data;
    3592:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <irrecv+0x4>
    3596:	70 93 27 05 	sts	0x0527, r23	; 0x800527 <irrecv+0x5>
    359a:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <irrecv+0x6>
    359e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <irrecv+0x7>
    35a2:	47 ce       	rjmp	.-882    	; 0x3232 <main+0xd1c>
decodeAiwaRCT501():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:106
            return false;
        }

        // ONE & ZERO
        if (MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_ONE_SPACE)) {
            data = (data << 1) | 1;
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	81 60       	ori	r24, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:112
        } else if (MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_ZERO_SPACE)) {
            data = (data << 1) | 0;
        } else {
            break; // End of one & zero detected
        }
        offset++;
    35aa:	4e 5f       	subi	r20, 0xFE	; 254
    35ac:	5f 4f       	sbci	r21, 0xFF	; 255
    35ae:	34 96       	adiw	r30, 0x04	; 4
    35b0:	bf ce       	rjmp	.-642    	; 0x3330 <main+0xe1a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:108

        // ONE & ZERO
        if (MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results.rawbuf[offset], AIWA_RC_T501_ZERO_SPACE)) {
            data = (data << 1) | 0;
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	f9 cf       	rjmp	.-14     	; 0x35aa <main+0x1094>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Aiwa.cpp:97
        return false;
    }
    offset++;

    offset += 26;  // skip pre-data - optional
    while (offset < results.rawlen - 4) {
    35b8:	9a 01       	movw	r18, r20
    35ba:	d7 ce       	rjmp	.-594    	; 0x336a <main+0xe54>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:274
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
        return 0;
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	e0 e0       	ldi	r30, 0x00	; 0
decodeHash():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:355
    }

    for (unsigned int i = 1; (i + 2) < results.rawlen; i++) {
        int value = compare(results.rawbuf[i], results.rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    35c0:	63 e9       	ldi	r22, 0x93	; 147
    35c2:	71 e0       	ldi	r23, 0x01	; 1
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	91 e0       	ldi	r25, 0x01	; 1
    35c8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsi3>
    35cc:	2f 01       	movw	r4, r30
    35ce:	ff 0f       	add	r31, r31
    35d0:	66 08       	sbc	r6, r6
    35d2:	77 08       	sbc	r7, r7
    35d4:	a3 01       	movw	r20, r6
    35d6:	92 01       	movw	r18, r4
    35d8:	26 27       	eor	r18, r22
    35da:	37 27       	eor	r19, r23
    35dc:	48 27       	eor	r20, r24
    35de:	59 27       	eor	r21, r25
    35e0:	0f 5f       	subi	r16, 0xFF	; 255
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:352
// Require at least 6 samples to prevent triggering on noise
    if (results.rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < results.rawlen; i++) {
    35e4:	a0 16       	cp	r10, r16
    35e6:	b1 06       	cpc	r11, r17
    35e8:	09 f0       	breq	.+2      	; 0x35ec <main+0x10d6>
    35ea:	33 cf       	rjmp	.-410    	; 0x3452 <main+0xf3c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:358
        int value = compare(results.rawbuf[i], results.rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    }

    results.value = hash;
    35ec:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <irrecv+0x4>
    35f0:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <irrecv+0x5>
    35f4:	40 93 28 05 	sts	0x0528, r20	; 0x800528 <irrecv+0x6>
    35f8:	50 93 29 05 	sts	0x0529, r21	; 0x800529 <irrecv+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:359
    results.bits = 32;
    35fc:	80 e2       	ldi	r24, 0x20	; 32
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <irrecv+0x9>
    3604:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:360
    results.decode_type = UNKNOWN;
    3608:	8f ef       	ldi	r24, 0xFF	; 255
    360a:	9f ef       	ldi	r25, 0xFF	; 255
    360c:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <irrecv+0x1>
    3610:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <irrecv>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:362

    return true;
    3614:	ff 24       	eor	r15, r15
    3616:	f3 94       	inc	r15
decodeHash():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:366
}
bool IRrecv::decodeHash(decode_results *aResults) {
    bool aReturnValue = decodeHash();
    *aResults = results;
    3618:	82 e1       	ldi	r24, 0x12	; 18
    361a:	e2 e2       	ldi	r30, 0x22	; 34
    361c:	f5 e0       	ldi	r31, 0x05	; 5
    361e:	a3 ef       	ldi	r26, 0xF3	; 243
    3620:	b2 e0       	ldi	r27, 0x02	; 2
    3622:	01 90       	ld	r0, Z+
    3624:	0d 92       	st	X+, r0
    3626:	8a 95       	dec	r24
    3628:	e1 f7       	brne	.-8      	; 0x3622 <main+0x110c>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:632
#if defined(DECODE_HASH)
    DBG_PRINTLN("Hash decode");
    // decodeHash returns a hash on any input.
    // Thus, it needs to be last in the list.
    // If you add any decodes, add them before this.
    if (decodeHash(aResults)) {
    362a:	f1 10       	cpse	r15, r1
    362c:	0a c2       	rjmp	.+1044   	; 0x3a42 <main+0x152c>
resume():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/irReceive.cpp:250

//+=============================================================================
// Restart the ISR state machine
//
void IRrecv::resume() {
    irparams.rcvstate = IR_REC_STATE_IDLE;
    362e:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <irparams>
loop():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:498
}

void loop()
{
  ReceiveIR();
  if(Power){
    3632:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <main+0x1126>
    363a:	5b c5       	rjmp	.+2742   	; 0x40f2 <main+0x1bdc>
PlasmaControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:396
    break;
  }
}

void PlasmaControl(){
  switch(plasma_flag)
    363c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <plasma_flag>
    3640:	88 23       	and	r24, r24
    3642:	09 f4       	brne	.+2      	; 0x3646 <main+0x1130>
    3644:	91 c3       	rjmp	.+1826   	; 0x3d68 <main+0x1852>
    3646:	81 30       	cpi	r24, 0x01	; 1
    3648:	09 f4       	brne	.+2      	; 0x364c <main+0x1136>
    364a:	c7 c3       	rjmp	.+1934   	; 0x3dda <main+0x18c4>
SegmentControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:217
  }
  
}
void SegmentControl()
{
  if(N_SEGMENT_PERIOD == ++segment_cnt){
    364c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3650:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <segment_cnt+0x1>
    365a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <segment_cnt>
    365e:	80 3d       	cpi	r24, 0xD0	; 208
    3660:	97 40       	sbci	r25, 0x07	; 7
    3662:	79 f4       	brne	.+30     	; 0x3682 <main+0x116c>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:218
    segement_flag++;
    3664:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <segement_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:219
    segment_cnt = 0;
    366e:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <segment_cnt+0x1>
    3672:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <segment_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:220
    if(segement_flag > 4) segement_flag = 0;
    3676:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    367a:	85 30       	cpi	r24, 0x05	; 5
    367c:	10 f0       	brcs	.+4      	; 0x3682 <main+0x116c>
    367e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <segement_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:223
  }
  
  if(segement_flag == 0){ // PM1.0
    3682:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3686:	81 11       	cpse	r24, r1
    3688:	b5 c3       	rjmp	.+1898   	; 0x3df4 <main+0x18de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:224
    if(1 == segment_cnt)
    368a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    368e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	c1 f4       	brne	.+48     	; 0x36c6 <main+0x11b0>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:226
    {
      module.clearDisplay();
    3696:	84 e3       	ldi	r24, 0x34	; 52
    3698:	95 e0       	ldi	r25, 0x05	; 5
    369a:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:227
      module.setDisplayToString("P10");
    369e:	0f e0       	ldi	r16, 0x0F	; 15
    36a0:	12 e0       	ldi	r17, 0x02	; 2
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	63 e1       	ldi	r22, 0x13	; 19
    36aa:	72 e0       	ldi	r23, 0x02	; 2
    36ac:	84 e3       	ldi	r24, 0x34	; 52
    36ae:	95 e0       	ldi	r25, 0x05	; 5
    36b0:	0e 94 49 06 	call	0xc92	; 0xc92 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:228
      module.setDisplayDigit(1,1,true); // digit, pos, dot 0 1 2순서
    36b4:	0f ef       	ldi	r16, 0xFF	; 255
    36b6:	11 e0       	ldi	r17, 0x01	; 1
    36b8:	21 e0       	ldi	r18, 0x01	; 1
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	61 e0       	ldi	r22, 0x01	; 1
    36be:	84 e3       	ldi	r24, 0x34	; 52
    36c0:	95 e0       	ldi	r25, 0x05	; 5
    36c2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:230
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    36c6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    36ca:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    36ce:	88 3e       	cpi	r24, 0xE8	; 232
    36d0:	93 40       	sbci	r25, 0x03	; 3
    36d2:	81 f4       	brne	.+32     	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:231
      Serial.print("pm1.0: ");
    36d4:	87 e1       	ldi	r24, 0x17	; 23
    36d6:	92 e0       	ldi	r25, 0x02	; 2
    36d8:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:232
      Serial.println(p1dot0);
    36dc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <p1dot0>
    36e0:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <p1dot0+0x1>
    36e4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:233
      setSegmentInt(p1dot0);
    36e8:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <p1dot0>
    36ec:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <p1dot0+0x1>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:244
      module.setDisplayDigit(2,1,true);
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
      Serial.print("pm2.5: ");
      Serial.println(p2dot5);
      setSegmentInt(p2dot5);
    36f0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <setSegmentInt(int)>
Read_dust_value():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:165
IRrecv irrecv(IR);  // 적외선 센서
decode_results results; // 적외선 수신번호를 저장할 값입니다.

void Read_dust_value()
{
  if(++dust_cnt == 2 * N_FIVE)
    36f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dust_cnt>
    36f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dust_cnt+0x1>
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dust_cnt+0x1>
    3702:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dust_cnt>
    3706:	80 31       	cpi	r24, 0x10	; 16
    3708:	97 42       	sbci	r25, 0x27	; 39
    370a:	09 f0       	breq	.+2      	; 0x370e <main+0x11f8>
    370c:	39 c1       	rjmp	.+626    	; 0x3980 <main+0x146a>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:167
  {
    dust_cnt = 0;
    370e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dust_cnt+0x1>
    3712:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dust_cnt>
read_data_command():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:112
  return send_command_data(AM1008W_K_I2C_CTRL_CO2_CALIBRATION, range);
}

uint8_t AM1008W_K_I2C::read_data_command(void)
{
  _i2cPort->requestFrom(AM1008W_K_I2C_ADDRESS, 25);
    3716:	00 91 3c 03 	lds	r16, 0x033C	; 0x80033c <am1008w_k_i2c+0x20>
    371a:	10 91 3d 03 	lds	r17, 0x033D	; 0x80033d <am1008w_k_i2c+0x21>
requestFrom():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:548
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
  }

  // clamp to buffer length
  if(quantity > bufferLength){
    371e:	d8 01       	movw	r26, r16
    3720:	1c 96       	adiw	r26, 0x0c	; 12
    3722:	4d 91       	ld	r20, X+
    3724:	5c 91       	ld	r21, X
    3726:	49 31       	cpi	r20, 0x19	; 25
    3728:	51 05       	cpc	r21, r1
    372a:	14 f0       	brlt	.+4      	; 0x3730 <main+0x121a>
    372c:	49 e1       	ldi	r20, 0x19	; 25
    372e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:552
    quantity = bufferLength;
  }
  // perform blocking read into buffer
  uint8_t read = tw_readFrom(address, rxBuffer, quantity, sendStop);
    3730:	f8 01       	movw	r30, r16
    3732:	66 85       	ldd	r22, Z+14	; 0x0e
    3734:	77 85       	ldd	r23, Z+15	; 0x0f
    3736:	04 a0       	ldd	r0, Z+36	; 0x24
    3738:	f5 a1       	ldd	r31, Z+37	; 0x25
    373a:	e0 2d       	mov	r30, r0
    373c:	21 e0       	ldi	r18, 0x01	; 1
    373e:	88 e2       	ldi	r24, 0x28	; 40
    3740:	09 95       	icall
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:554
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    3742:	d8 01       	movw	r26, r16
    3744:	50 96       	adiw	r26, 0x10	; 16
    3746:	1c 92       	st	X, r1
    3748:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:555
  rxBufferLength = read;
    374a:	51 96       	adiw	r26, 0x11	; 17
    374c:	8c 93       	st	X, r24
    374e:	0c e1       	ldi	r16, 0x1C	; 28
    3750:	13 e0       	ldi	r17, 0x03	; 3
read_data_command():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:115
  uint8_t idx = 0;

  while (_i2cPort->available())
    3752:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <am1008w_k_i2c+0x20>
    3756:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <am1008w_k_i2c+0x21>
    375a:	dc 01       	movw	r26, r24
    375c:	ed 91       	ld	r30, X+
    375e:	fc 91       	ld	r31, X
    3760:	00 84       	ldd	r0, Z+8	; 0x08
    3762:	f1 85       	ldd	r31, Z+9	; 0x09
    3764:	e0 2d       	mov	r30, r0
    3766:	09 95       	icall
    3768:	89 2b       	or	r24, r25
    376a:	09 f4       	brne	.+2      	; 0x376e <main+0x1258>
    376c:	09 c1       	rjmp	.+530    	; 0x3980 <main+0x146a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:117
  { // slave may send less than requested
    uint8_t b = _i2cPort->read();
    376e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <am1008w_k_i2c+0x20>
    3772:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <am1008w_k_i2c+0x21>
    3776:	dc 01       	movw	r26, r24
    3778:	ed 91       	ld	r30, X+
    377a:	fc 91       	ld	r31, X
    377c:	02 84       	ldd	r0, Z+10	; 0x0a
    377e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3780:	e0 2d       	mov	r30, r0
    3782:	09 95       	icall
    3784:	f8 01       	movw	r30, r16
    3786:	81 93       	st	Z+, r24
    3788:	8f 01       	movw	r16, r30
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:119
    _buffer[idx++] = b;
    if (idx == AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    378a:	f3 e0       	ldi	r31, 0x03	; 3
    378c:	05 33       	cpi	r16, 0x35	; 53
    378e:	1f 07       	cpc	r17, r31
    3790:	01 f7       	brne	.-64     	; 0x3752 <main+0x123c>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:133
    Serial.println("AM1008W_K_I2C::read_data_command : buffer is short!");
#endif
    return 1;
  }

  if (_buffer[0] != AM1008W_K_I2C_FRAME_STX)
    3792:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <am1008w_k_i2c>
    3796:	86 31       	cpi	r24, 0x16	; 22
    3798:	09 f0       	breq	.+2      	; 0x379c <main+0x1286>
    379a:	f2 c0       	rjmp	.+484    	; 0x3980 <main+0x146a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:142
    Serial.println(_buffer[0], HEX);
#endif
    return 2;
  }

  if (_buffer[1] != AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    379c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <am1008w_k_i2c+0x1>
    37a0:	99 31       	cpi	r25, 0x19	; 25
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <main+0x1290>
    37a4:	ed c0       	rjmp	.+474    	; 0x3980 <main+0x146a>
    37a6:	ed e1       	ldi	r30, 0x1D	; 29
    37a8:	f3 e0       	ldi	r31, 0x03	; 3
    37aa:	24 e3       	ldi	r18, 0x34	; 52
    37ac:	33 e0       	ldi	r19, 0x03	; 3
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:154

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
  {
    check_code ^= _buffer[i];
    37ae:	91 91       	ld	r25, Z+
    37b0:	89 27       	eor	r24, r25
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:152
    return 3;
  }

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
    37b2:	2e 17       	cp	r18, r30
    37b4:	3f 07       	cpc	r19, r31
    37b6:	d9 f7       	brne	.-10     	; 0x37ae <main+0x1298>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:157
  {
    check_code ^= _buffer[i];
  }

  if (_buffer[AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1] != check_code)
    37b8:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <am1008w_k_i2c+0x18>
    37bc:	89 13       	cpse	r24, r25
    37be:	e0 c0       	rjmp	.+448    	; 0x3980 <main+0x146a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:170
    Serial.println(check_code, HEX);
#endif
    return 4;
  }

  _pm_operation_mode = _buffer[2];
    37c0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <am1008w_k_i2c+0x2>
    37c4:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <am1008w_k_i2c+0x22>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:171
  _co2 = (_buffer[3] << 8) + _buffer[4];
    37c8:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <am1008w_k_i2c+0x3>
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	98 2f       	mov	r25, r24
    37d0:	88 27       	eor	r24, r24
    37d2:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <am1008w_k_i2c+0x4>
    37d6:	82 0f       	add	r24, r18
    37d8:	91 1d       	adc	r25, r1
    37da:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <am1008w_k_i2c+0x24>
    37de:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <am1008w_k_i2c+0x23>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:172
  _voc = (_buffer[5] << 8) + _buffer[6];
    37e2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <am1008w_k_i2c+0x5>
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	98 2f       	mov	r25, r24
    37ea:	88 27       	eor	r24, r24
    37ec:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <am1008w_k_i2c+0x6>
    37f0:	82 0f       	add	r24, r18
    37f2:	91 1d       	adc	r25, r1
    37f4:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <am1008w_k_i2c+0x26>
    37f8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <am1008w_k_i2c+0x25>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:173
  _humidity = (float)((_buffer[7] << 8) + _buffer[8]) / 10;
    37fc:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <am1008w_k_i2c+0x7>
    3800:	86 2f       	mov	r24, r22
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	98 2f       	mov	r25, r24
    3806:	88 27       	eor	r24, r24
    3808:	60 91 24 03 	lds	r22, 0x0324	; 0x800324 <am1008w_k_i2c+0x8>
    380c:	68 0f       	add	r22, r24
    380e:	79 2f       	mov	r23, r25
    3810:	71 1d       	adc	r23, r1
    3812:	07 2e       	mov	r0, r23
    3814:	00 0c       	add	r0, r0
    3816:	88 0b       	sbc	r24, r24
    3818:	99 0b       	sbc	r25, r25
    381a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatsisf>
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e2       	ldi	r20, 0x20	; 32
    3824:	51 e4       	ldi	r21, 0x41	; 65
    3826:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    382a:	4b 01       	movw	r8, r22
    382c:	5c 01       	movw	r10, r24
    382e:	80 92 43 03 	sts	0x0343, r8	; 0x800343 <am1008w_k_i2c+0x27>
    3832:	90 92 44 03 	sts	0x0344, r9	; 0x800344 <am1008w_k_i2c+0x28>
    3836:	a0 92 45 03 	sts	0x0345, r10	; 0x800345 <am1008w_k_i2c+0x29>
    383a:	b0 92 46 03 	sts	0x0346, r11	; 0x800346 <am1008w_k_i2c+0x2a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:174
  _temperature = (float)((_buffer[9] << 8) + _buffer[10] - 500) / 10;
    383e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <am1008w_k_i2c+0x9>
    3842:	86 2f       	mov	r24, r22
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	98 2f       	mov	r25, r24
    3848:	88 27       	eor	r24, r24
    384a:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <am1008w_k_i2c+0xa>
    384e:	68 0f       	add	r22, r24
    3850:	79 2f       	mov	r23, r25
    3852:	71 1d       	adc	r23, r1
    3854:	64 5f       	subi	r22, 0xF4	; 244
    3856:	71 40       	sbci	r23, 0x01	; 1
    3858:	07 2e       	mov	r0, r23
    385a:	00 0c       	add	r0, r0
    385c:	88 0b       	sbc	r24, r24
    385e:	99 0b       	sbc	r25, r25
    3860:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatsisf>
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e2       	ldi	r20, 0x20	; 32
    386a:	51 e4       	ldi	r21, 0x41	; 65
    386c:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    3870:	6b 01       	movw	r12, r22
    3872:	7c 01       	movw	r14, r24
    3874:	c0 92 47 03 	sts	0x0347, r12	; 0x800347 <am1008w_k_i2c+0x2b>
    3878:	d0 92 48 03 	sts	0x0348, r13	; 0x800348 <am1008w_k_i2c+0x2c>
    387c:	e0 92 49 03 	sts	0x0349, r14	; 0x800349 <am1008w_k_i2c+0x2d>
    3880:	f0 92 4a 03 	sts	0x034A, r15	; 0x80034a <am1008w_k_i2c+0x2e>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:175
  _pm1p0 = (_buffer[11] << 8) + _buffer[12];
    3884:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <am1008w_k_i2c+0xb>
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	76 2f       	mov	r23, r22
    388c:	66 27       	eor	r22, r22
    388e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <am1008w_k_i2c+0xc>
    3892:	68 0f       	add	r22, r24
    3894:	71 1d       	adc	r23, r1
    3896:	70 93 4c 03 	sts	0x034C, r23	; 0x80034c <am1008w_k_i2c+0x30>
    389a:	60 93 4b 03 	sts	0x034B, r22	; 0x80034b <am1008w_k_i2c+0x2f>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:176
  _pm2p5 = (_buffer[13] << 8) + _buffer[14];
    389e:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <am1008w_k_i2c+0xd>
    38a2:	50 e0       	ldi	r21, 0x00	; 0
    38a4:	54 2f       	mov	r21, r20
    38a6:	44 27       	eor	r20, r20
    38a8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <am1008w_k_i2c+0xe>
    38ac:	48 0f       	add	r20, r24
    38ae:	51 1d       	adc	r21, r1
    38b0:	50 93 4e 03 	sts	0x034E, r21	; 0x80034e <am1008w_k_i2c+0x32>
    38b4:	40 93 4d 03 	sts	0x034D, r20	; 0x80034d <am1008w_k_i2c+0x31>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:177
  _pm10 = (_buffer[15] << 8) + _buffer[16];
    38b8:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <am1008w_k_i2c+0xf>
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	32 2f       	mov	r19, r18
    38c0:	22 27       	eor	r18, r18
    38c2:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <am1008w_k_i2c+0x10>
    38c6:	28 0f       	add	r18, r24
    38c8:	31 1d       	adc	r19, r1
    38ca:	30 93 50 03 	sts	0x0350, r19	; 0x800350 <am1008w_k_i2c+0x34>
    38ce:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <am1008w_k_i2c+0x33>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:178
  _voc_now_r_ref_r = (_buffer[17] << 8) + _buffer[18];
    38d2:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <am1008w_k_i2c+0x11>
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	98 2f       	mov	r25, r24
    38da:	88 27       	eor	r24, r24
    38dc:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <am1008w_k_i2c+0x12>
    38e0:	8e 0f       	add	r24, r30
    38e2:	91 1d       	adc	r25, r1
    38e4:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <am1008w_k_i2c+0x36>
    38e8:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <am1008w_k_i2c+0x35>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:179
  _voc_ref_r = (_buffer[19] << 8) + _buffer[20];
    38ec:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <am1008w_k_i2c+0x13>
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	98 2f       	mov	r25, r24
    38f4:	88 27       	eor	r24, r24
    38f6:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <am1008w_k_i2c+0x14>
    38fa:	8e 0f       	add	r24, r30
    38fc:	91 1d       	adc	r25, r1
    38fe:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <am1008w_k_i2c+0x38>
    3902:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <am1008w_k_i2c+0x37>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:180
  _voc_now_r = (_buffer[21] << 8) + _buffer[22];
    3906:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <am1008w_k_i2c+0x15>
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	98 2f       	mov	r25, r24
    390e:	88 27       	eor	r24, r24
    3910:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <am1008w_k_i2c+0x16>
    3914:	8e 0f       	add	r24, r30
    3916:	91 1d       	adc	r25, r1
    3918:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <am1008w_k_i2c+0x3a>
    391c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <am1008w_k_i2c+0x39>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:181
  _pm_sensor_status_alarm.value = _buffer[23];
    3920:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <am1008w_k_i2c+0x17>
    3924:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <am1008w_k_i2c+0x3b>
Read_dust_value():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:171
    uint8_t ret = am1008w_k_i2c.read_data_command();
    if (ret == 0)
    {
      p1dot0 = am1008w_k_i2c.get_pm1p0();
    3928:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <p1dot0+0x1>
    392c:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <p1dot0>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:172
      p2dot5 = am1008w_k_i2c.get_pm2p5();
    3930:	50 93 19 03 	sts	0x0319, r21	; 0x800319 <p2dot5+0x1>
    3934:	40 93 18 03 	sts	0x0318, r20	; 0x800318 <p2dot5>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:173
      p10 = am1008w_k_i2c.get_pm10();
    3938:	30 93 17 03 	sts	0x0317, r19	; 0x800317 <p10+0x1>
    393c:	20 93 16 03 	sts	0x0316, r18	; 0x800316 <p10>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:174
      humidity = am1008w_k_i2c.get_humidity()*10;
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	c5 01       	movw	r24, r10
    394a:	b4 01       	movw	r22, r8
    394c:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    3950:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <humidity>
    3954:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <humidity+0x1>
    3958:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <humidity+0x2>
    395c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <humidity+0x3>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:175
      temperature = am1008w_k_i2c.get_temperature()*10;
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e2       	ldi	r20, 0x20	; 32
    3966:	51 e4       	ldi	r21, 0x41	; 65
    3968:	c7 01       	movw	r24, r14
    396a:	b6 01       	movw	r22, r12
    396c:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    3970:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <temperature>
    3974:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <temperature+0x1>
    3978:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <temperature+0x2>
    397c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <temperature+0x3>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:420
    break;
  }
}

void CheckO3(){
  if(++O3_cnt > N_1M)
    3980:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <O3_cnt>
    3984:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <O3_cnt+0x1>
    3988:	01 96       	adiw	r24, 0x01	; 1
    398a:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <O3_cnt+0x1>
    398e:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <O3_cnt>
    3992:	81 36       	cpi	r24, 0x61	; 97
    3994:	9a 4e       	sbci	r25, 0xEA	; 234
    3996:	08 f4       	brcc	.+2      	; 0x399a <main+0x1484>
    3998:	ac c3       	rjmp	.+1880   	; 0x40f2 <main+0x1bdc>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:422
  {
    O3_cnt = 0;
    399a:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <O3_cnt+0x1>
    399e:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <O3_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:423
    Serial.println("Reading...");
    39a2:	8b e4       	ldi	r24, 0x4B	; 75
    39a4:	92 e0       	ldi	r25, 0x02	; 2
    39a6:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
startHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:105

/**
 * Start the heater
 */
 void MQ131Class::startHeater() {
 	digitalWrite(pinPower, HIGH);
    39aa:	61 e0       	ldi	r22, 0x01	; 1
    39ac:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <MQ131+0x7>
    39b0:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
millis():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    39b4:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    39b6:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    39b8:	60 91 58 03 	lds	r22, 0x0358	; 0x800358 <timer0_millis>
    39bc:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <timer0_millis+0x1>
    39c0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <timer0_millis+0x2>
    39c4:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    39c8:	2f bf       	out	0x3f, r18	; 63
startHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:106
 	secLastStart = millis()/1000;
    39ca:	28 ee       	ldi	r18, 0xE8	; 232
    39cc:	33 e0       	ldi	r19, 0x03	; 3
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodsi4>
    39d6:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <MQ131+0xd>
    39da:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <MQ131+0xe>
    39de:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <MQ131+0xf>
    39e2:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <MQ131+0x10>
millis():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    39e6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    39e8:	f8 94       	cli
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    39ea:	60 91 58 03 	lds	r22, 0x0358	; 0x800358 <timer0_millis>
    39ee:	70 91 59 03 	lds	r23, 0x0359	; 0x800359 <timer0_millis+0x1>
    39f2:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <timer0_millis+0x2>
    39f6:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    39fa:	2f bf       	out	0x3f, r18	; 63
isTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:118
 	// Check if the heater has been started...
 	if(secLastStart < 0) {
 		return false;
 	}
 	// OK, check if it's the time to read based on calibration parameters
 	if(millis() / 1000 >= secLastStart + getTimeToRead()) {
    39fc:	28 ee       	ldi	r18, 0xE8	; 232
    39fe:	33 e0       	ldi	r19, 0x03	; 3
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodsi4>
    3a08:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <MQ131+0xd>
    3a0c:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <MQ131+0xe>
    3a10:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <MQ131+0xf>
    3a14:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <MQ131+0x10>
    3a18:	c0 90 41 04 	lds	r12, 0x0441	; 0x800441 <MQ131+0x11>
    3a1c:	d0 90 42 04 	lds	r13, 0x0442	; 0x800442 <MQ131+0x12>
    3a20:	e0 90 43 04 	lds	r14, 0x0443	; 0x800443 <MQ131+0x13>
    3a24:	f0 90 44 04 	lds	r15, 0x0444	; 0x800444 <MQ131+0x14>
    3a28:	8c 0d       	add	r24, r12
    3a2a:	9d 1d       	adc	r25, r13
    3a2c:	ae 1d       	adc	r26, r14
    3a2e:	bf 1d       	adc	r27, r15
    3a30:	28 17       	cp	r18, r24
    3a32:	39 07       	cpc	r19, r25
    3a34:	4a 07       	cpc	r20, r26
    3a36:	5b 07       	cpc	r21, r27
    3a38:	08 f0       	brcs	.+2      	; 0x3a3c <main+0x1526>
    3a3a:	98 c2       	rjmp	.+1328   	; 0x3f6c <main+0x1a56>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:95
 * of the read cycle!
 */
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
    3a3c:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay.constprop.102>
    3a40:	d2 cf       	rjmp	.-92     	; 0x39e6 <main+0x14d0>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3a42:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <results+0x4>
    3a46:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <results+0x5>
    3a4a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <results+0x6>
    3a4e:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <results+0x7>
    3a52:	4a e0       	ldi	r20, 0x0A	; 10
    3a54:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
write():
    3a58:	82 e9       	ldi	r24, 0x92	; 146
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
ReceiveIR():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:277
}

void ReceiveIR(){
  if(irrecv.decode(&results)){ //적외선 신호 해석합니다.
    Serial.println(results.value); // 적외선 신호값을 출력
    if(results.value == IR_PRESSN && TimePush)
    3a60:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <results+0x4>
    3a64:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <results+0x5>
    3a68:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <results+0x6>
    3a6c:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <results+0x7>
    3a70:	8f 3f       	cpi	r24, 0xFF	; 255
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	af 4f       	sbci	r26, 0xFF	; 255
    3a76:	bf 4f       	sbci	r27, 0xFF	; 255
    3a78:	e1 f5       	brne	.+120    	; 0x3af2 <main+0x15dc>
    3a7a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <TimePush>
    3a7e:	88 23       	and	r24, r24
    3a80:	c1 f1       	breq	.+112    	; 0x3af2 <main+0x15dc>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:279
    {
      Serial.print("push_cnt : ");
    3a82:	87 e0       	ldi	r24, 0x07	; 7
    3a84:	92 e0       	ldi	r25, 0x02	; 2
    3a86:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:280
      Serial.println(push_cnt);
    3a8a:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <push_cnt>
    3a8e:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <push_cnt+0x1>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3a96:	4a e0       	ldi	r20, 0x0A	; 10
    3a98:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.92]>
write():
    3a9c:	82 e9       	ldi	r24, 0x92	; 146
    3a9e:	91 e0       	ldi	r25, 0x01	; 1
    3aa0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
ReceiveIR():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:281
      if(++push_cnt == N_3MIN_PUSHING){
    3aa4:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <push_cnt>
    3aa8:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <push_cnt+0x1>
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <push_cnt+0x1>
    3ab2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <push_cnt>
    3ab6:	84 31       	cpi	r24, 0x14	; 20
    3ab8:	91 05       	cpc	r25, r1
    3aba:	09 f5       	brne	.+66     	; 0x3afe <main+0x15e8>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:282
        plasma_cnt = 0;
    3abc:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3ac0:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:283
        plasma_duty = N_PLASMA_ZEORTHR_DUTY;
    3ac4:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <plasma_duty+0x1>
    3ac8:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:284
        plasma_period = N_PLASMA_ZEORTHR_PERIOD;
    3acc:	8c e2       	ldi	r24, 0x2C	; 44
    3ace:	91 e0       	ldi	r25, 0x01	; 1
    3ad0:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <plasma_period+0x1>
    3ad4:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <plasma_period>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:285
        if(Power){
    3ad8:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3adc:	88 23       	and	r24, r24
    3ade:	79 f0       	breq	.+30     	; 0x3afe <main+0x15e8>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:286
        digitalWrite(AUTO_LED,0);
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	8a e1       	ldi	r24, 0x1A	; 26
    3ae4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:287
        digitalWrite(PLASMA_LED,1);
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	8e e0       	ldi	r24, 0x0E	; 14
    3aec:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    3af0:	06 c0       	rjmp	.+12     	; 0x3afe <main+0x15e8>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:290
        }
      }
    }else if(push_cnt) push_cnt = 0;
    3af2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <push_cnt>
    3af6:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <push_cnt+0x1>
    3afa:	89 2b       	or	r24, r25
    3afc:	a1 f5       	brne	.+104    	; 0x3b66 <main+0x1650>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:291
    switch(results.value)
    3afe:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <results+0x4>
    3b02:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <results+0x5>
    3b06:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <results+0x6>
    3b0a:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <results+0x7>
    3b0e:	8f 34       	cpi	r24, 0x4F	; 79
    3b10:	f0 eb       	ldi	r31, 0xB0	; 176
    3b12:	9f 07       	cpc	r25, r31
    3b14:	ff e5       	ldi	r31, 0x5F	; 95
    3b16:	af 07       	cpc	r26, r31
    3b18:	f0 ea       	ldi	r31, 0xA0	; 160
    3b1a:	bf 07       	cpc	r27, r31
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <main+0x160a>
    3b1e:	f9 c0       	rjmp	.+498    	; 0x3d12 <main+0x17fc>
    3b20:	08 f0       	brcs	.+2      	; 0x3b24 <main+0x160e>
    3b22:	69 c0       	rjmp	.+210    	; 0x3bf6 <main+0x16e0>
    3b24:	8f 3a       	cpi	r24, 0xAF	; 175
    3b26:	e0 e5       	ldi	r30, 0x50	; 80
    3b28:	9e 07       	cpc	r25, r30
    3b2a:	ef e5       	ldi	r30, 0x5F	; 95
    3b2c:	ae 07       	cpc	r26, r30
    3b2e:	e0 ea       	ldi	r30, 0xA0	; 160
    3b30:	be 07       	cpc	r27, r30
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <main+0x1620>
    3b34:	cf c0       	rjmp	.+414    	; 0x3cd4 <main+0x17be>
    3b36:	e0 f4       	brcc	.+56     	; 0x3b70 <main+0x165a>
    3b38:	8f 3c       	cpi	r24, 0xCF	; 207
    3b3a:	90 43       	sbci	r25, 0x30	; 48
    3b3c:	af 45       	sbci	r26, 0x5F	; 95
    3b3e:	b0 4a       	sbci	r27, 0xA0	; 160
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <main+0x162e>
    3b42:	75 cd       	rjmp	.-1302   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:341
      break;
      case IR_Button_11:  // 0.3초(살균)
        TimePush = true;
      break;
      case IR_Button_12:  // 풍향 설정
        if(Power){
    3b44:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3b48:	88 23       	and	r24, r24
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <main+0x1638>
    3b4c:	70 cd       	rjmp	.-1312   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:342
          if(++wind_flag > 3) wind_flag = 1;
    3b4e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <wind_flag>
    3b52:	8f 5f       	subi	r24, 0xFF	; 255
    3b54:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <wind_flag>
    3b58:	84 30       	cpi	r24, 0x04	; 4
    3b5a:	08 f4       	brcc	.+2      	; 0x3b5e <main+0x1648>
    3b5c:	49 c0       	rjmp	.+146    	; 0x3bf0 <main+0x16da>
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <wind_flag>
    3b64:	45 c0       	rjmp	.+138    	; 0x3bf0 <main+0x16da>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:290
        if(Power){
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }
    }else if(push_cnt) push_cnt = 0;
    3b66:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <push_cnt+0x1>
    3b6a:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <push_cnt>
    3b6e:	c7 cf       	rjmp	.-114    	; 0x3afe <main+0x15e8>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:291
    switch(results.value)
    3b70:	87 37       	cpi	r24, 0x77	; 119
    3b72:	e8 e8       	ldi	r30, 0x88	; 136
    3b74:	9e 07       	cpc	r25, r30
    3b76:	ef e5       	ldi	r30, 0x5F	; 95
    3b78:	ae 07       	cpc	r26, r30
    3b7a:	e0 ea       	ldi	r30, 0xA0	; 160
    3b7c:	be 07       	cpc	r27, r30
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <main+0x166c>
    3b80:	d9 c0       	rjmp	.+434    	; 0x3d34 <main+0x181e>
    3b82:	8f 35       	cpi	r24, 0x5F	; 95
    3b84:	90 4a       	sbci	r25, 0xA0	; 160
    3b86:	af 45       	sbci	r26, 0x5F	; 95
    3b88:	b0 4a       	sbci	r27, 0xA0	; 160
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <main+0x1678>
    3b8c:	50 cd       	rjmp	.-1376   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:303
          digitalWrite(AUTO_LED,0);
          digitalWrite(PLASMA_LED,1);
        }
      break;
      case IR_Button_5:  // on/off
        Power = !Power;
    3b8e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3b92:	11 e0       	ldi	r17, 0x01	; 1
    3b94:	81 27       	eor	r24, r17
    3b96:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <Power>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:304
        if(Power){
    3b9a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <main+0x168e>
    3ba2:	77 c0       	rjmp	.+238    	; 0x3c92 <main+0x177c>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:305
          plasma_flag = plasma_on;
    3ba4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <plasma_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:306
          digitalWrite(PWR_LED,1);
    3ba8:	61 e0       	ldi	r22, 0x01	; 1
    3baa:	8d e0       	ldi	r24, 0x0D	; 13
    3bac:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:307
          digitalWrite(AUTO_LED,1);
    3bb0:	61 e0       	ldi	r22, 0x01	; 1
    3bb2:	8a e1       	ldi	r24, 0x1A	; 26
    3bb4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:308
          digitalWrite(UV_EN,1);
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	85 e1       	ldi	r24, 0x15	; 21
    3bbc:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:309
          wind_flag = low;
    3bc0:	10 93 ef 02 	sts	0x02EF, r17	; 0x8002ef <wind_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:310
          plasma_cnt = 0;
    3bc4:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3bc8:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:311
          plasma_duty = N_PLASMA_FOUR_DUTY;
    3bcc:	a4 e1       	ldi	r26, 0x14	; 20
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <plasma_duty+0x1>
    3bd4:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:312
          plasma_period = N_PLASMA_FOUR_PERIOD;
    3bd8:	e0 ea       	ldi	r30, 0xA0	; 160
    3bda:	ff e0       	ldi	r31, 0x0F	; 15
    3bdc:	f0 93 06 03 	sts	0x0306, r31	; 0x800306 <plasma_period+0x1>
    3be0:	e0 93 05 03 	sts	0x0305, r30	; 0x800305 <plasma_period>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:313
          segement_flag = 0;
    3be4:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <segement_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:314
          segment_cnt = 0;
    3be8:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <segment_cnt+0x1>
    3bec:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <segment_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:326
          digitalWrite(PWR_LED,0);
          digitalWrite(PLASMA_LED,0);
          wind_flag = wind_off;
          module.clearDisplay();
        }
        WindDirectionControl();
    3bf0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <WindDirectionControl()>
    3bf4:	1c cd       	rjmp	.-1480   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:291
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }
    }else if(push_cnt) push_cnt = 0;
    switch(results.value)
    3bf6:	87 33       	cpi	r24, 0x37	; 55
    3bf8:	28 ec       	ldi	r18, 0xC8	; 200
    3bfa:	92 07       	cpc	r25, r18
    3bfc:	2f e5       	ldi	r18, 0x5F	; 95
    3bfe:	a2 07       	cpc	r26, r18
    3c00:	20 ea       	ldi	r18, 0xA0	; 160
    3c02:	b2 07       	cpc	r27, r18
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <main+0x16f2>
    3c06:	a3 c0       	rjmp	.+326    	; 0x3d4e <main+0x1838>
    3c08:	20 f5       	brcc	.+72     	; 0x3c52 <main+0x173c>
    3c0a:	8f 33       	cpi	r24, 0x3F	; 63
    3c0c:	90 4c       	sbci	r25, 0xC0	; 192
    3c0e:	af 45       	sbci	r26, 0x5F	; 95
    3c10:	b0 4a       	sbci	r27, 0xA0	; 160
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <main+0x1700>
    3c14:	0c cd       	rjmp	.-1512   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:294
    {
      case IR_Button_3:  // 0.3초
        plasma_cnt = 0;
    3c16:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3c1a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:295
        plasma_duty = N_PLASMA_ZEORTHR_DUTY;
    3c1e:	84 e1       	ldi	r24, 0x14	; 20
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <plasma_duty+0x1>
    3c26:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:296
        plasma_period = N_PLASMA_ZEORTHR_PERIOD;
    3c2a:	8c e2       	ldi	r24, 0x2C	; 44
    3c2c:	91 e0       	ldi	r25, 0x01	; 1
    3c2e:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <plasma_period+0x1>
    3c32:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <plasma_period>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:297
        if(Power){
    3c36:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3c3a:	88 23       	and	r24, r24
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <main+0x172a>
    3c3e:	f7 cc       	rjmp	.-1554   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:298
          digitalWrite(AUTO_LED,0);
    3c40:	60 e0       	ldi	r22, 0x00	; 0
    3c42:	8a e1       	ldi	r24, 0x1A	; 26
    3c44:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:299
          digitalWrite(PLASMA_LED,1);
    3c48:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:334
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_FOUR_DUTY;
        plasma_period = N_PLASMA_FOUR_PERIOD;
        if(Power){
          digitalWrite(AUTO_LED,1);
          digitalWrite(PLASMA_LED,0);
    3c4a:	8e e0       	ldi	r24, 0x0E	; 14
    3c4c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    3c50:	ee cc       	rjmp	.-1572   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:291
        digitalWrite(AUTO_LED,0);
        digitalWrite(PLASMA_LED,1);
        }
      }
    }else if(push_cnt) push_cnt = 0;
    switch(results.value)
    3c52:	8f 32       	cpi	r24, 0x2F	; 47
    3c54:	20 ed       	ldi	r18, 0xD0	; 208
    3c56:	92 07       	cpc	r25, r18
    3c58:	2f e5       	ldi	r18, 0x5F	; 95
    3c5a:	a2 07       	cpc	r26, r18
    3c5c:	20 ea       	ldi	r18, 0xA0	; 160
    3c5e:	b2 07       	cpc	r27, r18
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <main+0x174e>
    3c62:	53 c0       	rjmp	.+166    	; 0x3d0a <main+0x17f4>
    3c64:	8f 30       	cpi	r24, 0x0F	; 15
    3c66:	90 4f       	sbci	r25, 0xF0	; 240
    3c68:	af 45       	sbci	r26, 0x5F	; 95
    3c6a:	b0 4a       	sbci	r27, 0xA0	; 160
    3c6c:	09 f0       	breq	.+2      	; 0x3c70 <main+0x175a>
    3c6e:	df cc       	rjmp	.-1602   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:352
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_ONE_DUTY;
        plasma_period = N_PLASMA_ONE_PERIOD;
      break;
      case IR_Button_15:  // 4초
        plasma_cnt = 0;
    3c70:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3c74:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:353
        plasma_duty = N_PLASMA_FOUR_DUTY;
    3c78:	a4 e1       	ldi	r26, 0x14	; 20
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <plasma_duty+0x1>
    3c80:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:354
        plasma_period = N_PLASMA_FOUR_PERIOD;
    3c84:	e0 ea       	ldi	r30, 0xA0	; 160
    3c86:	ff e0       	ldi	r31, 0x0F	; 15
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:364
        plasma_period = N_PLASMA_SIX_PERIOD;
      break;
      case IR_Button_18:  // 8초
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_EIGHT_DUTY;
        plasma_period = N_PLASMA_EIGHT_PERIOD;
    3c88:	f0 93 06 03 	sts	0x0306, r31	; 0x800306 <plasma_period+0x1>
    3c8c:	e0 93 05 03 	sts	0x0305, r30	; 0x800305 <plasma_period>
    3c90:	ce cc       	rjmp	.-1636   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:316
          plasma_duty = N_PLASMA_FOUR_DUTY;
          plasma_period = N_PLASMA_FOUR_PERIOD;
          segement_flag = 0;
          segment_cnt = 0;
          }else{
          plasma_flag = plasma_off;
    3c92:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <plasma_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:317
          digitalWrite(AUTO_LED,0);
    3c96:	60 e0       	ldi	r22, 0x00	; 0
    3c98:	8a e1       	ldi	r24, 0x1A	; 26
    3c9a:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:318
          digitalWrite(UV_EN,0);
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	85 e1       	ldi	r24, 0x15	; 21
    3ca2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:319
          digitalWrite(FAN1_EN,0);
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	89 e0       	ldi	r24, 0x09	; 9
    3caa:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:320
          digitalWrite(DC18_EN,0);
    3cae:	60 e0       	ldi	r22, 0x00	; 0
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:321
          digitalWrite(PWR_LED,0);
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	8d e0       	ldi	r24, 0x0D	; 13
    3cba:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:322
          digitalWrite(PLASMA_LED,0);
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	8e e0       	ldi	r24, 0x0E	; 14
    3cc2:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:323
          wind_flag = wind_off;
    3cc6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <wind_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:324
          module.clearDisplay();
    3cca:	84 e3       	ldi	r24, 0x34	; 52
    3ccc:	95 e0       	ldi	r25, 0x05	; 5
    3cce:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
    3cd2:	8e cf       	rjmp	.-228    	; 0x3bf0 <main+0x16da>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:329
        }
        WindDirectionControl();
      break;
      case IR_Button_10:  // 4초
        plasma_cnt = 0;
    3cd4:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3cd8:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:330
        plasma_duty = N_PLASMA_FOUR_DUTY;
    3cdc:	84 e1       	ldi	r24, 0x14	; 20
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <plasma_duty+0x1>
    3ce4:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:331
        plasma_period = N_PLASMA_FOUR_PERIOD;
    3ce8:	a0 ea       	ldi	r26, 0xA0	; 160
    3cea:	bf e0       	ldi	r27, 0x0F	; 15
    3cec:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <plasma_period+0x1>
    3cf0:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <plasma_period>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:332
        if(Power){
    3cf4:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <Power>
    3cf8:	88 23       	and	r24, r24
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <main+0x17e8>
    3cfc:	98 cc       	rjmp	.-1744   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:333
          digitalWrite(AUTO_LED,1);
    3cfe:	61 e0       	ldi	r22, 0x01	; 1
    3d00:	8a e1       	ldi	r24, 0x1A	; 26
    3d02:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:334
          digitalWrite(PLASMA_LED,0);
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	a0 cf       	rjmp	.-192    	; 0x3c4a <main+0x1734>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:338
        }
      break;
      case IR_Button_11:  // 0.3초(살균)
        TimePush = true;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <TimePush>
    3d10:	8e cc       	rjmp	.-1764   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:347
          if(++wind_flag > 3) wind_flag = 1;
          WindDirectionControl();
        }
      break;
      case IR_Button_13:  // 1초
        plasma_cnt = 0;
    3d12:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3d16:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:348
        plasma_duty = N_PLASMA_ONE_DUTY;
    3d1a:	e4 e1       	ldi	r30, 0x14	; 20
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	f0 93 08 03 	sts	0x0308, r31	; 0x800308 <plasma_duty+0x1>
    3d22:	e0 93 07 03 	sts	0x0307, r30	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:349
        plasma_period = N_PLASMA_ONE_PERIOD;
    3d26:	88 ee       	ldi	r24, 0xE8	; 232
    3d28:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:359
        plasma_period = N_PLASMA_FOUR_PERIOD;
      break;
      case IR_Button_16:  // 6초
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_SIX_DUTY;
        plasma_period = N_PLASMA_SIX_PERIOD;
    3d2a:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <plasma_period+0x1>
    3d2e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <plasma_period>
    3d32:	7d cc       	rjmp	.-1798   	; 0x362e <main+0x1118>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:357
        plasma_cnt = 0;
        plasma_duty = N_PLASMA_FOUR_DUTY;
        plasma_period = N_PLASMA_FOUR_PERIOD;
      break;
      case IR_Button_16:  // 6초
        plasma_cnt = 0;
    3d34:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3d38:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:358
        plasma_duty = N_PLASMA_SIX_DUTY;
    3d3c:	84 e1       	ldi	r24, 0x14	; 20
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <plasma_duty+0x1>
    3d44:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:359
        plasma_period = N_PLASMA_SIX_PERIOD;
    3d48:	80 e7       	ldi	r24, 0x70	; 112
    3d4a:	97 e1       	ldi	r25, 0x17	; 23
    3d4c:	ee cf       	rjmp	.-36     	; 0x3d2a <main+0x1814>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:362
      break;
      case IR_Button_18:  // 8초
        plasma_cnt = 0;
    3d4e:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3d52:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:363
        plasma_duty = N_PLASMA_EIGHT_DUTY;
    3d56:	a4 e1       	ldi	r26, 0x14	; 20
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <plasma_duty+0x1>
    3d5e:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <plasma_duty>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:364
        plasma_period = N_PLASMA_EIGHT_PERIOD;
    3d62:	e0 e4       	ldi	r30, 0x40	; 64
    3d64:	ff e1       	ldi	r31, 0x1F	; 31
    3d66:	90 cf       	rjmp	.-224    	; 0x3c88 <main+0x1772>
PlasmaControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:399

void PlasmaControl(){
  switch(plasma_flag)
  {
    case plasma_on:
    digitalWrite(DC18_EN,1);
    3d68:	61 e0       	ldi	r22, 0x01	; 1
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:400
    plasma_cnt++;
    3d70:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <plasma_cnt>
    3d74:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <plasma_cnt+0x1>
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <plasma_cnt+0x1>
    3d7e:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <plasma_cnt>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:401
    if(plasma_duty == plasma_cnt) {
    3d82:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <plasma_duty>
    3d86:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <plasma_duty+0x1>
    3d8a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <plasma_cnt>
    3d8e:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <plasma_cnt+0x1>
    3d92:	28 17       	cp	r18, r24
    3d94:	39 07       	cpc	r19, r25
    3d96:	41 f4       	brne	.+16     	; 0x3da8 <main+0x1892>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:402
      digitalWrite(PLASMA1_EN,0);
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	85 e0       	ldi	r24, 0x05	; 5
    3d9c:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:403
      digitalWrite(PLASMA2_EN,0);
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	86 e0       	ldi	r24, 0x06	; 6
    3da4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:405
    }
    if(plasma_period == plasma_cnt){
    3da8:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <plasma_period>
    3dac:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <plasma_period+0x1>
    3db0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <plasma_cnt>
    3db4:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <plasma_cnt+0x1>
    3db8:	28 17       	cp	r18, r24
    3dba:	39 07       	cpc	r19, r25
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <main+0x18aa>
    3dbe:	46 cc       	rjmp	.-1908   	; 0x364c <main+0x1136>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:406
      digitalWrite(PLASMA1_EN,1);
    3dc0:	61 e0       	ldi	r22, 0x01	; 1
    3dc2:	85 e0       	ldi	r24, 0x05	; 5
    3dc4:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:407
      digitalWrite(PLASMA2_EN,1);
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	86 e0       	ldi	r24, 0x06	; 6
    3dcc:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:408
      plasma_cnt = 0;
    3dd0:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <plasma_cnt+0x1>
    3dd4:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <plasma_cnt>
    3dd8:	39 cc       	rjmp	.-1934   	; 0x364c <main+0x1136>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:412
    }
    break;
    case plasma_off:
    digitalWrite(DC18_EN,0);
    3dda:	60 e0       	ldi	r22, 0x00	; 0
    3ddc:	83 e0       	ldi	r24, 0x03	; 3
    3dde:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:413
    digitalWrite(PLASMA1_EN,0);
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	85 e0       	ldi	r24, 0x05	; 5
    3de6:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:414
    digitalWrite(PLASMA2_EN,0);
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	86 e0       	ldi	r24, 0x06	; 6
    3dee:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
    3df2:	2c cc       	rjmp	.-1960   	; 0x364c <main+0x1136>
SegmentControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:235
    if(N_SEGMENT_DUTY == segment_cnt) {
      Serial.print("pm1.0: ");
      Serial.println(p1dot0);
      setSegmentInt(p1dot0);
    }
    }else if(segement_flag == 1){ // PM2.5
    3df4:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3df8:	81 30       	cpi	r24, 0x01	; 1
    3dfa:	a9 f5       	brne	.+106    	; 0x3e66 <main+0x1950>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:236
    if(0 == segment_cnt){
    3dfc:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3e00:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3e04:	89 2b       	or	r24, r25
    3e06:	c1 f4       	brne	.+48     	; 0x3e38 <main+0x1922>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:237
      module.clearDisplay();
    3e08:	84 e3       	ldi	r24, 0x34	; 52
    3e0a:	95 e0       	ldi	r25, 0x05	; 5
    3e0c:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:238
      module.setDisplayToString("P25");
    3e10:	0f e0       	ldi	r16, 0x0F	; 15
    3e12:	12 e0       	ldi	r17, 0x02	; 2
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	6f e1       	ldi	r22, 0x1F	; 31
    3e1c:	72 e0       	ldi	r23, 0x02	; 2
    3e1e:	84 e3       	ldi	r24, 0x34	; 52
    3e20:	95 e0       	ldi	r25, 0x05	; 5
    3e22:	0e 94 49 06 	call	0xc92	; 0xc92 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:239
      module.setDisplayDigit(2,1,true);
    3e26:	0f ef       	ldi	r16, 0xFF	; 255
    3e28:	11 e0       	ldi	r17, 0x01	; 1
    3e2a:	21 e0       	ldi	r18, 0x01	; 1
    3e2c:	41 e0       	ldi	r20, 0x01	; 1
    3e2e:	62 e0       	ldi	r22, 0x02	; 2
    3e30:	84 e3       	ldi	r24, 0x34	; 52
    3e32:	95 e0       	ldi	r25, 0x05	; 5
    3e34:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:241
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    3e38:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3e3c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3e40:	88 3e       	cpi	r24, 0xE8	; 232
    3e42:	93 40       	sbci	r25, 0x03	; 3
    3e44:	09 f0       	breq	.+2      	; 0x3e48 <main+0x1932>
    3e46:	56 cc       	rjmp	.-1876   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:242
      Serial.print("pm2.5: ");
    3e48:	83 e2       	ldi	r24, 0x23	; 35
    3e4a:	92 e0       	ldi	r25, 0x02	; 2
    3e4c:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:243
      Serial.println(p2dot5);
    3e50:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <p2dot5>
    3e54:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <p2dot5+0x1>
    3e58:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:244
      setSegmentInt(p2dot5);
    3e5c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <p2dot5>
    3e60:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <p2dot5+0x1>
    3e64:	45 cc       	rjmp	.-1910   	; 0x36f0 <main+0x11da>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:246
    }
    }else if(segement_flag == 2){ // PM10
    3e66:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3e6a:	82 30       	cpi	r24, 0x02	; 2
    3e6c:	61 f5       	brne	.+88     	; 0x3ec6 <main+0x19b0>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:247
    if(0 == segment_cnt){
    3e6e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3e72:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3e76:	89 2b       	or	r24, r25
    3e78:	79 f4       	brne	.+30     	; 0x3e98 <main+0x1982>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:248
      module.clearDisplay();
    3e7a:	84 e3       	ldi	r24, 0x34	; 52
    3e7c:	95 e0       	ldi	r25, 0x05	; 5
    3e7e:	0e 94 98 08 	call	0x1130	; 0x1130 <TM1650::clearDisplay()>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:249
      module.setDisplayToString("P10");
    3e82:	0f e0       	ldi	r16, 0x0F	; 15
    3e84:	12 e0       	ldi	r17, 0x02	; 2
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	63 e1       	ldi	r22, 0x13	; 19
    3e8e:	72 e0       	ldi	r23, 0x02	; 2
    3e90:	84 e3       	ldi	r24, 0x34	; 52
    3e92:	95 e0       	ldi	r25, 0x05	; 5
    3e94:	0e 94 49 06 	call	0xc92	; 0xc92 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:251
    }
    if(N_SEGMENT_DUTY == segment_cnt) {
    3e98:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3e9c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3ea0:	88 3e       	cpi	r24, 0xE8	; 232
    3ea2:	93 40       	sbci	r25, 0x03	; 3
    3ea4:	09 f0       	breq	.+2      	; 0x3ea8 <main+0x1992>
    3ea6:	26 cc       	rjmp	.-1972   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:252
      Serial.print("pm10: ");
    3ea8:	8b e2       	ldi	r24, 0x2B	; 43
    3eaa:	92 e0       	ldi	r25, 0x02	; 2
    3eac:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:253
      Serial.println(p10);
    3eb0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <p10>
    3eb4:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <p10+0x1>
    3eb8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Print::println(int, int) [clone .constprop.16]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:254
      setSegmentInt(p10);
    3ebc:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <p10>
    3ec0:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <p10+0x1>
    3ec4:	15 cc       	rjmp	.-2006   	; 0x36f0 <main+0x11da>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:256
    }
    }else if(segement_flag == 3){ // 습도
    3ec6:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3eca:	83 30       	cpi	r24, 0x03	; 3
    3ecc:	31 f5       	brne	.+76     	; 0x3f1a <main+0x1a04>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:257
    if(segment_cnt == 0){
    3ece:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3ed2:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3ed6:	89 2b       	or	r24, r25
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <main+0x19c6>
    3eda:	0c cc       	rjmp	.-2024   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:258
      Serial.print("humidity: ");
    3edc:	82 e3       	ldi	r24, 0x32	; 50
    3ede:	92 e0       	ldi	r25, 0x02	; 2
    3ee0:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:259
      Serial.println(humidity);
    3ee4:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <humidity>
    3ee8:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <humidity+0x1>
    3eec:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <humidity+0x2>
    3ef0:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <humidity+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3ef4:	42 e0       	ldi	r20, 0x02	; 2
    3ef6:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
write():
    3efa:	82 e9       	ldi	r24, 0x92	; 146
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
SegmentControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:261
      
      setSegmentFloat(humidity,1); // 1-> 퍼센트 나타내기 2
    3f02:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <humidity>
    3f06:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <humidity+0x1>
    3f0a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <humidity+0x2>
    3f0e:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <humidity+0x3>
    3f12:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:268
    }else if(segement_flag == 4){ // 온도
    if(segment_cnt == 0){
      Serial.print("temperature: ");
      Serial.println(temperature);
      
      setSegmentFloat(temperature,0); //0-> 섭씨온도 기호 나타내기
    3f14:	0e 94 41 0b 	call	0x1682	; 0x1682 <setSegmentFloat(float, bool)>
    3f18:	ed cb       	rjmp	.-2086   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:263
      Serial.print("humidity: ");
      Serial.println(humidity);
      
      setSegmentFloat(humidity,1); // 1-> 퍼센트 나타내기 2
    }
    }else if(segement_flag == 4){ // 온도
    3f1a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <segement_flag>
    3f1e:	84 30       	cpi	r24, 0x04	; 4
    3f20:	09 f0       	breq	.+2      	; 0x3f24 <main+0x1a0e>
    3f22:	e8 cb       	rjmp	.-2096   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:264
    if(segment_cnt == 0){
    3f24:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <segment_cnt>
    3f28:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <segment_cnt+0x1>
    3f2c:	89 2b       	or	r24, r25
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <main+0x1a1c>
    3f30:	e1 cb       	rjmp	.-2110   	; 0x36f4 <main+0x11de>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:265
      Serial.print("temperature: ");
    3f32:	8d e3       	ldi	r24, 0x3D	; 61
    3f34:	92 e0       	ldi	r25, 0x02	; 2
    3f36:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:266
      Serial.println(temperature);
    3f3a:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <temperature>
    3f3e:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <temperature+0x1>
    3f42:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <temperature+0x2>
    3f46:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <temperature+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    3f4a:	42 e0       	ldi	r20, 0x02	; 2
    3f4c:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
write():
    3f50:	82 e9       	ldi	r24, 0x92	; 146
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Print::write(char const*) [clone .part.2] [clone .constprop.108]>
SegmentControl():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:268
      
      setSegmentFloat(temperature,0); //0-> 섭씨온도 기호 나타내기
    3f58:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <temperature>
    3f5c:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <temperature+0x1>
    3f60:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <temperature+0x2>
    3f64:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <temperature+0x3>
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	d4 cf       	rjmp	.-88     	; 0x3f14 <main+0x19fe>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:152
/**
 * Read Rs value
 */
 float MQ131Class::readRs() {
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
    3f6c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <MQ131+0x8>
analogRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    3f70:	88 30       	cpi	r24, 0x08	; 8
    3f72:	48 f0       	brcs	.+18     	; 0x3f86 <main+0x1a70>
    3f74:	92 ef       	ldi	r25, 0xF2	; 242
    3f76:	98 0f       	add	r25, r24
    3f78:	9b 30       	cpi	r25, 0x0B	; 11
    3f7a:	08 f4       	brcc	.+2      	; 0x3f7e <main+0x1a68>
    3f7c:	c0 c0       	rjmp	.+384    	; 0x40fe <main+0x1be8>
    3f7e:	89 31       	cpi	r24, 0x19	; 25
    3f80:	08 f4       	brcc	.+2      	; 0x3f84 <main+0x1a6e>
    3f82:	bf c0       	rjmp	.+382    	; 0x4102 <main+0x1bec>
    3f84:	83 51       	subi	r24, 0x13	; 19
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    3f86:	87 70       	andi	r24, 0x07	; 7
    3f88:	80 64       	ori	r24, 0x40	; 64
    3f8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    3f8e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3f92:	80 64       	ori	r24, 0x40	; 64
    3f94:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    3f98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3f9c:	86 fd       	sbrc	r24, 6
    3f9e:	fc cf       	rjmp	.-8      	; 0x3f98 <main+0x1a82>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    3fa0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3fa4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:154
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__floatunsisf>
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5a e3       	ldi	r21, 0x3A	; 58
    3fb8:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 ea       	ldi	r20, 0xA0	; 160
    3fc2:	50 e4       	ldi	r21, 0x40	; 64
    3fc4:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    3fc8:	6b 01       	movw	r12, r22
    3fca:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	a9 01       	movw	r20, r18
    3fd2:	0e 94 cf 20 	call	0x419e	; 0x419e <__cmpsf2>
    3fd6:	88 23       	and	r24, r24
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <main+0x1ac6>
    3fda:	95 c0       	rjmp	.+298    	; 0x4106 <main+0x1bf0>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:157
 	float rS = (5.0 / vRL - 1.0) * valueRL;
    3fdc:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <MQ131+0x9>
    3fe0:	70 91 3a 04 	lds	r23, 0x043A	; 0x80043a <MQ131+0xa>
    3fe4:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <MQ131+0xb>
    3fe8:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <MQ131+0xc>
    3fec:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__floatunsisf>
    3ff0:	4b 01       	movw	r8, r22
    3ff2:	5c 01       	movw	r10, r24
    3ff4:	a7 01       	movw	r20, r14
    3ff6:	96 01       	movw	r18, r12
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	80 ea       	ldi	r24, 0xA0	; 160
    3ffe:	90 e4       	ldi	r25, 0x40	; 64
    4000:	0e 94 ac 22 	call	0x4558	; 0x4558 <__divsf3>
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	40 e8       	ldi	r20, 0x80	; 128
    400a:	5f e3       	ldi	r21, 0x3F	; 63
    400c:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	c5 01       	movw	r24, r10
    4016:	b4 01       	movw	r22, r8
    4018:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:97
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
 	}
 	lastValueRs = readRs();
    401c:	60 93 49 04 	sts	0x0449, r22	; 0x800449 <MQ131+0x19>
    4020:	70 93 4a 04 	sts	0x044A, r23	; 0x80044a <MQ131+0x1a>
    4024:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <MQ131+0x1b>
    4028:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <MQ131+0x1c>
stopHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:128

/**
 * Stop the heater
 */
 void MQ131Class::stopHeater() {
 	digitalWrite(pinPower, LOW);
    402c:	60 e0       	ldi	r22, 0x00	; 0
    402e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <MQ131+0x7>
    4032:	0e 94 09 04 	call	0x812	; 0x812 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:129
 	secLastStart = -1;
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	9f ef       	ldi	r25, 0xFF	; 255
    403a:	dc 01       	movw	r26, r24
    403c:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <MQ131+0xd>
    4040:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <MQ131+0xe>
    4044:	a0 93 3f 04 	sts	0x043F, r26	; 0x80043f <MQ131+0xf>
    4048:	b0 93 40 04 	sts	0x0440, r27	; 0x800440 <MQ131+0x10>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:426
  {
    O3_cnt = 0;
    Serial.println("Reading...");
    MQ131.sample();

    Serial.print("O3 Value:"); // oz 신호값을 출력
    404c:	86 e5       	ldi	r24, 0x56	; 86
    404e:	92 e0       	ldi	r25, 0x02	; 2
    4050:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:427
    ozSensorRdValue = MQ131.getO3(PPM);
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]>
    405c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <ozSensorRdValue>
    4060:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <ozSensorRdValue+0x1>
    4064:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ozSensorRdValue+0x2>
    4068:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ozSensorRdValue+0x3>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    406c:	42 e0       	ldi	r20, 0x02	; 2
    406e:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:429
    Serial.print(ozSensorRdValue); // oz 신호값을 출력
    Serial.print("Concentration O3 : ");
    4072:	80 e6       	ldi	r24, 0x60	; 96
    4074:	92 e0       	ldi	r25, 0x02	; 2
    4076:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:430
    Serial.print(MQ131.getO3(PPB));
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    4082:	42 e0       	ldi	r20, 0x02	; 2
    4084:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:431
    Serial.println(" ppb");
    4088:	84 e7       	ldi	r24, 0x74	; 116
    408a:	92 e0       	ldi	r25, 0x02	; 2
    408c:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:432
    Serial.print("Concentration O3 : ");
    4090:	80 e6       	ldi	r24, 0x60	; 96
    4092:	92 e0       	ldi	r25, 0x02	; 2
    4094:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:433
    Serial.print(MQ131.getO3(MG_M3));
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    40a0:	42 e0       	ldi	r20, 0x02	; 2
    40a2:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:434
    Serial.println(" mg/m3");
    40a6:	89 e7       	ldi	r24, 0x79	; 121
    40a8:	92 e0       	ldi	r25, 0x02	; 2
    40aa:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:435
    Serial.print("Concentration O3 : ");
    40ae:	80 e6       	ldi	r24, 0x60	; 96
    40b0:	92 e0       	ldi	r25, 0x02	; 2
    40b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <Print::print(char const*) [clone .constprop.98]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:436
    Serial.print(MQ131.getO3(UG_M3));
    40b6:	83 e0       	ldi	r24, 0x03	; 3
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <MQ131Class::getO3(MQ131Unit) [clone .constprop.94]>
print():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:111
    40be:	42 e0       	ldi	r20, 0x02	; 2
    40c0:	0e 94 cf 0c 	call	0x199e	; 0x199e <Print::printFloat(double, unsigned char) [clone .constprop.87]>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:437
    Serial.println(" ug/m3");
    40c4:	80 e8       	ldi	r24, 0x80	; 128
    40c6:	92 e0       	ldi	r25, 0x02	; 2
    40c8:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:438
    if(MQ131.getR0() >= 10000.00f){
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e4       	ldi	r19, 0x40	; 64
    40d0:	4c e1       	ldi	r20, 0x1C	; 28
    40d2:	56 e4       	ldi	r21, 0x46	; 70
    40d4:	60 91 45 04 	lds	r22, 0x0445	; 0x800445 <MQ131+0x15>
    40d8:	70 91 46 04 	lds	r23, 0x0446	; 0x800446 <MQ131+0x16>
    40dc:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <MQ131+0x17>
    40e0:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <MQ131+0x18>
    40e4:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__gesf2>
    40e8:	87 fd       	sbrc	r24, 7
    40ea:	11 c0       	rjmp	.+34     	; 0x410e <main+0x1bf8>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:439
      plasma_flag = plasma_off;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <plasma_flag>
loop():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:504
    PlasmaControl();
    SegmentControl();
    Read_dust_value();
    CheckO3();
  }
  delay(1);
    40f2:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay.constprop.102>
main():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    40f6:	0e 94 83 03 	call	0x706	; 0x706 <serialEventRun()>
    40fa:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <main+0x28e>
analogRead():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    40fe:	89 2f       	mov	r24, r25
    4100:	42 cf       	rjmp	.-380    	; 0x3f86 <main+0x1a70>
main():
    4102:	8f ef       	ldi	r24, 0xFF	; 255
    4104:	40 cf       	rjmp	.-384    	; 0x3f86 <main+0x1a70>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	cb 01       	movw	r24, r22
    410c:	87 cf       	rjmp	.-242    	; 0x401c <main+0x1b06>
CheckO3():
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:441
    Serial.print(MQ131.getO3(UG_M3));
    Serial.println(" ug/m3");
    if(MQ131.getR0() >= 10000.00f){
      plasma_flag = plasma_off;
      }else{
      if (ozSensorRdValue >= 0)
    410e:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ozSensorRdValue>
    4112:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ozSensorRdValue+0x1>
    4116:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <ozSensorRdValue+0x2>
    411a:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <ozSensorRdValue+0x3>
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	a9 01       	movw	r20, r18
    4124:	c7 01       	movw	r24, r14
    4126:	b6 01       	movw	r22, r12
    4128:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__gesf2>
    412c:	87 fd       	sbrc	r24, 7
    412e:	e1 cf       	rjmp	.-62     	; 0x40f2 <main+0x1bdc>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:443
      {
        if (ozSensorRdValue >= OZON_SENSOR_OFF_VALUE)
    4130:	2f e8       	ldi	r18, 0x8F	; 143
    4132:	32 ec       	ldi	r19, 0xC2	; 194
    4134:	45 ef       	ldi	r20, 0xF5	; 245
    4136:	5c e3       	ldi	r21, 0x3C	; 60
    4138:	c7 01       	movw	r24, r14
    413a:	b6 01       	movw	r22, r12
    413c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__gesf2>
    4140:	87 fd       	sbrc	r24, 7
    4142:	08 c0       	rjmp	.+16     	; 0x4154 <main+0x1c3e>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:445
        {
          plasma_flag = plasma_off;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <plasma_flag>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:446
          Serial.println("Plazma Off...");
    414a:	87 e8       	ldi	r24, 0x87	; 135
    414c:	92 e0       	ldi	r25, 0x02	; 2
    414e:	0e 94 bf 0c 	call	0x197e	; 0x197e <Print::println(char const*) [clone .constprop.105]>
    4152:	cf cf       	rjmp	.-98     	; 0x40f2 <main+0x1bdc>
C:\Users\dlcks\Desktop\minicore error solve\123123123/123123123.ino:450
        }
        else
        {
          plasma_flag = plasma_on;
    4154:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <plasma_flag>
    4158:	cc cf       	rjmp	.-104    	; 0x40f2 <main+0x1bdc>
MATCH_MARK():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/IRremote.cpp:76
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(desired_us + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS_MICROS))
            && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS_MICROS)));
    415a:	2a 30       	cpi	r18, 0x0A	; 10
    415c:	31 05       	cpc	r19, r1
    415e:	14 f4       	brge	.+4      	; 0x4164 <main+0x1c4e>
    4160:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <main+0x6ae>
decodeSony():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote\src/ir_Sony.cpp:82
        offset++;

        if (MATCH_MARK(results.rawbuf[offset], SONY_ONE_MARK)) {
            data = (data << 1) | 1;
        } else if (MATCH_MARK(results.rawbuf[offset], SONY_ZERO_MARK)) {
            data = (data << 1) | 0;
    4164:	44 0f       	add	r20, r20
    4166:	55 1f       	adc	r21, r21
    4168:	66 1f       	adc	r22, r22
    416a:	77 1f       	adc	r23, r23
    416c:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <main+0x68e>

00004170 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
__base_dtor ():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:439
  #endif
  tw_attachSlaveRxEvent(onReceive);
  tw_attachSlaveTxEvent(onTransmit);
}

TwoWire::~TwoWire()
    4170:	84 e2       	ldi	r24, 0x24	; 36
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <Wire+0x1>
    4178:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <Wire>
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:441
{
  delete[] rxBuffer;
    417c:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <Wire+0xe>
    4180:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <Wire+0xf>
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	11 f0       	breq	.+4      	; 0x418c <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_+0x1c>
operator delete():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
    4188:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <free>
__base_dtor ():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:442
  delete[] txBuffer;
    418c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <Wire+0x13>
    4190:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <Wire+0x14>
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	11 f0       	breq	.+4      	; 0x419c <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_+0x2c>
operator delete():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
    4198:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <free>
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\dlcks\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:787
                         twi_manageTimeoutFlag,
                       #endif
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    419c:	08 95       	ret

0000419e <__cmpsf2>:
__cmpsf2():
    419e:	0e 94 11 21 	call	0x4222	; 0x4222 <__fp_cmp>
    41a2:	08 f4       	brcc	.+2      	; 0x41a6 <__cmpsf2+0x8>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	08 95       	ret

000041a8 <__floatunsisf>:
__floatunsisf():
    41a8:	e8 94       	clt
    41aa:	09 c0       	rjmp	.+18     	; 0x41be <__floatsisf+0x12>

000041ac <__floatsisf>:
    41ac:	97 fb       	bst	r25, 7
    41ae:	3e f4       	brtc	.+14     	; 0x41be <__floatsisf+0x12>
    41b0:	90 95       	com	r25
    41b2:	80 95       	com	r24
    41b4:	70 95       	com	r23
    41b6:	61 95       	neg	r22
    41b8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ba:	8f 4f       	sbci	r24, 0xFF	; 255
    41bc:	9f 4f       	sbci	r25, 0xFF	; 255
    41be:	99 23       	and	r25, r25
    41c0:	a9 f0       	breq	.+42     	; 0x41ec <__floatsisf+0x40>
    41c2:	f9 2f       	mov	r31, r25
    41c4:	96 e9       	ldi	r25, 0x96	; 150
    41c6:	bb 27       	eor	r27, r27
    41c8:	93 95       	inc	r25
    41ca:	f6 95       	lsr	r31
    41cc:	87 95       	ror	r24
    41ce:	77 95       	ror	r23
    41d0:	67 95       	ror	r22
    41d2:	b7 95       	ror	r27
    41d4:	f1 11       	cpse	r31, r1
    41d6:	f8 cf       	rjmp	.-16     	; 0x41c8 <__floatsisf+0x1c>
    41d8:	fa f4       	brpl	.+62     	; 0x4218 <__floatsisf+0x6c>
    41da:	bb 0f       	add	r27, r27
    41dc:	11 f4       	brne	.+4      	; 0x41e2 <__floatsisf+0x36>
    41de:	60 ff       	sbrs	r22, 0
    41e0:	1b c0       	rjmp	.+54     	; 0x4218 <__floatsisf+0x6c>
    41e2:	6f 5f       	subi	r22, 0xFF	; 255
    41e4:	7f 4f       	sbci	r23, 0xFF	; 255
    41e6:	8f 4f       	sbci	r24, 0xFF	; 255
    41e8:	9f 4f       	sbci	r25, 0xFF	; 255
    41ea:	16 c0       	rjmp	.+44     	; 0x4218 <__floatsisf+0x6c>
    41ec:	88 23       	and	r24, r24
    41ee:	11 f0       	breq	.+4      	; 0x41f4 <__floatsisf+0x48>
    41f0:	96 e9       	ldi	r25, 0x96	; 150
    41f2:	11 c0       	rjmp	.+34     	; 0x4216 <__floatsisf+0x6a>
    41f4:	77 23       	and	r23, r23
    41f6:	21 f0       	breq	.+8      	; 0x4200 <__floatsisf+0x54>
    41f8:	9e e8       	ldi	r25, 0x8E	; 142
    41fa:	87 2f       	mov	r24, r23
    41fc:	76 2f       	mov	r23, r22
    41fe:	05 c0       	rjmp	.+10     	; 0x420a <__floatsisf+0x5e>
    4200:	66 23       	and	r22, r22
    4202:	71 f0       	breq	.+28     	; 0x4220 <__floatsisf+0x74>
    4204:	96 e8       	ldi	r25, 0x86	; 134
    4206:	86 2f       	mov	r24, r22
    4208:	70 e0       	ldi	r23, 0x00	; 0
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	2a f0       	brmi	.+10     	; 0x4218 <__floatsisf+0x6c>
    420e:	9a 95       	dec	r25
    4210:	66 0f       	add	r22, r22
    4212:	77 1f       	adc	r23, r23
    4214:	88 1f       	adc	r24, r24
    4216:	da f7       	brpl	.-10     	; 0x420e <__floatsisf+0x62>
    4218:	88 0f       	add	r24, r24
    421a:	96 95       	lsr	r25
    421c:	87 95       	ror	r24
    421e:	97 f9       	bld	r25, 7
    4220:	08 95       	ret

00004222 <__fp_cmp>:
__fp_cmp():
    4222:	99 0f       	add	r25, r25
    4224:	00 08       	sbc	r0, r0
    4226:	55 0f       	add	r21, r21
    4228:	aa 0b       	sbc	r26, r26
    422a:	e0 e8       	ldi	r30, 0x80	; 128
    422c:	fe ef       	ldi	r31, 0xFE	; 254
    422e:	16 16       	cp	r1, r22
    4230:	17 06       	cpc	r1, r23
    4232:	e8 07       	cpc	r30, r24
    4234:	f9 07       	cpc	r31, r25
    4236:	c0 f0       	brcs	.+48     	; 0x4268 <__fp_cmp+0x46>
    4238:	12 16       	cp	r1, r18
    423a:	13 06       	cpc	r1, r19
    423c:	e4 07       	cpc	r30, r20
    423e:	f5 07       	cpc	r31, r21
    4240:	98 f0       	brcs	.+38     	; 0x4268 <__fp_cmp+0x46>
    4242:	62 1b       	sub	r22, r18
    4244:	73 0b       	sbc	r23, r19
    4246:	84 0b       	sbc	r24, r20
    4248:	95 0b       	sbc	r25, r21
    424a:	39 f4       	brne	.+14     	; 0x425a <__fp_cmp+0x38>
    424c:	0a 26       	eor	r0, r26
    424e:	61 f0       	breq	.+24     	; 0x4268 <__fp_cmp+0x46>
    4250:	23 2b       	or	r18, r19
    4252:	24 2b       	or	r18, r20
    4254:	25 2b       	or	r18, r21
    4256:	21 f4       	brne	.+8      	; 0x4260 <__fp_cmp+0x3e>
    4258:	08 95       	ret
    425a:	0a 26       	eor	r0, r26
    425c:	09 f4       	brne	.+2      	; 0x4260 <__fp_cmp+0x3e>
    425e:	a1 40       	sbci	r26, 0x01	; 1
    4260:	a6 95       	lsr	r26
    4262:	8f ef       	ldi	r24, 0xFF	; 255
    4264:	81 1d       	adc	r24, r1
    4266:	81 1d       	adc	r24, r1
    4268:	08 95       	ret

0000426a <__mulsf3>:
__mulsf3():
    426a:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3x>
    426e:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__fp_round>
    4272:	0e 94 ab 21 	call	0x4356	; 0x4356 <__fp_pscA>
    4276:	38 f0       	brcs	.+14     	; 0x4286 <__mulsf3+0x1c>
    4278:	0e 94 b2 21 	call	0x4364	; 0x4364 <__fp_pscB>
    427c:	20 f0       	brcs	.+8      	; 0x4286 <__mulsf3+0x1c>
    427e:	95 23       	and	r25, r21
    4280:	11 f0       	breq	.+4      	; 0x4286 <__mulsf3+0x1c>
    4282:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    4286:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>
    428a:	11 24       	eor	r1, r1
    428c:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>

00004290 <__mulsf3x>:
__mulsf3x():
    4290:	0e 94 ca 21 	call	0x4394	; 0x4394 <__fp_split3>
    4294:	70 f3       	brcs	.-36     	; 0x4272 <__mulsf3+0x8>

00004296 <__mulsf3_pse>:
    4296:	95 9f       	mul	r25, r21
    4298:	c1 f3       	breq	.-16     	; 0x428a <__mulsf3+0x20>
    429a:	95 0f       	add	r25, r21
    429c:	50 e0       	ldi	r21, 0x00	; 0
    429e:	55 1f       	adc	r21, r21
    42a0:	62 9f       	mul	r22, r18
    42a2:	f0 01       	movw	r30, r0
    42a4:	72 9f       	mul	r23, r18
    42a6:	bb 27       	eor	r27, r27
    42a8:	f0 0d       	add	r31, r0
    42aa:	b1 1d       	adc	r27, r1
    42ac:	63 9f       	mul	r22, r19
    42ae:	aa 27       	eor	r26, r26
    42b0:	f0 0d       	add	r31, r0
    42b2:	b1 1d       	adc	r27, r1
    42b4:	aa 1f       	adc	r26, r26
    42b6:	64 9f       	mul	r22, r20
    42b8:	66 27       	eor	r22, r22
    42ba:	b0 0d       	add	r27, r0
    42bc:	a1 1d       	adc	r26, r1
    42be:	66 1f       	adc	r22, r22
    42c0:	82 9f       	mul	r24, r18
    42c2:	22 27       	eor	r18, r18
    42c4:	b0 0d       	add	r27, r0
    42c6:	a1 1d       	adc	r26, r1
    42c8:	62 1f       	adc	r22, r18
    42ca:	73 9f       	mul	r23, r19
    42cc:	b0 0d       	add	r27, r0
    42ce:	a1 1d       	adc	r26, r1
    42d0:	62 1f       	adc	r22, r18
    42d2:	83 9f       	mul	r24, r19
    42d4:	a0 0d       	add	r26, r0
    42d6:	61 1d       	adc	r22, r1
    42d8:	22 1f       	adc	r18, r18
    42da:	74 9f       	mul	r23, r20
    42dc:	33 27       	eor	r19, r19
    42de:	a0 0d       	add	r26, r0
    42e0:	61 1d       	adc	r22, r1
    42e2:	23 1f       	adc	r18, r19
    42e4:	84 9f       	mul	r24, r20
    42e6:	60 0d       	add	r22, r0
    42e8:	21 1d       	adc	r18, r1
    42ea:	82 2f       	mov	r24, r18
    42ec:	76 2f       	mov	r23, r22
    42ee:	6a 2f       	mov	r22, r26
    42f0:	11 24       	eor	r1, r1
    42f2:	9f 57       	subi	r25, 0x7F	; 127
    42f4:	50 40       	sbci	r21, 0x00	; 0
    42f6:	9a f0       	brmi	.+38     	; 0x431e <__mulsf3_pse+0x88>
    42f8:	f1 f0       	breq	.+60     	; 0x4336 <__mulsf3_pse+0xa0>
    42fa:	88 23       	and	r24, r24
    42fc:	4a f0       	brmi	.+18     	; 0x4310 <__mulsf3_pse+0x7a>
    42fe:	ee 0f       	add	r30, r30
    4300:	ff 1f       	adc	r31, r31
    4302:	bb 1f       	adc	r27, r27
    4304:	66 1f       	adc	r22, r22
    4306:	77 1f       	adc	r23, r23
    4308:	88 1f       	adc	r24, r24
    430a:	91 50       	subi	r25, 0x01	; 1
    430c:	50 40       	sbci	r21, 0x00	; 0
    430e:	a9 f7       	brne	.-22     	; 0x42fa <__mulsf3_pse+0x64>
    4310:	9e 3f       	cpi	r25, 0xFE	; 254
    4312:	51 05       	cpc	r21, r1
    4314:	80 f0       	brcs	.+32     	; 0x4336 <__mulsf3_pse+0xa0>
    4316:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    431a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>
    431e:	5f 3f       	cpi	r21, 0xFF	; 255
    4320:	e4 f3       	brlt	.-8      	; 0x431a <__mulsf3_pse+0x84>
    4322:	98 3e       	cpi	r25, 0xE8	; 232
    4324:	d4 f3       	brlt	.-12     	; 0x431a <__mulsf3_pse+0x84>
    4326:	86 95       	lsr	r24
    4328:	77 95       	ror	r23
    432a:	67 95       	ror	r22
    432c:	b7 95       	ror	r27
    432e:	f7 95       	ror	r31
    4330:	e7 95       	ror	r30
    4332:	9f 5f       	subi	r25, 0xFF	; 255
    4334:	c1 f7       	brne	.-16     	; 0x4326 <__mulsf3_pse+0x90>
    4336:	fe 2b       	or	r31, r30
    4338:	88 0f       	add	r24, r24
    433a:	91 1d       	adc	r25, r1
    433c:	96 95       	lsr	r25
    433e:	87 95       	ror	r24
    4340:	97 f9       	bld	r25, 7
    4342:	08 95       	ret

00004344 <__fp_inf>:
    4344:	97 f9       	bld	r25, 7
    4346:	9f 67       	ori	r25, 0x7F	; 127
    4348:	80 e8       	ldi	r24, 0x80	; 128
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	08 95       	ret

00004350 <__fp_nan>:
    4350:	9f ef       	ldi	r25, 0xFF	; 255
    4352:	80 ec       	ldi	r24, 0xC0	; 192
    4354:	08 95       	ret

00004356 <__fp_pscA>:
    4356:	00 24       	eor	r0, r0
    4358:	0a 94       	dec	r0
    435a:	16 16       	cp	r1, r22
    435c:	17 06       	cpc	r1, r23
    435e:	18 06       	cpc	r1, r24
    4360:	09 06       	cpc	r0, r25
__fp_pscA():
    4362:	08 95       	ret

00004364 <__fp_pscB>:
__fp_pscB():
    4364:	00 24       	eor	r0, r0
    4366:	0a 94       	dec	r0
    4368:	12 16       	cp	r1, r18
    436a:	13 06       	cpc	r1, r19
    436c:	14 06       	cpc	r1, r20
    436e:	05 06       	cpc	r0, r21
    4370:	08 95       	ret

00004372 <__fp_round>:
__fp_round():
    4372:	09 2e       	mov	r0, r25
    4374:	03 94       	inc	r0
    4376:	00 0c       	add	r0, r0
    4378:	11 f4       	brne	.+4      	; 0x437e <__fp_round+0xc>
    437a:	88 23       	and	r24, r24
    437c:	52 f0       	brmi	.+20     	; 0x4392 <__fp_round+0x20>
    437e:	bb 0f       	add	r27, r27
    4380:	40 f4       	brcc	.+16     	; 0x4392 <__fp_round+0x20>
    4382:	bf 2b       	or	r27, r31
    4384:	11 f4       	brne	.+4      	; 0x438a <__fp_round+0x18>
    4386:	60 ff       	sbrs	r22, 0
    4388:	04 c0       	rjmp	.+8      	; 0x4392 <__fp_round+0x20>
    438a:	6f 5f       	subi	r22, 0xFF	; 255
    438c:	7f 4f       	sbci	r23, 0xFF	; 255
    438e:	8f 4f       	sbci	r24, 0xFF	; 255
    4390:	9f 4f       	sbci	r25, 0xFF	; 255
    4392:	08 95       	ret

00004394 <__fp_split3>:
__fp_split3():
    4394:	57 fd       	sbrc	r21, 7
    4396:	90 58       	subi	r25, 0x80	; 128
    4398:	44 0f       	add	r20, r20
    439a:	55 1f       	adc	r21, r21
    439c:	59 f0       	breq	.+22     	; 0x43b4 <__fp_splitA+0x10>
    439e:	5f 3f       	cpi	r21, 0xFF	; 255
    43a0:	71 f0       	breq	.+28     	; 0x43be <__fp_splitA+0x1a>
    43a2:	47 95       	ror	r20

000043a4 <__fp_splitA>:
    43a4:	88 0f       	add	r24, r24
    43a6:	97 fb       	bst	r25, 7
    43a8:	99 1f       	adc	r25, r25
    43aa:	61 f0       	breq	.+24     	; 0x43c4 <__fp_splitA+0x20>
    43ac:	9f 3f       	cpi	r25, 0xFF	; 255
    43ae:	79 f0       	breq	.+30     	; 0x43ce <__fp_splitA+0x2a>
    43b0:	87 95       	ror	r24
    43b2:	08 95       	ret
    43b4:	12 16       	cp	r1, r18
    43b6:	13 06       	cpc	r1, r19
    43b8:	14 06       	cpc	r1, r20
    43ba:	55 1f       	adc	r21, r21
    43bc:	f2 cf       	rjmp	.-28     	; 0x43a2 <__fp_split3+0xe>
    43be:	46 95       	lsr	r20
    43c0:	f1 df       	rcall	.-30     	; 0x43a4 <__fp_splitA>
    43c2:	08 c0       	rjmp	.+16     	; 0x43d4 <__fp_splitA+0x30>
    43c4:	16 16       	cp	r1, r22
    43c6:	17 06       	cpc	r1, r23
    43c8:	18 06       	cpc	r1, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	f1 cf       	rjmp	.-30     	; 0x43b0 <__fp_splitA+0xc>
    43ce:	86 95       	lsr	r24
    43d0:	71 05       	cpc	r23, r1
    43d2:	61 05       	cpc	r22, r1
    43d4:	08 94       	sec
    43d6:	08 95       	ret

000043d8 <__fp_zero>:
__fp_zero():
    43d8:	e8 94       	clt

000043da <__fp_szero>:
    43da:	bb 27       	eor	r27, r27
    43dc:	66 27       	eor	r22, r22
    43de:	77 27       	eor	r23, r23
    43e0:	cb 01       	movw	r24, r22
    43e2:	97 f9       	bld	r25, 7
    43e4:	08 95       	ret

000043e6 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    43e6:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    43e8:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    43ea:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    43ec:	0e 94 25 22 	call	0x444a	; 0x444a <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    43f0:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    43f2:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    43f4:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    43f6:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    43f8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    43fa:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    43fc:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    43fe:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    4400:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    4402:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    4404:	08 95       	ret

00004406 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4406:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4408:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    440a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    440c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    440e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4410:	0d c0       	rjmp	.+26     	; 0x442c <__udivmodsi4_ep>

00004412 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4412:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4414:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4416:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4418:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    441a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    441c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    441e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4420:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4422:	20 f0       	brcs	.+8      	; 0x442c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4424:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4426:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4428:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    442a:	f5 0b       	sbc	r31, r21

0000442c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    442c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    442e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4430:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4432:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4434:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4436:	69 f7       	brne	.-38     	; 0x4412 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4438:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    443a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    443c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    443e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4440:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4442:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4444:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4446:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4448:	08 95       	ret

0000444a <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    444a:	0e 94 30 22 	call	0x4460	; 0x4460 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    444e:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4450:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4452:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4454:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4456:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4458:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    445a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    445c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    445e:	08 95       	ret

00004460 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4460:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4462:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4464:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4466:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    4468:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    446a:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    446c:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    446e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    4470:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    4472:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    4474:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    4476:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    4478:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    447a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    447c:	08 95       	ret

0000447e <__subsf3>:
__subsf3():
    447e:	50 58       	subi	r21, 0x80	; 128

00004480 <__addsf3>:
    4480:	bb 27       	eor	r27, r27
    4482:	aa 27       	eor	r26, r26
    4484:	0e 94 57 22 	call	0x44ae	; 0x44ae <__addsf3x>
    4488:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__fp_round>
__addsf3():
    448c:	0e 94 ab 21 	call	0x4356	; 0x4356 <__fp_pscA>
    4490:	38 f0       	brcs	.+14     	; 0x44a0 <__addsf3+0x20>
    4492:	0e 94 b2 21 	call	0x4364	; 0x4364 <__fp_pscB>
    4496:	20 f0       	brcs	.+8      	; 0x44a0 <__addsf3+0x20>
    4498:	39 f4       	brne	.+14     	; 0x44a8 <__addsf3+0x28>
    449a:	9f 3f       	cpi	r25, 0xFF	; 255
    449c:	19 f4       	brne	.+6      	; 0x44a4 <__addsf3+0x24>
    449e:	26 f4       	brtc	.+8      	; 0x44a8 <__addsf3+0x28>
    44a0:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>
    44a4:	0e f4       	brtc	.+2      	; 0x44a8 <__addsf3+0x28>
    44a6:	e0 95       	com	r30
    44a8:	e7 fb       	bst	r30, 7
    44aa:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>

000044ae <__addsf3x>:
__addsf3x():
    44ae:	e9 2f       	mov	r30, r25
    44b0:	0e 94 ca 21 	call	0x4394	; 0x4394 <__fp_split3>
    44b4:	58 f3       	brcs	.-42     	; 0x448c <__addsf3+0xc>
    44b6:	ba 17       	cp	r27, r26
    44b8:	62 07       	cpc	r22, r18
    44ba:	73 07       	cpc	r23, r19
    44bc:	84 07       	cpc	r24, r20
    44be:	95 07       	cpc	r25, r21
    44c0:	20 f0       	brcs	.+8      	; 0x44ca <__addsf3x+0x1c>
    44c2:	79 f4       	brne	.+30     	; 0x44e2 <__addsf3x+0x34>
    44c4:	a6 f5       	brtc	.+104    	; 0x452e <__addsf3x+0x80>
    44c6:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__fp_zero>
    44ca:	0e f4       	brtc	.+2      	; 0x44ce <__addsf3x+0x20>
    44cc:	e0 95       	com	r30
    44ce:	0b 2e       	mov	r0, r27
    44d0:	ba 2f       	mov	r27, r26
    44d2:	a0 2d       	mov	r26, r0
    44d4:	0b 01       	movw	r0, r22
    44d6:	b9 01       	movw	r22, r18
    44d8:	90 01       	movw	r18, r0
    44da:	0c 01       	movw	r0, r24
    44dc:	ca 01       	movw	r24, r20
    44de:	a0 01       	movw	r20, r0
    44e0:	11 24       	eor	r1, r1
    44e2:	ff 27       	eor	r31, r31
    44e4:	59 1b       	sub	r21, r25
    44e6:	99 f0       	breq	.+38     	; 0x450e <__addsf3x+0x60>
    44e8:	59 3f       	cpi	r21, 0xF9	; 249
    44ea:	50 f4       	brcc	.+20     	; 0x4500 <__addsf3x+0x52>
    44ec:	50 3e       	cpi	r21, 0xE0	; 224
    44ee:	68 f1       	brcs	.+90     	; 0x454a <__addsf3x+0x9c>
    44f0:	1a 16       	cp	r1, r26
    44f2:	f0 40       	sbci	r31, 0x00	; 0
    44f4:	a2 2f       	mov	r26, r18
    44f6:	23 2f       	mov	r18, r19
    44f8:	34 2f       	mov	r19, r20
    44fa:	44 27       	eor	r20, r20
    44fc:	58 5f       	subi	r21, 0xF8	; 248
    44fe:	f3 cf       	rjmp	.-26     	; 0x44e6 <__addsf3x+0x38>
    4500:	46 95       	lsr	r20
    4502:	37 95       	ror	r19
    4504:	27 95       	ror	r18
    4506:	a7 95       	ror	r26
    4508:	f0 40       	sbci	r31, 0x00	; 0
    450a:	53 95       	inc	r21
    450c:	c9 f7       	brne	.-14     	; 0x4500 <__addsf3x+0x52>
    450e:	7e f4       	brtc	.+30     	; 0x452e <__addsf3x+0x80>
    4510:	1f 16       	cp	r1, r31
    4512:	ba 0b       	sbc	r27, r26
    4514:	62 0b       	sbc	r22, r18
    4516:	73 0b       	sbc	r23, r19
    4518:	84 0b       	sbc	r24, r20
    451a:	ba f0       	brmi	.+46     	; 0x454a <__addsf3x+0x9c>
    451c:	91 50       	subi	r25, 0x01	; 1
    451e:	a1 f0       	breq	.+40     	; 0x4548 <__addsf3x+0x9a>
    4520:	ff 0f       	add	r31, r31
    4522:	bb 1f       	adc	r27, r27
    4524:	66 1f       	adc	r22, r22
    4526:	77 1f       	adc	r23, r23
    4528:	88 1f       	adc	r24, r24
    452a:	c2 f7       	brpl	.-16     	; 0x451c <__addsf3x+0x6e>
    452c:	0e c0       	rjmp	.+28     	; 0x454a <__addsf3x+0x9c>
    452e:	ba 0f       	add	r27, r26
    4530:	62 1f       	adc	r22, r18
    4532:	73 1f       	adc	r23, r19
    4534:	84 1f       	adc	r24, r20
    4536:	48 f4       	brcc	.+18     	; 0x454a <__addsf3x+0x9c>
    4538:	87 95       	ror	r24
    453a:	77 95       	ror	r23
    453c:	67 95       	ror	r22
    453e:	b7 95       	ror	r27
    4540:	f7 95       	ror	r31
    4542:	9e 3f       	cpi	r25, 0xFE	; 254
    4544:	08 f0       	brcs	.+2      	; 0x4548 <__addsf3x+0x9a>
    4546:	b0 cf       	rjmp	.-160    	; 0x44a8 <__addsf3+0x28>
    4548:	93 95       	inc	r25
    454a:	88 0f       	add	r24, r24
    454c:	08 f0       	brcs	.+2      	; 0x4550 <__addsf3x+0xa2>
    454e:	99 27       	eor	r25, r25
    4550:	ee 0f       	add	r30, r30
    4552:	97 95       	ror	r25
    4554:	87 95       	ror	r24
    4556:	08 95       	ret

00004558 <__divsf3>:
    4558:	0e 94 c0 22 	call	0x4580	; 0x4580 <__divsf3x>
    455c:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__fp_round>
    4560:	0e 94 b2 21 	call	0x4364	; 0x4364 <__fp_pscB>
    4564:	58 f0       	brcs	.+22     	; 0x457c <__divsf3+0x24>
    4566:	0e 94 ab 21 	call	0x4356	; 0x4356 <__fp_pscA>
    456a:	40 f0       	brcs	.+16     	; 0x457c <__divsf3+0x24>
    456c:	29 f4       	brne	.+10     	; 0x4578 <__divsf3+0x20>
    456e:	5f 3f       	cpi	r21, 0xFF	; 255
    4570:	29 f0       	breq	.+10     	; 0x457c <__divsf3+0x24>
    4572:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    4576:	51 11       	cpse	r21, r1
    4578:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>
__divsf3():
    457c:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>

00004580 <__divsf3x>:
__divsf3x():
    4580:	0e 94 ca 21 	call	0x4394	; 0x4394 <__fp_split3>
    4584:	68 f3       	brcs	.-38     	; 0x4560 <__divsf3+0x8>

00004586 <__divsf3_pse>:
    4586:	99 23       	and	r25, r25
    4588:	b1 f3       	breq	.-20     	; 0x4576 <__divsf3+0x1e>
    458a:	55 23       	and	r21, r21
    458c:	91 f3       	breq	.-28     	; 0x4572 <__divsf3+0x1a>
    458e:	95 1b       	sub	r25, r21
    4590:	55 0b       	sbc	r21, r21
    4592:	bb 27       	eor	r27, r27
    4594:	aa 27       	eor	r26, r26
    4596:	62 17       	cp	r22, r18
    4598:	73 07       	cpc	r23, r19
    459a:	84 07       	cpc	r24, r20
    459c:	38 f0       	brcs	.+14     	; 0x45ac <__divsf3_pse+0x26>
    459e:	9f 5f       	subi	r25, 0xFF	; 255
    45a0:	5f 4f       	sbci	r21, 0xFF	; 255
    45a2:	22 0f       	add	r18, r18
    45a4:	33 1f       	adc	r19, r19
    45a6:	44 1f       	adc	r20, r20
    45a8:	aa 1f       	adc	r26, r26
    45aa:	a9 f3       	breq	.-22     	; 0x4596 <__divsf3_pse+0x10>
    45ac:	35 d0       	rcall	.+106    	; 0x4618 <__divsf3_pse+0x92>
    45ae:	0e 2e       	mov	r0, r30
    45b0:	3a f0       	brmi	.+14     	; 0x45c0 <__divsf3_pse+0x3a>
    45b2:	e0 e8       	ldi	r30, 0x80	; 128
    45b4:	32 d0       	rcall	.+100    	; 0x461a <__divsf3_pse+0x94>
    45b6:	91 50       	subi	r25, 0x01	; 1
    45b8:	50 40       	sbci	r21, 0x00	; 0
    45ba:	e6 95       	lsr	r30
    45bc:	00 1c       	adc	r0, r0
    45be:	ca f7       	brpl	.-14     	; 0x45b2 <__divsf3_pse+0x2c>
    45c0:	2b d0       	rcall	.+86     	; 0x4618 <__divsf3_pse+0x92>
    45c2:	fe 2f       	mov	r31, r30
    45c4:	29 d0       	rcall	.+82     	; 0x4618 <__divsf3_pse+0x92>
    45c6:	66 0f       	add	r22, r22
    45c8:	77 1f       	adc	r23, r23
    45ca:	88 1f       	adc	r24, r24
    45cc:	bb 1f       	adc	r27, r27
    45ce:	26 17       	cp	r18, r22
    45d0:	37 07       	cpc	r19, r23
    45d2:	48 07       	cpc	r20, r24
    45d4:	ab 07       	cpc	r26, r27
    45d6:	b0 e8       	ldi	r27, 0x80	; 128
    45d8:	09 f0       	breq	.+2      	; 0x45dc <__divsf3_pse+0x56>
    45da:	bb 0b       	sbc	r27, r27
    45dc:	80 2d       	mov	r24, r0
    45de:	bf 01       	movw	r22, r30
    45e0:	ff 27       	eor	r31, r31
    45e2:	93 58       	subi	r25, 0x83	; 131
    45e4:	5f 4f       	sbci	r21, 0xFF	; 255
    45e6:	3a f0       	brmi	.+14     	; 0x45f6 <__divsf3_pse+0x70>
    45e8:	9e 3f       	cpi	r25, 0xFE	; 254
    45ea:	51 05       	cpc	r21, r1
    45ec:	78 f0       	brcs	.+30     	; 0x460c <__divsf3_pse+0x86>
    45ee:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    45f2:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>
    45f6:	5f 3f       	cpi	r21, 0xFF	; 255
    45f8:	e4 f3       	brlt	.-8      	; 0x45f2 <__divsf3_pse+0x6c>
    45fa:	98 3e       	cpi	r25, 0xE8	; 232
    45fc:	d4 f3       	brlt	.-12     	; 0x45f2 <__divsf3_pse+0x6c>
    45fe:	86 95       	lsr	r24
    4600:	77 95       	ror	r23
    4602:	67 95       	ror	r22
    4604:	b7 95       	ror	r27
    4606:	f7 95       	ror	r31
    4608:	9f 5f       	subi	r25, 0xFF	; 255
    460a:	c9 f7       	brne	.-14     	; 0x45fe <__divsf3_pse+0x78>
    460c:	88 0f       	add	r24, r24
    460e:	91 1d       	adc	r25, r1
    4610:	96 95       	lsr	r25
    4612:	87 95       	ror	r24
    4614:	97 f9       	bld	r25, 7
    4616:	08 95       	ret
    4618:	e1 e0       	ldi	r30, 0x01	; 1
    461a:	66 0f       	add	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	88 1f       	adc	r24, r24
    4620:	bb 1f       	adc	r27, r27
    4622:	62 17       	cp	r22, r18
    4624:	73 07       	cpc	r23, r19
    4626:	84 07       	cpc	r24, r20
    4628:	ba 07       	cpc	r27, r26
    462a:	20 f0       	brcs	.+8      	; 0x4634 <__divsf3_pse+0xae>
    462c:	62 1b       	sub	r22, r18
    462e:	73 0b       	sbc	r23, r19
    4630:	84 0b       	sbc	r24, r20
    4632:	ba 0b       	sbc	r27, r26
    4634:	ee 1f       	adc	r30, r30
    4636:	88 f7       	brcc	.-30     	; 0x461a <__divsf3_pse+0x94>
    4638:	e0 95       	com	r30
    463a:	08 95       	ret

0000463c <__fixsfsi>:
    463c:	0e 94 25 23 	call	0x464a	; 0x464a <__fixunssfsi>
    4640:	68 94       	set
    4642:	b1 11       	cpse	r27, r1
    4644:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>
    4648:	08 95       	ret

0000464a <__fixunssfsi>:
    464a:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__fp_splitA>
    464e:	88 f0       	brcs	.+34     	; 0x4672 <__fixunssfsi+0x28>
    4650:	9f 57       	subi	r25, 0x7F	; 127
    4652:	98 f0       	brcs	.+38     	; 0x467a <__fixunssfsi+0x30>
    4654:	b9 2f       	mov	r27, r25
    4656:	99 27       	eor	r25, r25
    4658:	b7 51       	subi	r27, 0x17	; 23
    465a:	b0 f0       	brcs	.+44     	; 0x4688 <__fixunssfsi+0x3e>
__fixunssfsi():
    465c:	e1 f0       	breq	.+56     	; 0x4696 <__fixunssfsi+0x4c>
    465e:	66 0f       	add	r22, r22
    4660:	77 1f       	adc	r23, r23
    4662:	88 1f       	adc	r24, r24
    4664:	99 1f       	adc	r25, r25
    4666:	1a f0       	brmi	.+6      	; 0x466e <__fixunssfsi+0x24>
    4668:	ba 95       	dec	r27
    466a:	c9 f7       	brne	.-14     	; 0x465e <__fixunssfsi+0x14>
    466c:	14 c0       	rjmp	.+40     	; 0x4696 <__fixunssfsi+0x4c>
    466e:	b1 30       	cpi	r27, 0x01	; 1
    4670:	91 f0       	breq	.+36     	; 0x4696 <__fixunssfsi+0x4c>
    4672:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__fp_zero>
    4676:	b1 e0       	ldi	r27, 0x01	; 1
    4678:	08 95       	ret
    467a:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__fp_zero>
    467e:	67 2f       	mov	r22, r23
    4680:	78 2f       	mov	r23, r24
    4682:	88 27       	eor	r24, r24
    4684:	b8 5f       	subi	r27, 0xF8	; 248
    4686:	39 f0       	breq	.+14     	; 0x4696 <__fixunssfsi+0x4c>
    4688:	b9 3f       	cpi	r27, 0xF9	; 249
    468a:	cc f3       	brlt	.-14     	; 0x467e <__fixunssfsi+0x34>
    468c:	86 95       	lsr	r24
    468e:	77 95       	ror	r23
    4690:	67 95       	ror	r22
    4692:	b3 95       	inc	r27
    4694:	d9 f7       	brne	.-10     	; 0x468c <__fixunssfsi+0x42>
    4696:	3e f4       	brtc	.+14     	; 0x46a6 <__fixunssfsi+0x5c>
    4698:	90 95       	com	r25
    469a:	80 95       	com	r24
    469c:	70 95       	com	r23
    469e:	61 95       	neg	r22
    46a0:	7f 4f       	sbci	r23, 0xFF	; 255
    46a2:	8f 4f       	sbci	r24, 0xFF	; 255
    46a4:	9f 4f       	sbci	r25, 0xFF	; 255
    46a6:	08 95       	ret

000046a8 <__gesf2>:
__gesf2():
    46a8:	0e 94 11 21 	call	0x4222	; 0x4222 <__fp_cmp>
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <__gesf2+0x8>
    46ae:	8f ef       	ldi	r24, 0xFF	; 255
    46b0:	08 95       	ret

000046b2 <pow>:
pow():
    46b2:	fa 01       	movw	r30, r20
    46b4:	ee 0f       	add	r30, r30
    46b6:	ff 1f       	adc	r31, r31
    46b8:	30 96       	adiw	r30, 0x00	; 0
    46ba:	21 05       	cpc	r18, r1
    46bc:	31 05       	cpc	r19, r1
    46be:	a1 f1       	breq	.+104    	; 0x4728 <pow+0x76>
    46c0:	61 15       	cp	r22, r1
    46c2:	71 05       	cpc	r23, r1
    46c4:	61 f4       	brne	.+24     	; 0x46de <pow+0x2c>
    46c6:	80 38       	cpi	r24, 0x80	; 128
    46c8:	bf e3       	ldi	r27, 0x3F	; 63
    46ca:	9b 07       	cpc	r25, r27
    46cc:	49 f1       	breq	.+82     	; 0x4720 <pow+0x6e>
    46ce:	68 94       	set
    46d0:	90 38       	cpi	r25, 0x80	; 128
    46d2:	81 05       	cpc	r24, r1
    46d4:	61 f0       	breq	.+24     	; 0x46ee <pow+0x3c>
    46d6:	80 38       	cpi	r24, 0x80	; 128
    46d8:	bf ef       	ldi	r27, 0xFF	; 255
    46da:	9b 07       	cpc	r25, r27
    46dc:	41 f0       	breq	.+16     	; 0x46ee <pow+0x3c>
    46de:	99 23       	and	r25, r25
    46e0:	4a f5       	brpl	.+82     	; 0x4734 <pow+0x82>
    46e2:	ff 3f       	cpi	r31, 0xFF	; 255
    46e4:	e1 05       	cpc	r30, r1
    46e6:	31 05       	cpc	r19, r1
    46e8:	21 05       	cpc	r18, r1
    46ea:	19 f1       	breq	.+70     	; 0x4732 <pow+0x80>
    46ec:	e8 94       	clt
    46ee:	08 94       	sec
    46f0:	e7 95       	ror	r30
    46f2:	d9 01       	movw	r26, r18
    46f4:	aa 23       	and	r26, r26
    46f6:	29 f4       	brne	.+10     	; 0x4702 <pow+0x50>
    46f8:	ab 2f       	mov	r26, r27
    46fa:	be 2f       	mov	r27, r30
    46fc:	f8 5f       	subi	r31, 0xF8	; 248
    46fe:	d0 f3       	brcs	.-12     	; 0x46f4 <pow+0x42>
    4700:	10 c0       	rjmp	.+32     	; 0x4722 <pow+0x70>
    4702:	ff 5f       	subi	r31, 0xFF	; 255
    4704:	70 f4       	brcc	.+28     	; 0x4722 <pow+0x70>
    4706:	a6 95       	lsr	r26
    4708:	e0 f7       	brcc	.-8      	; 0x4702 <pow+0x50>
    470a:	f7 39       	cpi	r31, 0x97	; 151
    470c:	50 f0       	brcs	.+20     	; 0x4722 <pow+0x70>
    470e:	19 f0       	breq	.+6      	; 0x4716 <pow+0x64>
    4710:	ff 3a       	cpi	r31, 0xAF	; 175
    4712:	38 f4       	brcc	.+14     	; 0x4722 <pow+0x70>
    4714:	9f 77       	andi	r25, 0x7F	; 127
    4716:	9f 93       	push	r25
    4718:	0d d0       	rcall	.+26     	; 0x4734 <pow+0x82>
    471a:	0f 90       	pop	r0
    471c:	07 fc       	sbrc	r0, 7
    471e:	90 58       	subi	r25, 0x80	; 128
    4720:	08 95       	ret
    4722:	46 f0       	brts	.+16     	; 0x4734 <pow+0x82>
    4724:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	70 e0       	ldi	r23, 0x00	; 0
    472c:	80 e8       	ldi	r24, 0x80	; 128
    472e:	9f e3       	ldi	r25, 0x3F	; 63
    4730:	08 95       	ret
    4732:	4f e7       	ldi	r20, 0x7F	; 127
    4734:	9f 77       	andi	r25, 0x7F	; 127
    4736:	5f 93       	push	r21
    4738:	4f 93       	push	r20
    473a:	3f 93       	push	r19
    473c:	2f 93       	push	r18
    473e:	0e 94 59 24 	call	0x48b2	; 0x48b2 <log>
    4742:	2f 91       	pop	r18
    4744:	3f 91       	pop	r19
    4746:	4f 91       	pop	r20
    4748:	5f 91       	pop	r21
    474a:	0e 94 35 21 	call	0x426a	; 0x426a <__mulsf3>
    474e:	0c 94 b6 23 	jmp	0x476c	; 0x476c <exp>

00004752 <__unordsf2>:
__unordsf2():
    4752:	0e 94 11 21 	call	0x4222	; 0x4222 <__fp_cmp>
    4756:	88 0b       	sbc	r24, r24
    4758:	99 0b       	sbc	r25, r25
    475a:	08 95       	ret
    475c:	29 f4       	brne	.+10     	; 0x4768 <__unordsf2+0x16>
    475e:	16 f0       	brts	.+4      	; 0x4764 <__unordsf2+0x12>
    4760:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    4764:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__fp_zero>
    4768:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>

0000476c <exp>:
exp():
    476c:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__fp_splitA>
    4770:	a8 f3       	brcs	.-22     	; 0x475c <__unordsf2+0xa>
    4772:	96 38       	cpi	r25, 0x86	; 134
    4774:	a0 f7       	brcc	.-24     	; 0x475e <__unordsf2+0xc>
    4776:	07 f8       	bld	r0, 7
    4778:	0f 92       	push	r0
    477a:	e8 94       	clt
    477c:	2b e3       	ldi	r18, 0x3B	; 59
    477e:	3a ea       	ldi	r19, 0xAA	; 170
    4780:	48 eb       	ldi	r20, 0xB8	; 184
    4782:	5f e7       	ldi	r21, 0x7F	; 127
    4784:	0e 94 4b 21 	call	0x4296	; 0x4296 <__mulsf3_pse>
    4788:	0f 92       	push	r0
    478a:	0f 92       	push	r0
    478c:	0f 92       	push	r0
    478e:	4d b7       	in	r20, 0x3d	; 61
    4790:	5e b7       	in	r21, 0x3e	; 62
    4792:	0f 92       	push	r0
    4794:	0e 94 a1 24 	call	0x4942	; 0x4942 <modf>
    4798:	e4 eb       	ldi	r30, 0xB4	; 180
    479a:	f0 e0       	ldi	r31, 0x00	; 0
    479c:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__fp_powser>
    47a0:	4f 91       	pop	r20
    47a2:	5f 91       	pop	r21
    47a4:	ef 91       	pop	r30
    47a6:	ff 91       	pop	r31
    47a8:	e5 95       	asr	r30
    47aa:	ee 1f       	adc	r30, r30
    47ac:	ff 1f       	adc	r31, r31
    47ae:	49 f0       	breq	.+18     	; 0x47c2 <exp+0x56>
    47b0:	fe 57       	subi	r31, 0x7E	; 126
    47b2:	e0 68       	ori	r30, 0x80	; 128
    47b4:	44 27       	eor	r20, r20
    47b6:	ee 0f       	add	r30, r30
    47b8:	44 1f       	adc	r20, r20
    47ba:	fa 95       	dec	r31
    47bc:	e1 f7       	brne	.-8      	; 0x47b6 <exp+0x4a>
    47be:	41 95       	neg	r20
    47c0:	55 0b       	sbc	r21, r21
    47c2:	0e 94 1b 24 	call	0x4836	; 0x4836 <ldexp>
    47c6:	0f 90       	pop	r0
    47c8:	07 fe       	sbrs	r0, 7
    47ca:	0c 94 0f 24 	jmp	0x481e	; 0x481e <inverse>
    47ce:	08 95       	ret

000047d0 <__fp_powser>:
    47d0:	df 93       	push	r29
    47d2:	cf 93       	push	r28
    47d4:	1f 93       	push	r17
    47d6:	0f 93       	push	r16
    47d8:	ff 92       	push	r15
    47da:	ef 92       	push	r14
    47dc:	df 92       	push	r13
    47de:	7b 01       	movw	r14, r22
__fp_powser():
    47e0:	8c 01       	movw	r16, r24
    47e2:	68 94       	set
    47e4:	06 c0       	rjmp	.+12     	; 0x47f2 <__fp_powser+0x22>
    47e6:	da 2e       	mov	r13, r26
    47e8:	ef 01       	movw	r28, r30
    47ea:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3x>
    47ee:	fe 01       	movw	r30, r28
    47f0:	e8 94       	clt
    47f2:	a5 91       	lpm	r26, Z+
    47f4:	25 91       	lpm	r18, Z+
    47f6:	35 91       	lpm	r19, Z+
    47f8:	45 91       	lpm	r20, Z+
    47fa:	55 91       	lpm	r21, Z+
    47fc:	a6 f3       	brts	.-24     	; 0x47e6 <__fp_powser+0x16>
    47fe:	ef 01       	movw	r28, r30
    4800:	0e 94 57 22 	call	0x44ae	; 0x44ae <__addsf3x>
    4804:	fe 01       	movw	r30, r28
    4806:	97 01       	movw	r18, r14
    4808:	a8 01       	movw	r20, r16
    480a:	da 94       	dec	r13
    480c:	69 f7       	brne	.-38     	; 0x47e8 <__fp_powser+0x18>
    480e:	df 90       	pop	r13
    4810:	ef 90       	pop	r14
    4812:	ff 90       	pop	r15
    4814:	0f 91       	pop	r16
    4816:	1f 91       	pop	r17
    4818:	cf 91       	pop	r28
    481a:	df 91       	pop	r29
    481c:	08 95       	ret

0000481e <inverse>:
inverse():
    481e:	9b 01       	movw	r18, r22
    4820:	ac 01       	movw	r20, r24
    4822:	60 e0       	ldi	r22, 0x00	; 0
    4824:	70 e0       	ldi	r23, 0x00	; 0
    4826:	80 e8       	ldi	r24, 0x80	; 128
    4828:	9f e3       	ldi	r25, 0x3F	; 63
    482a:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <__divsf3>
    482e:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>
    4832:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__fp_mpack>

00004836 <ldexp>:
ldexp():
    4836:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__fp_splitA>
    483a:	d8 f3       	brcs	.-10     	; 0x4832 <inverse+0x14>
    483c:	99 23       	and	r25, r25
    483e:	c9 f3       	breq	.-14     	; 0x4832 <inverse+0x14>
    4840:	94 0f       	add	r25, r20
    4842:	51 1d       	adc	r21, r1
    4844:	a3 f3       	brvs	.-24     	; 0x482e <inverse+0x10>
    4846:	91 50       	subi	r25, 0x01	; 1
    4848:	50 40       	sbci	r21, 0x00	; 0
    484a:	94 f0       	brlt	.+36     	; 0x4870 <ldexp+0x3a>
    484c:	59 f0       	breq	.+22     	; 0x4864 <ldexp+0x2e>
    484e:	88 23       	and	r24, r24
    4850:	32 f0       	brmi	.+12     	; 0x485e <ldexp+0x28>
    4852:	66 0f       	add	r22, r22
    4854:	77 1f       	adc	r23, r23
    4856:	88 1f       	adc	r24, r24
    4858:	91 50       	subi	r25, 0x01	; 1
    485a:	50 40       	sbci	r21, 0x00	; 0
    485c:	c1 f7       	brne	.-16     	; 0x484e <ldexp+0x18>
    485e:	9e 3f       	cpi	r25, 0xFE	; 254
    4860:	51 05       	cpc	r21, r1
    4862:	2c f7       	brge	.-54     	; 0x482e <inverse+0x10>
    4864:	88 0f       	add	r24, r24
    4866:	91 1d       	adc	r25, r1
    4868:	96 95       	lsr	r25
    486a:	87 95       	ror	r24
    486c:	97 f9       	bld	r25, 7
    486e:	08 95       	ret
    4870:	5f 3f       	cpi	r21, 0xFF	; 255
    4872:	ac f0       	brlt	.+42     	; 0x489e <ldexp+0x68>
    4874:	98 3e       	cpi	r25, 0xE8	; 232
    4876:	9c f0       	brlt	.+38     	; 0x489e <ldexp+0x68>
    4878:	bb 27       	eor	r27, r27
    487a:	86 95       	lsr	r24
    487c:	77 95       	ror	r23
    487e:	67 95       	ror	r22
    4880:	b7 95       	ror	r27
    4882:	08 f4       	brcc	.+2      	; 0x4886 <ldexp+0x50>
    4884:	b1 60       	ori	r27, 0x01	; 1
    4886:	93 95       	inc	r25
    4888:	c1 f7       	brne	.-16     	; 0x487a <ldexp+0x44>
    488a:	bb 0f       	add	r27, r27
    488c:	58 f7       	brcc	.-42     	; 0x4864 <ldexp+0x2e>
    488e:	11 f4       	brne	.+4      	; 0x4894 <ldexp+0x5e>
    4890:	60 ff       	sbrs	r22, 0
    4892:	e8 cf       	rjmp	.-48     	; 0x4864 <ldexp+0x2e>
    4894:	6f 5f       	subi	r22, 0xFF	; 255
    4896:	7f 4f       	sbci	r23, 0xFF	; 255
    4898:	8f 4f       	sbci	r24, 0xFF	; 255
    489a:	9f 4f       	sbci	r25, 0xFF	; 255
    489c:	e3 cf       	rjmp	.-58     	; 0x4864 <ldexp+0x2e>
    489e:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__fp_szero>
    48a2:	16 f0       	brts	.+4      	; 0x48a8 <ldexp+0x72>
    48a4:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__fp_mpack>
    48a8:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__fp_nan>
    48ac:	68 94       	set
    48ae:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__fp_inf>

000048b2 <log>:
log():
    48b2:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__fp_splitA>
    48b6:	a8 f3       	brcs	.-22     	; 0x48a2 <ldexp+0x6c>
    48b8:	99 23       	and	r25, r25
    48ba:	c1 f3       	breq	.-16     	; 0x48ac <ldexp+0x76>
    48bc:	ae f3       	brts	.-22     	; 0x48a8 <ldexp+0x72>
    48be:	df 93       	push	r29
    48c0:	cf 93       	push	r28
    48c2:	1f 93       	push	r17
    48c4:	0f 93       	push	r16
    48c6:	ff 92       	push	r15
    48c8:	c9 2f       	mov	r28, r25
    48ca:	dd 27       	eor	r29, r29
    48cc:	88 23       	and	r24, r24
    48ce:	2a f0       	brmi	.+10     	; 0x48da <log+0x28>
    48d0:	21 97       	sbiw	r28, 0x01	; 1
    48d2:	66 0f       	add	r22, r22
    48d4:	77 1f       	adc	r23, r23
    48d6:	88 1f       	adc	r24, r24
    48d8:	da f7       	brpl	.-10     	; 0x48d0 <log+0x1e>
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e8       	ldi	r20, 0x80	; 128
    48e0:	5f eb       	ldi	r21, 0xBF	; 191
    48e2:	9f e3       	ldi	r25, 0x3F	; 63
    48e4:	88 39       	cpi	r24, 0x98	; 152
    48e6:	20 f0       	brcs	.+8      	; 0x48f0 <log+0x3e>
    48e8:	80 3e       	cpi	r24, 0xE0	; 224
    48ea:	38 f0       	brcs	.+14     	; 0x48fa <log+0x48>
    48ec:	21 96       	adiw	r28, 0x01	; 1
    48ee:	8f 77       	andi	r24, 0x7F	; 127
    48f0:	0e 94 40 22 	call	0x4480	; 0x4480 <__addsf3>
    48f4:	ec ed       	ldi	r30, 0xDC	; 220
    48f6:	f0 e0       	ldi	r31, 0x00	; 0
    48f8:	04 c0       	rjmp	.+8      	; 0x4902 <log+0x50>
    48fa:	0e 94 40 22 	call	0x4480	; 0x4480 <__addsf3>
    48fe:	e9 e0       	ldi	r30, 0x09	; 9
    4900:	f1 e0       	ldi	r31, 0x01	; 1
    4902:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__fp_powser>
    4906:	8b 01       	movw	r16, r22
    4908:	be 01       	movw	r22, r28
    490a:	ec 01       	movw	r28, r24
    490c:	fb 2e       	mov	r15, r27
    490e:	6f 57       	subi	r22, 0x7F	; 127
    4910:	71 09       	sbc	r23, r1
    4912:	75 95       	asr	r23
    4914:	77 1f       	adc	r23, r23
    4916:	88 0b       	sbc	r24, r24
    4918:	99 0b       	sbc	r25, r25
    491a:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__floatsisf>
    491e:	28 e1       	ldi	r18, 0x18	; 24
    4920:	32 e7       	ldi	r19, 0x72	; 114
    4922:	41 e3       	ldi	r20, 0x31	; 49
    4924:	5f e3       	ldi	r21, 0x3F	; 63
    4926:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3x>
    492a:	af 2d       	mov	r26, r15
    492c:	98 01       	movw	r18, r16
    492e:	ae 01       	movw	r20, r28
    4930:	ff 90       	pop	r15
    4932:	0f 91       	pop	r16
    4934:	1f 91       	pop	r17
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	0e 94 57 22 	call	0x44ae	; 0x44ae <__addsf3x>
    493e:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__fp_round>

00004942 <modf>:
    4942:	fa 01       	movw	r30, r20
    4944:	dc 01       	movw	r26, r24
    4946:	aa 0f       	add	r26, r26
    4948:	bb 1f       	adc	r27, r27
    494a:	9b 01       	movw	r18, r22
    494c:	ac 01       	movw	r20, r24
    494e:	bf 57       	subi	r27, 0x7F	; 127
    4950:	28 f4       	brcc	.+10     	; 0x495c <modf+0x1a>
modf():
    4952:	22 27       	eor	r18, r18
    4954:	33 27       	eor	r19, r19
    4956:	44 27       	eor	r20, r20
    4958:	50 78       	andi	r21, 0x80	; 128
    495a:	20 c0       	rjmp	.+64     	; 0x499c <modf+0x5a>
    495c:	b7 51       	subi	r27, 0x17	; 23
    495e:	90 f4       	brcc	.+36     	; 0x4984 <modf+0x42>
    4960:	ab 2f       	mov	r26, r27
    4962:	00 24       	eor	r0, r0
    4964:	46 95       	lsr	r20
    4966:	37 95       	ror	r19
    4968:	27 95       	ror	r18
    496a:	01 1c       	adc	r0, r1
    496c:	a3 95       	inc	r26
    496e:	d2 f3       	brmi	.-12     	; 0x4964 <modf+0x22>
    4970:	00 20       	and	r0, r0
    4972:	71 f0       	breq	.+28     	; 0x4990 <modf+0x4e>
    4974:	22 0f       	add	r18, r18
    4976:	33 1f       	adc	r19, r19
    4978:	44 1f       	adc	r20, r20
    497a:	b3 95       	inc	r27
    497c:	da f3       	brmi	.-10     	; 0x4974 <modf+0x32>
    497e:	0e d0       	rcall	.+28     	; 0x499c <modf+0x5a>
    4980:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__subsf3>
    4984:	61 30       	cpi	r22, 0x01	; 1
    4986:	71 05       	cpc	r23, r1
    4988:	a0 e8       	ldi	r26, 0x80	; 128
    498a:	8a 07       	cpc	r24, r26
    498c:	b9 46       	sbci	r27, 0x69	; 105
    498e:	30 f4       	brcc	.+12     	; 0x499c <modf+0x5a>
    4990:	9b 01       	movw	r18, r22
    4992:	ac 01       	movw	r20, r24
    4994:	66 27       	eor	r22, r22
    4996:	77 27       	eor	r23, r23
    4998:	88 27       	eor	r24, r24
    499a:	90 78       	andi	r25, 0x80	; 128
    499c:	30 96       	adiw	r30, 0x00	; 0
    499e:	21 f0       	breq	.+8      	; 0x49a8 <modf+0x66>
    49a0:	20 83       	st	Z, r18
    49a2:	31 83       	std	Z+1, r19	; 0x01
    49a4:	42 83       	std	Z+2, r20	; 0x02
    49a6:	53 83       	std	Z+3, r21	; 0x03
    49a8:	08 95       	ret

000049aa <__fp_mpack>:
__fp_mpack():
    49aa:	9f 3f       	cpi	r25, 0xFF	; 255
    49ac:	31 f0       	breq	.+12     	; 0x49ba <__fp_mpack_finite+0xc>

000049ae <__fp_mpack_finite>:
    49ae:	91 50       	subi	r25, 0x01	; 1
    49b0:	20 f4       	brcc	.+8      	; 0x49ba <__fp_mpack_finite+0xc>
    49b2:	87 95       	ror	r24
    49b4:	77 95       	ror	r23
    49b6:	67 95       	ror	r22
    49b8:	b7 95       	ror	r27
    49ba:	88 0f       	add	r24, r24
    49bc:	91 1d       	adc	r25, r1
    49be:	96 95       	lsr	r25
    49c0:	87 95       	ror	r24
    49c2:	97 f9       	bld	r25, 7
    49c4:	08 95       	ret

000049c6 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    49c6:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    49c8:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    49ca:	16 f4       	brtc	.+4      	; 0x49d0 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    49cc:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    49ce:	07 d0       	rcall	.+14     	; 0x49de <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    49d0:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    49d2:	09 d0       	rcall	.+18     	; 0x49e6 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    49d4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    49d8:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    49da:	05 d0       	rcall	.+10     	; 0x49e6 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    49dc:	3e f4       	brtc	.+14     	; 0x49ec <__divmodhi4_exit>

000049de <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    49de:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    49e0:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    49e2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    49e4:	08 95       	ret

000049e6 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    49e6:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    49e8:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    49ea:	7f 4f       	sbci	r23, 0xFF	; 255

000049ec <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    49ec:	08 95       	ret

000049ee <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    49ee:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    49f0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    49f2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    49f4:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    49f6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    49f8:	09 94       	ijmp

000049fa <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    49fa:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    49fc:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    49fe:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4a00:	07 c0       	rjmp	.+14     	; 0x4a10 <__udivmodhi4_ep>

00004a02 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4a02:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4a04:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4a06:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4a08:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4a0a:	10 f0       	brcs	.+4      	; 0x4a10 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4a0c:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4a0e:	b7 0b       	sbc	r27, r23

00004a10 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4a10:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4a12:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4a14:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4a16:	a9 f7       	brne	.-22     	; 0x4a02 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4a18:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4a1a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4a1c:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4a1e:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4a20:	08 95       	ret

00004a22 <malloc>:
malloc():
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
    4a2a:	82 30       	cpi	r24, 0x02	; 2
    4a2c:	91 05       	cpc	r25, r1
    4a2e:	10 f4       	brcc	.+4      	; 0x4a34 <malloc+0x12>
    4a30:	82 e0       	ldi	r24, 0x02	; 2
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <__flp>
    4a38:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <__flp+0x1>
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	b0 e0       	ldi	r27, 0x00	; 0
    4a42:	a0 e0       	ldi	r26, 0x00	; 0
    4a44:	30 97       	sbiw	r30, 0x00	; 0
    4a46:	99 f4       	brne	.+38     	; 0x4a6e <malloc+0x4c>
    4a48:	21 15       	cp	r18, r1
    4a4a:	31 05       	cpc	r19, r1
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <malloc+0x2e>
    4a4e:	4a c0       	rjmp	.+148    	; 0x4ae4 <malloc+0xc2>
    4a50:	28 1b       	sub	r18, r24
    4a52:	39 0b       	sbc	r19, r25
    4a54:	24 30       	cpi	r18, 0x04	; 4
    4a56:	31 05       	cpc	r19, r1
    4a58:	d8 f5       	brcc	.+118    	; 0x4ad0 <malloc+0xae>
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a5e:	61 15       	cp	r22, r1
    4a60:	71 05       	cpc	r23, r1
    4a62:	89 f1       	breq	.+98     	; 0x4ac6 <malloc+0xa4>
    4a64:	fb 01       	movw	r30, r22
    4a66:	93 83       	std	Z+3, r25	; 0x03
    4a68:	82 83       	std	Z+2, r24	; 0x02
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	11 c0       	rjmp	.+34     	; 0x4a90 <malloc+0x6e>
    4a6e:	40 81       	ld	r20, Z
    4a70:	51 81       	ldd	r21, Z+1	; 0x01
    4a72:	02 81       	ldd	r16, Z+2	; 0x02
    4a74:	13 81       	ldd	r17, Z+3	; 0x03
    4a76:	48 17       	cp	r20, r24
    4a78:	59 07       	cpc	r21, r25
    4a7a:	e0 f0       	brcs	.+56     	; 0x4ab4 <malloc+0x92>
    4a7c:	48 17       	cp	r20, r24
    4a7e:	59 07       	cpc	r21, r25
    4a80:	99 f4       	brne	.+38     	; 0x4aa8 <malloc+0x86>
    4a82:	10 97       	sbiw	r26, 0x00	; 0
    4a84:	61 f0       	breq	.+24     	; 0x4a9e <malloc+0x7c>
    4a86:	12 96       	adiw	r26, 0x02	; 2
    4a88:	0c 93       	st	X, r16
    4a8a:	12 97       	sbiw	r26, 0x02	; 2
    4a8c:	13 96       	adiw	r26, 0x03	; 3
    4a8e:	1c 93       	st	X, r17
    4a90:	32 96       	adiw	r30, 0x02	; 2
    4a92:	cf 01       	movw	r24, r30
    4a94:	df 91       	pop	r29
    4a96:	cf 91       	pop	r28
    4a98:	1f 91       	pop	r17
    4a9a:	0f 91       	pop	r16
    4a9c:	08 95       	ret
    4a9e:	00 93 3e 05 	sts	0x053E, r16	; 0x80053e <__flp>
    4aa2:	10 93 3f 05 	sts	0x053F, r17	; 0x80053f <__flp+0x1>
    4aa6:	f4 cf       	rjmp	.-24     	; 0x4a90 <malloc+0x6e>
    4aa8:	21 15       	cp	r18, r1
    4aaa:	31 05       	cpc	r19, r1
    4aac:	51 f0       	breq	.+20     	; 0x4ac2 <malloc+0xa0>
    4aae:	42 17       	cp	r20, r18
    4ab0:	53 07       	cpc	r21, r19
    4ab2:	38 f0       	brcs	.+14     	; 0x4ac2 <malloc+0xa0>
    4ab4:	a9 01       	movw	r20, r18
    4ab6:	db 01       	movw	r26, r22
    4ab8:	9a 01       	movw	r18, r20
    4aba:	bd 01       	movw	r22, r26
    4abc:	df 01       	movw	r26, r30
    4abe:	f8 01       	movw	r30, r16
    4ac0:	c1 cf       	rjmp	.-126    	; 0x4a44 <malloc+0x22>
    4ac2:	ef 01       	movw	r28, r30
    4ac4:	f9 cf       	rjmp	.-14     	; 0x4ab8 <malloc+0x96>
    4ac6:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <__flp+0x1>
    4aca:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <__flp>
    4ace:	cd cf       	rjmp	.-102    	; 0x4a6a <malloc+0x48>
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f3 1f       	adc	r31, r19
    4ad6:	81 93       	st	Z+, r24
    4ad8:	91 93       	st	Z+, r25
    4ada:	22 50       	subi	r18, 0x02	; 2
    4adc:	31 09       	sbc	r19, r1
    4ade:	39 83       	std	Y+1, r19	; 0x01
    4ae0:	28 83       	st	Y, r18
    4ae2:	d7 cf       	rjmp	.-82     	; 0x4a92 <malloc+0x70>
    4ae4:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    4ae8:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    4aec:	23 2b       	or	r18, r19
    4aee:	41 f4       	brne	.+16     	; 0x4b00 <malloc+0xde>
    4af0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_start>
    4af4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_start+0x1>
    4af8:	30 93 3d 05 	sts	0x053D, r19	; 0x80053d <__brkval+0x1>
    4afc:	20 93 3c 05 	sts	0x053C, r18	; 0x80053c <__brkval>
    4b00:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_end>
    4b04:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_end+0x1>
    4b08:	21 15       	cp	r18, r1
    4b0a:	31 05       	cpc	r19, r1
    4b0c:	41 f4       	brne	.+16     	; 0x4b1e <malloc+0xfc>
    4b0e:	2d b7       	in	r18, 0x3d	; 61
    4b10:	3e b7       	in	r19, 0x3e	; 62
    4b12:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__malloc_margin>
    4b16:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__malloc_margin+0x1>
    4b1a:	24 1b       	sub	r18, r20
    4b1c:	35 0b       	sbc	r19, r21
    4b1e:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <__brkval>
    4b22:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <__brkval+0x1>
    4b26:	e2 17       	cp	r30, r18
    4b28:	f3 07       	cpc	r31, r19
    4b2a:	a0 f4       	brcc	.+40     	; 0x4b54 <malloc+0x132>
    4b2c:	2e 1b       	sub	r18, r30
    4b2e:	3f 0b       	sbc	r19, r31
    4b30:	28 17       	cp	r18, r24
    4b32:	39 07       	cpc	r19, r25
    4b34:	78 f0       	brcs	.+30     	; 0x4b54 <malloc+0x132>
    4b36:	ac 01       	movw	r20, r24
    4b38:	4e 5f       	subi	r20, 0xFE	; 254
    4b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b3c:	24 17       	cp	r18, r20
    4b3e:	35 07       	cpc	r19, r21
    4b40:	48 f0       	brcs	.+18     	; 0x4b54 <malloc+0x132>
    4b42:	4e 0f       	add	r20, r30
    4b44:	5f 1f       	adc	r21, r31
    4b46:	50 93 3d 05 	sts	0x053D, r21	; 0x80053d <__brkval+0x1>
    4b4a:	40 93 3c 05 	sts	0x053C, r20	; 0x80053c <__brkval>
    4b4e:	81 93       	st	Z+, r24
    4b50:	91 93       	st	Z+, r25
    4b52:	9f cf       	rjmp	.-194    	; 0x4a92 <malloc+0x70>
    4b54:	f0 e0       	ldi	r31, 0x00	; 0
    4b56:	e0 e0       	ldi	r30, 0x00	; 0
    4b58:	9c cf       	rjmp	.-200    	; 0x4a92 <malloc+0x70>

00004b5a <free>:
free():
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
    4b5e:	00 97       	sbiw	r24, 0x00	; 0
    4b60:	e9 f0       	breq	.+58     	; 0x4b9c <free+0x42>
    4b62:	fc 01       	movw	r30, r24
    4b64:	32 97       	sbiw	r30, 0x02	; 2
    4b66:	13 82       	std	Z+3, r1	; 0x03
    4b68:	12 82       	std	Z+2, r1	; 0x02
    4b6a:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <__flp>
    4b6e:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <__flp+0x1>
    4b72:	ed 01       	movw	r28, r26
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	10 97       	sbiw	r26, 0x00	; 0
    4b7a:	a1 f4       	brne	.+40     	; 0x4ba4 <free+0x4a>
    4b7c:	20 81       	ld	r18, Z
    4b7e:	31 81       	ldd	r19, Z+1	; 0x01
    4b80:	82 0f       	add	r24, r18
    4b82:	93 1f       	adc	r25, r19
    4b84:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    4b88:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    4b8c:	28 17       	cp	r18, r24
    4b8e:	39 07       	cpc	r19, r25
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <free+0x3a>
    4b92:	61 c0       	rjmp	.+194    	; 0x4c56 <free+0xfc>
    4b94:	f0 93 3d 05 	sts	0x053D, r31	; 0x80053d <__brkval+0x1>
    4b98:	e0 93 3c 05 	sts	0x053C, r30	; 0x80053c <__brkval>
    4b9c:	df 91       	pop	r29
    4b9e:	cf 91       	pop	r28
    4ba0:	08 95       	ret
    4ba2:	ea 01       	movw	r28, r20
    4ba4:	ce 17       	cp	r28, r30
    4ba6:	df 07       	cpc	r29, r31
    4ba8:	e8 f5       	brcc	.+122    	; 0x4c24 <free+0xca>
    4baa:	4a 81       	ldd	r20, Y+2	; 0x02
    4bac:	5b 81       	ldd	r21, Y+3	; 0x03
    4bae:	9e 01       	movw	r18, r28
    4bb0:	41 15       	cp	r20, r1
    4bb2:	51 05       	cpc	r21, r1
    4bb4:	b1 f7       	brne	.-20     	; 0x4ba2 <free+0x48>
    4bb6:	e9 01       	movw	r28, r18
    4bb8:	fb 83       	std	Y+3, r31	; 0x03
    4bba:	ea 83       	std	Y+2, r30	; 0x02
    4bbc:	49 91       	ld	r20, Y+
    4bbe:	59 91       	ld	r21, Y+
    4bc0:	c4 0f       	add	r28, r20
    4bc2:	d5 1f       	adc	r29, r21
    4bc4:	ec 17       	cp	r30, r28
    4bc6:	fd 07       	cpc	r31, r29
    4bc8:	61 f4       	brne	.+24     	; 0x4be2 <free+0x88>
    4bca:	80 81       	ld	r24, Z
    4bcc:	91 81       	ldd	r25, Z+1	; 0x01
    4bce:	02 96       	adiw	r24, 0x02	; 2
    4bd0:	84 0f       	add	r24, r20
    4bd2:	95 1f       	adc	r25, r21
    4bd4:	e9 01       	movw	r28, r18
    4bd6:	99 83       	std	Y+1, r25	; 0x01
    4bd8:	88 83       	st	Y, r24
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	9b 83       	std	Y+3, r25	; 0x03
    4be0:	8a 83       	std	Y+2, r24	; 0x02
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	e0 e0       	ldi	r30, 0x00	; 0
    4be6:	12 96       	adiw	r26, 0x02	; 2
    4be8:	8d 91       	ld	r24, X+
    4bea:	9c 91       	ld	r25, X
    4bec:	13 97       	sbiw	r26, 0x03	; 3
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	b9 f5       	brne	.+110    	; 0x4c60 <free+0x106>
    4bf2:	2d 91       	ld	r18, X+
    4bf4:	3c 91       	ld	r19, X
    4bf6:	11 97       	sbiw	r26, 0x01	; 1
    4bf8:	cd 01       	movw	r24, r26
    4bfa:	02 96       	adiw	r24, 0x02	; 2
    4bfc:	82 0f       	add	r24, r18
    4bfe:	93 1f       	adc	r25, r19
    4c00:	20 91 3c 05 	lds	r18, 0x053C	; 0x80053c <__brkval>
    4c04:	30 91 3d 05 	lds	r19, 0x053D	; 0x80053d <__brkval+0x1>
    4c08:	28 17       	cp	r18, r24
    4c0a:	39 07       	cpc	r19, r25
    4c0c:	39 f6       	brne	.-114    	; 0x4b9c <free+0x42>
    4c0e:	30 97       	sbiw	r30, 0x00	; 0
    4c10:	51 f5       	brne	.+84     	; 0x4c66 <free+0x10c>
    4c12:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <__flp+0x1>
    4c16:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <__flp>
    4c1a:	b0 93 3d 05 	sts	0x053D, r27	; 0x80053d <__brkval+0x1>
    4c1e:	a0 93 3c 05 	sts	0x053C, r26	; 0x80053c <__brkval>
    4c22:	bc cf       	rjmp	.-136    	; 0x4b9c <free+0x42>
    4c24:	d3 83       	std	Z+3, r29	; 0x03
    4c26:	c2 83       	std	Z+2, r28	; 0x02
    4c28:	40 81       	ld	r20, Z
    4c2a:	51 81       	ldd	r21, Z+1	; 0x01
    4c2c:	84 0f       	add	r24, r20
    4c2e:	95 1f       	adc	r25, r21
    4c30:	c8 17       	cp	r28, r24
    4c32:	d9 07       	cpc	r29, r25
    4c34:	61 f4       	brne	.+24     	; 0x4c4e <free+0xf4>
    4c36:	4e 5f       	subi	r20, 0xFE	; 254
    4c38:	5f 4f       	sbci	r21, 0xFF	; 255
    4c3a:	88 81       	ld	r24, Y
    4c3c:	99 81       	ldd	r25, Y+1	; 0x01
    4c3e:	48 0f       	add	r20, r24
    4c40:	59 1f       	adc	r21, r25
    4c42:	51 83       	std	Z+1, r21	; 0x01
    4c44:	40 83       	st	Z, r20
    4c46:	8a 81       	ldd	r24, Y+2	; 0x02
    4c48:	9b 81       	ldd	r25, Y+3	; 0x03
    4c4a:	93 83       	std	Z+3, r25	; 0x03
    4c4c:	82 83       	std	Z+2, r24	; 0x02
    4c4e:	21 15       	cp	r18, r1
    4c50:	31 05       	cpc	r19, r1
    4c52:	09 f0       	breq	.+2      	; 0x4c56 <free+0xfc>
    4c54:	b0 cf       	rjmp	.-160    	; 0x4bb6 <free+0x5c>
    4c56:	f0 93 3f 05 	sts	0x053F, r31	; 0x80053f <__flp+0x1>
    4c5a:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <__flp>
    4c5e:	9e cf       	rjmp	.-196    	; 0x4b9c <free+0x42>
    4c60:	fd 01       	movw	r30, r26
    4c62:	dc 01       	movw	r26, r24
    4c64:	c0 cf       	rjmp	.-128    	; 0x4be6 <free+0x8c>
    4c66:	13 82       	std	Z+3, r1	; 0x03
    4c68:	12 82       	std	Z+2, r1	; 0x02
    4c6a:	d7 cf       	rjmp	.-82     	; 0x4c1a <free+0xc0>

00004c6c <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4c6c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4c6e:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4c70:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4c72:	04 c0       	rjmp	.+8      	; 0x4c7c <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4c74:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4c76:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4c7a:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4c7c:	c7 34       	cpi	r28, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4c7e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4c80:	c9 f7       	brne	.-14     	; 0x4c74 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4c82:	f8 94       	cli

00004c84 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4c84:	ff cf       	rjmp	.-2      	; 0x4c84 <__stop_program>
