
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/dust_O3_8segment_IR_plasma.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 12 01 	jmp	0x224	; 0x224 <__ctors_end>
       4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      10:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      18:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      20:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_8>
      24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      28:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      38:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      3c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      40:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__vector_16>
      44:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      48:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_18>
      4c:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_19>
      50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      58:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      5c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      60:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_24>
      64:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <delay+0x2a>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
__trampolines_start():
      ea:	00 86       	std	Z+8, r0	; 0x08
      ec:	22 7e       	andi	r18, 0xE2	; 226
      ee:	6d 00       	.word	0x006d	; ????
      f0:	00 02       	muls	r16, r16
      f2:	30 06       	cpc	r3, r16
      f4:	63 00       	.word	0x0063	; ????
      f6:	04 40       	sbci	r16, 0x04	; 4
      f8:	80 52       	subi	r24, 0x20	; 32
      fa:	3f 06       	cpc	r3, r31
      fc:	5b 4f       	sbci	r21, 0xFB	; 251
      fe:	66 6d       	ori	r22, 0xD6	; 214
     100:	7d 27       	eor	r23, r29
     102:	7f 6f       	ori	r23, 0xFF	; 255
     104:	00 00       	nop
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 53       	subi	r16, 0x30	; 48
     10a:	5f 77       	andi	r21, 0x7F	; 127
     10c:	7f 39       	cpi	r23, 0x9F	; 159
     10e:	3f 79       	andi	r19, 0x9F	; 159
     110:	71 3d       	cpi	r23, 0xD1	; 209
     112:	76 06       	cpc	r7, r22
     114:	1e 69       	ori	r17, 0x9E	; 158
     116:	38 15       	cp	r19, r8
     118:	37 3f       	cpi	r19, 0xF7	; 247
     11a:	73 67       	ori	r23, 0x73	; 115
     11c:	31 6d       	ori	r19, 0xD1	; 209
     11e:	78 3e       	cpi	r23, 0xE8	; 232
     120:	2a 1d       	adc	r18, r10
     122:	76 6e       	ori	r23, 0xE6	; 230
     124:	5b 39       	cpi	r21, 0x9B	; 155
     126:	64 0f       	add	r22, r20
     128:	00 08       	sbc	r0, r0
     12a:	20 5f       	subi	r18, 0xF0	; 240
     12c:	7c 58       	subi	r23, 0x8C	; 140
     12e:	5e 7b       	andi	r21, 0xBE	; 190
     130:	31 6f       	ori	r19, 0xF1	; 241
     132:	74 04       	cpc	r7, r4
     134:	0e 75       	andi	r16, 0x5E	; 94
     136:	30 55       	subi	r19, 0x50	; 80
     138:	54 5c       	subi	r21, 0xC4	; 196
     13a:	73 67       	ori	r23, 0x73	; 115
     13c:	50 6d       	ori	r21, 0xD0	; 208
     13e:	78 1c       	adc	r7, r8
     140:	2a 1d       	adc	r18, r10
     142:	76 6e       	ori	r23, 0xE6	; 230
     144:	47 46       	sbci	r20, 0x67	; 103
     146:	06 70       	andi	r16, 0x06	; 6
     148:	01 3f       	Address 0x00000148 is out of bounds.
.word	0xffff	; ????

00000149 <_ZL18TM16XX_NUMBER_FONT.lto_priv.114>:
     149:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

00000159 <port_to_mode_PGM>:
     159:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000163 <port_to_output_PGM>:
     163:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000016d <_ZL18TM16XX_NUMBER_FONT.lto_priv.113>:
     16d:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq

0000017d <_ZL19TM16XX_FONT_DEFAULT.lto_priv.111>:
     17d:	00 86 22 7e 6d 00 00 02 30 06 63 00 04 40 80 52     .."~m...0.c..@.R
     18d:	3f 06 5b 4f 66 6d 7d 27 7f 6f 00 00 00 48 00 53     ?.[Ofm}'.o...H.S
     19d:	5f 77 7f 39 3f 79 71 3d 76 06 1e 69 38 15 37 3f     _w.9?yq=v..i8.7?
     1ad:	73 67 31 6d 78 3e 2a 1d 76 6e 5b 39 64 0f 00 08     sg1mx>*.vn[9d...
     1bd:	20 5f 7c 58 5e 7b 31 6f 74 04 0e 75 30 55 54 5c      _|X^{1ot..u0UT\
     1cd:	73 67 50 6d 78 1c 2a 1d 76 6e 47 46 06 70 01        sgPmx.*.vnGF.p.

000001dc <port_to_input_PGM>:
     1dc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001e6 <digital_pin_to_port_PGM>:
     1e6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1f6:	03 03 03 03                                         ....

000001fa <digital_pin_to_bit_mask_PGM>:
     1fa:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     20a:	04 08 10 20                                         ... 

0000020e <digital_pin_to_timer_PGM>:
     20e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     21e:	00 00 00 00                                         ....

00000222 <__ctors_start>:
__ctors_start():
     222:	54 10       	cpse	r5, r4

00000224 <__ctors_end>:
__dtors_end():
     224:	11 24       	eor	r1, r1
     226:	1f be       	out	0x3f, r1	; 63
     228:	cf ef       	ldi	r28, 0xFF	; 255
     22a:	d8 e0       	ldi	r29, 0x08	; 8
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	cd bf       	out	0x3d, r28	; 61

00000230 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     230:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     232:	ac e3       	ldi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     234:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     23a:	a1 37       	cpi	r26, 0x71	; 113
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     23c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>

00000240 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     240:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     242:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     244:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     246:	e2 ef       	ldi	r30, 0xF2	; 242
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     248:	f3 e4       	ldi	r31, 0x43	; 67
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     24c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     24e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     250:	ac 33       	cpi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     252:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     256:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     258:	c2 e1       	ldi	r28, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     25a:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     25c:	04 c0       	rjmp	.+8      	; 0x266 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     25e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     260:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     262:	0e 94 cc 20 	call	0x4198	; 0x4198 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     266:	c1 31       	cpi	r28, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     268:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     26a:	c9 f7       	brne	.-14     	; 0x25e <__do_global_ctors+0x8>
     26c:	0e 94 28 11 	call	0x2250	; 0x2250 <main>
     270:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <_exit>

00000274 <__bad_interrupt>:
__vector_22():
     274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000278 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]>:
_ZN10MQ131Class18getEnvCorrectRatioEv.constprop.88():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:173

/**
 * Get correction to apply on Rs depending on environmental
 * conditions
 */
 float MQ131Class::getEnvCorrectRatio() {
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:176
 	// Select the right equation based on humidity
 	// If default value, ignore correction ratio
 	if(humidityPercent == 60 && temperatureCelsuis == 20) {
     27c:	d0 91 15 05 	lds	r29, 0x0515	; 0x800515 <MQ131+0x1e>
     280:	c0 91 14 05 	lds	r28, 0x0514	; 0x800514 <MQ131+0x1d>
     284:	dc 33       	cpi	r29, 0x3C	; 60
     286:	39 f4       	brne	.+14     	; 0x296 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x1e>
     288:	c4 31       	cpi	r28, 0x14	; 20
     28a:	01 f5       	brne	.+64     	; 0x2cc <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:177
 		return 1.0;
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	9f e3       	ldi	r25, 0x3F	; 63
     294:	16 c0       	rjmp	.+44     	; 0x2c2 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x4a>
     296:	6c 2f       	mov	r22, r28
     298:	0c 2e       	mov	r0, r28
     29a:	00 0c       	add	r0, r0
     29c:	77 0b       	sbc	r23, r23
     29e:	88 0b       	sbc	r24, r24
     2a0:	99 0b       	sbc	r25, r25
     2a2:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatsisf>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:180
 	}
 	// For humidity > 75%, use the 85% curve
 	if(humidityPercent > 75) {
     2a6:	dc 34       	cpi	r29, 0x4C	; 76
     2a8:	78 f0       	brcs	.+30     	; 0x2c8 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:182
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
     2aa:	25 e5       	ldi	r18, 0x55	; 85
     2ac:	31 ec       	ldi	r19, 0xC1	; 193
     2ae:	48 e2       	ldi	r20, 0x28	; 40
     2b0:	5c eb       	ldi	r21, 0xBC	; 188
     2b2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
     2b6:	23 e2       	ldi	r18, 0x23	; 35
     2b8:	3a e4       	ldi	r19, 0x4A	; 74
     2ba:	43 e9       	ldi	r20, 0x93	; 147
     2bc:	5f e3       	ldi	r21, 0x3F	; 63
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 		return -0.0119 * temperatureCelsuis + 1.3261;
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     2be:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__addsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:193
 }
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:185
 	if(humidityPercent > 75) {
    // R^2 = 0.996
   	return -0.0103 * temperatureCelsuis + 1.1507;
 	}
 	// For humidity > 50%, use the 60% curve
 	if(humidityPercent > 50) {
     2c8:	d3 33       	cpi	r29, 0x33	; 51
     2ca:	90 f0       	brcs	.+36     	; 0x2f0 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:187
 		// R^2 = 0.9976
 		return -0.0119 * temperatureCelsuis + 1.3261;
     2cc:	6c 2f       	mov	r22, r28
     2ce:	cc 0f       	add	r28, r28
     2d0:	77 0b       	sbc	r23, r23
     2d2:	88 0b       	sbc	r24, r24
     2d4:	99 0b       	sbc	r25, r25
     2d6:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatsisf>
     2da:	28 e3       	ldi	r18, 0x38	; 56
     2dc:	38 ef       	ldi	r19, 0xF8	; 248
     2de:	42 e4       	ldi	r20, 0x42	; 66
     2e0:	5c eb       	ldi	r21, 0xBC	; 188
     2e2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
     2e6:	25 ea       	ldi	r18, 0xA5	; 165
     2e8:	3d eb       	ldi	r19, 0xBD	; 189
     2ea:	49 ea       	ldi	r20, 0xA9	; 169
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	e7 cf       	rjmp	.-50     	; 0x2be <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x46>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:192
 	}

 	// Humidity < 50%, use the 30% curve
  // R^2 = 0.9986
 	return -0.0141 * temperatureCelsuis + 1.5623;
     2f0:	20 eb       	ldi	r18, 0xB0	; 176
     2f2:	33 e0       	ldi	r19, 0x03	; 3
     2f4:	47 e6       	ldi	r20, 0x67	; 103
     2f6:	5c eb       	ldi	r21, 0xBC	; 188
     2f8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
     2fc:	22 e7       	ldi	r18, 0x72	; 114
     2fe:	39 ef       	ldi	r19, 0xF9	; 249
     300:	47 ec       	ldi	r20, 0xC7	; 199
     302:	5f e3       	ldi	r21, 0x3F	; 63
     304:	dc cf       	rjmp	.-72     	; 0x2be <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]+0x46>

00000306 <HardwareSerial::begin(unsigned long, unsigned char) [clone .constprop.77]>:
_ZN14HardwareSerial5beginEmh.constprop.77():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     306:	ee e4       	ldi	r30, 0x4E	; 78
     308:	f4 e0       	ldi	r31, 0x04	; 4
     30a:	a0 89       	ldd	r26, Z+16	; 0x10
     30c:	b1 89       	ldd	r27, Z+17	; 0x11
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     312:	a4 85       	ldd	r26, Z+12	; 0x0c
     314:	b5 85       	ldd	r27, Z+13	; 0x0d
     316:	1c 92       	st	X, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     318:	a6 85       	ldd	r26, Z+14	; 0x0e
     31a:	b7 85       	ldd	r27, Z+15	; 0x0f
     31c:	83 e3       	ldi	r24, 0x33	; 51
     31e:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:138

  _written = false;
     320:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     322:	a4 89       	ldd	r26, Z+20	; 0x14
     324:	b5 89       	ldd	r27, Z+21	; 0x15
     326:	86 e0       	ldi	r24, 0x06	; 6
     328:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:146
  
  sbi(*_ucsrb, RXEN0);
     32a:	a2 89       	ldd	r26, Z+18	; 0x12
     32c:	b3 89       	ldd	r27, Z+19	; 0x13
     32e:	8c 91       	ld	r24, X
     330:	80 61       	ori	r24, 0x10	; 16
     332:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
     334:	a2 89       	ldd	r26, Z+18	; 0x12
     336:	b3 89       	ldd	r27, Z+19	; 0x13
     338:	8c 91       	ld	r24, X
     33a:	88 60       	ori	r24, 0x08	; 8
     33c:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
     33e:	a2 89       	ldd	r26, Z+18	; 0x12
     340:	b3 89       	ldd	r27, Z+19	; 0x13
     342:	8c 91       	ld	r24, X
     344:	80 68       	ori	r24, 0x80	; 128
     346:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
     348:	02 88       	ldd	r0, Z+18	; 0x12
     34a:	f3 89       	ldd	r31, Z+19	; 0x13
     34c:	e0 2d       	mov	r30, r0
     34e:	80 81       	ld	r24, Z
     350:	8f 7d       	andi	r24, 0xDF	; 223
     352:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:150
}
     354:	08 95       	ret

00000356 <IRrecv::getBiphaselevel() [clone .constprop.62]>:
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:603
 *                1   0   0   0   1   1   0   1   0   1   1  - Space
 * A mark to space at a significant clock edge results in a 1
 * A space to mark at a significant clock edge results in a 0 (for RC6)
 * Returns current level [MARK or SPACE] or -1 for error (measured time interval is not a multiple of sBiphaseTimeUnit).
 */
uint8_t IRrecv::getBiphaselevel() {
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:606
    uint8_t tLevelOfCurrentInterval; // 0 (SPACE) or 1 (MARK)

    if (sBiphaseDecodeRawbuffOffset >= decodedIRData.rawDataPtr->rawlen) {
     35e:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
     362:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
     366:	40 91 4d 04 	lds	r20, 0x044D	; 0x80044d <sBiphaseDecodeRawbuffOffset>
     36a:	80 85       	ldd	r24, Z+8	; 0x08
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:607
        return SPACE;  // After end of recorded buffer, assume space.
     36c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:606
 * Returns current level [MARK or SPACE] or -1 for error (measured time interval is not a multiple of sBiphaseTimeUnit).
 */
uint8_t IRrecv::getBiphaselevel() {
    uint8_t tLevelOfCurrentInterval; // 0 (SPACE) or 1 (MARK)

    if (sBiphaseDecodeRawbuffOffset >= decodedIRData.rawDataPtr->rawlen) {
     36e:	48 17       	cp	r20, r24
     370:	08 f0       	brcs	.+2      	; 0x374 <IRrecv::getBiphaselevel() [clone .constprop.62]+0x1e>
     372:	64 c0       	rjmp	.+200    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:610
        return SPACE;  // After end of recorded buffer, assume space.
    }

    tLevelOfCurrentInterval = (sBiphaseDecodeRawbuffOffset) & 1; // on odd rawbuf offsets we have mark timings
     374:	14 2f       	mov	r17, r20
     376:	11 70       	andi	r17, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:615

    /*
     * Setup data if sUsedTimingIntervals is 0
     */
    if (sUsedTimingIntervals == 0) {
     378:	00 91 4c 04 	lds	r16, 0x044C	; 0x80044c <sUsedTimingIntervals>
     37c:	01 11       	cpse	r16, r1
     37e:	4f c0       	rjmp	.+158    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:616
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
     380:	84 2f       	mov	r24, r20
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	01 84       	ldd	r0, Z+9	; 0x09
     38e:	f2 85       	ldd	r31, Z+10	; 0x0a
     390:	e0 2d       	mov	r30, r0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:617
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;
     392:	2c ee       	ldi	r18, 0xEC	; 236
     394:	3f ef       	ldi	r19, 0xFF	; 255
     396:	11 23       	and	r17, r17
     398:	11 f0       	breq	.+4      	; 0x39e <IRrecv::getBiphaselevel() [clone .constprop.62]+0x48>
     39a:	24 e1       	ldi	r18, 0x14	; 20
     39c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:619

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     39e:	c0 91 4a 04 	lds	r28, 0x044A	; 0x80044a <sBiphaseTimeUnit>
     3a2:	d0 91 4b 04 	lds	r29, 0x044B	; 0x80044b <sBiphaseTimeUnit+0x1>
     3a6:	2c 0f       	add	r18, r28
     3a8:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     3aa:	c9 01       	movw	r24, r18
     3ac:	63 e4       	ldi	r22, 0x43	; 67
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     3b4:	e6 17       	cp	r30, r22
     3b6:	f7 07       	cpc	r31, r23
     3b8:	60 f0       	brcs	.+24     	; 0x3d2 <IRrecv::getBiphaselevel() [clone .constprop.62]+0x7c>
     3ba:	c9 01       	movw	r24, r18
     3bc:	68 e2       	ldi	r22, 0x28	; 40
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:620
    if (sUsedTimingIntervals == 0) {
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     3cc:	6e 17       	cp	r22, r30
     3ce:	7f 07       	cpc	r23, r31
     3d0:	10 f5       	brcc	.+68     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:621
        uint16_t tCurrentTimingWith = decodedIRData.rawDataPtr->rawbuf[sBiphaseDecodeRawbuffOffset];
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     3d2:	2c 0f       	add	r18, r28
     3d4:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     3d6:	c9 01       	movw	r24, r18
     3d8:	63 e4       	ldi	r22, 0x43	; 67
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     3e0:	e6 17       	cp	r30, r22
     3e2:	f7 07       	cpc	r31, r23
     3e4:	50 f0       	brcs	.+20     	; 0x3fa <IRrecv::getBiphaselevel() [clone .constprop.62]+0xa4>
     3e6:	c9 01       	movw	r24, r18
     3e8:	68 e2       	ldi	r22, 0x28	; 40
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     3f0:	6f 5f       	subi	r22, 0xFF	; 255
     3f2:	7f 4f       	sbci	r23, 0xFF	; 255
     3f4:	6e 17       	cp	r22, r30
     3f6:	7f 07       	cpc	r23, r31
     3f8:	60 f4       	brcc	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:623

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
     3fa:	2c 0f       	add	r18, r28
     3fc:	3d 1f       	adc	r19, r29
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     3fe:	c9 01       	movw	r24, r18
     400:	63 e4       	ldi	r22, 0x43	; 67
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     408:	e6 17       	cp	r30, r22
     40a:	f7 07       	cpc	r31, r23
     40c:	e8 f4       	brcc	.+58     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:626
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
        } else {
            return -1;
     40e:	1f ef       	ldi	r17, 0xFF	; 255
     410:	15 c0       	rjmp	.+42     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:622
        uint16_t tMarkExcessCorrection = (tLevelOfCurrentInterval == MARK) ? MARK_EXCESS_MICROS : -MARK_EXCESS_MICROS;

        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:624
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
     416:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <sCurrentTimingIntervals+0x1>
     41a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <sCurrentTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:631
            return -1;
        }
    }

    // We use another interval from tCurrentTimingIntervals
    sUsedTimingIntervals++;
     41e:	0f 5f       	subi	r16, 0xFF	; 255
     420:	00 93 4c 04 	sts	0x044C, r16	; 0x80044c <sUsedTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:634

    // keep track of current timing offset
    if (sUsedTimingIntervals >= sCurrentTimingIntervals) {
     424:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <sCurrentTimingIntervals>
     428:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <sCurrentTimingIntervals+0x1>
     42c:	08 17       	cp	r16, r24
     42e:	19 06       	cpc	r1, r25
     430:	28 f0       	brcs	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:636
        // we have used all intervals of current timing, switch to next timing value
        sUsedTimingIntervals = 0;
     432:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <sUsedTimingIntervals>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:637
        sBiphaseDecodeRawbuffOffset++;
     436:	4f 5f       	subi	r20, 0xFF	; 255
     438:	40 93 4d 04 	sts	0x044D, r20	; 0x80044d <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:643
    }

    TRACE_PRINTLN(tLevelOfCurrentInterval);

    return tLevelOfCurrentInterval;
}
     43c:	81 2f       	mov	r24, r17
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret
matchTicks():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:747
    Serial.print(F(" <= "));
    Serial.print(aMeasuredTicks, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros), DEC);
#endif
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros)) && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros)));
     448:	c9 01       	movw	r24, r18
     44a:	68 e2       	ldi	r22, 0x28	; 40
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	6e 17       	cp	r22, r30
     458:	7f 07       	cpc	r23, r31
     45a:	c8 f2       	brcs	.-78     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
_ZN6IRrecv15getBiphaselevelEv.constprop.62():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:624
        if (matchTicks(tCurrentTimingWith, (sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 1;
        } else if (matchTicks(tCurrentTimingWith, (2 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 2;
        } else if (matchTicks(tCurrentTimingWith, (3 * sBiphaseTimeUnit) + tMarkExcessCorrection)) {
            sCurrentTimingIntervals = 3;
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	da cf       	rjmp	.-76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

00000462 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	6c 01       	movw	r12, r24
     478:	7b 01       	movw	r14, r22
     47a:	8b 01       	movw	r16, r22
     47c:	04 0f       	add	r16, r20
     47e:	15 1f       	adc	r17, r21
     480:	eb 01       	movw	r28, r22
     482:	5e 01       	movw	r10, r28
     484:	ae 18       	sub	r10, r14
     486:	bf 08       	sbc	r11, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:37
  size_t n = 0;
  while (size--) {
     488:	c0 17       	cp	r28, r16
     48a:	d1 07       	cpc	r29, r17
     48c:	59 f0       	breq	.+22     	; 0x4a4 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:38
    if (write(*buffer++)) n++;
     48e:	69 91       	ld	r22, Y+
     490:	d6 01       	movw	r26, r12
     492:	ed 91       	ld	r30, X+
     494:	fc 91       	ld	r31, X
     496:	01 90       	ld	r0, Z+
     498:	f0 81       	ld	r31, Z
     49a:	e0 2d       	mov	r30, r0
     49c:	c6 01       	movw	r24, r12
     49e:	09 95       	icall
     4a0:	89 2b       	or	r24, r25
     4a2:	79 f7       	brne	.-34     	; 0x482 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:42
    else break;
  }
  return n;
}
     4a4:	c5 01       	movw	r24, r10
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	08 95       	ret

000004bc <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:361
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     4bc:	08 95       	ret

000004be <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:346
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     4be:	08 95       	ret

000004c0 <VisualMicroDebug::outPacketEnd()>:
_ZN16VisualMicroDebug12outPacketEndEv():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:456

#endif

#endif

}
     4c0:	08 95       	ret

000004c2 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     4c2:	fc 01       	movw	r30, r24
     4c4:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
     4c6:	44 8d       	ldd	r20, Z+28	; 0x1c
     4c8:	25 2f       	mov	r18, r21
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	84 2f       	mov	r24, r20
     4ce:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     4d0:	82 1b       	sub	r24, r18
     4d2:	93 0b       	sbc	r25, r19
     4d4:	54 17       	cp	r21, r20
     4d6:	10 f0       	brcs	.+4      	; 0x4dc <HardwareSerial::availableForWrite()+0x1a>
     4d8:	cf 96       	adiw	r24, 0x3f	; 63
     4da:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:202
  return tail - head - 1;
     4dc:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:203
}
     4de:	08 95       	ret

000004e0 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     4e0:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     4e2:	91 8d       	ldd	r25, Z+25	; 0x19
     4e4:	82 8d       	ldd	r24, Z+26	; 0x1a
     4e6:	98 17       	cp	r25, r24
     4e8:	61 f0       	breq	.+24     	; 0x502 <HardwareSerial::read()+0x22>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     4ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
     4ec:	ae 0f       	add	r26, r30
     4ee:	bf 2f       	mov	r27, r31
     4f0:	b1 1d       	adc	r27, r1
     4f2:	5d 96       	adiw	r26, 0x1d	; 29
     4f4:	8c 91       	ld	r24, X
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     4f6:	92 8d       	ldd	r25, Z+26	; 0x1a
     4f8:	9f 5f       	subi	r25, 0xFF	; 255
     4fa:	9f 73       	andi	r25, 0x3F	; 63
     4fc:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:188
    return c;
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     506:	08 95       	ret

00000508 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     508:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
     50a:	91 8d       	ldd	r25, Z+25	; 0x19
     50c:	82 8d       	ldd	r24, Z+26	; 0x1a
     50e:	98 17       	cp	r25, r24
     510:	31 f0       	breq	.+12     	; 0x51e <HardwareSerial::peek()+0x16>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     512:	82 8d       	ldd	r24, Z+26	; 0x1a
     514:	e8 0f       	add	r30, r24
     516:	f1 1d       	adc	r31, r1
     518:	85 8d       	ldd	r24, Z+29	; 0x1d
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     522:	08 95       	ret

00000524 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     524:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     526:	91 8d       	ldd	r25, Z+25	; 0x19
     528:	22 8d       	ldd	r18, Z+26	; 0x1a
     52a:	89 2f       	mov	r24, r25
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	80 5c       	subi	r24, 0xC0	; 192
     530:	9f 4f       	sbci	r25, 0xFF	; 255
     532:	82 1b       	sub	r24, r18
     534:	91 09       	sbc	r25, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:169
}
     536:	8f 73       	andi	r24, 0x3F	; 63
     538:	99 27       	eor	r25, r25
     53a:	08 95       	ret

0000053c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     53c:	8e e4       	ldi	r24, 0x4E	; 78
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	0e 94 92 02 	call	0x524	; 0x524 <HardwareSerial::available()>
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	89 2b       	or	r24, r25
     548:	09 f4       	brne	.+2      	; 0x54c <Serial0_available()+0x10>
     54a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:77
}
     54c:	82 2f       	mov	r24, r18
     54e:	08 95       	ret

00000550 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	89 2b       	or	r24, r25
     556:	29 f0       	breq	.+10     	; 0x562 <serialEventRun()+0x12>
     558:	0e 94 9e 02 	call	0x53c	; 0x53c <Serial0_available()>
     55c:	81 11       	cpse	r24, r1
     55e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     562:	08 95       	ret

00000564 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     564:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     566:	a4 8d       	ldd	r26, Z+28	; 0x1c
     568:	a8 0f       	add	r26, r24
     56a:	b9 2f       	mov	r27, r25
     56c:	b1 1d       	adc	r27, r1
     56e:	a3 5a       	subi	r26, 0xA3	; 163
     570:	bf 4f       	sbci	r27, 0xFF	; 255
     572:	2c 91       	ld	r18, X
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     574:	84 8d       	ldd	r24, Z+28	; 0x1c
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	8f 73       	andi	r24, 0x3F	; 63
     57c:	99 27       	eor	r25, r25
     57e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:96

  *_udr = c;
     580:	a6 89       	ldd	r26, Z+22	; 0x16
     582:	b7 89       	ldd	r27, Z+23	; 0x17
     584:	2c 93       	st	X, r18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     586:	a0 89       	ldd	r26, Z+16	; 0x10
     588:	b1 89       	ldd	r27, Z+17	; 0x11
     58a:	8c 91       	ld	r24, X
     58c:	83 70       	andi	r24, 0x03	; 3
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     592:	93 8d       	ldd	r25, Z+27	; 0x1b
     594:	84 8d       	ldd	r24, Z+28	; 0x1c
     596:	98 13       	cpse	r25, r24
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     59a:	02 88       	ldd	r0, Z+18	; 0x12
     59c:	f3 89       	ldd	r31, Z+19	; 0x13
     59e:	e0 2d       	mov	r30, r0
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 7d       	andi	r24, 0xDF	; 223
     5a4:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:113
  }
}
     5a6:	08 95       	ret

000005a8 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:227
  _written = true;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5be:	98 13       	cpse	r25, r24
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <HardwareSerial::write(unsigned char)+0x4e>
     5c2:	e8 89       	ldd	r30, Y+16	; 0x10
     5c4:	f9 89       	ldd	r31, Y+17	; 0x11
     5c6:	80 81       	ld	r24, Z
     5c8:	85 ff       	sbrs	r24, 5
     5ca:	15 c0       	rjmp	.+42     	; 0x5f6 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     5cc:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ce:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:242
      *_udr = c;
     5d0:	ee 89       	ldd	r30, Y+22	; 0x16
     5d2:	ff 89       	ldd	r31, Y+23	; 0x17
     5d4:	60 83       	st	Z, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     5d6:	e8 89       	ldd	r30, Y+16	; 0x10
     5d8:	f9 89       	ldd	r31, Y+17	; 0x11
     5da:	80 81       	ld	r24, Z
     5dc:	83 70       	andi	r24, 0x03	; 3
     5de:	80 64       	ori	r24, 0x40	; 64
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     5e0:	80 83       	st	Z, r24
__iRestore():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5e2:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:279
  }
  
  return 1;
}
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret
     5f6:	f6 2e       	mov	r15, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     5f8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	0f 73       	andi	r16, 0x3F	; 63
     602:	11 27       	eor	r17, r17
     604:	e0 2e       	mov	r14, r16
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:255
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     606:	8c 8d       	ldd	r24, Y+28	; 0x1c
     608:	8e 11       	cpse	r24, r14
     60a:	0c c0       	rjmp	.+24     	; 0x624 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	07 fc       	sbrc	r0, 7
     610:	fa cf       	rjmp	.-12     	; 0x606 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     612:	e8 89       	ldd	r30, Y+16	; 0x10
     614:	f9 89       	ldd	r31, Y+17	; 0x11
     616:	80 81       	ld	r24, Z
     618:	85 ff       	sbrs	r24, 5
     61a:	f5 cf       	rjmp	.-22     	; 0x606 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:262
	_tx_udr_empty_irq();
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 b2 02 	call	0x564	; 0x564 <HardwareSerial::_tx_udr_empty_irq()>
     622:	f1 cf       	rjmp	.-30     	; 0x606 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     624:	eb 8d       	ldd	r30, Y+27	; 0x1b
     626:	ec 0f       	add	r30, r28
     628:	fd 2f       	mov	r31, r29
     62a:	f1 1d       	adc	r31, r1
     62c:	e3 5a       	subi	r30, 0xA3	; 163
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	f0 82       	st	Z, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     632:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     634:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:274
    _tx_buffer_head = i;
     636:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
     638:	ea 89       	ldd	r30, Y+18	; 0x12
     63a:	fb 89       	ldd	r31, Y+19	; 0x13
     63c:	80 81       	ld	r24, Z
     63e:	80 62       	ori	r24, 0x20	; 32
     640:	cf cf       	rjmp	.-98     	; 0x5e0 <HardwareSerial::write(unsigned char)+0x38>

00000642 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     648:	88 8d       	ldd	r24, Y+24	; 0x18
     64a:	88 23       	and	r24, r24
     64c:	b9 f0       	breq	.+46     	; 0x67c <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     64e:	aa 89       	ldd	r26, Y+18	; 0x12
     650:	bb 89       	ldd	r27, Y+19	; 0x13
     652:	e8 89       	ldd	r30, Y+16	; 0x10
     654:	f9 89       	ldd	r31, Y+17	; 0x11
     656:	8c 91       	ld	r24, X
     658:	85 fd       	sbrc	r24, 5
     65a:	03 c0       	rjmp	.+6      	; 0x662 <HardwareSerial::flush()+0x20>
     65c:	80 81       	ld	r24, Z
     65e:	86 fd       	sbrc	r24, 6
     660:	0d c0       	rjmp	.+26     	; 0x67c <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	07 fc       	sbrc	r0, 7
     666:	f7 cf       	rjmp	.-18     	; 0x656 <HardwareSerial::flush()+0x14>
     668:	8c 91       	ld	r24, X
     66a:	85 ff       	sbrs	r24, 5
     66c:	f2 cf       	rjmp	.-28     	; 0x652 <HardwareSerial::flush()+0x10>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:218
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     66e:	80 81       	ld	r24, Z
     670:	85 ff       	sbrs	r24, 5
     672:	ed cf       	rjmp	.-38     	; 0x64e <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:219
	  _tx_udr_empty_irq();
     674:	ce 01       	movw	r24, r28
     676:	0e 94 b2 02 	call	0x564	; 0x564 <HardwareSerial::_tx_udr_empty_irq()>
     67a:	e9 cf       	rjmp	.-46     	; 0x64e <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <turnOffPWM>:
turnOffPWM():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	81 f0       	breq	.+32     	; 0x6a6 <turnOffPWM+0x24>
     686:	28 f4       	brcc	.+10     	; 0x692 <turnOffPWM+0x10>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	99 f0       	breq	.+38     	; 0x6b2 <turnOffPWM+0x30>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	a9 f0       	breq	.+42     	; 0x6ba <turnOffPWM+0x38>
     690:	08 95       	ret
     692:	87 30       	cpi	r24, 0x07	; 7
     694:	a9 f0       	breq	.+42     	; 0x6c0 <turnOffPWM+0x3e>
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	c9 f0       	breq	.+50     	; 0x6cc <turnOffPWM+0x4a>
     69a:	84 30       	cpi	r24, 0x04	; 4
     69c:	b1 f4       	brne	.+44     	; 0x6ca <turnOffPWM+0x48>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     69e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     6a2:	8f 7d       	andi	r24, 0xDF	; 223
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <turnOffPWM+0x2a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:80
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     6a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     6aa:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:83
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     6ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     6b0:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     6b2:	84 b5       	in	r24, 0x24	; 36
     6b4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     6b6:	84 bd       	out	0x24, r24	; 36
     6b8:	08 95       	ret
     6ba:	84 b5       	in	r24, 0x24	; 36
     6bc:	8f 7d       	andi	r24, 0xDF	; 223
     6be:	fb cf       	rjmp	.-10     	; 0x6b6 <turnOffPWM+0x34>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     6c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     6c4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     6c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:136
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     6ca:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     6cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     6d0:	8f 7d       	andi	r24, 0xDF	; 223
     6d2:	f9 cf       	rjmp	.-14     	; 0x6c6 <turnOffPWM+0x44>

000006d4 <digitalRead>:
digitalRead():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:166

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:167
	uint8_t timer = digitalPinToTimer(pin);
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	e2 5f       	subi	r30, 0xF2	; 242
     6e0:	fd 4f       	sbci	r31, 0xFD	; 253
     6e2:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:168
	uint8_t bit = digitalPinToBitMask(pin);
     6e4:	f9 01       	movw	r30, r18
     6e6:	e6 50       	subi	r30, 0x06	; 6
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ea:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:169
	uint8_t port = digitalPinToPort(pin);
     6ec:	f9 01       	movw	r30, r18
     6ee:	ea 51       	subi	r30, 0x1A	; 26
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:171

	if (port == NOT_A_PIN) return LOW;
     6f4:	cc 23       	and	r28, r28
     6f6:	a1 f0       	breq	.+40     	; 0x720 <digitalRead+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:175

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6f8:	81 11       	cpse	r24, r1
     6fa:	0e 94 41 03 	call	0x682	; 0x682 <turnOffPWM>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:177

	if (*portInputRegister(port) & bit) return HIGH;
     6fe:	ec 2f       	mov	r30, r28
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e4 52       	subi	r30, 0x24	; 36
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	a5 91       	lpm	r26, Z+
     70c:	b4 91       	lpm	r27, Z
     70e:	ec 91       	ld	r30, X
     710:	ed 23       	and	r30, r29
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	09 f4       	brne	.+2      	; 0x71a <digitalRead+0x46>
     718:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:179
	return LOW;
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:171
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fa cf       	rjmp	.-12     	; 0x71a <digitalRead+0x46>

00000726 <digitalWrite>:
digitalWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:139
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	e2 5f       	subi	r30, 0xF2	; 242
     734:	fd 4f       	sbci	r31, 0xFD	; 253
     736:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
     738:	f9 01       	movw	r30, r18
     73a:	e6 50       	subi	r30, 0x06	; 6
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
     740:	f9 01       	movw	r30, r18
     742:	ea 51       	subi	r30, 0x1A	; 26
     744:	fe 4f       	sbci	r31, 0xFE	; 254
     746:	c4 91       	lpm	r28, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     748:	cc 23       	and	r28, r28
     74a:	a9 f0       	breq	.+42     	; 0x776 <digitalWrite+0x50>
     74c:	16 2f       	mov	r17, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     74e:	81 11       	cpse	r24, r1
     750:	0e 94 41 03 	call	0x682	; 0x682 <turnOffPWM>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:151

	out = portOutputRegister(port);
     754:	ec 2f       	mov	r30, r28
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ed 59       	subi	r30, 0x9D	; 157
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	a5 91       	lpm	r26, Z+
     762:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
     764:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:154
	cli();
     766:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
     768:	ec 91       	ld	r30, X
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:156
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     76a:	11 11       	cpse	r17, r1
     76c:	08 c0       	rjmp	.+16     	; 0x77e <digitalWrite+0x58>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:157
		*out &= ~bit;
     76e:	d0 95       	com	r29
     770:	de 23       	and	r29, r30
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:159
	} else {
		*out |= bit;
     772:	dc 93       	st	X, r29
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
     774:	8f bf       	out	0x3f, r24	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:163
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:159
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     77e:	de 2b       	or	r29, r30
     780:	f8 cf       	rjmp	.-16     	; 0x772 <digitalWrite+0x4c>

00000782 <analogWrite.part.0.constprop.102>:
analogWrite.part.0.constprop.102():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:114
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     782:	e7 e1       	ldi	r30, 0x17	; 23
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	e4 91       	lpm	r30, Z
     788:	e3 30       	cpi	r30, 0x03	; 3
     78a:	39 f1       	breq	.+78     	; 0x7da <analogWrite.part.0.constprop.102+0x58>
     78c:	60 f4       	brcc	.+24     	; 0x7a6 <analogWrite.part.0.constprop.102+0x24>
     78e:	e1 30       	cpi	r30, 0x01	; 1
     790:	d1 f0       	breq	.+52     	; 0x7c6 <analogWrite.part.0.constprop.102+0x44>
     792:	e2 30       	cpi	r30, 0x02	; 2
     794:	e9 f0       	breq	.+58     	; 0x7d0 <analogWrite.part.0.constprop.102+0x4e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:279
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
     796:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:278
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     798:	80 38       	cpi	r24, 0x80	; 128
     79a:	91 05       	cpc	r25, r1
     79c:	0c f0       	brlt	.+2      	; 0x7a0 <analogWrite.part.0.constprop.102+0x1e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:281
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	89 e0       	ldi	r24, 0x09	; 9
     7a2:	0c 94 93 03 	jmp	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:114
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     7a6:	e7 30       	cpi	r30, 0x07	; 7
     7a8:	11 f1       	breq	.+68     	; 0x7ee <analogWrite.part.0.constprop.102+0x6c>
     7aa:	e8 30       	cpi	r30, 0x08	; 8
     7ac:	41 f1       	breq	.+80     	; 0x7fe <analogWrite.part.0.constprop.102+0x7c>
     7ae:	e4 30       	cpi	r30, 0x04	; 4
     7b0:	91 f7       	brne	.-28     	; 0x796 <analogWrite.part.0.constprop.102+0x14>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:152
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     7b2:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     7b6:	20 62       	ori	r18, 0x20	; 32
     7b8:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:153
				OCR1B = val; // set pwm duty
     7bc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     7c0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7c4:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:128
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     7c6:	94 b5       	in	r25, 0x24	; 36
     7c8:	90 68       	ori	r25, 0x80	; 128
     7ca:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:129
				OCR0A = val; // set pwm duty
     7cc:	87 bd       	out	0x27, r24	; 39
     7ce:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:136
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     7d0:	94 b5       	in	r25, 0x24	; 36
     7d2:	90 62       	ori	r25, 0x20	; 32
     7d4:	94 bd       	out	0x24, r25	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:137
				OCR0B = val; // set pwm duty
     7d6:	88 bd       	out	0x28, r24	; 40
     7d8:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:144
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     7da:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     7de:	20 68       	ori	r18, 0x80	; 128
     7e0:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:145
				OCR1A = val; // set pwm duty
     7e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     7e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     7ec:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:176
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     7ee:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     7f2:	90 68       	ori	r25, 0x80	; 128
     7f4:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:177
				OCR2A = val; // set pwm duty
     7f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     7fc:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:184
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     7fe:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     802:	90 62       	ori	r25, 0x20	; 32
     804:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:185
				OCR2B = val; // set pwm duty
     808:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:285
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     80c:	08 95       	ret

0000080e <pinMode>:
pinMode():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	fc 01       	movw	r30, r24
     816:	e6 50       	subi	r30, 0x06	; 6
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	24 91       	lpm	r18, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
     81c:	8a 51       	subi	r24, 0x1A	; 26
     81e:	9e 4f       	sbci	r25, 0xFE	; 254
     820:	fc 01       	movw	r30, r24
     822:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:35
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     824:	88 23       	and	r24, r24
     826:	d1 f0       	breq	.+52     	; 0x85c <pinMode+0x4e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:38

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	fc 01       	movw	r30, r24
     830:	e7 5a       	subi	r30, 0xA7	; 167
     832:	fe 4f       	sbci	r31, 0xFE	; 254
     834:	a5 91       	lpm	r26, Z+
     836:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:39
	out = portOutputRegister(port);
     838:	fc 01       	movw	r30, r24
     83a:	ed 59       	subi	r30, 0x9D	; 157
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	c5 91       	lpm	r28, Z+
     840:	d4 91       	lpm	r29, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:41

	if (mode == INPUT) { 
     842:	61 11       	cpse	r22, r1
     844:	0e c0       	rjmp	.+28     	; 0x862 <pinMode+0x54>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
     846:	9f b7       	in	r25, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:43
                cli();
     848:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:44
		*reg &= ~bit;
     84a:	8c 91       	ld	r24, X
     84c:	e2 2f       	mov	r30, r18
     84e:	e0 95       	com	r30
     850:	8e 23       	and	r24, r30
     852:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:45
		*out &= ~bit;
     854:	28 81       	ld	r18, Y
     856:	e2 23       	and	r30, r18
     858:	e8 83       	st	Y, r30
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:46
		SREG = oldSREG;
     85a:	9f bf       	out	0x3f, r25	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:59
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:54
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     862:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:55
                cli();
     864:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:56
		*reg |= bit;
     866:	ec 91       	ld	r30, X
     868:	e2 2b       	or	r30, r18
     86a:	ec 93       	st	X, r30
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:57
		SREG = oldSREG;
     86c:	8f bf       	out	0x3f, r24	; 63
     86e:	f6 cf       	rjmp	.-20     	; 0x85c <pinMode+0x4e>

00000870 <micros>:
micros():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:81
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     870:	3f b7       	in	r19, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:83
	
	cli();
     872:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:84
	m = timer0_overflow_count;
     874:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timer0_overflow_count>
     878:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <timer0_overflow_count+0x1>
     87c:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <timer0_overflow_count+0x2>
     880:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
     884:	26 b5       	in	r18, 0x26	; 38
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     886:	a8 9b       	sbis	0x15, 0	; 21
     888:	05 c0       	rjmp	.+10     	; 0x894 <micros+0x24>
     88a:	2f 3f       	cpi	r18, 0xFF	; 255
     88c:	19 f0       	breq	.+6      	; 0x894 <micros+0x24>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:95
		m++;
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     894:	3f bf       	out	0x3f, r19	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     896:	ba 2f       	mov	r27, r26
     898:	a9 2f       	mov	r26, r25
     89a:	98 2f       	mov	r25, r24
     89c:	88 27       	eor	r24, r24
     89e:	bc 01       	movw	r22, r24
     8a0:	cd 01       	movw	r24, r26
     8a2:	62 0f       	add	r22, r18
     8a4:	71 1d       	adc	r23, r1
     8a6:	81 1d       	adc	r24, r1
     8a8:	91 1d       	adc	r25, r1
     8aa:	43 e0       	ldi	r20, 0x03	; 3
     8ac:	66 0f       	add	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	88 1f       	adc	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	4a 95       	dec	r20
     8b6:	d1 f7       	brne	.-12     	; 0x8ac <micros+0x3c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:104
}
     8b8:	08 95       	ret

000008ba <delay>:
delay():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:107

void delay(unsigned long ms)
{
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	4b 01       	movw	r8, r22
     8cc:	5c 01       	movw	r10, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:108
	uint32_t start = micros();
     8ce:	0e 94 38 04 	call	0x870	; 0x870 <micros>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:112

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     8d6:	0e 94 38 04 	call	0x870	; 0x870 <micros>
     8da:	6c 19       	sub	r22, r12
     8dc:	7d 09       	sbc	r23, r13
     8de:	8e 09       	sbc	r24, r14
     8e0:	9f 09       	sbc	r25, r15
     8e2:	68 3e       	cpi	r22, 0xE8	; 232
     8e4:	73 40       	sbci	r23, 0x03	; 3
     8e6:	81 05       	cpc	r24, r1
     8e8:	91 05       	cpc	r25, r1
     8ea:	a8 f3       	brcs	.-22     	; 0x8d6 <delay+0x1c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:113
			ms--;
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	82 1a       	sub	r8, r18
     8f0:	91 08       	sbc	r9, r1
     8f2:	a1 08       	sbc	r10, r1
     8f4:	b1 08       	sbc	r11, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:114
			start += 1000;
     8f6:	88 ee       	ldi	r24, 0xE8	; 232
     8f8:	c8 0e       	add	r12, r24
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	d8 1e       	adc	r13, r24
     8fe:	e1 1c       	adc	r14, r1
     900:	f1 1c       	adc	r15, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:112
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     902:	81 14       	cp	r8, r1
     904:	91 04       	cpc	r9, r1
     906:	a1 04       	cpc	r10, r1
     908:	b1 04       	cpc	r11, r1
     90a:	29 f7       	brne	.-54     	; 0x8d6 <delay+0x1c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:117
			ms--;
			start += 1000;
		}
	}
}
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	08 95       	ret

0000091e <millis>:
millis():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:68
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     91e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     920:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:73
	m = timer0_millis;
     922:	60 91 83 03 	lds	r22, 0x0383	; 0x800383 <timer0_millis>
     926:	70 91 84 03 	lds	r23, 0x0384	; 0x800384 <timer0_millis+0x1>
     92a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <timer0_millis+0x2>
     92e:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:74
	SREG = oldSREG;
     932:	2f bf       	out	0x3f, r18	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:77

	return m;
}
     934:	08 95       	ret

00000936 <TM16xx::receive()>:
_ZN6TM16xx7receiveEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:242
  send(data);
  stop();
}

byte TM16xx::receive()
{
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:246
  byte temp = 0;

  // Pull-up on
  pinMode(dataPin, INPUT);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	8d 81       	ldd	r24, Y+5	; 0x05
     94a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:247
  digitalWrite(dataPin, HIGH);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
     956:	98 e0       	ldi	r25, 0x08	; 8
     958:	c9 2e       	mov	r12, r25
     95a:	d1 2c       	mov	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:243
  stop();
}

byte TM16xx::receive()
{
  byte temp = 0;
     95c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:250
  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
    temp >>= 1;
     95e:	e1 2e       	mov	r14, r17
     960:	f1 2c       	mov	r15, r1
     962:	f5 94       	asr	r15
     964:	e7 94       	ror	r14
     966:	1e 2d       	mov	r17, r14
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:252

    digitalWrite(clockPin, LOW);
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	8e 81       	ldd	r24, Y+6	; 0x06
     96c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:253
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
     970:	e8 81       	ld	r30, Y
     972:	f9 81       	ldd	r31, Y+1	; 0x01
     974:	02 8c       	ldd	r0, Z+26	; 0x1a
     976:	f3 8d       	ldd	r31, Z+27	; 0x1b
     978:	e0 2d       	mov	r30, r0
     97a:	ce 01       	movw	r24, r28
     97c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:255

    if (digitalRead(dataPin)) {
     97e:	8d 81       	ldd	r24, Y+5	; 0x05
     980:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <digitalRead>
     984:	89 2b       	or	r24, r25
     986:	09 f0       	breq	.+2      	; 0x98a <TM16xx::receive()+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:256
      temp |= 0x80;
     988:	10 68       	ori	r17, 0x80	; 128
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:259
    }

    digitalWrite(clockPin, HIGH);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:260
    bitDelay();
     992:	e8 81       	ld	r30, Y
     994:	f9 81       	ldd	r31, Y+1	; 0x01
     996:	02 8c       	ldd	r0, Z+26	; 0x1a
     998:	f3 8d       	ldd	r31, Z+27	; 0x1b
     99a:	e0 2d       	mov	r30, r0
     99c:	ce 01       	movw	r24, r28
     99e:	09 95       	icall
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	c8 1a       	sub	r12, r24
     9a4:	d1 08       	sbc	r13, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:249

  // Pull-up on
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++) {
     9a6:	d9 f6       	brne	.-74     	; 0x95e <TM16xx::receive()+0x28>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:264
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }

  // Pull-up off
  pinMode(dataPin, OUTPUT);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
     9ac:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:265
  digitalWrite(dataPin, LOW);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	8d 81       	ldd	r24, Y+5	; 0x05
     9b4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:268

  return temp;
}
     9b8:	81 2f       	mov	r24, r17
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	08 95       	ret

000009ca <TM16xx::sendData(unsigned char, unsigned char)>:
_ZN6TM16xx8sendDataEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:233
  send(cmd);
  stop();
}

void TM16xx::sendData(byte address, byte data)
{
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
     9d4:	16 2f       	mov	r17, r22
     9d6:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:234
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
     9d8:	e8 81       	ld	r30, Y
     9da:	f9 81       	ldd	r31, Y+1	; 0x01
     9dc:	02 a0       	ldd	r0, Z+34	; 0x22
     9de:	f3 a1       	ldd	r31, Z+35	; 0x23
     9e0:	e0 2d       	mov	r30, r0
     9e2:	64 e4       	ldi	r22, 0x44	; 68
     9e4:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:235
	start();
     9e6:	e8 81       	ld	r30, Y
     9e8:	f9 81       	ldd	r31, Y+1	; 0x01
     9ea:	04 8c       	ldd	r0, Z+28	; 0x1c
     9ec:	f5 8d       	ldd	r31, Z+29	; 0x1d
     9ee:	e0 2d       	mov	r30, r0
     9f0:	ce 01       	movw	r24, r28
     9f2:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:236
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
     9f4:	61 2f       	mov	r22, r17
     9f6:	60 6c       	ori	r22, 0xC0	; 192
     9f8:	e8 81       	ld	r30, Y
     9fa:	f9 81       	ldd	r31, Y+1	; 0x01
     9fc:	00 a0       	ldd	r0, Z+32	; 0x20
     9fe:	f1 a1       	ldd	r31, Z+33	; 0x21
     a00:	e0 2d       	mov	r30, r0
     a02:	ce 01       	movw	r24, r28
     a04:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:237
  send(data);
     a06:	e8 81       	ld	r30, Y
     a08:	f9 81       	ldd	r31, Y+1	; 0x01
     a0a:	00 a0       	ldd	r0, Z+32	; 0x20
     a0c:	f1 a1       	ldd	r31, Z+33	; 0x21
     a0e:	e0 2d       	mov	r30, r0
     a10:	60 2f       	mov	r22, r16
     a12:	ce 01       	movw	r24, r28
     a14:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
  stop();
     a16:	e8 81       	ld	r30, Y
     a18:	f9 81       	ldd	r31, Y+1	; 0x01
     a1a:	06 8c       	ldd	r0, Z+30	; 0x1e
     a1c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     a1e:	e0 2d       	mov	r30, r0
     a20:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:239
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:238
{
  sendCommand(TM16XX_CMD_DATA_FIXED);							// use fixed addressing for data
	start();
  send(TM16XX_CMD_ADDRESS | address);						// address command + address
  send(data);
  stop();
     a2a:	09 94       	ijmp

00000a2c <TM16xx::sendCommand(unsigned char)>:
_ZN6TM16xx11sendCommandEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:226
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
}

void TM16xx::sendCommand(byte cmd)
{
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	16 2f       	mov	r17, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:227
	start();
     a36:	e8 81       	ld	r30, Y
     a38:	f9 81       	ldd	r31, Y+1	; 0x01
     a3a:	04 8c       	ldd	r0, Z+28	; 0x1c
     a3c:	f5 8d       	ldd	r31, Z+29	; 0x1d
     a3e:	e0 2d       	mov	r30, r0
     a40:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:228
  send(cmd);
     a42:	e8 81       	ld	r30, Y
     a44:	f9 81       	ldd	r31, Y+1	; 0x01
     a46:	00 a0       	ldd	r0, Z+32	; 0x20
     a48:	f1 a1       	ldd	r31, Z+33	; 0x21
     a4a:	e0 2d       	mov	r30, r0
     a4c:	61 2f       	mov	r22, r17
     a4e:	ce 01       	movw	r24, r28
     a50:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229
  stop();
     a52:	e8 81       	ld	r30, Y
     a54:	f9 81       	ldd	r31, Y+1	; 0x01
     a56:	06 8c       	ldd	r0, Z+30	; 0x1e
     a58:	f7 8d       	ldd	r31, Z+31	; 0x1f
     a5a:	e0 2d       	mov	r30, r0
     a5c:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:230
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:229

void TM16xx::sendCommand(byte cmd)
{
	start();
  send(cmd);
  stop();
     a64:	09 94       	ijmp

00000a66 <TM16xx::send(unsigned char)>:
_ZN6TM16xx4sendEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:210
  digitalWrite(strobePin, HIGH);
  bitDelay();
}

void TM16xx::send(byte data)
{
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	ec 01       	movw	r28, r24
     a72:	f6 2e       	mov	r15, r22
     a74:	08 e0       	ldi	r16, 0x08	; 8
     a76:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:214
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
    digitalWrite(clockPin, LOW);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	8e 81       	ldd	r24, Y+6	; 0x06
     a7c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:215
    bitDelay();
     a80:	e8 81       	ld	r30, Y
     a82:	f9 81       	ldd	r31, Y+1	; 0x01
     a84:	02 8c       	ldd	r0, Z+26	; 0x1a
     a86:	f3 8d       	ldd	r31, Z+27	; 0x1b
     a88:	e0 2d       	mov	r30, r0
     a8a:	ce 01       	movw	r24, r28
     a8c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:216
    digitalWrite(dataPin, data & 1 ? HIGH : LOW);
     a8e:	6f 2d       	mov	r22, r15
     a90:	61 70       	andi	r22, 0x01	; 1
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:217
    bitDelay();
     a98:	e8 81       	ld	r30, Y
     a9a:	f9 81       	ldd	r31, Y+1	; 0x01
     a9c:	02 8c       	ldd	r0, Z+26	; 0x1a
     a9e:	f3 8d       	ldd	r31, Z+27	; 0x1b
     aa0:	e0 2d       	mov	r30, r0
     aa2:	ce 01       	movw	r24, r28
     aa4:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:218
    data >>= 1;
     aa6:	f6 94       	lsr	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:219
    digitalWrite(clockPin, HIGH);
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	8e 81       	ldd	r24, Y+6	; 0x06
     aac:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:220
    bitDelay();
     ab0:	e8 81       	ld	r30, Y
     ab2:	f9 81       	ldd	r31, Y+1	; 0x01
     ab4:	02 8c       	ldd	r0, Z+26	; 0x1a
     ab6:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ab8:	e0 2d       	mov	r30, r0
     aba:	ce 01       	movw	r24, r28
     abc:	09 95       	icall
     abe:	01 50       	subi	r16, 0x01	; 1
     ac0:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:213

void TM16xx::send(byte data)
{
	// MMOLE 180203: shiftout does something, but is not okay (tested on TM1668)
	//shiftOut(dataPin, clockPin, LSBFIRST, data);
  for (int i = 0; i < 8; i++) {
     ac2:	d1 f6       	brne	.-76     	; 0xa78 <TM16xx::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     ac4:	e8 81       	ld	r30, Y
     ac6:	f9 81       	ldd	r31, Y+1	; 0x01
     ac8:	02 8c       	ldd	r0, Z+26	; 0x1a
     aca:	f3 8d       	ldd	r31, Z+27	; 0x1b
     acc:	e0 2d       	mov	r30, r0
     ace:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:223
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:222
    bitDelay();
    data >>= 1;
    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();		// NOTE: TM1638 specifies a Twait between bytes of minimal 1us.
     ada:	09 94       	ijmp

00000adc <TM16xx::stop()>:
_ZN6TM16xx4stopEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:204
  digitalWrite(strobePin, LOW);
  bitDelay();
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:205
  digitalWrite(strobePin, HIGH);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	8f 81       	ldd	r24, Y+7	; 0x07
     ae6:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
  bitDelay();
     aea:	e8 81       	ld	r30, Y
     aec:	f9 81       	ldd	r31, Y+1	; 0x01
     aee:	02 8c       	ldd	r0, Z+26	; 0x1a
     af0:	f3 8d       	ldd	r31, Z+27	; 0x1b
     af2:	e0 2d       	mov	r30, r0
     af4:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:207
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:206
}

void TM16xx::stop()
{	// if needed derived classes can use different patterns to stop a command (eg. for TM1637)
  digitalWrite(strobePin, HIGH);
  bitDelay();
     afa:	09 94       	ijmp

00000afc <TM16xx::start()>:
_ZN6TM16xx5startEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:198
  	delayMicroseconds(1);
  #endif
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:199
  digitalWrite(strobePin, LOW);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
  bitDelay();
     b0a:	e8 81       	ld	r30, Y
     b0c:	f9 81       	ldd	r31, Y+1	; 0x01
     b0e:	02 8c       	ldd	r0, Z+26	; 0x1a
     b10:	f3 8d       	ldd	r31, Z+27	; 0x1b
     b12:	e0 2d       	mov	r30, r0
     b14:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:201
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:200
}

void TM16xx::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
  digitalWrite(strobePin, LOW);
  bitDelay();
     b1a:	09 94       	ijmp

00000b1c <TM16xx::getButtons()>:
_ZN6TM16xx10getButtonsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:174

// key-scanning method, implemented in chip specific derived class
uint32_t TM16xx::getButtons()
{	// return state of up to 32 keys.
	return(0);
}
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	cb 01       	movw	r24, r22
     b22:	08 95       	ret

00000b24 <TM16xx::getNumDigits()>:
_ZN6TM16xx12getNumDigitsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:168
}

byte TM16xx::getNumDigits()
{	// get the number of digits used (needed by TM16xxDisplay to combine modules)
  return(digits);
}
     b24:	fc 01       	movw	r30, r24
     b26:	84 81       	ldd	r24, Z+4	; 0x04
     b28:	08 95       	ret

00000b2a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>:
_ZN6TM16xx18setDisplayToStringEPKcjhPKh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:154
    sendChar(i, pgm_read_byte_near(values+i), 0);
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
     b2a:	7f 92       	push	r7
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	7c 01       	movw	r14, r24
     b46:	6a 01       	movw	r12, r20
     b48:	72 2e       	mov	r7, r18
     b4a:	8b 01       	movw	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  for (int i = 0; i < digits - pos; i++) {
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	c0 e0       	ldi	r28, 0x00	; 0
     b50:	a2 2e       	mov	r10, r18
     b52:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
  	if (string[i] != '\0') {
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     b54:	88 24       	eor	r8, r8
     b56:	83 94       	inc	r8
     b58:	91 2c       	mov	r9, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     b5a:	d7 01       	movw	r26, r14
     b5c:	14 96       	adiw	r26, 0x04	; 4
     b5e:	8c 91       	ld	r24, X
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	9c 01       	movw	r18, r24
     b64:	2a 19       	sub	r18, r10
     b66:	3b 09       	sbc	r19, r11
     b68:	c2 17       	cp	r28, r18
     b6a:	d3 07       	cpc	r29, r19
     b6c:	0c f5       	brge	.+66     	; 0xbb0 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:156
  	if (string[i] != '\0') {
     b6e:	f8 01       	movw	r30, r16
     b70:	41 91       	ld	r20, Z+
     b72:	8f 01       	movw	r16, r30
     b74:	44 23       	and	r20, r20
     b76:	e1 f0       	breq	.+56     	; 0xbb0 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x86>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:158
		  //sendChar(i + pos, pgm_read_byte_near(font+(string[i] - 32)), (dots & (1 << (digits - i - 1))) != 0);
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
     b78:	8c 1b       	sub	r24, r28
     b7a:	9d 0b       	sbc	r25, r29
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	94 01       	movw	r18, r8
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x5c>
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	8a 95       	dec	r24
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x58>
     b8a:	c9 01       	movw	r24, r18
     b8c:	8c 21       	and	r24, r12
     b8e:	9d 21       	and	r25, r13
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	89 2b       	or	r24, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x6e>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	6c 2f       	mov	r22, r28
     b9a:	67 0d       	add	r22, r7
     b9c:	d7 01       	movw	r26, r14
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	06 88       	ldd	r0, Z+22	; 0x16
     ba4:	f7 89       	ldd	r31, Z+23	; 0x17
     ba6:	e0 2d       	mov	r30, r0
     ba8:	c7 01       	movw	r24, r14
     baa:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:155
  }
}

void TM16xx::setDisplayToString(const char* string, const word dots, const byte pos, const byte font[])
{
  for (int i = 0; i < digits - pos; i++) {
     bac:	21 96       	adiw	r28, 0x01	; 1
     bae:	d5 cf       	rjmp	.-86     	; 0xb5a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)+0x30>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:163
  	  sendAsciiChar(i + pos, string[i], (dots & (1 << (digits - i - 1))) != 0);
		} else {
		  break;
		}
  }
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	7f 90       	pop	r7
     bca:	08 95       	ret

00000bcc <TM16xx::setDisplay(unsigned char const*, unsigned char)>:
_ZN6TM16xx10setDisplayEPKhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:147
{
  sendChar(pos, 0, dot);
}

void TM16xx::setDisplay(const byte values[], byte size)
{	// send an array of values to the display
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	7c 01       	movw	r14, r24
     bde:	6b 01       	movw	r12, r22
     be0:	04 2f       	mov	r16, r20
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	d0 e0       	ldi	r29, 0x00	; 0
     be6:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:148
  for (byte i = 0; i < size; i++) {
     be8:	c0 17       	cp	r28, r16
     bea:	d1 07       	cpc	r29, r17
     bec:	81 f0       	breq	.+32     	; 0xc0e <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x42>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:149
    sendChar(i, pgm_read_byte_near(values+i), 0);
     bee:	f6 01       	movw	r30, r12
     bf0:	ec 0f       	add	r30, r28
     bf2:	fd 1f       	adc	r31, r29
     bf4:	44 91       	lpm	r20, Z
     bf6:	d7 01       	movw	r26, r14
     bf8:	ed 91       	ld	r30, X+
     bfa:	fc 91       	ld	r31, X
     bfc:	02 88       	ldd	r0, Z+18	; 0x12
     bfe:	f3 89       	ldd	r31, Z+19	; 0x13
     c00:	e0 2d       	mov	r30, r0
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	6c 2f       	mov	r22, r28
     c06:	c7 01       	movw	r24, r14
     c08:	09 95       	icall
     c0a:	21 96       	adiw	r28, 0x01	; 1
     c0c:	ed cf       	rjmp	.-38     	; 0xbe8 <TM16xx::setDisplay(unsigned char const*, unsigned char)+0x1c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:151
  }
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <TM16xx::clearDisplayDigit(unsigned char, bool)>:
_ZN6TM16xx17clearDisplayDigitEhb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:142
    nNumber/=10;
  }
}

void TM16xx::clearDisplayDigit(byte pos, boolean dot)
{
     c20:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:143
  sendChar(pos, 0, dot);
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	02 88       	ldd	r0, Z+18	; 0x12
     c2a:	f3 89       	ldd	r31, Z+19	; 0x13
     c2c:	e0 2d       	mov	r30, r0
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	09 94       	ijmp

00000c32 <TM16xx::setDisplayToDecNumber(int, unsigned char)>:
_ZN6TM16xx21setDisplayToDecNumberEih():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:129
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
}

void TM16xx::setDisplayToDecNumber(int nNumber, byte bDots)		// byte bDots=0
{	// Function to display a decimal number on a n-digit clock display.
     c32:	9f 92       	push	r9
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     c4a:	c1 e0       	ldi	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     c4c:	c4 2e       	mov	r12, r20
     c4e:	d1 2c       	mov	r13, r1
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	a8 2e       	mov	r10, r24
     c54:	b1 2c       	mov	r11, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     c56:	d7 01       	movw	r26, r14
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	4c 91       	ld	r20, X
     c5c:	4c 17       	cp	r20, r28
     c5e:	f0 f0       	brcs	.+60     	; 0xc9c <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:136
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
     c60:	96 01       	movw	r18, r12
     c62:	0c 2e       	mov	r0, r28
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x38>
     c66:	35 95       	asr	r19
     c68:	27 95       	ror	r18
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x34>
     c6e:	21 70       	andi	r18, 0x01	; 1
     c70:	4c 1b       	sub	r20, r28
     c72:	cb 01       	movw	r24, r22
     c74:	b5 01       	movw	r22, r10
     c76:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
     c7a:	96 2e       	mov	r9, r22
     c7c:	d7 2f       	mov	r29, r23
     c7e:	d7 01       	movw	r26, r14
     c80:	ed 91       	ld	r30, X+
     c82:	fc 91       	ld	r31, X
     c84:	00 84       	ldd	r0, Z+8	; 0x08
     c86:	f1 85       	ldd	r31, Z+9	; 0x09
     c88:	e0 2d       	mov	r30, r0
     c8a:	09 e4       	ldi	r16, 0x49	; 73
     c8c:	11 e0       	ldi	r17, 0x01	; 1
     c8e:	68 2f       	mov	r22, r24
     c90:	c7 01       	movw	r24, r14
     c92:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:137
    nNumber/=10;
     c94:	69 2d       	mov	r22, r9
     c96:	7d 2f       	mov	r23, r29
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:134
{	// Function to display a decimal number on a n-digit clock display.
	// Kept simple to fit in ATtiny44A
	// For extended display features use the TM16xxDisplay class

	// TODO: support large displays such as 8segx16 on TM1640
  for(byte nPos=1; nPos<=digits; nPos++)
     c98:	cf 5f       	subi	r28, 0xFF	; 255
     c9a:	dd cf       	rjmp	.-70     	; 0xc56 <TM16xx::setDisplayToDecNumber(int, unsigned char)+0x24>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:139
  {
    setDisplayDigit(nNumber % 10, digits - nPos, bDots&_BV(nPos));
    nNumber/=10;
  }
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	08 95       	ret

00000cb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>:
_ZN6TM16xx15setDisplayDigitEhhbPKh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:124
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	e6 2f       	mov	r30, r22
     cba:	64 2f       	mov	r22, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     cbc:	ef 70       	andi	r30, 0x0F	; 15
     cbe:	e0 0f       	add	r30, r16
     cc0:	f1 2f       	mov	r31, r17
     cc2:	f1 1d       	adc	r31, r1
     cc4:	44 91       	lpm	r20, Z
     cc6:	dc 01       	movw	r26, r24
     cc8:	ed 91       	ld	r30, X+
     cca:	fc 91       	ld	r31, X
     ccc:	02 88       	ldd	r0, Z+18	; 0x12
     cce:	f3 89       	ldd	r31, Z+19	; 0x13
     cd0:	e0 2d       	mov	r30, r0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:126
}
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:125
}


void TM16xx::setDisplayDigit(byte digit, byte pos, boolean dot, const byte numberFont[])
{
  sendChar(pos, pgm_read_byte_near(numberFont + (digit & 0xF)), dot);
     cd6:	09 94       	ijmp

00000cd8 <TM16xx::sendAsciiChar(unsigned char, char, bool)>:
_ZN6TM16xx13sendAsciiCharEhcb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:119
void TM16xx::sendAsciiChar(byte pos, char c, boolean fDot)
{ // Method to send an Ascii character to the display
  // This method is also called by TM16xxDisplay.print to display characters
  // The base class uses the default 7-segment font to find the LED pattern.
  // Derived classes for multi-segment displays or alternate layout displays can override this method
  sendChar(pos, pgm_read_byte_near(TM16XX_FONT_DEFAULT+(c - 32)), fDot);
     cd8:	e4 2f       	mov	r30, r20
     cda:	44 0f       	add	r20, r20
     cdc:	ff 0b       	sbc	r31, r31
     cde:	e6 53       	subi	r30, 0x36	; 54
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	44 91       	lpm	r20, Z
     ce4:	dc 01       	movw	r26, r24
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	02 88       	ldd	r0, Z+18	; 0x12
     cec:	f3 89       	ldd	r31, Z+19	; 0x13
     cee:	e0 2d       	mov	r30, r0
     cf0:	09 94       	ijmp

00000cf2 <TM16xx::sendChar(unsigned char, unsigned char, bool)>:
_ZN6TM16xx8sendCharEhhb():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:106
  // Depending on the module this method should shift the segments to the proper data position.
}


void TM16xx::sendChar(byte pos, byte data, boolean dot)
{
     cf2:	36 2f       	mov	r19, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:111
/*
	if(pos<_maxDisplays)
	  sendData(pos, data | (dot ? 0b10000000 : 0));
*/
	setSegments(data | (dot ? 0b10000000 : 0), pos);
     cf4:	dc 01       	movw	r26, r24
     cf6:	ed 91       	ld	r30, X+
     cf8:	fc 91       	ld	r31, X
     cfa:	04 80       	ldd	r0, Z+4	; 0x04
     cfc:	f5 81       	ldd	r31, Z+5	; 0x05
     cfe:	e0 2d       	mov	r30, r0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	21 11       	cpse	r18, r1
     d04:	60 e8       	ldi	r22, 0x80	; 128
     d06:	64 2b       	or	r22, r20
     d08:	43 2f       	mov	r20, r19
     d0a:	09 94       	ijmp

00000d0c <TM16xx::setSegments16(unsigned int, unsigned char)>:
_ZN6TM16xx13setSegments16Ejh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:102
  // The position of the additional segments in the second data byte can be different per module,
  // For that reason this module has no implementation in the base class.
  // E.g. for TM1638/TM1668 segments 8-9 are in bits 0-1, for TM1630 segment 14 is in bit 5
  // This method assumes segments 0-7 to be in the lower byte and the extra segments in the upper byte
  // Depending on the module this method should shift the segments to the proper data position.
}
     d0c:	08 95       	ret

00000d0e <TM16xx::setSegments(unsigned char, unsigned char)>:
_ZN6TM16xx11setSegmentsEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:88
	stop();

}

void TM16xx::setSegments(byte segments, byte position)
{	// set 8 leds on common grd as specified
     d0e:	24 2f       	mov	r18, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:90
	// TODO: support 10-14 segments on chips like TM1638/TM1668
	if(position<_maxDisplays)
     d10:	dc 01       	movw	r26, r24
     d12:	12 96       	adiw	r26, 0x02	; 2
     d14:	3c 91       	ld	r19, X
     d16:	12 97       	sbiw	r26, 0x02	; 2
     d18:	43 17       	cp	r20, r19
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <TM16xx::setSegments(unsigned char, unsigned char)+0x1e>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:91
		sendData(position, segments);
     d1c:	ed 91       	ld	r30, X+
     d1e:	fc 91       	ld	r31, X
     d20:	04 a0       	ldd	r0, Z+36	; 0x24
     d22:	f5 a1       	ldd	r31, Z+37	; 0x25
     d24:	e0 2d       	mov	r30, r0
     d26:	46 2f       	mov	r20, r22
     d28:	62 2f       	mov	r22, r18
     d2a:	09 94       	ijmp
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:93
		//sendData(TM16XX_CMD_ADDRESS | position, segments);
}
     d2c:	08 95       	ret

00000d2e <TM16xx::clearDisplay()>:
_ZN6TM16xx12clearDisplayEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:68
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
}

void TM16xx::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:73
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode
     d38:	e8 81       	ld	r30, Y
     d3a:	f9 81       	ldd	r31, Y+1	; 0x01
     d3c:	02 a0       	ldd	r0, Z+34	; 0x22
     d3e:	f3 a1       	ldd	r31, Z+35	; 0x23
     d40:	e0 2d       	mov	r30, r0
     d42:	60 e4       	ldi	r22, 0x40	; 64
     d44:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:76

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
     d46:	e8 81       	ld	r30, Y
     d48:	f9 81       	ldd	r31, Y+1	; 0x01
     d4a:	04 8c       	ldd	r0, Z+28	; 0x1c
     d4c:	f5 8d       	ldd	r31, Z+29	; 0x1d
     d4e:	e0 2d       	mov	r30, r0
     d50:	ce 01       	movw	r24, r28
     d52:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:77
  send(TM16XX_CMD_ADDRESS);
     d54:	e8 81       	ld	r30, Y
     d56:	f9 81       	ldd	r31, Y+1	; 0x01
     d58:	00 a0       	ldd	r0, Z+32	; 0x20
     d5a:	f1 a1       	ldd	r31, Z+33	; 0x21
     d5c:	e0 2d       	mov	r30, r0
     d5e:	60 ec       	ldi	r22, 0xC0	; 192
     d60:	ce 01       	movw	r24, r28
     d62:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  for (int i = 0; i < _maxDisplays; i++) {
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	e8 81       	ld	r30, Y
     d6a:	f9 81       	ldd	r31, Y+1	; 0x01
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	80 17       	cp	r24, r16
     d70:	11 06       	cpc	r1, r17
     d72:	a9 f0       	breq	.+42     	; 0xd9e <TM16xx::clearDisplay()+0x70>
     d74:	a4 f0       	brlt	.+40     	; 0xd9e <TM16xx::clearDisplay()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:79
    send(0x00);
     d76:	00 a0       	ldd	r0, Z+32	; 0x20
     d78:	f1 a1       	ldd	r31, Z+33	; 0x21
     d7a:	e0 2d       	mov	r30, r0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	ce 01       	movw	r24, r28
     d80:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:80
    if(_maxSegments>8)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	89 30       	cpi	r24, 0x09	; 9
     d86:	40 f0       	brcs	.+16     	; 0xd98 <TM16xx::clearDisplay()+0x6a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:81
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
     d88:	e8 81       	ld	r30, Y
     d8a:	f9 81       	ldd	r31, Y+1	; 0x01
     d8c:	00 a0       	ldd	r0, Z+32	; 0x20
     d8e:	f1 a1       	ldd	r31, Z+33	; 0x21
     d90:	e0 2d       	mov	r30, r0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	ce 01       	movw	r24, r28
     d96:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:78
  sendCommand(TM16XX_CMD_DATA_AUTO);		// set auto increment addressing mode

	// send the address followed by bulk-sending of the data to clear the display memory
	start();
  send(TM16XX_CMD_ADDRESS);
  for (int i = 0; i < _maxDisplays; i++) {
     d98:	0f 5f       	subi	r16, 0xFF	; 255
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	e5 cf       	rjmp	.-54     	; 0xd68 <TM16xx::clearDisplay()+0x3a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     d9e:	06 8c       	ldd	r0, Z+30	; 0x1e
     da0:	f7 8d       	ldd	r31, Z+31	; 0x1f
     da2:	e0 2d       	mov	r30, r0
     da4:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:85

}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:83
  for (int i = 0; i < _maxDisplays; i++) {
    send(0x00);
    if(_maxSegments>8)
    	send(0x00);		// send second byte (applicable to TM1638 and TM1668)
  }
	stop();
     dae:	09 94       	ijmp

00000db0 <TM16xx::setupDisplay(bool, unsigned char)>:
_ZN6TM16xx12setupDisplayEbh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM16xx.cpp:64
*/
}

void TM16xx::setupDisplay(boolean active, byte intensity)
{
  sendCommand(TM16XX_CMD_DISPLAY | (active ? 8 : 0) | min(7, intensity));
     db0:	dc 01       	movw	r26, r24
     db2:	ed 91       	ld	r30, X+
     db4:	fc 91       	ld	r31, X
     db6:	02 a0       	ldd	r0, Z+34	; 0x22
     db8:	f3 a1       	ldd	r31, Z+35	; 0x23
     dba:	e0 2d       	mov	r30, r0
     dbc:	61 11       	cpse	r22, r1
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <TM16xx::setupDisplay(bool, unsigned char)+0x1c>
     dc0:	60 e8       	ldi	r22, 0x80	; 128
     dc2:	48 30       	cpi	r20, 0x08	; 8
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <TM16xx::setupDisplay(bool, unsigned char)+0x18>
     dc6:	47 e0       	ldi	r20, 0x07	; 7
     dc8:	64 2b       	or	r22, r20
     dca:	09 94       	ijmp
     dcc:	68 e8       	ldi	r22, 0x88	; 136
     dce:	f9 cf       	rjmp	.-14     	; 0xdc2 <TM16xx::setupDisplay(bool, unsigned char)+0x12>

00000dd0 <TM1650::getButtons()>:
_ZN6TM165010getButtonsEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:177

  return temp;
}

uint32_t TM1650::getButtons()
{	// Keyscan data on the TM1650/TM1637 is one byte, with index of the button that is pressed.
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:190
	//		0x64-0x67 for DIG1 to DIG4 on KeyInput5 (E)
	//		0x6C-0x6F for DIG1 to DIG4 on KeyInput6 (F)
	//		0x74-0x77 for DIG1 to DIG4 on KeyInput7 (G)
	// Button state is reset when another command is issued
	// For compatibility with the rest of the library the buttonstate is returned as a 32-bit value
  start();
     dd8:	dc 01       	movw	r26, r24
     dda:	ed 91       	ld	r30, X+
     ddc:	fc 91       	ld	r31, X
     dde:	04 8c       	ldd	r0, Z+28	; 0x1c
     de0:	f5 8d       	ldd	r31, Z+29	; 0x1d
     de2:	e0 2d       	mov	r30, r0
     de4:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:191
  send(TM1650_CMD_DATA_READ);		// send read buttons command
     de6:	d8 01       	movw	r26, r16
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	00 a0       	ldd	r0, Z+32	; 0x20
     dee:	f1 a1       	ldd	r31, Z+33	; 0x21
     df0:	e0 2d       	mov	r30, r0
     df2:	69 e4       	ldi	r22, 0x49	; 73
     df4:	c8 01       	movw	r24, r16
     df6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:192
	byte received=receive();
     df8:	d8 01       	movw	r26, r16
     dfa:	ed 91       	ld	r30, X+
     dfc:	fc 91       	ld	r31, X
     dfe:	06 a0       	ldd	r0, Z+38	; 0x26
     e00:	f7 a1       	ldd	r31, Z+39	; 0x27
     e02:	e0 2d       	mov	r30, r0
     e04:	c8 01       	movw	r24, r16
     e06:	09 95       	icall
     e08:	c8 2f       	mov	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:193
	stop();
     e0a:	d8 01       	movw	r26, r16
     e0c:	ed 91       	ld	r30, X+
     e0e:	fc 91       	ld	r31, X
     e10:	06 8c       	ldd	r0, Z+30	; 0x1e
     e12:	f7 8d       	ldd	r31, Z+31	; 0x1f
     e14:	e0 2d       	mov	r30, r0
     e16:	c8 01       	movw	r24, r16
     e18:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:200
	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
		return(0);
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	cb 01       	movw	r24, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:199

	// Only accept values >= 0x44 as pressed keys (datasheet shows 0x44-0x77 as valid keypresses)
	// Testing shows return value is below 0x44 when no button is pressed.
	// The return value is 0x04 after button 0x44 was released or 0x0C after button 0x4C was released.
	// Testing also shows return value is 0x2E after first powerup (when no buttons were pressed). It changes to 0x0C after button 0x4C was released.
	if(received<0x44)
     e20:	c4 34       	cpi	r28, 0x44	; 68
     e22:	70 f0       	brcs	.+28     	; 0xe40 <TM1650::getButtons()+0x70>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:203
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
     e24:	c8 34       	cpi	r28, 0x48	; 72
     e26:	80 f4       	brcc	.+32     	; 0xe48 <TM1650::getButtons()+0x78>
     e28:	c4 54       	subi	r28, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:211
	else if(received<=0x5F) received=received-0x5C+12;
	else if(received<=0x67) received=received-0x64+16;
	else if(received<=0x6F) received=received-0x6C+20;
	else if(received<=0x77) received=received-0x74+24;

	return(bit(received)); 		// return bit set for the number of the button that is pressed (bits 0-27)
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <TM1650::getButtons()+0x6c>
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	ca 95       	dec	r28
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <TM1650::getButtons()+0x64>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:212
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:204
	if(received<0x44)
		return(0);

	// map key presses to key-numbers 0-27
	if(received<=0x47) received=received-0x44;
	else if(received<=0x4F) received=received-0x4C+4;
     e48:	c0 35       	cpi	r28, 0x50	; 80
     e4a:	10 f4       	brcc	.+4      	; 0xe50 <TM1650::getButtons()+0x80>
     e4c:	c8 54       	subi	r28, 0x48	; 72
     e4e:	ed cf       	rjmp	.-38     	; 0xe2a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:205
	else if(received<=0x57) received=received-0x54+8;
     e50:	c8 35       	cpi	r28, 0x58	; 88
     e52:	10 f4       	brcc	.+4      	; 0xe58 <TM1650::getButtons()+0x88>
     e54:	cc 54       	subi	r28, 0x4C	; 76
     e56:	e9 cf       	rjmp	.-46     	; 0xe2a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:206
	else if(received<=0x5F) received=received-0x5C+12;
     e58:	c0 36       	cpi	r28, 0x60	; 96
     e5a:	10 f4       	brcc	.+4      	; 0xe60 <TM1650::getButtons()+0x90>
     e5c:	c0 55       	subi	r28, 0x50	; 80
     e5e:	e5 cf       	rjmp	.-54     	; 0xe2a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:207
	else if(received<=0x67) received=received-0x64+16;
     e60:	c8 36       	cpi	r28, 0x68	; 104
     e62:	10 f4       	brcc	.+4      	; 0xe68 <TM1650::getButtons()+0x98>
     e64:	c4 55       	subi	r28, 0x54	; 84
     e66:	e1 cf       	rjmp	.-62     	; 0xe2a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:208
	else if(received<=0x6F) received=received-0x6C+20;
     e68:	c0 37       	cpi	r28, 0x70	; 112
     e6a:	10 f4       	brcc	.+4      	; 0xe70 <TM1650::getButtons()+0xa0>
     e6c:	c8 55       	subi	r28, 0x58	; 88
     e6e:	dd cf       	rjmp	.-70     	; 0xe2a <TM1650::getButtons()+0x5a>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:209
	else if(received<=0x77) received=received-0x74+24;
     e70:	c8 37       	cpi	r28, 0x78	; 120
     e72:	d8 f6       	brcc	.-74     	; 0xe2a <TM1650::getButtons()+0x5a>
     e74:	cc 55       	subi	r28, 0x5C	; 92
     e76:	d9 cf       	rjmp	.-78     	; 0xe2a <TM1650::getButtons()+0x5a>

00000e78 <TM1650::receive()>:
_ZN6TM16507receiveEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:134
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:138
  byte temp = 0;

  // Pull-up on
  digitalWrite(clockPin, LOW);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:139
  pinMode(dataPin, INPUT);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:140
  digitalWrite(dataPin, HIGH);
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
     e9c:	88 e0       	ldi	r24, 0x08	; 8
     e9e:	e8 2e       	mov	r14, r24
     ea0:	f1 2c       	mov	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:135
  stop();
}

byte TM1650::receive()
{	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.
  byte temp = 0;
     ea2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:144
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
  {
    temp <<= 1;  // MSB first on TM1650, so shift left
     ea4:	11 0f       	add	r17, r17
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:146

    digitalWrite(clockPin, HIGH);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:147
    bitDelay();		// NOTE: on TM1637 reading keys should be slower than 250Khz (see datasheet p3)
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	02 8c       	ldd	r0, Z+26	; 0x1a
     eb4:	f3 8d       	ldd	r31, Z+27	; 0x1b
     eb6:	e0 2d       	mov	r30, r0
     eb8:	ce 01       	movw	r24, r28
     eba:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:149

    if (digitalRead(dataPin)) {
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <digitalRead>
     ec2:	89 2b       	or	r24, r25
     ec4:	09 f0       	breq	.+2      	; 0xec8 <TM1650::receive()+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:150
      temp |= 0x01;	 // MSB first on TM1650, so set lowest bit
     ec6:	11 60       	ori	r17, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:153
    }

    digitalWrite(clockPin, LOW);
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:154
    bitDelay();
     ed0:	e8 81       	ld	r30, Y
     ed2:	f9 81       	ldd	r31, Y+1	; 0x01
     ed4:	02 8c       	ldd	r0, Z+26	; 0x1a
     ed6:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ed8:	e0 2d       	mov	r30, r0
     eda:	ce 01       	movw	r24, r28
     edc:	09 95       	icall
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	e8 1a       	sub	r14, r24
     ee2:	f1 08       	sbc	r15, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:142
  // Pull-up on
  digitalWrite(clockPin, LOW);
  pinMode(dataPin, INPUT);
  digitalWrite(dataPin, HIGH);

  for (int i = 0; i < 8; i++)
     ee4:	f9 f6       	brne	.-66     	; 0xea4 <TM1650::receive()+0x2c>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:160
  }

	// receive Ack
	// TODO: currently the logical analyzer reports a NAK for the received value.
	// I'd like to see an ACK instead as all data transfer seems okay.
  digitalWrite(clockPin, LOW);
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:162
  //digitalWrite(dataPin, HIGH);
  pinMode(dataPin, INPUT);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:163
  digitalWrite(dataPin, HIGH);
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:164
  bitDelay();
     efe:	e8 81       	ld	r30, Y
     f00:	f9 81       	ldd	r31, Y+1	; 0x01
     f02:	02 8c       	ldd	r0, Z+26	; 0x1a
     f04:	f3 8d       	ldd	r31, Z+27	; 0x1b
     f06:	e0 2d       	mov	r30, r0
     f08:	ce 01       	movw	r24, r28
     f0a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:165
  digitalWrite(clockPin, HIGH);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:166
  bitDelay();
     f14:	e8 81       	ld	r30, Y
     f16:	f9 81       	ldd	r31, Y+1	; 0x01
     f18:	02 8c       	ldd	r0, Z+26	; 0x1a
     f1a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     f1c:	e0 2d       	mov	r30, r0
     f1e:	ce 01       	movw	r24, r28
     f20:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:167
  uint8_t ack = digitalRead(dataPin);
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <digitalRead>
     f28:	f8 2e       	mov	r15, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:168
  digitalWrite(clockPin, LOW);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	8e 81       	ldd	r24, Y+6	; 0x06
     f2e:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:169
  if (ack == 0)
     f32:	f1 10       	cpse	r15, r1
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <TM1650::receive()+0xc6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:170
	  digitalWrite(dataPin, LOW);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:171
  pinMode(dataPin, OUTPUT);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:174

  return temp;
}
     f46:	81 2f       	mov	r24, r17
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	08 95       	ret

00000f54 <TM1650::setupDisplay(bool, unsigned char)>:
_ZN6TM165012setupDisplayEbh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:122
  	sendData(i, 0);
  }
}

void TM1650::setupDisplay(boolean active, byte intensity)
{	// For the TM1650 level 0 is maximum brightness, 1-7 is low to high.
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	06 2f       	mov	r16, r22
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:124
	// To align with other TM16XX chips we translate this to the same levels (0-7)
	intensity=min(7, intensity);
     f60:	48 30       	cpi	r20, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <TM1650::setupDisplay(bool, unsigned char)+0x12>
     f64:	47 e0       	ldi	r20, 0x07	; 7
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:125
	intensity+=1;
     f66:	11 e0       	ldi	r17, 0x01	; 1
     f68:	14 0f       	add	r17, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:126
	if(intensity==8) intensity=0;
     f6a:	18 30       	cpi	r17, 0x08	; 8
     f6c:	09 f4       	brne	.+2      	; 0xf70 <TM1650::setupDisplay(bool, unsigned char)+0x1c>
     f6e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:127
	start();
     f70:	e8 81       	ld	r30, Y
     f72:	f9 81       	ldd	r31, Y+1	; 0x01
     f74:	04 8c       	ldd	r0, Z+28	; 0x1c
     f76:	f5 8d       	ldd	r31, Z+29	; 0x1d
     f78:	e0 2d       	mov	r30, r0
     f7a:	ce 01       	movw	r24, r28
     f7c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:128
  send(TM1650_CMD_MODE);
     f7e:	e8 81       	ld	r30, Y
     f80:	f9 81       	ldd	r31, Y+1	; 0x01
     f82:	00 a0       	ldd	r0, Z+32	; 0x20
     f84:	f1 a1       	ldd	r31, Z+33	; 0x21
     f86:	e0 2d       	mov	r30, r0
     f88:	68 e4       	ldi	r22, 0x48	; 72
     f8a:	ce 01       	movw	r24, r28
     f8c:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:129
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
     f8e:	e8 81       	ld	r30, Y
     f90:	f9 81       	ldd	r31, Y+1	; 0x01
     f92:	00 a0       	ldd	r0, Z+32	; 0x20
     f94:	f1 a1       	ldd	r31, Z+33	; 0x21
     f96:	e0 2d       	mov	r30, r0
     f98:	80 e1       	ldi	r24, 0x10	; 16
     f9a:	18 9f       	mul	r17, r24
     f9c:	a0 01       	movw	r20, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	87 30       	cpi	r24, 0x07	; 7
     fa6:	09 f4       	brne	.+2      	; 0xfaa <TM1650::setupDisplay(bool, unsigned char)+0x56>
     fa8:	68 e0       	ldi	r22, 0x08	; 8
     faa:	40 2b       	or	r20, r16
     fac:	64 2b       	or	r22, r20
     fae:	ce 01       	movw	r24, r28
     fb0:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
  stop();
     fb2:	e8 81       	ld	r30, Y
     fb4:	f9 81       	ldd	r31, Y+1	; 0x01
     fb6:	06 8c       	ldd	r0, Z+30	; 0x1e
     fb8:	f7 8d       	ldd	r31, Z+31	; 0x1f
     fba:	e0 2d       	mov	r30, r0
     fbc:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:131
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:130
	intensity+=1;
	if(intensity==8) intensity=0;
	start();
  send(TM1650_CMD_MODE);
  send( (intensity<<4) | (_maxSegments==7? 0x08:0x00) | (active?0x01:0x00));
  stop();
     fc6:	09 94       	ijmp

00000fc8 <TM1650::clearDisplay()>:
_ZN6TM165012clearDisplayEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:110
  send(data);
  stop();
}

void TM1650::clearDisplay()
{	// Clear all data registers. The number of registers depends on the chip.
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	8c 01       	movw	r16, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	c0 e0       	ldi	r28, 0x00	; 0
     fd6:	d8 01       	movw	r26, r16
     fd8:	12 96       	adiw	r26, 0x02	; 2
     fda:	8c 91       	ld	r24, X
     fdc:	12 97       	sbiw	r26, 0x02	; 2
     fde:	8c 17       	cp	r24, r28
     fe0:	1d 06       	cpc	r1, r29
     fe2:	61 f0       	breq	.+24     	; 0xffc <TM1650::clearDisplay()+0x34>
     fe4:	5c f0       	brlt	.+22     	; 0xffc <TM1650::clearDisplay()+0x34>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:117
  	sendData(i, 0);
     fe6:	ed 91       	ld	r30, X+
     fe8:	fc 91       	ld	r31, X
     fea:	04 a0       	ldd	r0, Z+36	; 0x24
     fec:	f5 a1       	ldd	r31, Z+37	; 0x25
     fee:	e0 2d       	mov	r30, r0
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	6c 2f       	mov	r22, r28
     ff4:	c8 01       	movw	r24, r16
     ff6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:116
	// TM1638 (10x8): 10 segments per grid, stored in two bytes. The first byte contains the first 8 display segments, second byte has seg9+seg10  => 16 bytes
	// TM1640 (8x16): one byte per grid => 16 bytes
	// TM1637 (8x6): one byte per grid => 6 bytes
	// TM1650 (8x4): two bytes per grid => 8 bytes
	// TM1668 (10x7 - 14x3): two bytes per grid => 14 bytes
  for (int i = 0; i < _maxDisplays; i++) {
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	ed cf       	rjmp	.-38     	; 0xfd6 <TM1650::clearDisplay()+0xe>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:119
  	sendData(i, 0);
  }
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <TM1650::sendData(unsigned char, unsigned char)>:
_ZN6TM16508sendDataEhh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:102
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
}

void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
    1010:	16 2f       	mov	r17, r22
    1012:	04 2f       	mov	r16, r20
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:103
	start();
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	04 8c       	ldd	r0, Z+28	; 0x1c
    101a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    101c:	e0 2d       	mov	r30, r0
    101e:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:104
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
    1020:	61 2f       	mov	r22, r17
    1022:	66 0f       	add	r22, r22
    1024:	68 66       	ori	r22, 0x68	; 104
    1026:	e8 81       	ld	r30, Y
    1028:	f9 81       	ldd	r31, Y+1	; 0x01
    102a:	00 a0       	ldd	r0, Z+32	; 0x20
    102c:	f1 a1       	ldd	r31, Z+33	; 0x21
    102e:	e0 2d       	mov	r30, r0
    1030:	ce 01       	movw	r24, r28
    1032:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:105
  send(data);
    1034:	e8 81       	ld	r30, Y
    1036:	f9 81       	ldd	r31, Y+1	; 0x01
    1038:	00 a0       	ldd	r0, Z+32	; 0x20
    103a:	f1 a1       	ldd	r31, Z+33	; 0x21
    103c:	e0 2d       	mov	r30, r0
    103e:	60 2f       	mov	r22, r16
    1040:	ce 01       	movw	r24, r28
    1042:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
  stop();
    1044:	e8 81       	ld	r30, Y
    1046:	f9 81       	ldd	r31, Y+1	; 0x01
    1048:	06 8c       	ldd	r0, Z+30	; 0x1e
    104a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    104c:	e0 2d       	mov	r30, r0
    104e:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:107
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:106
void TM1650::sendData(byte address, byte data)
{	// TM1650 uses different commands than other TM16XX chips
	start();
  send(TM1650_CMD_ADDRESS | address<<1);						// address command + address (68,6A,6C,6E)
  send(data);
  stop();
    1058:	09 94       	ijmp

0000105a <TM1650::send(unsigned char)>:
_ZN6TM16504sendEh():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:69
  digitalWrite(dataPin, HIGH);
	bitDelay();
}

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
    1066:	f6 2e       	mov	r15, r22
    1068:	08 e0       	ldi	r16, 0x08	; 8
    106a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:74
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
  {
    digitalWrite(clockPin, LOW);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:75
    bitDelay();
    1074:	e8 81       	ld	r30, Y
    1076:	f9 81       	ldd	r31, Y+1	; 0x01
    1078:	02 8c       	ldd	r0, Z+26	; 0x1a
    107a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    107c:	e0 2d       	mov	r30, r0
    107e:	ce 01       	movw	r24, r28
    1080:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:77

    digitalWrite(dataPin, data & 0x80 ? HIGH : LOW);		// in contrast to other TM16xx chips, the TM1650 expects MSB first
    1082:	6f 2d       	mov	r22, r15
    1084:	66 1f       	adc	r22, r22
    1086:	66 27       	eor	r22, r22
    1088:	66 1f       	adc	r22, r22
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:78
    data <<= 1;
    1090:	ff 0c       	add	r15, r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:80

    digitalWrite(clockPin, HIGH);
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:81
    bitDelay();
    109a:	e8 81       	ld	r30, Y
    109c:	f9 81       	ldd	r31, Y+1	; 0x01
    109e:	02 8c       	ldd	r0, Z+26	; 0x1a
    10a0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    10a2:	e0 2d       	mov	r30, r0
    10a4:	ce 01       	movw	r24, r28
    10a6:	09 95       	icall
    10a8:	01 50       	subi	r16, 0x01	; 1
    10aa:	11 09       	sbc	r17, r1
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:72

void TM1650::send(byte data)
{	// send a byte to the chip the way the TM1650 likes it (MSB-first)
	// For the TM1650 the bit-order is MSB-first requiring different implementation than in base class.

  for (int i = 0; i < 8; i++)
    10ac:	f9 f6       	brne	.-66     	; 0x106c <TM1650::send(unsigned char)+0x12>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:83
    data <<= 1;

    digitalWrite(clockPin, HIGH);
    bitDelay();
  }
  bitDelay();
    10ae:	e8 81       	ld	r30, Y
    10b0:	f9 81       	ldd	r31, Y+1	; 0x01
    10b2:	02 8c       	ldd	r0, Z+26	; 0x1a
    10b4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    10b6:	e0 2d       	mov	r30, r0
    10b8:	ce 01       	movw	r24, r28
    10ba:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:84
  bitDelay();
    10bc:	e8 81       	ld	r30, Y
    10be:	f9 81       	ldd	r31, Y+1	; 0x01
    10c0:	02 8c       	ldd	r0, Z+26	; 0x1a
    10c2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    10c4:	e0 2d       	mov	r30, r0
    10c6:	ce 01       	movw	r24, r28
    10c8:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:90

	// unlike TM1638/TM1668 and TM1640, the TM1650 and TM1637 uses an ACK to confirm reception of command/data
  // read the acknowledgement
  // TODO? return the ack?
	// (method derived from https://github.com/avishorp/TM1637 but using pins in standard output mode when writing)
  digitalWrite(clockPin, LOW);
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:91
  pinMode(dataPin, INPUT);
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:92
  bitDelay();
    10da:	e8 81       	ld	r30, Y
    10dc:	f9 81       	ldd	r31, Y+1	; 0x01
    10de:	02 8c       	ldd	r0, Z+26	; 0x1a
    10e0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    10e2:	e0 2d       	mov	r30, r0
    10e4:	ce 01       	movw	r24, r28
    10e6:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:93
  digitalWrite(clockPin, HIGH);
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:94
  bitDelay();
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	02 8c       	ldd	r0, Z+26	; 0x1a
    10f6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    10f8:	e0 2d       	mov	r30, r0
    10fa:	ce 01       	movw	r24, r28
    10fc:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:95
  uint8_t ack = digitalRead(dataPin);
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <digitalRead>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:96
  if (ack == 0)
    1104:	81 11       	cpse	r24, r1
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <TM1650::send(unsigned char)+0xb6>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:97
	  digitalWrite(dataPin, LOW);
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  pinMode(dataPin, OUTPUT);
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:99
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:98
  digitalWrite(clockPin, HIGH);
  bitDelay();
  uint8_t ack = digitalRead(dataPin);
  if (ack == 0)
	  digitalWrite(dataPin, LOW);
  pinMode(dataPin, OUTPUT);
    111e:	0c 94 07 04 	jmp	0x80e	; 0x80e <pinMode>

00001122 <TM1650::stop()>:
_ZN6TM16504stopEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:57
	bitDelay();

}

void TM1650::stop()
{ // to stop TM1650 expects the clock to go high, when strobing DIO high
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:60
	// Datasheet p.3: "End signal: keep SCL at "1" level, SDA jumps from "0" to "1", which is considered to be the end signal."
	// TM1650 expects start and stop like I2C: at stop clock is high, then data changes from low to high.
  digitalWrite(clockPin, LOW);
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:61
  digitalWrite(dataPin, LOW);
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:62
	bitDelay();
    1138:	e8 81       	ld	r30, Y
    113a:	f9 81       	ldd	r31, Y+1	; 0x01
    113c:	02 8c       	ldd	r0, Z+26	; 0x1a
    113e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1140:	e0 2d       	mov	r30, r0
    1142:	ce 01       	movw	r24, r28
    1144:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:63
  digitalWrite(clockPin, HIGH);
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	8e 81       	ldd	r24, Y+6	; 0x06
    114a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:64
  digitalWrite(dataPin, HIGH);
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
	bitDelay();
    1156:	e8 81       	ld	r30, Y
    1158:	f9 81       	ldd	r31, Y+1	; 0x01
    115a:	02 8c       	ldd	r0, Z+26	; 0x1a
    115c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    115e:	e0 2d       	mov	r30, r0
    1160:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:66
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:65
  digitalWrite(clockPin, LOW);
  digitalWrite(dataPin, LOW);
	bitDelay();
  digitalWrite(clockPin, HIGH);
  digitalWrite(dataPin, HIGH);
	bitDelay();
    1166:	09 94       	ijmp

00001168 <TM1650::start()>:
_ZN6TM16505startEv():
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:44
}
#endif


void TM1650::start()
{	// if needed derived classes can use different patterns to start a command (eg. for TM1637)
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:47
	// Datasheet p.3: "Start signal: keep SCL at "1" level, SDA jumps from "1" to "0", which is considered to be the start signal."
	// TM1650 expects start and stop like I2C: at start data is low, then clock changes from high to low.
  digitalWrite(dataPin, HIGH);
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:48
  digitalWrite(clockPin, HIGH);
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	8e 81       	ldd	r24, Y+6	; 0x06
    117a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:49
  bitDelay();
    117e:	e8 81       	ld	r30, Y
    1180:	f9 81       	ldd	r31, Y+1	; 0x01
    1182:	02 8c       	ldd	r0, Z+26	; 0x1a
    1184:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1186:	e0 2d       	mov	r30, r0
    1188:	ce 01       	movw	r24, r28
    118a:	09 95       	icall
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:50
  digitalWrite(dataPin, LOW);
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:51
  digitalWrite(clockPin, LOW);
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
	bitDelay();
    119c:	e8 81       	ld	r30, Y
    119e:	f9 81       	ldd	r31, Y+1	; 0x01
    11a0:	02 8c       	ldd	r0, Z+26	; 0x1a
    11a2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    11a4:	e0 2d       	mov	r30, r0
    11a6:	ce 01       	movw	r24, r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:54

}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1650.cpp:52
  digitalWrite(dataPin, HIGH);
  digitalWrite(clockPin, HIGH);
  bitDelay();
  digitalWrite(dataPin, LOW);
  digitalWrite(clockPin, LOW);
	bitDelay();
    11ac:	09 94       	ijmp

000011ae <TM1628::bitDelay()>:
_ZN6TM16288bitDelayEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:234
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11ae:	86 e0       	ldi	r24, 0x06	; 6
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <TM1628::bitDelay()+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\TM16xx_LEDs_and_Buttons-0.5.2110\src/TM1628.cpp:62
	// faster than 5us delay (44 Khz) worked unreliably.
	// The datasheet specifies a maximum clock rate of 1MHz, but (unlike the TM1638) testing 
	// on the ESP8266 shows this appears to be too fast.
	// for that reason the delay between reading bits should be more than 4us.
	// TODO: test medium speed MCUs like LGT8F328P (32Mhz) and STM32. Make this delay conditional on F_CPU.
}
    11b6:	08 95       	ret

000011b8 <twi_transmit>:
twi_transmit():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:347
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    11b8:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <twi_txBufferLength>
    11bc:	26 0f       	add	r18, r22
    11be:	33 27       	eor	r19, r19
    11c0:	33 1f       	adc	r19, r19
    11c2:	21 32       	cpi	r18, 0x21	; 33
    11c4:	31 05       	cpc	r19, r1
    11c6:	ec f4       	brge	.+58     	; 0x1202 <twi_transmit+0x4a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:352
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    11c8:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <twi_state>
    11cc:	fc 01       	movw	r30, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	24 30       	cpi	r18, 0x04	; 4
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <twi_transmit+0x38>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:353
    return 2;
    11d6:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:363
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
    11d8:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:358
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    11da:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <twi_txBufferLength>
    11de:	21 91       	ld	r18, Z+
    11e0:	ac 01       	movw	r20, r24
    11e2:	41 5c       	subi	r20, 0xC1	; 193
    11e4:	5c 4f       	sbci	r21, 0xFC	; 252
    11e6:	a4 0f       	add	r26, r20
    11e8:	b5 2f       	mov	r27, r21
    11ea:	b1 1d       	adc	r27, r1
    11ec:	2c 93       	st	X, r18
    11ee:	01 96       	adiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:357
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    11f0:	86 17       	cp	r24, r22
    11f2:	98 f3       	brcs	.-26     	; 0x11da <twi_transmit+0x22>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:360
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    11f4:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_txBufferLength>
    11f8:	68 0f       	add	r22, r24
    11fa:	60 93 5f 03 	sts	0x035F, r22	; 0x80035f <twi_txBufferLength>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:348
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    return 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	08 95       	ret

00001206 <twi_init>:
twi_init():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:83
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    1206:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_state>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:84
  twi_sendStop = true;		// default value
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_sendStop>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:85
  twi_inRepStart = false;
    1210:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <twi_inRepStart>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:88
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	82 e1       	ldi	r24, 0x12	; 18
    1218:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:89
  digitalWrite(SCL, 1);
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	83 e1       	ldi	r24, 0x13	; 19
    1220:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:92

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    1224:	e9 eb       	ldi	r30, 0xB9	; 185
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:93
  cbi(TWSR, TWPS1);
    122e:	80 81       	ld	r24, Z
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:94
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:102
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    123a:	85 e4       	ldi	r24, 0x45	; 69
    123c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:103
}
    1240:	08 95       	ret

00001242 <twi_handleTimeout>:
twi_handleTimeout():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:470
 * Desc     this gets called whenever a while loop here has lasted longer than
 *          twi_timeout_us microseconds. always sets twi_timed_out_flag
 * Input    reset: true causes this function to reset the twi hardware interface
 * Output   none
 */
void twi_handleTimeout(bool reset){
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:471
  twi_timed_out_flag = true;
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <twi_timed_out_flag>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:473

  if (reset) {
    124c:	88 23       	and	r24, r24
    124e:	b9 f0       	breq	.+46     	; 0x127e <twi_handleTimeout+0x3c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:475
    // remember bitrate and address settings
    uint8_t previous_TWBR = TWBR;
    1250:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:476
    uint8_t previous_TWAR = TWAR;
    1254:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
twi_disable():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:114
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    1258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    125c:	8a 7b       	andi	r24, 0xBA	; 186
    125e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:117

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	82 e1       	ldi	r24, 0x12	; 18
    1266:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:118
  digitalWrite(SCL, 0);
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	83 e1       	ldi	r24, 0x13	; 19
    126e:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
twi_handleTimeout():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:480
    uint8_t previous_TWBR = TWBR;
    uint8_t previous_TWAR = TWAR;

    // reset the interface
    twi_disable();
    twi_init();
    1272:	0e 94 03 09 	call	0x1206	; 0x1206 <twi_init>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:483

    // reapply the previous register values
    TWAR = previous_TWAR;
    1276:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:484
    TWBR = previous_TWBR;
    127a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:486
  }
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:311
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    1284:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <TwoWire::rxBufferIndex>
    1288:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <TwoWire::rxBufferLength>
    128c:	e8 17       	cp	r30, r24
    128e:	30 f4       	brcc	.+12     	; 0x129c <TwoWire::peek()+0x18>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:312
    value = rxBuffer[rxBufferIndex];
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	e5 52       	subi	r30, 0x25	; 37
    1294:	fc 4f       	sbci	r31, 0xFC	; 252
    1296:	80 81       	ld	r24, Z
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:309
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:316
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    12a0:	08 95       	ret

000012a2 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:296
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    12a2:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <TwoWire::rxBufferIndex>
    12a6:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <TwoWire::rxBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:293
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    12aa:	2f ef       	ldi	r18, 0xFF	; 255
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:296
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    12ae:	98 17       	cp	r25, r24
    12b0:	48 f4       	brcc	.+18     	; 0x12c4 <TwoWire::read()+0x22>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:297
    value = rxBuffer[rxBufferIndex];
    12b2:	e9 2f       	mov	r30, r25
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	e5 52       	subi	r30, 0x25	; 37
    12b8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ba:	20 81       	ld	r18, Z
    12bc:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:298
    ++rxBufferIndex;
    12be:	9f 5f       	subi	r25, 0xFF	; 255
    12c0:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <TwoWire::rxBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:302
  }

  return value;
}
    12c4:	c9 01       	movw	r24, r18
    12c6:	08 95       	ret

000012c8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:285
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    12c8:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <TwoWire::rxBufferLength>
    12cc:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <TwoWire::rxBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:286
}
    12d0:	89 1b       	sub	r24, r25
    12d2:	99 0b       	sbc	r25, r25
    12d4:	08 95       	ret

000012d6 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:266

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cb 01       	movw	r24, r22
    12dc:	ea 01       	movw	r28, r20
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:275
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    12de:	64 2f       	mov	r22, r20
    12e0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <twi_transmit>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:278
  }
  return quantity;
}
    12e4:	ce 01       	movw	r24, r28
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:241

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	1f 92       	push	r1
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	69 83       	std	Y+1, r22	; 0x01
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:257
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <twi_transmit>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:260
  }
  return 1;
}
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0f 90       	pop	r0
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret

00001314 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>:
_ZN10MQ131Class7convertEf9MQ131UnitS0_.part.2():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:254
    return input;
  }

  float concentration = 0;

  switch(unitOut) {
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	a1 f0       	breq	.+40     	; 0x1342 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x2e>
    131a:	23 30       	cpi	r18, 0x03	; 3
    131c:	31 05       	cpc	r19, r1
    131e:	21 f1       	breq	.+72     	; 0x1368 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x54>
    1320:	21 30       	cpi	r18, 0x01	; 1
    1322:	31 05       	cpc	r19, r1
    1324:	39 f0       	breq	.+14     	; 0x1334 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x20>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:259
    case PPM :
      // We assume that the unit IN is PPB as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPB to PPM
      return input / 1000.0;
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a e7       	ldi	r20, 0x7A	; 122
    132c:	54 e4       	ldi	r21, 0x44	; 68
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    132e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:282
    default :
      return input;
  }
}
    1332:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:264
      return input / 1000.0;
    case PPB :
      // We assume that the unit IN is PPM as the sensor provide only in PPB and PPM
      // depending on the type of sensor (METAL or BLACK_BAKELITE)
      // So, convert PPM to PPB
      return input * 1000.0;
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	54 e4       	ldi	r21, 0x44	; 68
    133c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    1340:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:266
    case MG_M3 :
      if(unitIn == PPM) {
    1342:	45 2b       	or	r20, r21
    1344:	31 f0       	breq	.+12     	; 0x1352 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:269
        concentration = input;
      } else {
        concentration = input / 1000.0;
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a e7       	ldi	r20, 0x7A	; 122
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:278
      if(unitIn == PPB) {
        concentration = input;
      } else {
        concentration = input * 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e4       	ldi	r20, 0x40	; 64
    1358:	52 e4       	ldi	r21, 0x42	; 66
    135a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    135e:	2b e4       	ldi	r18, 0x4B	; 75
    1360:	30 eb       	ldi	r19, 0xB0	; 176
    1362:	45 eb       	ldi	r20, 0xB5	; 181
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	e3 cf       	rjmp	.-58     	; 0x132e <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x1a>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:273
      } else {
        concentration = input / 1000.0;
      }
      return concentration * 48.0 / 22.71108;
    case UG_M3 :
      if(unitIn == PPB) {
    1368:	41 30       	cpi	r20, 0x01	; 1
    136a:	51 05       	cpc	r21, r1
    136c:	91 f3       	breq	.-28     	; 0x1352 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:276
        concentration = input;
      } else {
        concentration = input * 1000.0;
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a e7       	ldi	r20, 0x7A	; 122
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    137a:	eb cf       	rjmp	.-42     	; 0x1352 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]+0x3e>

0000137c <MQ131Class::~MQ131Class()>:
_ZN10MQ131ClassD2Ev():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:44

/**
 * Destructor, nothing special to do
 */
MQ131Class::~MQ131Class() {
}
    137c:	08 95       	ret

0000137e <setSegmentFloat(float, bool)>:
_Z15setSegmentFloatfb():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:53
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	4b 01       	movw	r8, r22
    1394:	5c 01       	movw	r10, r24
    1396:	f4 2e       	mov	r15, r20
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:54
    1398:	88 e4       	ldi	r24, 0x48	; 72
    139a:	96 e0       	ldi	r25, 0x06	; 6
    139c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:55
    13a0:	c5 01       	movw	r24, r10
    13a2:	b4 01       	movw	r22, r8
    13a4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__fixsfsi>
    13a8:	eb 01       	movw	r28, r22
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:56
    13aa:	cb 01       	movw	r24, r22
    13ac:	64 e6       	ldi	r22, 0x64	; 100
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    13b4:	e6 2e       	mov	r14, r22
    13b6:	42 e0       	ldi	r20, 0x02	; 2
    13b8:	bc 01       	movw	r22, r24
    13ba:	88 e4       	ldi	r24, 0x48	; 72
    13bc:	96 e0       	ldi	r25, 0x06	; 6
    13be:	0e 94 19 06 	call	0xc32	; 0xc32 <TM16xx::setDisplayToDecNumber(int, unsigned char)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:57
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	ce 01       	movw	r24, r28
    13c8:	b9 01       	movw	r22, r18
    13ca:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    13ce:	cb 01       	movw	r24, r22
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:58
    13d0:	b9 01       	movw	r22, r18
    13d2:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    13d6:	0d e6       	ldi	r16, 0x6D	; 109
    13d8:	11 e0       	ldi	r17, 0x01	; 1
    13da:	21 e0       	ldi	r18, 0x01	; 1
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	68 2f       	mov	r22, r24
    13e0:	88 e4       	ldi	r24, 0x48	; 72
    13e2:	96 e0       	ldi	r25, 0x06	; 6
    13e4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:60
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	6e 2d       	mov	r22, r14
    13ee:	88 e4       	ldi	r24, 0x48	; 72
    13f0:	96 e0       	ldi	r25, 0x06	; 6
    13f2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:62
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	43 e0       	ldi	r20, 0x03	; 3
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	f1 10       	cpse	r15, r1
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <setSegmentFloat(float, bool)+0x8c>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:63
    1400:	0d e6       	ldi	r16, 0x6D	; 109
    1402:	11 e0       	ldi	r17, 0x01	; 1
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	43 e0       	ldi	r20, 0x03	; 3
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	88 e4       	ldi	r24, 0x48	; 72
    140c:	96 e0       	ldi	r25, 0x06	; 6
    140e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:64
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	bf 90       	pop	r11
    1420:	af 90       	pop	r10
    1422:	9f 90       	pop	r9
    1424:	8f 90       	pop	r8
    1426:	08 95       	ret

00001428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>:
_ZN5Print5writeEPKc.part.2.constprop.100():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    1428:	fc 01       	movw	r30, r24
    142a:	01 90       	ld	r0, Z+
    142c:	00 20       	and	r0, r0
    142e:	e9 f7       	brne	.-6      	; 0x142a <Print::write(char const*) [clone .part.2] [clone .constprop.100]+0x2>
    1430:	31 97       	sbiw	r30, 0x01	; 1
    1432:	af 01       	movw	r20, r30
    1434:	48 1b       	sub	r20, r24
    1436:	59 0b       	sbc	r21, r25
    1438:	bc 01       	movw	r22, r24
    143a:	8e e4       	ldi	r24, 0x4E	; 78
    143c:	94 e0       	ldi	r25, 0x04	; 4
    143e:	0c 94 31 02 	jmp	0x462	; 0x462 <Print::write(unsigned char const*, unsigned int)>

00001442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>:
_ZN5Print11printNumberEmh.constprop.85():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:203
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	a1 97       	sbiw	r28, 0x21	; 33
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:208
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1462:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1464:	42 30       	cpi	r20, 0x02	; 2
    1466:	08 f4       	brcc	.+2      	; 0x146a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]+0x28>
    1468:	4a e0       	ldi	r20, 0x0A	; 10
    146a:	8e 01       	movw	r16, r28
    146c:	0f 5d       	subi	r16, 0xDF	; 223
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:214

  do {
    char c = n % base;
    1470:	84 2e       	mov	r8, r20
    1472:	91 2c       	mov	r9, r1
    1474:	b1 2c       	mov	r11, r1
    1476:	a1 2c       	mov	r10, r1
    1478:	a5 01       	movw	r20, r10
    147a:	94 01       	movw	r18, r8
    147c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    1480:	e6 2f       	mov	r30, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:215
    n /= base;
    1482:	b9 01       	movw	r22, r18
    1484:	ca 01       	movw	r24, r20
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1486:	ea 30       	cpi	r30, 0x0A	; 10
    1488:	f4 f4       	brge	.+60     	; 0x14c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]+0x84>
    148a:	e0 5d       	subi	r30, 0xD0	; 208
    148c:	d8 01       	movw	r26, r16
    148e:	ee 93       	st	-X, r30
    1490:	8d 01       	movw	r16, r26
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:218
  } while(n);
    1492:	23 2b       	or	r18, r19
    1494:	24 2b       	or	r18, r20
    1496:	25 2b       	or	r18, r21
    1498:	79 f7       	brne	.-34     	; 0x1478 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]+0x36>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	80 e0       	ldi	r24, 0x00	; 0
write():
    149e:	10 97       	sbiw	r26, 0x00	; 0
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]+0x66>
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
_ZN5Print11printNumberEmh.constprop.85():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:221

  return write(str);
}
    14a8:	a1 96       	adiw	r28, 0x21	; 33
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:217

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    14c6:	e9 5c       	subi	r30, 0xC9	; 201
    14c8:	e1 cf       	rjmp	.-62     	; 0x148c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]+0x4a>

000014ca <Print::println(char const*) [clone .constprop.97]>:
_ZN5Print7printlnEPKc.constprop.97():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
write():
    14ce:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
    14d2:	ec 01       	movw	r28, r24
    14d4:	81 e9       	ldi	r24, 0x91	; 145
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
_ZN5Print7printlnEPKc.constprop.97():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
    14dc:	8c 0f       	add	r24, r28
    14de:	9d 1f       	adc	r25, r29
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <Print::print(char const*) [clone .constprop.91]>:
_ZN5Print5printEPKc.constprop.91():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:62
size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
    14e6:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>

000014ea <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]>:
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.87():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:198
 }

 /**
 * Get gas concentration for O3 in ppm
 */
 float MQ131Class::getO3(MQ131Unit unit) {
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:200
 	// If no value Rs read, return 0.0
 	if(lastValueRs < 0) {
    14f8:	c0 90 10 05 	lds	r12, 0x0510	; 0x800510 <MQ131+0x19>
    14fc:	d0 90 11 05 	lds	r13, 0x0511	; 0x800511 <MQ131+0x1a>
    1500:	e0 90 12 05 	lds	r14, 0x0512	; 0x800512 <MQ131+0x1b>
    1504:	f0 90 13 05 	lds	r15, 0x0513	; 0x800513 <MQ131+0x1c>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	0e 94 90 1c 	call	0x3920	; 0x3920 <__cmpsf2>
    1516:	87 fd       	sbrc	r24, 7
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x48>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:206
 		return 0.0;
 	}

  float ratio = 0.0;

 	switch(model) {
    151a:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <MQ131+0x2>
    151e:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <MQ131+0x3>
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x40>
    1528:	42 c0       	rjmp	.+132    	; 0x15ae <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0xc4>
    152a:	90 f0       	brcs	.+36     	; 0x1550 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x66>
    152c:	02 97       	sbiw	r24, 0x02	; 2
    152e:	09 f4       	brne	.+2      	; 0x1532 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x48>
    1530:	78 c0       	rjmp	.+240    	; 0x1622 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x138>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:240
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
      break;
      
 		default :
 			return 0.0;
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
  }
}
    153a:	65 2f       	mov	r22, r21
    153c:	74 2f       	mov	r23, r20
    153e:	83 2f       	mov	r24, r19
    1540:	92 2f       	mov	r25, r18
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	08 95       	ret
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:210

 	switch(model) {
 		case LOW_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    1550:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <MQ131+0x15>
    1554:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <MQ131+0x16>
    1558:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <MQ131+0x17>
    155c:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <MQ131+0x18>
    1560:	c7 01       	movw	r24, r14
    1562:	b6 01       	movw	r22, r12
    1564:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    1568:	6b 01       	movw	r12, r22
    156a:	7c 01       	movw	r14, r24
    156c:	0e 94 3c 01 	call	0x278	; 0x278 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]>
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	c7 01       	movw	r24, r14
    1576:	b6 01       	movw	r22, r12
    1578:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:213
      // R^2 = 0.9906
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(9.4783 * pow(ratio, 2.3348), PPB, unit);
    157c:	2d e5       	ldi	r18, 0x5D	; 93
    157e:	3d e6       	ldi	r19, 0x6D	; 109
    1580:	45 e1       	ldi	r20, 0x15	; 21
    1582:	50 e4       	ldi	r21, 0x40	; 64
    1584:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <pow>
    1588:	2e e1       	ldi	r18, 0x1E	; 30
    158a:	37 ea       	ldi	r19, 0xA7	; 167
    158c:	47 e1       	ldi	r20, 0x17	; 23
    158e:	51 e4       	ldi	r21, 0x41	; 65
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    1590:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    1594:	b6 2f       	mov	r27, r22
    1596:	a7 2f       	mov	r26, r23
    1598:	f8 2f       	mov	r31, r24
    159a:	e9 2f       	mov	r30, r25
    159c:	ad 01       	movw	r20, r26
    159e:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    15a0:	c1 30       	cpi	r28, 0x01	; 1
    15a2:	d1 05       	cpc	r29, r1
    15a4:	51 f2       	breq	.-108    	; 0x153a <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x50>
    15a6:	9e 01       	movw	r18, r28
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	2e c0       	rjmp	.+92     	; 0x160a <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x120>
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.87():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:223

 		case HIGH_CONCENTRATION :
 			// Use the equation to compute the O3 concentration in ppm
 			
      // Compute the ratio Rs/R0 and apply the environmental correction
      ratio = lastValueRs / valueR0 * getEnvCorrectRatio();
    15ae:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <MQ131+0x15>
    15b2:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <MQ131+0x16>
    15b6:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <MQ131+0x17>
    15ba:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <MQ131+0x18>
    15be:	c7 01       	movw	r24, r14
    15c0:	b6 01       	movw	r22, r12
    15c2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    15c6:	6b 01       	movw	r12, r22
    15c8:	7c 01       	movw	r14, r24
    15ca:	0e 94 3c 01 	call	0x278	; 0x278 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]>
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	c7 01       	movw	r24, r14
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:226
      // R^2 = 0.9900
      // Use this if you are monitoring low concentration of O3 (air quality project)
      return convert(8.1399 * pow(ratio, 2.3297), PPM, unit);
    15da:	2e ec       	ldi	r18, 0xCE	; 206
    15dc:	39 e1       	ldi	r19, 0x19	; 25
    15de:	45 e1       	ldi	r20, 0x15	; 21
    15e0:	50 e4       	ldi	r21, 0x40	; 64
    15e2:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <pow>
    15e6:	28 e0       	ldi	r18, 0x08	; 8
    15e8:	3d e3       	ldi	r19, 0x3D	; 61
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    15f2:	b6 2f       	mov	r27, r22
    15f4:	a7 2f       	mov	r26, r23
    15f6:	f8 2f       	mov	r31, r24
    15f8:	e9 2f       	mov	r30, r25
    15fa:	ad 01       	movw	r20, r26
    15fc:	9f 01       	movw	r18, r30
convert():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:248

 /**
  * Convert gas unit of gas concentration
  */
 float MQ131Class::convert(float input, MQ131Unit unitIn, MQ131Unit unitOut) {
  if(unitIn == unitOut) {
    15fe:	20 97       	sbiw	r28, 0x00	; 0
    1600:	09 f4       	brne	.+2      	; 0x1604 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x11a>
    1602:	9b cf       	rjmp	.-202    	; 0x153a <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0x50>
    1604:	9e 01       	movw	r18, r28
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	6b 2f       	mov	r22, r27
    160c:	7a 2f       	mov	r23, r26
    160e:	8f 2f       	mov	r24, r31
    1610:	9e 2f       	mov	r25, r30
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.87():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:242
      break;
      
 		default :
 			return 0.0;
  }
}
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
convert():
    161e:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <MQ131Class::convert(float, MQ131Unit, MQ131Unit) [clone .part.2]>
_ZN10MQ131Class5getO3E9MQ131Unit.constprop.87():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:234
      // Use this if you are constantly monitoring high concentration of O3
      // return convert((8.37768358 * pow(ratio, 2.30375446) - 8.37768358), PPM, unit);

    case SN_O2_LOW_CONCENTRATION:
      // NOT TESTED BY @ostaquet (I don't have this type of sensor)
      ratio = 12.15* lastValueRs / valueR0 * getEnvCorrectRatio();
    1622:	26 e6       	ldi	r18, 0x66	; 102
    1624:	36 e6       	ldi	r19, 0x66	; 102
    1626:	42 e4       	ldi	r20, 0x42	; 66
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	c7 01       	movw	r24, r14
    162c:	b6 01       	movw	r22, r12
    162e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    1632:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <MQ131+0x15>
    1636:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <MQ131+0x16>
    163a:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <MQ131+0x17>
    163e:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <MQ131+0x18>
    1642:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    1646:	6b 01       	movw	r12, r22
    1648:	7c 01       	movw	r14, r24
    164a:	0e 94 3c 01 	call	0x278	; 0x278 <MQ131Class::getEnvCorrectRatio() [clone .constprop.88]>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	c7 01       	movw	r24, r14
    1654:	b6 01       	movw	r22, r12
    1656:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:236
      // r^2 = 0.9956
      return convert(26.941 * pow(ratio,-1.16),PPB,unit);
    165a:	21 ee       	ldi	r18, 0xE1	; 225
    165c:	3a e7       	ldi	r19, 0x7A	; 122
    165e:	44 e9       	ldi	r20, 0x94	; 148
    1660:	5f eb       	ldi	r21, 0xBF	; 191
    1662:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <pow>
    1666:	2b e2       	ldi	r18, 0x2B	; 43
    1668:	37 e8       	ldi	r19, 0x87	; 135
    166a:	47 ed       	ldi	r20, 0xD7	; 215
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	90 cf       	rjmp	.-224    	; 0x1590 <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]+0xa6>

00001670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>:
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:223
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    1670:	4f 92       	push	r4
    1672:	5f 92       	push	r5
    1674:	6f 92       	push	r6
    1676:	7f 92       	push	r7
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	6b 01       	movw	r12, r22
    1690:	7c 01       	movw	r14, r24
    1692:	74 2e       	mov	r7, r20
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:227
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1694:	ac 01       	movw	r20, r24
    1696:	9b 01       	movw	r18, r22
    1698:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__unordsf2>
    169c:	88 23       	and	r24, r24
    169e:	99 f0       	breq	.+38     	; 0x16c6 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x56>
write():
    16a0:	84 e9       	ldi	r24, 0x94	; 148
    16a2:	91 e0       	ldi	r25, 0x01	; 1
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:266
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
write():
    16c2:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:228
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    16c6:	46 01       	movw	r8, r12
    16c8:	57 01       	movw	r10, r14
    16ca:	e8 94       	clt
    16cc:	b7 f8       	bld	r11, 7
    16ce:	2f ef       	ldi	r18, 0xFF	; 255
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	5f e7       	ldi	r21, 0x7F	; 127
    16d6:	c5 01       	movw	r24, r10
    16d8:	b4 01       	movw	r22, r8
    16da:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__unordsf2>
    16de:	81 11       	cpse	r24, r1
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x8c>
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	5f e7       	ldi	r21, 0x7F	; 127
    16ea:	c5 01       	movw	r24, r10
    16ec:	b4 01       	movw	r22, r8
    16ee:	0e 94 90 1c 	call	0x3920	; 0x3920 <__cmpsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	1c f4       	brge	.+6      	; 0x16fc <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x8c>
write():
    16f6:	88 e9       	ldi	r24, 0x98	; 152
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	d4 cf       	rjmp	.-88     	; 0x16a4 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x34>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:229
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    16fc:	2f ef       	ldi	r18, 0xFF	; 255
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	5f e4       	ldi	r21, 0x4F	; 79
    1704:	c7 01       	movw	r24, r14
    1706:	b6 01       	movw	r22, r12
    1708:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__gesf2>
    170c:	18 16       	cp	r1, r24
    170e:	1c f4       	brge	.+6      	; 0x1716 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0xa6>
write():
    1710:	8c e9       	ldi	r24, 0x9C	; 156
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	c7 cf       	rjmp	.-114    	; 0x16a4 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x34>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:230
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1716:	2f ef       	ldi	r18, 0xFF	; 255
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	5f ec       	ldi	r21, 0xCF	; 207
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	0e 94 90 1c 	call	0x3920	; 0x3920 <__cmpsf2>
    1726:	87 fd       	sbrc	r24, 7
    1728:	f3 cf       	rjmp	.-26     	; 0x1710 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0xa0>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:233
  
  // Handle negative numbers
  if (number < 0.0)
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	c7 01       	movw	r24, r14
    1732:	b6 01       	movw	r22, r12
    1734:	0e 94 90 1c 	call	0x3920	; 0x3920 <__cmpsf2>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:225
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:233
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    173c:	87 ff       	sbrs	r24, 7
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0xe4>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1740:	6d e2       	ldi	r22, 0x2D	; 45
    1742:	8e e4       	ldi	r24, 0x4E	; 78
    1744:	94 e0       	ldi	r25, 0x04	; 4
    1746:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <HardwareSerial::write(unsigned char)>
    174a:	8c 01       	movw	r16, r24
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:236
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    174c:	f7 fa       	bst	r15, 7
    174e:	f0 94       	com	r15
    1750:	f7 f8       	bld	r15, 7
    1752:	f0 94       	com	r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:241
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1754:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:240
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:241
  for (uint8_t i=0; i<digits; ++i)
    175e:	7c 16       	cp	r7, r28
    1760:	41 f0       	breq	.+16     	; 0x1772 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x102>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:242
    rounding /= 10.0;
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:241
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    176e:	cf 5f       	subi	r28, 0xFF	; 255
    1770:	f6 cf       	rjmp	.-20     	; 0x175e <Print::printFloat(double, unsigned char) [clone .constprop.80]+0xee>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:244
    rounding /= 10.0;
  
  number += rounding;
    1772:	a7 01       	movw	r20, r14
    1774:	96 01       	movw	r18, r12
    1776:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__addsf3>
    177a:	2b 01       	movw	r4, r22
    177c:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:247

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    177e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__fixunssfsi>
    1782:	4b 01       	movw	r8, r22
    1784:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1786:	4a e0       	ldi	r20, 0x0A	; 10
    1788:	0e 94 21 0a 	call	0x1442	; 0x1442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:249
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    178c:	7c 01       	movw	r14, r24
    178e:	e0 0e       	add	r14, r16
    1790:	f1 1e       	adc	r15, r17
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:252

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1792:	cc 23       	and	r28, r28
    1794:	c1 f1       	breq	.+112    	; 0x1806 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x196>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:248
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1796:	c5 01       	movw	r24, r10
    1798:	b4 01       	movw	r22, r8
    179a:	0e 94 95 1c 	call	0x392a	; 0x392a <__floatunsisf>
    179e:	9b 01       	movw	r18, r22
    17a0:	ac 01       	movw	r20, r24
    17a2:	c3 01       	movw	r24, r6
    17a4:	b2 01       	movw	r22, r4
    17a6:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__subsf3>
    17aa:	4b 01       	movw	r8, r22
    17ac:	5c 01       	movw	r10, r24
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    17ae:	6e e2       	ldi	r22, 0x2E	; 46
    17b0:	8e e4       	ldi	r24, 0x4E	; 78
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <HardwareSerial::write(unsigned char)>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:253
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    17b8:	e8 0e       	add	r14, r24
    17ba:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:257
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    17bc:	c1 50       	subi	r28, 0x01	; 1
    17be:	18 f1       	brcs	.+70     	; 0x1806 <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x196>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:259
  {
    remainder *= 10.0;
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	c5 01       	movw	r24, r10
    17ca:	b4 01       	movw	r22, r8
    17cc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    17d0:	2b 01       	movw	r4, r22
    17d2:	3c 01       	movw	r6, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:260
    unsigned int toPrint = (unsigned int)(remainder);
    17d4:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__fixunssfsi>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    17d8:	4b 01       	movw	r8, r22
    17da:	b1 2c       	mov	r11, r1
    17dc:	a1 2c       	mov	r10, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    17de:	4a e0       	ldi	r20, 0x0A	; 10
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	0e 94 21 0a 	call	0x1442	; 0x1442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>
_ZN5Print10printFloatEdh.constprop.80():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:261
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    17e8:	e8 0e       	add	r14, r24
    17ea:	f9 1e       	adc	r15, r25
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:262
    remainder -= toPrint; 
    17ec:	c5 01       	movw	r24, r10
    17ee:	b4 01       	movw	r22, r8
    17f0:	0e 94 95 1c 	call	0x392a	; 0x392a <__floatunsisf>
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	c3 01       	movw	r24, r6
    17fa:	b2 01       	movw	r22, r4
    17fc:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__subsf3>
    1800:	4b 01       	movw	r8, r22
    1802:	5c 01       	movw	r10, r24
    1804:	db cf       	rjmp	.-74     	; 0x17bc <Print::printFloat(double, unsigned char) [clone .constprop.80]+0x14c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:266
  } 
  
  return n;
}
    1806:	c7 01       	movw	r24, r14
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	7f 90       	pop	r7
    1820:	6f 90       	pop	r6
    1822:	5f 90       	pop	r5
    1824:	4f 90       	pop	r4
    1826:	08 95       	ret

00001828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>:
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:495
 * Output is    IrReceiver.decodedIRData.decodedRawData
 *
 * @param aStartOffset must point to a mark
 * @return true if decoding was successful
 */
bool IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros,
    1828:	7f 92       	push	r7
    182a:	8f 92       	push	r8
    182c:	9f 92       	push	r9
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	78 2e       	mov	r7, r24
    1844:	ea 01       	movw	r28, r20
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:498
        uint16_t aZeroSpaceMicros, bool aMSBfirst) {

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    1846:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
    184a:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
    184e:	3f 96       	adiw	r30, 0x0f	; 15
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:779
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
    1850:	8b 01       	movw	r16, r22
    1852:	0c 5e       	subi	r16, 0xEC	; 236
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	43 e4       	ldi	r20, 0x43	; 67
    1858:	c4 2e       	mov	r12, r20
    185a:	d1 2c       	mov	r13, r1
    185c:	c8 01       	movw	r24, r16
    185e:	b6 01       	movw	r22, r12
    1860:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    1864:	5b 01       	movw	r10, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    1866:	58 e2       	ldi	r21, 0x28	; 40
    1868:	e5 2e       	mov	r14, r21
    186a:	f1 2c       	mov	r15, r1
    186c:	c8 01       	movw	r24, r16
    186e:	b7 01       	movw	r22, r14
    1870:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    1874:	8b 01       	movw	r16, r22
    1876:	0f 5f       	subi	r16, 0xFF	; 255
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:812
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
    187a:	64 97       	sbiw	r28, 0x14	; 20
    187c:	ce 01       	movw	r24, r28
    187e:	b6 01       	movw	r22, r12
    1880:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    1884:	4b 01       	movw	r8, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    1886:	ce 01       	movw	r24, r28
    1888:	b7 01       	movw	r22, r14
    188a:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    188e:	eb 01       	movw	r28, r22
    1890:	21 96       	adiw	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:812
    Serial.print(aMeasuredTicks * MICROS_PER_TICK, DEC);
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
    1892:	24 51       	subi	r18, 0x14	; 20
    1894:	31 09       	sbc	r19, r1
    1896:	c9 01       	movw	r24, r18
    1898:	b6 01       	movw	r22, r12
    189a:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    189e:	6b 01       	movw	r12, r22
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    18a0:	c9 01       	movw	r24, r18
    18a2:	b7 01       	movw	r22, r14
    18a4:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:499
 */
bool IRrecv::decodePulseDistanceData(uint8_t aNumberOfBits, uint8_t aStartOffset, uint16_t aBitMarkMicros, uint16_t aOneSpaceMicros,
        uint16_t aZeroSpaceMicros, bool aMSBfirst) {

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    uint32_t tDecodedData = 0;
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:502

    if (aMSBfirst) {
        for (uint_fast8_t i = 0; i < aNumberOfBits; i++) {
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:504
            // Check for constant length mark
            if (!matchMark(*tRawBufPointer, aBitMarkMicros)) {
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    18b8:	8a 15       	cp	r24, r10
    18ba:	9b 05       	cpc	r25, r11
    18bc:	70 f1       	brcs	.+92     	; 0x191a <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xf2>
    18be:	08 17       	cp	r16, r24
    18c0:	19 07       	cpc	r17, r25
    18c2:	58 f1       	brcs	.+86     	; 0x191a <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xf2>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:515
                return false;
            }
            tRawBufPointer++;

            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    18c8:	88 15       	cp	r24, r8
    18ca:	99 05       	cpc	r25, r9
    18cc:	18 f1       	brcs	.+70     	; 0x1914 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xec>
    18ce:	c8 17       	cp	r28, r24
    18d0:	d9 07       	cpc	r29, r25
    18d2:	28 f1       	brcs	.+74     	; 0x191e <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xf6>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:516
            }
            tRawBufPointer++;

            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 1;
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	44 1f       	adc	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	21 60       	ori	r18, 0x01	; 1
    18de:	34 96       	adiw	r30, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:502

    uint16_t *tRawBufPointer = &decodedIRData.rawDataPtr->rawbuf[aStartOffset];
    uint32_t tDecodedData = 0;

    if (aMSBfirst) {
        for (uint_fast8_t i = 0; i < aNumberOfBits; i++) {
    18e0:	af 5f       	subi	r26, 0xFF	; 255
    18e2:	7a 12       	cpse	r7, r26
    18e4:	e7 cf       	rjmp	.-50     	; 0x18b4 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0x8c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:569
            }
            tRawBufPointer++;
        }
        TRACE_PRINTLN("");
    }
    decodedIRData.decodedRawData = tDecodedData;
    18e6:	20 93 37 06 	sts	0x0637, r18	; 0x800637 <irrecv+0xa>
    18ea:	30 93 38 06 	sts	0x0638, r19	; 0x800638 <irrecv+0xb>
    18ee:	40 93 39 06 	sts	0x0639, r20	; 0x800639 <irrecv+0xc>
    18f2:	50 93 3a 06 	sts	0x063A, r21	; 0x80063a <irrecv+0xd>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:570
    return true;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:571
}
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	08 95       	ret
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    1914:	8c 15       	cp	r24, r12
    1916:	9d 05       	cpc	r25, r13
    1918:	10 f4       	brcc	.+4      	; 0x191e <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xf6>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:510
                DEBUG_PRINT(F("Mark="));
                DEBUG_PRINT(*tRawBufPointer * MICROS_PER_TICK);
                DEBUG_PRINT(F(" is not "));
                DEBUG_PRINT(aBitMarkMicros);
                DEBUG_PRINT(' ');
                return false;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	ed cf       	rjmp	.-38     	; 0x18f8 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xd0>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    191e:	68 17       	cp	r22, r24
    1920:	79 07       	cpc	r23, r25
    1922:	d8 f3       	brcs	.-10     	; 0x191a <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xf2>
_ZN6IRrecv23decodePulseDistanceDataEhhjjjb.constprop.56():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:519
            // Check for variable length space indicating a 0 or 1
            if (matchSpace(*tRawBufPointer, aOneSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 1;
                TRACE_PRINT('1');
            } else if (matchSpace(*tRawBufPointer, aZeroSpaceMicros)) {
                tDecodedData = (tDecodedData << 1) | 0;
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	44 1f       	adc	r20, r20
    192a:	55 1f       	adc	r21, r21
    192c:	d8 cf       	rjmp	.-80     	; 0x18de <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]+0xb6>

0000192e <Print::println(int, int) [clone .constprop.11]>:
_ZN5Print7printlnEii.constprop.11():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:159
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    193a:	6c 01       	movw	r12, r24
    193c:	99 0f       	add	r25, r25
    193e:	ee 08       	sbc	r14, r14
    1940:	ff 08       	sbc	r15, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1942:	f7 fe       	sbrs	r15, 7
    1944:	1f c0       	rjmp	.+62     	; 0x1984 <Print::println(int, int) [clone .constprop.11]+0x56>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1946:	6d e2       	ldi	r22, 0x2D	; 45
    1948:	8e e4       	ldi	r24, 0x4E	; 78
    194a:	94 e0       	ldi	r25, 0x04	; 4
    194c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <HardwareSerial::write(unsigned char)>
    1950:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    1952:	66 27       	eor	r22, r22
    1954:	77 27       	eor	r23, r23
    1956:	cb 01       	movw	r24, r22
    1958:	6c 19       	sub	r22, r12
    195a:	7d 09       	sbc	r23, r13
    195c:	8e 09       	sbc	r24, r14
    195e:	9f 09       	sbc	r25, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    1960:	4a e0       	ldi	r20, 0x0A	; 10
    1962:	0e 94 21 0a 	call	0x1442	; 0x1442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>
    1966:	c8 0f       	add	r28, r24
    1968:	d9 1f       	adc	r29, r25
write():
    196a:	81 e9       	ldi	r24, 0x91	; 145
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
_ZN5Print7printlnEii.constprop.11():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:164
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1972:	8c 0f       	add	r24, r28
    1974:	9d 1f       	adc	r25, r29
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1984:	4a e0       	ldi	r20, 0x0A	; 10
    1986:	c7 01       	movw	r24, r14
    1988:	b6 01       	movw	r22, r12
    198a:	0e 94 21 0a 	call	0x1442	; 0x1442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>
    198e:	ec 01       	movw	r28, r24
    1990:	ec cf       	rjmp	.-40     	; 0x196a <Print::println(int, int) [clone .constprop.11]+0x3c>

00001992 <setSegmentInt(int)>:
_Z13setSegmentInti():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:66
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:67
    19a0:	88 e4       	ldi	r24, 0x48	; 72
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:68
    19a8:	80 ea       	ldi	r24, 0xA0	; 160
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:69
    19b0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    19b4:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    19b8:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:70
    19bc:	f0 92 3d 03 	sts	0x033D, r15	; 0x80033d <__data_end+0x1>
    19c0:	e0 92 3c 03 	sts	0x033C, r14	; 0x80033c <__data_end>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:71
    19c4:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    19c8:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    19cc:	ca e0       	ldi	r28, 0x0A	; 10
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
    19d0:	be 01       	movw	r22, r28
    19d2:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    19d6:	0d e6       	ldi	r16, 0x6D	; 109
    19d8:	11 e0       	ldi	r17, 0x01	; 1
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	42 e0       	ldi	r20, 0x02	; 2
    19de:	68 2f       	mov	r22, r24
    19e0:	88 e4       	ldi	r24, 0x48	; 72
    19e2:	96 e0       	ldi	r25, 0x06	; 6
    19e4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:72
    19e8:	8a e0       	ldi	r24, 0x0A	; 10
    19ea:	e8 16       	cp	r14, r24
    19ec:	f1 04       	cpc	r15, r1
    19ee:	0c f4       	brge	.+2      	; 0x19f2 <setSegmentInt(int)+0x60>
    19f0:	46 c0       	rjmp	.+140    	; 0x1a7e <setSegmentInt(int)+0xec>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:74
    19f2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    19f6:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    19fa:	be 01       	movw	r22, r28
    19fc:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    1a00:	70 93 3d 03 	sts	0x033D, r23	; 0x80033d <__data_end+0x1>
    1a04:	60 93 3c 03 	sts	0x033C, r22	; 0x80033c <__data_end>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:75
    1a08:	80 ea       	ldi	r24, 0xA0	; 160
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:76
    1a10:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    1a14:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    1a18:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:77
    1a1c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    1a20:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    1a24:	be 01       	movw	r22, r28
    1a26:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	68 2f       	mov	r22, r24
    1a30:	88 e4       	ldi	r24, 0x48	; 72
    1a32:	96 e0       	ldi	r25, 0x06	; 6
    1a34:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:78
    1a38:	84 e6       	ldi	r24, 0x64	; 100
    1a3a:	e8 16       	cp	r14, r24
    1a3c:	f1 04       	cpc	r15, r1
    1a3e:	fc f0       	brlt	.+62     	; 0x1a7e <setSegmentInt(int)+0xec>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:80
    1a40:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    1a44:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    1a48:	be 01       	movw	r22, r28
    1a4a:	0e 94 b8 20 	call	0x4170	; 0x4170 <__divmodhi4>
    1a4e:	70 93 3d 03 	sts	0x033D, r23	; 0x80033d <__data_end+0x1>
    1a52:	60 93 3c 03 	sts	0x033C, r22	; 0x80033c <__data_end>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:81
    1a56:	80 ea       	ldi	r24, 0xA0	; 160
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:82
    1a5e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <__data_end>
    1a62:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <__data_end+0x1>
    1a66:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:83
    1a6a:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <__data_end>
    1a6e:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <__data_end+0x1>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	88 e4       	ldi	r24, 0x48	; 72
    1a78:	96 e0       	ldi	r25, 0x06	; 6
    1a7a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:87
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	08 95       	ret

00001a8c <WindDirectionControl()>:
_Z20WindDirectionControlv():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:237
    1a8c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <wind_flag>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	b1 f0       	breq	.+44     	; 0x1ac0 <WindDirectionControl()+0x34>
    1a94:	28 f0       	brcs	.+10     	; 0x1aa0 <WindDirectionControl()+0x14>
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	19 f1       	breq	.+70     	; 0x1ae0 <WindDirectionControl()+0x54>
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	59 f1       	breq	.+86     	; 0x1af4 <WindDirectionControl()+0x68>
    1a9e:	08 95       	ret
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:239
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	80 e1       	ldi	r24, 0x10	; 16
    1aa4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:240
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	8f e0       	ldi	r24, 0x0F	; 15
    1aac:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:103
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	89 e0       	ldi	r24, 0x09	; 9
    1ab4:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:106
	if (val == 0)
	{
		digitalWrite(pin, LOW);
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:110
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1aba:	89 e0       	ldi	r24, 0x09	; 9
    1abc:	0c 94 93 03 	jmp	0x726	; 0x726 <digitalWrite>
_Z20WindDirectionControlv():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:244
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	80 e1       	ldi	r24, 0x10	; 16
    1ac4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:245
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	8f e0       	ldi	r24, 0x0F	; 15
    1acc:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:103
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	89 e0       	ldi	r24, 0x09	; 9
    1ad4:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
    1ad8:	8c ed       	ldi	r24, 0xDC	; 220
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0c 94 c1 03 	jmp	0x782	; 0x782 <analogWrite.part.0.constprop.102>
_Z20WindDirectionControlv():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:249
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	8f e0       	ldi	r24, 0x0F	; 15
    1ae4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:103
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	89 e0       	ldi	r24, 0x09	; 9
    1aec:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:110
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	e3 cf       	rjmp	.-58     	; 0x1aba <WindDirectionControl()+0x2e>
_Z20WindDirectionControlv():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:253
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	80 e1       	ldi	r24, 0x10	; 16
    1af8:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:254
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	8f e0       	ldi	r24, 0x0F	; 15
    1b00:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
analogWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:103
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	89 e0       	ldi	r24, 0x09	; 9
    1b08:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
    1b0c:	84 eb       	ldi	r24, 0xB4	; 180
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	e5 cf       	rjmp	.-54     	; 0x1adc <WindDirectionControl()+0x50>

00001b12 <twi_stop>:
twi_stop():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:412
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1b12:	85 ed       	ldi	r24, 0xD5	; 213
    1b14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:418

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  // We cannot use micros() from an ISR, so approximate the timeout with cycle-counted delays
  const uint8_t us_per_loop = 8;
  uint32_t counter = (twi_timeout_us + us_per_loop - 1)/us_per_loop; // Round up
    1b18:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_timeout_us>
    1b1c:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    1b20:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    1b24:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    1b28:	07 96       	adiw	r24, 0x07	; 7
    1b2a:	a1 1d       	adc	r26, r1
    1b2c:	b1 1d       	adc	r27, r1
    1b2e:	23 e0       	ldi	r18, 0x03	; 3
    1b30:	b6 95       	lsr	r27
    1b32:	a7 95       	ror	r26
    1b34:	97 95       	ror	r25
    1b36:	87 95       	ror	r24
    1b38:	2a 95       	dec	r18
    1b3a:	d1 f7       	brne	.-12     	; 0x1b30 <twi_stop+0x1e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:419
  while(TWCR & _BV(TWSTO)){
    1b3c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1b40:	24 fd       	sbrc	r18, 4
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <twi_stop+0x38>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:432
      }
    }
  }

  // update twi state
  twi_state = TWI_READY;
    1b44:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_state>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:433
}
    1b48:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:420
  // TWINT is not set after a stop condition!
  // We cannot use micros() from an ISR, so approximate the timeout with cycle-counted delays
  const uint8_t us_per_loop = 8;
  uint32_t counter = (twi_timeout_us + us_per_loop - 1)/us_per_loop; // Round up
  while(TWCR & _BV(TWSTO)){
    if(twi_timeout_us > 0ul){
    1b4a:	40 91 d5 03 	lds	r20, 0x03D5	; 0x8003d5 <twi_timeout_us>
    1b4e:	50 91 d6 03 	lds	r21, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    1b52:	60 91 d7 03 	lds	r22, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    1b56:	70 91 d8 03 	lds	r23, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    1b5a:	45 2b       	or	r20, r21
    1b5c:	46 2b       	or	r20, r22
    1b5e:	47 2b       	or	r20, r23
    1b60:	69 f3       	breq	.-38     	; 0x1b3c <twi_stop+0x2a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:421
      if (counter > 0ul){
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	a1 05       	cpc	r26, r1
    1b66:	b1 05       	cpc	r27, r1
    1b68:	41 f0       	breq	.+16     	; 0x1b7a <twi_stop+0x68>
_delay_us():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b6a:	25 e1       	ldi	r18, 0x15	; 21
    1b6c:	2a 95       	dec	r18
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <twi_stop+0x5a>
    1b70:	00 00       	nop
twi_stop():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:423
        _delay_us(us_per_loop);
        counter--;
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	a1 09       	sbc	r26, r1
    1b76:	b1 09       	sbc	r27, r1
    1b78:	e1 cf       	rjmp	.-62     	; 0x1b3c <twi_stop+0x2a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:425
      } else {
        twi_handleTimeout(twi_do_reset_on_timeout);
    1b7a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_do_reset_on_timeout>
    1b7e:	0c 94 21 09 	jmp	0x1242	; 0x1242 <twi_handleTimeout>

00001b82 <MQ131Class::~MQ131Class()>:
_ZN10MQ131ClassD0Ev():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

void operator delete(void * ptr) noexcept {
  free(ptr);
    1b82:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <free>

00001b86 <__vector_19>:
__vector_19():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1ba8:	8e e4       	ldi	r24, 0x4E	; 78
    1baa:	94 e0       	ldi	r25, 0x04	; 4
    1bac:	0e 94 b2 02 	call	0x564	; 0x564 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:65
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_18>:
__vector_18():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	2f 93       	push	r18
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1be6:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <Serial+0x10>
    1bea:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <Serial+0x11>
    1bee:	80 81       	ld	r24, Z
    1bf0:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <Serial+0x16>
    1bf4:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <Serial+0x17>
    1bf8:	82 fd       	sbrc	r24, 2
    1bfa:	1b c0       	rjmp	.+54     	; 0x1c32 <__vector_18+0x60>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1bfc:	90 81       	ld	r25, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1bfe:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <Serial+0x19>
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c06:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <Serial+0x1a>
    1c0a:	82 17       	cp	r24, r18
    1c0c:	41 f0       	breq	.+16     	; 0x1c1e <__vector_18+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1c0e:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <Serial+0x19>
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	e2 5b       	subi	r30, 0xB2	; 178
    1c16:	fb 4f       	sbci	r31, 0xFB	; 251
    1c18:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1c1a:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <Serial+0x19>
__vector_18():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c32:	80 81       	ld	r24, Z
    1c34:	f4 cf       	rjmp	.-24     	; 0x1c1e <__vector_18+0x4c>

00001c36 <__vector_16>:
__vector_16():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:47
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1c36:	1f 92       	push	r1
    1c38:	0f 92       	push	r0
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	0f 92       	push	r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	8f 93       	push	r24
    1c46:	9f 93       	push	r25
    1c48:	af 93       	push	r26
    1c4a:	bf 93       	push	r27
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1c4c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_millis>
    1c50:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_millis+0x1>
    1c54:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_millis+0x2>
    1c58:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:51
	unsigned char f = timer0_fract;
    1c5c:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timer0_fract>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    1c60:	26 e0       	ldi	r18, 0x06	; 6
    1c62:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    1c64:	2d 37       	cpi	r18, 0x7D	; 125
    1c66:	58 f5       	brcc	.+86     	; 0x1cbe <__vector_16+0x88>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:53
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1c68:	02 96       	adiw	r24, 0x02	; 2
    1c6a:	a1 1d       	adc	r26, r1
    1c6c:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:60
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    1c6e:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <timer0_fract>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:61
	timer0_millis = m;
    1c72:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <timer0_millis>
    1c76:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <timer0_millis+0x1>
    1c7a:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <timer0_millis+0x2>
    1c7e:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:62
	timer0_overflow_count++;
    1c82:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timer0_overflow_count>
    1c86:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <timer0_overflow_count+0x1>
    1c8a:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <timer0_overflow_count+0x2>
    1c8e:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <timer0_overflow_count+0x3>
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	a1 1d       	adc	r26, r1
    1c96:	b1 1d       	adc	r27, r1
    1c98:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <timer0_overflow_count>
    1c9c:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <timer0_overflow_count+0x1>
    1ca0:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <timer0_overflow_count+0x2>
    1ca4:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:63
}
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:56
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1cbe:	29 e8       	ldi	r18, 0x89	; 137
    1cc0:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:57
		m += 1;
    1cc2:	03 96       	adiw	r24, 0x03	; 3
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	b1 1d       	adc	r27, r1
    1cc8:	d2 cf       	rjmp	.-92     	; 0x1c6e <__vector_16+0x38>

00001cca <__vector_24>:
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:504
  }
  return(flag);
}

ISR(TWI_vect)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  switch(TW_STATUS){
    1cec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1cf0:	88 7f       	andi	r24, 0xF8	; 248
    1cf2:	80 36       	cpi	r24, 0x60	; 96
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <__vector_24+0x2e>
    1cf6:	4a c0       	rjmp	.+148    	; 0x1d8c <__vector_24+0xc2>
    1cf8:	f0 f5       	brcc	.+124    	; 0x1d76 <__vector_24+0xac>
    1cfa:	88 32       	cpi	r24, 0x28	; 40
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <__vector_24+0x36>
    1cfe:	a7 c0       	rjmp	.+334    	; 0x1e4e <__vector_24+0x184>
    1d00:	18 f5       	brcc	.+70     	; 0x1d48 <__vector_24+0x7e>
    1d02:	80 31       	cpi	r24, 0x10	; 16
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <__vector_24+0x3e>
    1d06:	9b c0       	rjmp	.+310    	; 0x1e3e <__vector_24+0x174>
    1d08:	b8 f4       	brcc	.+46     	; 0x1d38 <__vector_24+0x6e>
    1d0a:	88 23       	and	r24, r24
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <__vector_24+0x46>
    1d0e:	f9 c0       	rjmp	.+498    	; 0x1f02 <__vector_24+0x238>
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <__vector_24+0x4c>
    1d14:	94 c0       	rjmp	.+296    	; 0x1e3e <__vector_24+0x174>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:666
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1d16:	ff 91       	pop	r31
    1d18:	ef 91       	pop	r30
    1d1a:	bf 91       	pop	r27
    1d1c:	af 91       	pop	r26
    1d1e:	9f 91       	pop	r25
    1d20:	8f 91       	pop	r24
    1d22:	7f 91       	pop	r23
    1d24:	6f 91       	pop	r22
    1d26:	5f 91       	pop	r21
    1d28:	4f 91       	pop	r20
    1d2a:	3f 91       	pop	r19
    1d2c:	2f 91       	pop	r18
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d38:	88 31       	cpi	r24, 0x18	; 24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <__vector_24+0x74>
    1d3c:	88 c0       	rjmp	.+272    	; 0x1e4e <__vector_24+0x184>
    1d3e:	80 32       	cpi	r24, 0x20	; 32
    1d40:	51 f7       	brne	.-44     	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:540
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1d42:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <twi_error>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <__vector_24+0xa6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d48:	80 34       	cpi	r24, 0x40	; 64
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <__vector_24+0x84>
    1d4c:	9d c0       	rjmp	.+314    	; 0x1e88 <__vector_24+0x1be>
    1d4e:	40 f4       	brcc	.+16     	; 0x1d60 <__vector_24+0x96>
    1d50:	80 33       	cpi	r24, 0x30	; 48
    1d52:	b9 f3       	breq	.-18     	; 0x1d42 <__vector_24+0x78>
    1d54:	88 33       	cpi	r24, 0x38	; 56
    1d56:	f9 f6       	brne	.-66     	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:544
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d58:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <twi_error>
twi_reply():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:397
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1d5c:	85 ec       	ldi	r24, 0xC5	; 197
    1d5e:	b0 c0       	rjmp	.+352    	; 0x1ec0 <__vector_24+0x1f6>
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d60:	80 35       	cpi	r24, 0x50	; 80
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <__vector_24+0x9c>
    1d64:	85 c0       	rjmp	.+266    	; 0x1e70 <__vector_24+0x1a6>
    1d66:	88 35       	cpi	r24, 0x58	; 88
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_24+0xa2>
    1d6a:	96 c0       	rjmp	.+300    	; 0x1e98 <__vector_24+0x1ce>
    1d6c:	88 34       	cpi	r24, 0x48	; 72
    1d6e:	99 f6       	brne	.-90     	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:663
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1d70:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <twi_stop>
    1d74:	d0 cf       	rjmp	.-96     	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d76:	88 39       	cpi	r24, 0x98	; 152
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <__vector_24+0xb2>
    1d7a:	8c c0       	rjmp	.+280    	; 0x1e94 <__vector_24+0x1ca>
    1d7c:	38 f5       	brcc	.+78     	; 0x1dcc <__vector_24+0x102>
    1d7e:	88 37       	cpi	r24, 0x78	; 120
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <__vector_24+0xc2>
    1d82:	50 f4       	brcc	.+20     	; 0x1d98 <__vector_24+0xce>
    1d84:	88 36       	cpi	r24, 0x68	; 104
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <__vector_24+0xc2>
    1d88:	80 37       	cpi	r24, 0x70	; 112
    1d8a:	29 f6       	brne	.-118    	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:586
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_state>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:588
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1d92:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <twi_rxBufferIndex>
    1d96:	57 c0       	rjmp	.+174    	; 0x1e46 <__vector_24+0x17c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d98:	88 38       	cpi	r24, 0x88	; 136
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__vector_24+0xd4>
    1d9c:	7b c0       	rjmp	.+246    	; 0x1e94 <__vector_24+0x1ca>
    1d9e:	80 39       	cpi	r24, 0x90	; 144
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <__vector_24+0xde>
    1da2:	80 38       	cpi	r24, 0x80	; 128
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <__vector_24+0xde>
    1da6:	b7 cf       	rjmp	.-146    	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:594
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1da8:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_rxBufferIndex>
    1dac:	80 32       	cpi	r24, 0x20	; 32
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <__vector_24+0xe8>
    1db0:	71 c0       	rjmp	.+226    	; 0x1e94 <__vector_24+0x1ca>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:596
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1db2:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_rxBufferIndex>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	8e 0f       	add	r24, r30
    1dba:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_rxBufferIndex>
    1dbe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	ef 59       	subi	r30, 0x9F	; 159
    1dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc8:	80 83       	st	Z, r24
    1dca:	3d c0       	rjmp	.+122    	; 0x1e46 <__vector_24+0x17c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1dcc:	80 3b       	cpi	r24, 0xB0	; 176
    1dce:	39 f0       	breq	.+14     	; 0x1dde <__vector_24+0x114>
    1dd0:	e0 f4       	brcc	.+56     	; 0x1e0a <__vector_24+0x140>
    1dd2:	80 3a       	cpi	r24, 0xA0	; 160
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <__vector_24+0x10e>
    1dd6:	79 c0       	rjmp	.+242    	; 0x1eca <__vector_24+0x200>
    1dd8:	88 3a       	cpi	r24, 0xA8	; 168
    1dda:	09 f0       	breq	.+2      	; 0x1dde <__vector_24+0x114>
    1ddc:	9c cf       	rjmp	.-200    	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:625
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1dde:	84 e0       	ldi	r24, 0x04	; 4
    1de0:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_state>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:627
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1de4:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <twi_txBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:629
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1de8:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:632
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1dec:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <twi_onSlaveTransmit>
    1df0:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <twi_onSlaveTransmit+0x1>
    1df4:	09 95       	icall
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:634
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1df6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_txBufferLength>
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <__vector_24+0x152>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:635
        twi_txBufferLength = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <twi_txBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:636
        twi_txBuffer[0] = 0x00;
    1e04:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <twi_txBuffer>
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <__vector_24+0x152>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:505
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e0a:	80 3c       	cpi	r24, 0xC0	; 192
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <__vector_24+0x146>
    1e0e:	a6 cf       	rjmp	.-180    	; 0x1d5c <__vector_24+0x92>
    1e10:	88 3c       	cpi	r24, 0xC8	; 200
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <__vector_24+0x14c>
    1e14:	a3 cf       	rjmp	.-186    	; 0x1d5c <__vector_24+0x92>
    1e16:	88 3b       	cpi	r24, 0xB8	; 184
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <__vector_24+0x152>
    1e1a:	7d cf       	rjmp	.-262    	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:642
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1e1c:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <twi_txBufferIndex>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	8e 0f       	add	r24, r30
    1e24:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_txBufferIndex>
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	e1 5c       	subi	r30, 0xC1	; 193
    1e2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:644
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1e34:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <twi_txBufferIndex>
    1e38:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_txBufferLength>
    1e3c:	29 c0       	rjmp	.+82     	; 0x1e90 <__vector_24+0x1c6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:510
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e3e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_slarw>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:520
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:397
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e46:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:399
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1e4c:	64 cf       	rjmp	.-312    	; 0x1d16 <__vector_24+0x4c>
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:518

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e4e:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    1e52:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_masterBufferLength>
    1e56:	98 17       	cp	r25, r24
    1e58:	58 f5       	brcc	.+86     	; 0x1eb0 <__vector_24+0x1e6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:520
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e5a:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	8e 0f       	add	r24, r30
    1e62:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_masterBufferIndex>
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	e3 55       	subi	r30, 0x53	; 83
    1e6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e6c:	80 81       	ld	r24, Z
    1e6e:	e9 cf       	rjmp	.-46     	; 0x1e42 <__vector_24+0x178>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:551
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e70:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	8e 0f       	add	r24, r30
    1e78:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_masterBufferIndex>
    1e7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	e3 55       	subi	r30, 0x53	; 83
    1e84:	fc 4f       	sbci	r31, 0xFC	; 252
    1e86:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:555
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e88:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    1e8c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:644
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1e90:	98 17       	cp	r25, r24
    1e92:	c8 f2       	brcs	.-78     	; 0x1e46 <__vector_24+0x17c>
twi_reply():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:399
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e94:	85 e8       	ldi	r24, 0x85	; 133
    1e96:	d8 cf       	rjmp	.-80     	; 0x1e48 <__vector_24+0x17e>
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:563
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e98:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	8e 0f       	add	r24, r30
    1ea0:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_masterBufferIndex>
    1ea4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	e3 55       	subi	r30, 0x53	; 83
    1eac:	fc 4f       	sbci	r31, 0xFC	; 252
    1eae:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:564
      if (twi_sendStop){
    1eb0:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_sendStop>
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	5c cf       	rjmp	.-328    	; 0x1d70 <__vector_24+0xa6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:567
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <twi_inRepStart>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:571
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1ebe:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:397
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ec0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:655
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ec4:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_state>
    1ec8:	26 cf       	rjmp	.-436    	; 0x1d16 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:444
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1eca:	85 ec       	ldi	r24, 0xC5	; 197
    1ecc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:447

  // update twi state
  twi_state = TWI_READY;
    1ed0:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_state>
__vector_24():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:607
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ed4:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_rxBufferIndex>
    1ed8:	80 32       	cpi	r24, 0x20	; 32
    1eda:	30 f4       	brcc	.+12     	; 0x1ee8 <__vector_24+0x21e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:608
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1edc:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_rxBufferIndex>
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	ef 59       	subi	r30, 0x9F	; 159
    1ee4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ee6:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:611
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ee8:	60 91 81 03 	lds	r22, 0x0381	; 0x800381 <twi_rxBufferIndex>
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <twi_onSlaveReceive>
    1ef2:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <twi_onSlaveReceive+0x1>
    1ef6:	81 e6       	ldi	r24, 0x61	; 97
    1ef8:	93 e0       	ldi	r25, 0x03	; 3
    1efa:	09 95       	icall
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:613
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1efc:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <twi_rxBufferIndex>
    1f00:	0a cf       	rjmp	.-492    	; 0x1d16 <__vector_24+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:662

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1f02:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <twi_error>
    1f06:	34 cf       	rjmp	.-408    	; 0x1d70 <__vector_24+0xa6>

00001f08 <__vector_8>:
__vector_8():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1261
#if defined(TIMER_INTR_NAME)
ISR (TIMER_INTR_NAME) // for ISR definitions
#else
ISR () // for functions definitions which are called by separate (board specific) ISR
#endif
{
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1271

    TIMER_RESET_INTR_PENDING;// reset TickCounterForISR interrupt flag if required (currently only for Teensy and ATmega4809)

// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
#if defined(__AVR__)
    uint8_t tIRInputLevel = *irparams.IRReceivePinPortInputRegister & irparams.IRReceivePinMask;
    1f2a:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <irparams+0x2>
    1f2e:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <irparams+0x3>
    1f32:	90 81       	ld	r25, Z
    1f34:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <irparams+0x4>
    1f38:	98 23       	and	r25, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1279
#endif

    /*
     * Increase TickCounter and clip it at maximum 0xFFFF / 3.2 seconds at 50 us ticks
     */
    if (irparams.TickCounterForISR < 0xFFFF) {
    1f3a:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <irparams+0x5>
    1f3e:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <irparams+0x6>
    1f42:	2f 3f       	cpi	r18, 0xFF	; 255
    1f44:	32 07       	cpc	r19, r18
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <__vector_8+0x4c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1280
        irparams.TickCounterForISR++;  // One more 50uS tick
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	30 93 62 05 	sts	0x0562, r19	; 0x800562 <irparams+0x6>
    1f50:	20 93 61 05 	sts	0x0561, r18	; 0x800561 <irparams+0x5>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1289
     * Due to a ESP32 compiler bug https://github.com/espressif/esp-idf/issues/1552 no switch statements are possible for ESP32
     * So we change the code to if / else if
     */
//    switch (irparams.StateForISR) {
//......................................................................
    if (irparams.StateForISR == IR_REC_STATE_IDLE) { // In the middle of a gap or just resumed (and maybe in the middle of a transmission
    1f54:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	35 c0       	rjmp	.+106    	; 0x1fc6 <__vector_8+0xbe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1290
        if (tIRInputLevel == INPUT_MARK) {
    1f5c:	91 11       	cpse	r25, r1
    1f5e:	16 c0       	rjmp	.+44     	; 0x1f8c <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1292
            // check if we did not start in the middle of a transmission by checking the minimum length of leading space
            if (irparams.TickCounterForISR > RECORD_GAP_TICKS) {
    1f60:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <irparams+0x5>
    1f64:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <irparams+0x6>
    1f68:	25 36       	cpi	r18, 0x65	; 101
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	58 f0       	brcs	.+22     	; 0x1f84 <__vector_8+0x7c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1298
                // Gap just ended; Record gap duration + start recording transmission
                // Initialize all state machine variables
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//                digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
                irparams.OverflowFlag = false;
    1f6e:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1299
                irparams.rawbuf[0] = irparams.TickCounterForISR;
    1f72:	30 93 66 05 	sts	0x0566, r19	; 0x800566 <irparams+0xa>
    1f76:	20 93 65 05 	sts	0x0565, r18	; 0x800565 <irparams+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1300
                irparams.rawlen = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1301
                irparams.StateForISR = IR_REC_STATE_MARK;
    1f80:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <irparams>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1303
            } // otherwise stay in idle state
            irparams.TickCounterForISR = 0;// reset counter in both cases
    1f84:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <irparams+0x6>
    1f88:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <irparams+0x5>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1355
            irparams.TickCounterForISR = 0;
        }
    }

#if !defined(DISABLE_LED_FEEDBACK_FOR_RECEIVE)
    if (FeedbackLEDControl.LedFeedbackEnabled) {
    1f8c:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <FeedbackLEDControl+0x1>
    1f90:	88 23       	and	r24, r24
    1f92:	41 f0       	breq	.+16     	; 0x1fa4 <__vector_8+0x9c>
    1f94:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <FeedbackLEDControl>
setFeedbackLED():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:85
#if defined(ESP32)
IRAM_ATTR
#endif
void setFeedbackLED(bool aSwitchLedOn) {
    if (FeedbackLEDControl.LedFeedbackEnabled) {
        if (aSwitchLedOn) {
    1f98:	91 11       	cpse	r25, r1
    1f9a:	61 c0       	rjmp	.+194    	; 0x205e <__vector_8+0x156>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:90
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
#if defined(FEEDBACK_LED_IS_ACTIVE_LOW)
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, LOW); // Turn user defined pin LED on
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED on
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:86
IRAM_ATTR
#endif
void setFeedbackLED(bool aSwitchLedOn) {
    if (FeedbackLEDControl.LedFeedbackEnabled) {
        if (aSwitchLedOn) {
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	61 c0       	rjmp	.+194    	; 0x2064 <__vector_8+0x15c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:94
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED on
#endif
#ifdef FEEDBACK_LED_ON
            } else {
                FEEDBACK_LED_ON();   // if no user defined LED pin, turn default LED pin for the hardware on
    1fa2:	2d 9a       	sbi	0x05, 5	; 5
__vector_8():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1363
#endif

#ifdef IR_MEASURE_TIMING
    digitalWriteFast(IR_TIMING_TEST_PIN, LOW); // 2 clock cycles
#endif
}
    1fa4:	ff 91       	pop	r31
    1fa6:	ef 91       	pop	r30
    1fa8:	bf 91       	pop	r27
    1faa:	af 91       	pop	r26
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	7f 91       	pop	r23
    1fb2:	6f 91       	pop	r22
    1fb4:	5f 91       	pop	r21
    1fb6:	4f 91       	pop	r20
    1fb8:	3f 91       	pop	r19
    1fba:	2f 91       	pop	r18
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1306
                irparams.StateForISR = IR_REC_STATE_MARK;
            } // otherwise stay in idle state
            irparams.TickCounterForISR = 0;// reset counter in both cases
        }

    } else if (irparams.StateForISR == IR_REC_STATE_MARK) {  // Timing Mark
    1fc6:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	a1 f4       	brne	.+40     	; 0x1ff6 <__vector_8+0xee>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1307
        if (tIRInputLevel != INPUT_MARK) {   // Mark ended; Record time
    1fce:	99 23       	and	r25, r25
    1fd0:	e9 f2       	breq	.-70     	; 0x1f8c <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1311
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//            digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
            irparams.rawbuf[irparams.rawlen++] = irparams.TickCounterForISR;
    1fd2:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <irparams+0x8>
    1fd6:	8e 0f       	add	r24, r30
    1fd8:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <irparams+0x8>
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e4 5a       	subi	r30, 0xA4	; 164
    1fe4:	fa 4f       	sbci	r31, 0xFA	; 250
    1fe6:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <irparams+0x5>
    1fea:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <irparams+0x6>
    1fee:	32 87       	std	Z+10, r19	; 0x0a
    1ff0:	21 87       	std	Z+9, r18	; 0x09
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1312
            irparams.StateForISR = IR_REC_STATE_SPACE;
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	c5 cf       	rjmp	.-118    	; 0x1f80 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1316
            irparams.TickCounterForISR = 0;
        }

    } else if (irparams.StateForISR == IR_REC_STATE_SPACE) {  // Timing Space
    1ff6:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	39 f5       	brne	.+78     	; 0x204c <__vector_8+0x144>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1317
        if (tIRInputLevel == INPUT_MARK) {  // Space just ended; Record time
    1ffe:	91 11       	cpse	r25, r1
    2000:	19 c0       	rjmp	.+50     	; 0x2034 <__vector_8+0x12c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1318
            if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
    2002:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1320
                // Flag up a read OverflowFlag; Stop the State Machine
                irparams.OverflowFlag = true;
    2006:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1318
            irparams.TickCounterForISR = 0;
        }

    } else if (irparams.StateForISR == IR_REC_STATE_SPACE) {  // Timing Space
        if (tIRInputLevel == INPUT_MARK) {  // Space just ended; Record time
            if (irparams.rawlen >= RAW_BUFFER_LENGTH) {
    2008:	e4 36       	cpi	r30, 0x64	; 100
    200a:	20 f0       	brcs	.+8      	; 0x2014 <__vector_8+0x10c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1320
                // Flag up a read OverflowFlag; Stop the State Machine
                irparams.OverflowFlag = true;
    200c:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1321
                irparams.StateForISR = IR_REC_STATE_STOP;
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	b6 cf       	rjmp	.-148    	; 0x1f80 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1326
            } else {
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//                digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
                irparams.rawbuf[irparams.rawlen++] = irparams.TickCounterForISR;
    2014:	8e 0f       	add	r24, r30
    2016:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <irparams+0x8>
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	e4 5a       	subi	r30, 0xA4	; 164
    2022:	fa 4f       	sbci	r31, 0xFA	; 250
    2024:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <irparams+0x5>
    2028:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <irparams+0x6>
    202c:	32 87       	std	Z+10, r19	; 0x0a
    202e:	21 87       	std	Z+9, r18	; 0x09
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1327
                irparams.StateForISR = IR_REC_STATE_MARK;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	a6 cf       	rjmp	.-180    	; 0x1f80 <__vector_8+0x78>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1331
            }
            irparams.TickCounterForISR = 0;

        } else if (irparams.TickCounterForISR > RECORD_GAP_TICKS) {
    2034:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <irparams+0x5>
    2038:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <irparams+0x6>
    203c:	25 36       	cpi	r18, 0x65	; 101
    203e:	31 05       	cpc	r19, r1
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__vector_8+0x13c>
    2042:	a4 cf       	rjmp	.-184    	; 0x1f8c <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1338
             * Current code is ready for processing!
             * We received a long space, which indicates gap between codes.
             * Switch to IR_REC_STATE_STOP
             * Don't reset TickCounterForISR; keep counting width of next leading space
             */
            irparams.StateForISR = IR_REC_STATE_STOP;
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <irparams>
    204a:	a0 cf       	rjmp	.-192    	; 0x1f8c <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1340
        }
    } else if (irparams.StateForISR == IR_REC_STATE_STOP) {
    204c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	09 f0       	breq	.+2      	; 0x2056 <__vector_8+0x14e>
    2054:	9b cf       	rjmp	.-202    	; 0x1f8c <__vector_8+0x84>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1348
         * stay here until resume() is called, which switches state to IR_REC_STATE_IDLE
         */
#if defined(IR_MEASURE_TIMING) && defined(IR_TIMING_TEST_PIN)
//        digitalWriteFast(IR_TIMING_TEST_PIN, HIGH); // 2 clock cycles
#endif
        if (tIRInputLevel == INPUT_MARK) {
    2056:	99 23       	and	r25, r25
    2058:	09 f4       	brne	.+2      	; 0x205c <__vector_8+0x154>
    205a:	94 cf       	rjmp	.-216    	; 0x1f84 <__vector_8+0x7c>
    205c:	97 cf       	rjmp	.-210    	; 0x1f8c <__vector_8+0x84>
setFeedbackLED():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:98
#endif
            }
        } else {
            if (FeedbackLEDControl.FeedbackLEDPin != 0) {
    205e:	88 23       	and	r24, r24
    2060:	21 f0       	breq	.+8      	; 0x206a <__vector_8+0x162>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:102
#if defined(FEEDBACK_LED_IS_ACTIVE_LOW)
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, HIGH); // Turn user defined pin LED off
#else
                digitalWrite(FeedbackLEDControl.FeedbackLEDPin, LOW); // Turn user defined pin LED off
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
    2068:	9d cf       	rjmp	.-198    	; 0x1fa4 <__vector_8+0x9c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRFeedbackLED.cpp.h:106
#endif
#ifdef FEEDBACK_LED_OFF
            } else {
                FEEDBACK_LED_OFF();   // if no user defined LED pin, turn default LED pin for the hardware on
    206a:	2d 98       	cbi	0x05, 5	; 5
    206c:	9b cf       	rjmp	.-202    	; 0x1fa4 <__vector_8+0x9c>

0000206e <IRrecv::setReceivePin(unsigned char) [clone .constprop.75]>:
_ZN6IRrecv13setReceivePinEh.constprop.75():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:107

/**
 * Sets / changes the receiver pin number
 */
void IRrecv::setReceivePin(uint8_t aReceivePinNumber) {
    irparams.IRReceivePin = aReceivePinNumber;
    206e:	ac e5       	ldi	r26, 0x5C	; 92
    2070:	b5 e0       	ldi	r27, 0x05	; 5
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	8c 93       	st	X, r24
    2076:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:109
#if defined(__AVR__)
    irparams.IRReceivePinMask = digitalPinToBitMask(aReceivePinNumber);
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	e6 50       	subi	r30, 0x06	; 6
    207e:	fe 4f       	sbci	r31, 0xFE	; 254
    2080:	e4 91       	lpm	r30, Z
    2082:	14 96       	adiw	r26, 0x04	; 4
    2084:	ec 93       	st	X, r30
    2086:	14 97       	sbiw	r26, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:110
    irparams.IRReceivePinPortInputRegister = portInputRegister(digitalPinToPort(aReceivePinNumber));
    2088:	fc 01       	movw	r30, r24
    208a:	ea 51       	subi	r30, 0x1A	; 26
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	e4 91       	lpm	r30, Z
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	e4 52       	subi	r30, 0x24	; 36
    2098:	fe 4f       	sbci	r31, 0xFE	; 254
    209a:	85 91       	lpm	r24, Z+
    209c:	94 91       	lpm	r25, Z
    209e:	13 96       	adiw	r26, 0x03	; 3
    20a0:	9c 93       	st	X, r25
    20a2:	8e 93       	st	-X, r24
    20a4:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:112
#endif
}
    20a6:	08 95       	ret

000020a8 <global constructors keyed to 65535_0_dust_O3_8segment_IR_plasma.cpp.o.6740>:
_GLOBAL__I_65535_0_dust_O3_8segment_IR_plasma.cpp.o.6740():
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	ee e4       	ldi	r30, 0x4E	; 78
    20b8:	f4 e0       	ldi	r31, 0x04	; 4
    20ba:	13 82       	std	Z+3, r1	; 0x03
    20bc:	12 82       	std	Z+2, r1	; 0x02
    20be:	88 ee       	ldi	r24, 0xE8	; 232
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	a0 e0       	ldi	r26, 0x00	; 0
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	84 83       	std	Z+4, r24	; 0x04
    20c8:	95 83       	std	Z+5, r25	; 0x05
    20ca:	a6 83       	std	Z+6, r26	; 0x06
    20cc:	b7 83       	std	Z+7, r27	; 0x07
    20ce:	21 e1       	ldi	r18, 0x11	; 17
    20d0:	31 e0       	ldi	r19, 0x01	; 1
    20d2:	31 83       	std	Z+1, r19	; 0x01
    20d4:	20 83       	st	Z, r18
    20d6:	25 ec       	ldi	r18, 0xC5	; 197
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	35 87       	std	Z+13, r19	; 0x0d
    20dc:	24 87       	std	Z+12, r18	; 0x0c
    20de:	24 ec       	ldi	r18, 0xC4	; 196
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	37 87       	std	Z+15, r19	; 0x0f
    20e4:	26 87       	std	Z+14, r18	; 0x0e
    20e6:	20 ec       	ldi	r18, 0xC0	; 192
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	31 8b       	std	Z+17, r19	; 0x11
    20ec:	20 8b       	std	Z+16, r18	; 0x10
    20ee:	21 ec       	ldi	r18, 0xC1	; 193
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	33 8b       	std	Z+19, r19	; 0x13
    20f4:	22 8b       	std	Z+18, r18	; 0x12
    20f6:	22 ec       	ldi	r18, 0xC2	; 194
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	35 8b       	std	Z+21, r19	; 0x15
    20fc:	24 8b       	std	Z+20, r18	; 0x14
    20fe:	26 ec       	ldi	r18, 0xC6	; 198
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	37 8b       	std	Z+23, r19	; 0x17
    2104:	26 8b       	std	Z+22, r18	; 0x16
    2106:	11 8e       	std	Z+25, r1	; 0x19
    2108:	12 8e       	std	Z+26, r1	; 0x1a
    210a:	13 8e       	std	Z+27, r1	; 0x1b
    210c:	14 8e       	std	Z+28, r1	; 0x1c
    210e:	eb ee       	ldi	r30, 0xEB	; 235
    2110:	f4 e0       	ldi	r31, 0x04	; 4
    2112:	13 82       	std	Z+3, r1	; 0x03
    2114:	12 82       	std	Z+2, r1	; 0x02
    2116:	84 83       	std	Z+4, r24	; 0x04
    2118:	95 83       	std	Z+5, r25	; 0x05
    211a:	a6 83       	std	Z+6, r26	; 0x06
    211c:	b7 83       	std	Z+7, r27	; 0x07
    211e:	83 e2       	ldi	r24, 0x23	; 35
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
    2126:	e7 ef       	ldi	r30, 0xF7	; 247
    2128:	f4 e0       	ldi	r31, 0x04	; 4
    212a:	85 e3       	ldi	r24, 0x35	; 53
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	15 82       	std	Z+5, r1	; 0x05
    2134:	14 82       	std	Z+4, r1	; 0x04
    2136:	16 82       	std	Z+6, r1	; 0x06
    2138:	8f ef       	ldi	r24, 0xFF	; 255
    213a:	87 83       	std	Z+7, r24	; 0x07
    213c:	80 87       	std	Z+8, r24	; 0x08
    213e:	8f ef       	ldi	r24, 0xFF	; 255
    2140:	9f ef       	ldi	r25, 0xFF	; 255
    2142:	dc 01       	movw	r26, r24
    2144:	85 87       	std	Z+13, r24	; 0x0d
    2146:	96 87       	std	Z+14, r25	; 0x0e
    2148:	a7 87       	std	Z+15, r26	; 0x0f
    214a:	b0 8b       	std	Z+16, r27	; 0x10
    214c:	81 8b       	std	Z+17, r24	; 0x11
    214e:	92 8b       	std	Z+18, r25	; 0x12
    2150:	a3 8b       	std	Z+19, r26	; 0x13
    2152:	b4 8b       	std	Z+20, r27	; 0x14
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e8       	ldi	r26, 0x80	; 128
    215a:	bf eb       	ldi	r27, 0xBF	; 191
    215c:	85 8b       	std	Z+21, r24	; 0x15
    215e:	96 8b       	std	Z+22, r25	; 0x16
    2160:	a7 8b       	std	Z+23, r26	; 0x17
    2162:	b0 8f       	std	Z+24, r27	; 0x18
    2164:	81 8f       	std	Z+25, r24	; 0x19
    2166:	92 8f       	std	Z+26, r25	; 0x1a
    2168:	a3 8f       	std	Z+27, r26	; 0x1b
    216a:	b4 8f       	std	Z+28, r27	; 0x1c
    216c:	84 e1       	ldi	r24, 0x14	; 20
    216e:	85 8f       	std	Z+29, r24	; 0x1d
    2170:	81 e4       	ldi	r24, 0x41	; 65
    2172:	86 8f       	std	Z+30, r24	; 0x1e
    2174:	80 e4       	ldi	r24, 0x40	; 64
    2176:	92 e4       	ldi	r25, 0x42	; 66
    2178:	af e0       	ldi	r26, 0x0F	; 15
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	81 87       	std	Z+9, r24	; 0x09
    217e:	92 87       	std	Z+10, r25	; 0x0a
    2180:	a3 87       	std	Z+11, r26	; 0x0b
    2182:	b4 87       	std	Z+12, r27	; 0x0c
    2184:	e6 e1       	ldi	r30, 0x16	; 22
    2186:	f5 e0       	ldi	r31, 0x05	; 5
    2188:	16 82       	std	Z+6, r1	; 0x06
    218a:	17 82       	std	Z+7, r1	; 0x07
    218c:	10 86       	std	Z+8, r1	; 0x08
    218e:	11 86       	std	Z+9, r1	; 0x09
    2190:	12 86       	std	Z+10, r1	; 0x0a
    2192:	13 86       	std	Z+11, r1	; 0x0b
    2194:	14 86       	std	Z+12, r1	; 0x0c
    2196:	15 86       	std	Z+13, r1	; 0x0d
    2198:	16 86       	std	Z+14, r1	; 0x0e
    219a:	17 86       	std	Z+15, r1	; 0x0f
    219c:	10 8a       	std	Z+16, r1	; 0x10
    219e:	11 8a       	std	Z+17, r1	; 0x11
    21a0:	12 8a       	std	Z+18, r1	; 0x12
    21a2:	13 8a       	std	Z+19, r1	; 0x13
    21a4:	14 8a       	std	Z+20, r1	; 0x14
    21a6:	15 8a       	std	Z+21, r1	; 0x15
    21a8:	8c e5       	ldi	r24, 0x5C	; 92
    21aa:	e8 2e       	mov	r14, r24
    21ac:	85 e0       	ldi	r24, 0x05	; 5
    21ae:	f8 2e       	mov	r15, r24
    21b0:	f0 92 61 06 	sts	0x0661, r15	; 0x800661 <IrReceiver+0xf>
    21b4:	e0 92 60 06 	sts	0x0660, r14	; 0x800660 <IrReceiver+0xe>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	0e 94 37 10 	call	0x206e	; 0x206e <IRrecv::setReceivePin(unsigned char) [clone .constprop.75]>
    21be:	00 e5       	ldi	r16, 0x50	; 80
    21c0:	16 e0       	ldi	r17, 0x06	; 6
    21c2:	f8 01       	movw	r30, r16
    21c4:	10 82       	st	Z, r1
    21c6:	11 82       	std	Z+1, r1	; 0x01
    21c8:	c8 e4       	ldi	r28, 0x48	; 72
    21ca:	d6 e0       	ldi	r29, 0x06	; 6
    21cc:	8d e3       	ldi	r24, 0x3D	; 61
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	99 83       	std	Y+1, r25	; 0x01
    21d2:	88 83       	st	Y, r24
    21d4:	98 e0       	ldi	r25, 0x08	; 8
    21d6:	d9 2e       	mov	r13, r25
    21d8:	db 82       	std	Y+3, r13	; 0x03
    21da:	8b e0       	ldi	r24, 0x0B	; 11
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	9c e0       	ldi	r25, 0x0C	; 12
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8f 83       	std	Y+7, r24	; 0x07
    21e4:	84 e0       	ldi	r24, 0x04	; 4
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	8c 83       	std	Y+4, r24	; 0x04
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	8b e0       	ldi	r24, 0x0B	; 11
    21ee:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	8c e0       	ldi	r24, 0x0C	; 12
    21f6:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	8b e0       	ldi	r24, 0x0B	; 11
    21fe:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	8b e0       	ldi	r24, 0x0B	; 11
    2206:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	8c e0       	ldi	r24, 0x0C	; 12
    220e:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
    2212:	89 e6       	ldi	r24, 0x69	; 105
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	99 83       	std	Y+1, r25	; 0x01
    2218:	88 83       	st	Y, r24
    221a:	ce 01       	movw	r24, r28
    221c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
    2220:	db 82       	std	Y+3, r13	; 0x03
    2222:	47 e0       	ldi	r20, 0x07	; 7
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	ce 01       	movw	r24, r28
    2228:	0e 94 aa 07 	call	0xf54	; 0xf54 <TM1650::setupDisplay(bool, unsigned char)>
    222c:	f0 92 3c 06 	sts	0x063C, r15	; 0x80063c <irrecv+0xf>
    2230:	e0 92 3b 06 	sts	0x063B, r14	; 0x80063b <irrecv+0xe>
    2234:	84 e1       	ldi	r24, 0x14	; 20
    2236:	0e 94 37 10 	call	0x206e	; 0x206e <IRrecv::setReceivePin(unsigned char) [clone .constprop.75]>
    223a:	f8 01       	movw	r30, r16
    223c:	10 82       	st	Z, r1
    223e:	11 82       	std	Z+1, r1	; 0x01
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	08 95       	ret

00002250 <main>:
main():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2250:	78 94       	sei
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2252:	84 b5       	in	r24, 0x24	; 36
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    2258:	84 b5       	in	r24, 0x24	; 36
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    225e:	85 b5       	in	r24, 0x25	; 37
    2260:	82 60       	ori	r24, 0x02	; 2
    2262:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    2264:	85 b5       	in	r24, 0x25	; 37
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    226a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2274:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2278:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    227c:	82 60       	ori	r24, 0x02	; 2
    227e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2282:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2286:	81 60       	ori	r24, 0x01	; 1
    2288:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    228c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2290:	81 60       	ori	r24, 0x01	; 1
    2292:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2296:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    229a:	84 60       	ori	r24, 0x04	; 4
    229c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    22a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:360
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    22aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22ae:	84 60       	ori	r24, 0x04	; 4
    22b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:361
		sbi(ADCSRA, ADPS1);
    22b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22b8:	82 60       	ori	r24, 0x02	; 2
    22ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:362
		cbi(ADCSRA, ADPS0);
    22be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22c2:	8e 7f       	andi	r24, 0xFE	; 254
    22c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22d2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
init():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1067
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    22d6:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <MicroDebug+0x42>
    22da:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <MicroDebug+0x43>
    22de:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <MicroDebug+0x44>
    22e2:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <MicroDebug+0x45>
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1069

	lastPacketMS = 0L;
    22e6:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <MicroDebug+0x2>
    22ea:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <MicroDebug+0x3>
    22ee:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <MicroDebug+0x4>
    22f2:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <MicroDebug+0x5>
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    22f6:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
    22fa:	6b 01       	movw	r12, r22
    22fc:	7c 01       	movw	r14, r24
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:126
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    22fe:	4b 01       	movw	r8, r22
    2300:	5c 01       	movw	r10, r24
    2302:	28 eb       	ldi	r18, 0xB8	; 184
    2304:	82 0e       	add	r8, r18
    2306:	2b e0       	ldi	r18, 0x0B	; 11
    2308:	92 1e       	adc	r9, r18
    230a:	a1 1c       	adc	r10, r1
    230c:	b1 1c       	adc	r11, r1
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    230e:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:140

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2312:	6c 15       	cp	r22, r12
    2314:	7d 05       	cpc	r23, r13
    2316:	8e 05       	cpc	r24, r14
    2318:	9f 05       	cpc	r25, r15
    231a:	28 f0       	brcs	.+10     	; 0x2326 <main+0xd6>
    231c:	86 16       	cp	r8, r22
    231e:	97 06       	cpc	r9, r23
    2320:	a8 06       	cpc	r10, r24
    2322:	b9 06       	cpc	r11, r25
    2324:	a0 f7       	brcc	.-24     	; 0x230e <main+0xbe>
begin():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:600
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    2326:	68 ee       	ldi	r22, 0xE8	; 232
    2328:	73 e0       	ldi	r23, 0x03	; 3
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <delay>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2332:	0e 94 83 01 	call	0x306	; 0x306 <HardwareSerial::begin(unsigned long, unsigned char) [clone .constprop.77]>
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    2336:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
outPacketStart():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:351
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    233a:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <MicroDebug+0x2>
    233e:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <MicroDebug+0x3>
    2342:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <MicroDebug+0x4>
    2346:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <MicroDebug+0x5>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:323
    234a:	80 eb       	ldi	r24, 0xB0	; 176
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    2352:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
    2356:	6b 01       	movw	r12, r22
    2358:	7c 01       	movw	r14, r24
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:126
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    235a:	4b 01       	movw	r8, r22
    235c:	5c 01       	movw	r10, r24
    235e:	8a e0       	ldi	r24, 0x0A	; 10
    2360:	88 0e       	add	r8, r24
    2362:	91 1c       	adc	r9, r1
    2364:	a1 1c       	adc	r10, r1
    2366:	b1 1c       	adc	r11, r1
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    2368:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:140

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    236c:	6c 15       	cp	r22, r12
    236e:	7d 05       	cpc	r23, r13
    2370:	8e 05       	cpc	r24, r14
    2372:	9f 05       	cpc	r25, r15
    2374:	28 f0       	brcs	.+10     	; 0x2380 <main+0x130>
    2376:	86 16       	cp	r8, r22
    2378:	97 06       	cpc	r9, r23
    237a:	a8 06       	cpc	r10, r24
    237c:	b9 06       	cpc	r11, r25
    237e:	a0 f7       	brcc	.-24     	; 0x2368 <main+0x118>
start():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1197
		while (breakWait(0) != 'c') {
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <MicroDebug+0x16>
DBG_Millis():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:172
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
	return millis();
    2386:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
outPacketStart():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:351
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    238a:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <MicroDebug+0x2>
    238e:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <MicroDebug+0x3>
    2392:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <MicroDebug+0x4>
    2396:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <MicroDebug+0x5>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:323
    239a:	81 ec       	ldi	r24, 0xC1	; 193
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
begin():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.h:121
    23a2:	0e 94 83 01 	call	0x306	; 0x306 <HardwareSerial::begin(unsigned long, unsigned char) [clone .constprop.77]>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:326
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:327
    23ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    23b2:	88 7f       	andi	r24, 0xF8	; 248
    23b4:	82 60       	ori	r24, 0x02	; 2
    23b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:329
    23ba:	87 ed       	ldi	r24, 0xD7	; 215
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:36
 *         {@code 3} Frame length is different
 *         {@code 4} Checksum is wrong
 */
void AM1008W_K_I2C::begin(TwoWire &wirePort)
{
  _i2cPort = &wirePort; //Grab which port the user wants us to use
    23c2:	8b ee       	ldi	r24, 0xEB	; 235
    23c4:	94 e0       	ldi	r25, 0x04	; 4
    23c6:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <am1008w_k_i2c+0x21>
    23ca:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <am1008w_k_i2c+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:58

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    23ce:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::rxBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:59
  rxBufferLength = 0;
    23d2:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <TwoWire::rxBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:61

  txBufferIndex = 0;
    23d6:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <TwoWire::txBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:62
  txBufferLength = 0;
    23da:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <TwoWire::txBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:64

  twi_init();
    23de:	0e 94 03 09 	call	0x1206	; 0x1206 <twi_init>
twi_attachSlaveTxEvent():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:384
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    23e2:	8e e5       	ldi	r24, 0x5E	; 94
    23e4:	92 e0       	ldi	r25, 0x02	; 2
    23e6:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <twi_onSlaveTransmit+0x1>
    23ea:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:373
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    23ee:	8f e5       	ldi	r24, 0x5F	; 95
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <twi_onSlaveReceive+0x1>
    23f6:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_onSlaveReceive>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:332
    23fa:	88 ee       	ldi	r24, 0xE8	; 232
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:152
/**
 * Configures the timer and the state machine for IR reception.
 */
void IRrecv::enableIRIn() {

    noInterrupts();
    2402:	f8 94       	cli
timerConfigForReceive():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/private/IRTimer.cpp.h:368
    TCCR2B = _BV(CS20);
    OCR2A = TIMER_COUNT_TOP;
    OCR2B = TIMER_COUNT_TOP;
    TCNT2 = 0;
#  else
    TCCR2A = _BV(WGM21);
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/private/IRTimer.cpp.h:369
    TCCR2B = _BV(CS21);
    240a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/private/IRTimer.cpp.h:370
    OCR2A = TIMER_COUNT_TOP / 8;
    240e:	82 e3       	ldi	r24, 0x32	; 50
    2410:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/private/IRTimer.cpp.h:371
    OCR2B = TIMER_COUNT_TOP / 8;
    2414:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/private/IRTimer.cpp.h:372
    TCNT2 = 0;
    2418:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:156

    // Setup pulse clock TickCounterForISR interrupt
    timerConfigForReceive();
    TIMER_ENABLE_RECEIVE_INTR;  // Timer interrupt enable
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
resume():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:188
 * Restart the ISR state machine
 * Enable receiving of the next value
 */
void IRrecv::resume() {
    // check allows to call resume at arbitrary places or more than once
    if (irparams.StateForISR == IR_REC_STATE_STOP) {
    2422:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    2426:	83 30       	cpi	r24, 0x03	; 3
    2428:	11 f4       	brne	.+4      	; 0x242e <main+0x1de>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:189
        irparams.StateForISR = IR_REC_STATE_IDLE;
    242a:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <irparams>
enableIRIn():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:161
    TIMER_ENABLE_RECEIVE_INTR;  // Timer interrupt enable
    TIMER_RESET_INTR_PENDING;   // NOP for most platforms

    // Initialize state machine state
    resume();
    interrupts(); // after resume to avoid running through STOP state 1 time before switching to IDLE
    242e:	78 94       	sei
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:164

    // Set pin modes
    pinMode(irparams.IRReceivePin, INPUT);
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <irparams+0x1>
    2436:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:334
    243a:	84 ef       	ldi	r24, 0xF4	; 244
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:51
/**
 * Init core variables
 */
 void MQ131Class::begin(uint8_t _pinPower, uint8_t _pinSensor, MQ131Model _model, uint32_t _RL, Stream* _debugStream) { 
  // Define if debug is requested
  enableDebug = _debugStream != NULL;
    2442:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <MQ131+0x6>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:52
  debugStream = _debugStream;
    2446:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <MQ131+0x5>
    244a:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <MQ131+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:55
  
 	// Setup the model
 	model = _model;
    244e:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <MQ131+0x3>
    2452:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <MQ131+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:58

 	// Store the circuit info (pin and load resistance)
 	pinPower = _pinPower;
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <MQ131+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:59
 	pinSensor = _pinSensor;
    245c:	84 e1       	ldi	r24, 0x14	; 20
    245e:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <MQ131+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:60
 	valueRL = _RL;
    2462:	80 e4       	ldi	r24, 0x40	; 64
    2464:	92 e4       	ldi	r25, 0x42	; 66
    2466:	af e0       	ldi	r26, 0x0F	; 15
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <MQ131+0x9>
    246e:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <MQ131+0xa>
    2472:	a0 93 02 05 	sts	0x0502, r26	; 0x800502 <MQ131+0xb>
    2476:	b0 93 03 05 	sts	0x0503, r27	; 0x800503 <MQ131+0xc>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    247a:	8a e0       	ldi	r24, 0x0A	; 10
    247c:	97 ea       	ldi	r25, 0xA7	; 167
    247e:	af ee       	ldi	r26, 0xEF	; 239
    2480:	b4 e4       	ldi	r27, 0x44	; 68
    2482:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <MQ131+0x15>
    2486:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <MQ131+0x16>
    248a:	a0 93 0e 05 	sts	0x050E, r26	; 0x80050e <MQ131+0x17>
    248e:	b0 93 0f 05 	sts	0x050F, r27	; 0x80050f <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    2492:	80 e5       	ldi	r24, 0x50	; 80
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <MQ131+0x11>
    249e:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <MQ131+0x12>
    24a2:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <MQ131+0x13>
    24a6:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <MQ131+0x14>
begin():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:80
      setTimeToRead(MQ131_DEFAULT_LO_CONCENTRATION_TIME2READ);
      break;
  }

 	// Setup pin mode
 	pinMode(pinPower, OUTPUT);
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	83 e0       	ldi	r24, 0x03	; 3
    24ae:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:81
 	pinMode(pinSensor, INPUT);
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <MQ131+0x8>
    24b8:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:84

  // Switch off the heater as default status
  digitalWrite(pinPower, LOW);
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <MQ131+0x7>
    24c2:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
setR0():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:350

 /**
  * Store R0 value (come from calibration or set by user)
  */
  void MQ131Class::setR0(float _valueR0) {
  	valueR0 = _valueR0;
    24c6:	88 e4       	ldi	r24, 0x48	; 72
    24c8:	91 e6       	ldi	r25, 0x61	; 97
    24ca:	a4 e7       	ldi	r26, 0x74	; 116
    24cc:	b4 e4       	ldi	r27, 0x44	; 68
    24ce:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <MQ131+0x15>
    24d2:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <MQ131+0x16>
    24d6:	a0 93 0e 05 	sts	0x050E, r26	; 0x80050e <MQ131+0x17>
    24da:	b0 93 0f 05 	sts	0x050F, r27	; 0x80050f <MQ131+0x18>
setTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:144
/**
 * Set parameter time to read (for calibration or to recall
 * calibration from previous run)
 */
 void MQ131Class::setTimeToRead(uint32_t sec) {
 	secToRead = sec;
    24de:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <MQ131+0x11>
    24e2:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <MQ131+0x12>
    24e6:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <MQ131+0x13>
    24ea:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <MQ131+0x14>
setup():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:339
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:340
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	89 e0       	ldi	r24, 0x09	; 9
    24fa:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:341
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:342
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	85 e0       	ldi	r24, 0x05	; 5
    250a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:343
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	86 e0       	ldi	r24, 0x06	; 6
    2512:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:344
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:345
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	89 e0       	ldi	r24, 0x09	; 9
    2522:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:346
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	8d e0       	ldi	r24, 0x0D	; 13
    252a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:347
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	8f e0       	ldi	r24, 0x0F	; 15
    2532:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:348
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	80 e1       	ldi	r24, 0x10	; 16
    253a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:349
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	8e e0       	ldi	r24, 0x0E	; 14
    2542:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:350
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	85 e1       	ldi	r24, 0x15	; 21
    254a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:351
    254e:	88 e4       	ldi	r24, 0x48	; 72
    2550:	96 e0       	ldi	r25, 0x06	; 6
    2552:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:353
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:354
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	8a e0       	ldi	r24, 0x0A	; 10
    2562:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:355
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:356
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	84 e0       	ldi	r24, 0x04	; 4
    2572:	0e 94 07 04 	call	0x80e	; 0x80e <pinMode>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:357
    2576:	87 e1       	ldi	r24, 0x17	; 23
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
ReceiveIR():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:189
    257e:	ba e0       	ldi	r27, 0x0A	; 10
    2580:	6b 2e       	mov	r6, r27
    2582:	71 2c       	mov	r7, r1
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:226

// Check for repeat -- like a NEC repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], 2250)
            && matchMark(aResults->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
        aResults->bits = 0;
        aResults->value = 0xFFFFFFFF;
    2584:	88 24       	eor	r8, r8
    2586:	8a 94       	dec	r8
    2588:	98 2c       	mov	r9, r8
    258a:	54 01       	movw	r10, r8
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1376
 * aResults->decode_type
 **********************************************************************************************************************/
bool IRrecv::decode(decode_results *aResults) {
    static bool sDeprecationMessageSent = false;

    if (irparams.StateForISR != IR_REC_STATE_STOP) {
    258c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	09 f0       	breq	.+2      	; 0x2596 <main+0x346>
    2594:	b3 c1       	rjmp	.+870    	; 0x28fc <main+0x6ac>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1380
        return false;
    }

    if (!sDeprecationMessageSent) {
    2596:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <IRrecv::decode(decode_results*)::sDeprecationMessageSent>
    259a:	81 11       	cpse	r24, r1
    259c:	07 c0       	rjmp	.+14     	; 0x25ac <main+0x35c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1381
        Serial.println(
    259e:	8e e1       	ldi	r24, 0x1E	; 30
    25a0:	92 e0       	ldi	r25, 0x02	; 2
    25a2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1383
                "The function decode(&results)) is deprecated and may not work as expected! Just use decode() without a parameter and IrReceiver.decodedIRData.<fieldname> .");
        sDeprecationMessageSent = true;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <IRrecv::decode(decode_results*)::sDeprecationMessageSent>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1387
    }

    // copy for usage by legacy programs
    aResults->rawbuf = irparams.rawbuf;
    25ac:	a5 e6       	ldi	r26, 0x65	; 101
    25ae:	b5 e0       	ldi	r27, 0x05	; 5
    25b0:	b0 93 a0 03 	sts	0x03A0, r27	; 0x8003a0 <results+0xd>
    25b4:	a0 93 9f 03 	sts	0x039F, r26	; 0x80039f <results+0xc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1388
    aResults->rawlen = irparams.rawlen;
    25b8:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <irparams+0x8>
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <results+0xf>
    25c2:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <results+0xe>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1389
    if (irparams.OverflowFlag) {
    25c6:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <irparams+0x7>
    25ca:	22 23       	and	r18, r18
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <main+0x386>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1391
        // Copy overflow flag to decodedIRData.flags
        irparams.OverflowFlag = false;
    25ce:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <irparams+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1392
        irparams.rawlen = 0; // otherwise we have OverflowFlag again at next ISR call
    25d2:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <irparams+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1395
        DEBUG_PRINTLN("Overflow happened");
    }
    aResults->overflow = irparams.OverflowFlag;
    25d6:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <irparams+0x7>
    25da:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <results+0x10>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1396
    aResults->value = 0;
    25de:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <results+0x4>
    25e2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <results+0x5>
    25e6:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <results+0x6>
    25ea:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1398

    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST; // for print
    25ee:	20 e8       	ldi	r18, 0x80	; 128
    25f0:	20 93 36 06 	sts	0x0636, r18	; 0x800636 <irrecv+0x9>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    25f4:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <irparams+0xb>
    25f8:	30 91 68 05 	lds	r19, 0x0568	; 0x800568 <irparams+0xc>
    25fc:	26 58       	subi	r18, 0x86	; 134
    25fe:	31 09       	sbc	r19, r1
    2600:	2c 35       	cpi	r18, 0x5C	; 92
    2602:	31 05       	cpc	r19, r1
    2604:	08 f0       	brcs	.+2      	; 0x2608 <main+0x3b8>
    2606:	62 c0       	rjmp	.+196    	; 0x26cc <main+0x47c>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:297
    }
    offset++;

// Check for repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], NEC_REPEAT_HEADER_SPACE)
            && matchMark(aResults->rawbuf[offset + 1], NEC_BIT_MARK)) {
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	91 05       	cpc	r25, r1
    260c:	21 f5       	brne	.+72     	; 0x2656 <main+0x406>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    260e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <irparams+0xd>
    2612:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <irparams+0xe>
    2616:	81 97       	sbiw	r24, 0x21	; 33
    2618:	48 97       	sbiw	r24, 0x18	; 24
    261a:	08 f0       	brcs	.+2      	; 0x261e <main+0x3ce>
    261c:	57 c0       	rjmp	.+174    	; 0x26cc <main+0x47c>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    261e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <irparams+0xf>
    2622:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <irparams+0x10>
    2626:	08 97       	sbiw	r24, 0x08	; 8
    2628:	08 97       	sbiw	r24, 0x08	; 8
    262a:	08 f0       	brcs	.+2      	; 0x262e <main+0x3de>
    262c:	4f c0       	rjmp	.+158    	; 0x26cc <main+0x47c>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:298
        aResults->bits = 0;
    262e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:299
        aResults->value = 0xFFFFFFFF;
    2632:	80 92 97 03 	sts	0x0397, r8	; 0x800397 <results+0x4>
    2636:	90 92 98 03 	sts	0x0398, r9	; 0x800398 <results+0x5>
    263a:	a0 92 99 03 	sts	0x0399, r10	; 0x800399 <results+0x6>
    263e:	b0 92 9a 03 	sts	0x039A, r11	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:300
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    2642:	81 e8       	ldi	r24, 0x81	; 129
    2644:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:301
        decodedIRData.protocol = NEC;
    2648:	87 e0       	ldi	r24, 0x07	; 7
    264a:	90 e0       	ldi	r25, 0x00	; 0
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:276

    aResults->bits = KASEIKYO_BITS;
    aResults->value = decodedIRData.decodedRawData;
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    aResults->decode_type = PANASONIC;
    decodedIRData.protocol = PANASONIC;
    264c:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <irrecv+0x1>
    2650:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <irrecv>
    2654:	1a c1       	rjmp	.+564    	; 0x288a <main+0x63a>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:306
        return true;
    }

    // Check we have the right amount of data (32). +4 for initial gap, start bit mark and space + stop bit mark
    if (aResults->rawlen != (2 * NEC_BITS) + 4) {
    2656:	84 34       	cpi	r24, 0x44	; 68
    2658:	91 05       	cpc	r25, r1
    265a:	c1 f5       	brne	.+112    	; 0x26cc <main+0x47c>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    265c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <irparams+0xd>
    2660:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <irparams+0xe>
    2664:	82 54       	subi	r24, 0x42	; 66
    2666:	91 09       	sbc	r25, r1
    2668:	8f 97       	sbiw	r24, 0x2f	; 47
    266a:	80 f5       	brcc	.+96     	; 0x26cc <main+0x47c>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:322
        DEBUG_PRINTLN("Header space length is wrong");
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(NEC_BITS, offset, NEC_BIT_MARK, NEC_ONE_SPACE, NEC_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    266c:	20 e3       	ldi	r18, 0x30	; 48
    266e:	32 e0       	ldi	r19, 0x02	; 2
    2670:	40 e9       	ldi	r20, 0x90	; 144
    2672:	56 e0       	ldi	r21, 0x06	; 6
    2674:	60 e3       	ldi	r22, 0x30	; 48
    2676:	72 e0       	ldi	r23, 0x02	; 2
    2678:	80 e2       	ldi	r24, 0x20	; 32
    267a:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    267e:	88 23       	and	r24, r24
    2680:	29 f1       	breq	.+74     	; 0x26cc <main+0x47c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:329
        DEBUG_PRINTLN(F("Decode failed"));
        return false;
    }

    // Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * NEC_BITS)], NEC_BIT_MARK)) {
    2682:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2686:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    268a:	ea 57       	subi	r30, 0x7A	; 122
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	08 97       	sbiw	r24, 0x08	; 8
    2694:	08 97       	sbiw	r24, 0x08	; 8
    2696:	d0 f4       	brcc	.+52     	; 0x26cc <main+0x47c>
decodeNECMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:336
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    2698:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    269c:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    26a0:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    26a4:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    26a8:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    26ac:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    26b0:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    26b4:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:337
    aResults->bits = NEC_BITS;
    26b8:	80 e2       	ldi	r24, 0x20	; 32
    26ba:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_NEC.cpp:338
    aResults->decode_type = NEC;
    26be:	87 e0       	ldi	r24, 0x07	; 7
    26c0:	90 e0       	ldi	r25, 0x00	; 0
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:275
    }

    aResults->bits = KASEIKYO_BITS;
    aResults->value = decodedIRData.decodedRawData;
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    aResults->decode_type = PANASONIC;
    26c2:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <results+0x1>
    26c6:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <results>
    26ca:	c0 cf       	rjmp	.-128    	; 0x264c <main+0x3fc>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:156
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    uint8_t bits = 0;
    unsigned int offset = 0;  // Dont skip first space, check its size

    if (aResults->rawlen < (2 * SONY_BITS_MIN) + 2) {
    26cc:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <results+0xe>
    26d0:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <results+0xf>
    26d4:	4a 31       	cpi	r20, 0x1A	; 26
    26d6:	51 05       	cpc	r21, r1
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <main+0x48c>
    26da:	53 c0       	rjmp	.+166    	; 0x2782 <main+0x532>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:162
        return false;
    }

    // Some Sony's deliver repeats fast after first
    // unfortunately can't spot difference from of repeat from two fast clicks
    if (aResults->rawbuf[0] < (SONY_DOUBLE_SPACE_USECS / MICROS_PER_TICK)) {
    26dc:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    26e0:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	0a 97       	sbiw	r24, 0x0a	; 10
    26ea:	80 f4       	brcc	.+32     	; 0x270c <main+0x4bc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:164
        DEBUG_PRINTLN("IR Gap found");
        aResults->bits = 0;
    26ec:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:165
        aResults->value = 0xFFFFFFFF;
    26f0:	80 92 97 03 	sts	0x0397, r8	; 0x800397 <results+0x4>
    26f4:	90 92 98 03 	sts	0x0398, r9	; 0x800398 <results+0x5>
    26f8:	a0 92 99 03 	sts	0x0399, r10	; 0x800399 <results+0x6>
    26fc:	b0 92 9a 03 	sts	0x039A, r11	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:166
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:167
        decodedIRData.protocol = SONY;
    2706:	82 e1       	ldi	r24, 0x12	; 18
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 cf       	rjmp	.-192    	; 0x264c <main+0x3fc>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	84 97       	sbiw	r24, 0x24	; 36
    2712:	4a 97       	sbiw	r24, 0x1a	; 26
    2714:	b0 f5       	brcc	.+108    	; 0x2782 <main+0x532>
    2716:	23 e0       	ldi	r18, 0x03	; 3
    2718:	30 e0       	ldi	r19, 0x00	; 0
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:153

#if !defined(NO_LEGACY_COMPATIBILITY)
#define SONY_DOUBLE_SPACE_USECS    500 // usually see 713 - not using ticks as get number wrap around
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    uint8_t bits = 0;
    271a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:152
}

#if !defined(NO_LEGACY_COMPATIBILITY)
#define SONY_DOUBLE_SPACE_USECS    500 // usually see 713 - not using ticks as get number wrap around
bool IRrecv::decodeSonyMSB(decode_results *aResults) {
    long data = 0;
    271c:	c1 2c       	mov	r12, r1
    271e:	d1 2c       	mov	r13, r1
    2720:	76 01       	movw	r14, r12
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2722:	84 81       	ldd	r24, Z+4	; 0x04
    2724:	95 81       	ldd	r25, Z+5	; 0x05
    2726:	08 97       	sbiw	r24, 0x08	; 8
    2728:	08 97       	sbiw	r24, 0x08	; 8
    272a:	58 f5       	brcc	.+86     	; 0x2782 <main+0x532>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:189
            return false;
        }
        offset++;

        // bit value is determined by length of the mark
        if (matchMark(aResults->rawbuf[offset], SONY_ONE_MARK)) {
    272c:	86 81       	ldd	r24, Z+6	; 0x06
    272e:	97 81       	ldd	r25, Z+7	; 0x07
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2730:	82 31       	cpi	r24, 0x12	; 18
    2732:	91 05       	cpc	r25, r1
    2734:	e0 f0       	brcs	.+56     	; 0x276e <main+0x51e>
    2736:	80 97       	sbiw	r24, 0x20	; 32
    2738:	20 f5       	brcc	.+72     	; 0x2782 <main+0x532>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:190
            data = (data << 1) | 1;
    273a:	cc 0c       	add	r12, r12
    273c:	dd 1c       	adc	r13, r13
    273e:	ee 1c       	adc	r14, r14
    2740:	ff 1c       	adc	r15, r15
    2742:	68 94       	set
    2744:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:197
            data = (data << 1) | 0;
        } else {
            return false;
        }
        offset++;
        bits++;
    2746:	6f 5f       	subi	r22, 0xFF	; 255
    2748:	2e 5f       	subi	r18, 0xFE	; 254
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	34 96       	adiw	r30, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:179
        return false;
    }
    offset++;

    // MSB first - Not compatible to standard, which says LSB first :-(
    while (offset + 1 < aResults->rawlen) {
    274e:	24 17       	cp	r18, r20
    2750:	35 07       	cpc	r19, r21
    2752:	38 f3       	brcs	.-50     	; 0x2722 <main+0x4d2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:201
        offset++;
        bits++;

    }

    aResults->bits = bits;
    2754:	60 93 9b 03 	sts	0x039B, r22	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:202
    aResults->value = data;
    2758:	c0 92 97 03 	sts	0x0397, r12	; 0x800397 <results+0x4>
    275c:	d0 92 98 03 	sts	0x0398, r13	; 0x800398 <results+0x5>
    2760:	e0 92 99 03 	sts	0x0399, r14	; 0x800399 <results+0x6>
    2764:	f0 92 9a 03 	sts	0x039A, r15	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:203
    aResults->decode_type = SONY;
    2768:	82 e1       	ldi	r24, 0x12	; 18
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	aa cf       	rjmp	.-172    	; 0x26c2 <main+0x472>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    276e:	89 30       	cpi	r24, 0x09	; 9
    2770:	91 05       	cpc	r25, r1
    2772:	38 f0       	brcs	.+14     	; 0x2782 <main+0x532>
    2774:	41 97       	sbiw	r24, 0x11	; 17
    2776:	28 f4       	brcc	.+10     	; 0x2782 <main+0x532>
decodeSonyMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Sony.cpp:192

        // bit value is determined by length of the mark
        if (matchMark(aResults->rawbuf[offset], SONY_ONE_MARK)) {
            data = (data << 1) | 1;
        } else if (matchMark(aResults->rawbuf[offset], SONY_ZERO_MARK)) {
            data = (data << 1) | 0;
    2778:	cc 0c       	add	r12, r12
    277a:	dd 1c       	adc	r13, r13
    277c:	ee 1c       	adc	r14, r14
    277e:	ff 1c       	adc	r15, r15
    2780:	e2 cf       	rjmp	.-60     	; 0x2746 <main+0x4f6>
initBiphaselevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:582
uint16_t sCurrentTimingIntervals; // Number of aBiphaseTimeUnit intervals of the current rawbuf[sBiphaseDecodeRawbuffOffset] timing.
uint8_t sUsedTimingIntervals;       // Number of already used intervals of sCurrentTimingIntervals.
uint16_t sBiphaseTimeUnit;

void IRrecv::initBiphaselevel(uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit) {
    sBiphaseDecodeRawbuffOffset = aRCDecodeRawbuffOffset;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:583
    sBiphaseTimeUnit = aBiphaseTimeUnit;
    2788:	89 e7       	ldi	r24, 0x79	; 121
    278a:	93 e0       	ldi	r25, 0x03	; 3
    278c:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <sBiphaseTimeUnit+0x1>
    2790:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <sBiphaseTimeUnit>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:584
    sUsedTimingIntervals = 0;
    2794:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <sUsedTimingIntervals>
decodeRC5():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:147
        DEBUG_PRINTLN(" is not between 11 and 26");
        return false;
    }

// Check start bit, the first space is included in the gap
    if (getBiphaselevel() != MARK) {
    2798:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	09 f0       	breq	.+2      	; 0x27a2 <main+0x552>
    27a0:	8d c1       	rjmp	.+794    	; 0x2abc <main+0x86c>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:131
 * 1 Start bit for RC5X    _____| ...
 *
 */
bool IRrecv::decodeRC5() {
    uint8_t tBitIndex;
    uint32_t tDecodedRawData = 0;
    27a2:	c1 2c       	mov	r12, r1
    27a4:	d1 2c       	mov	r13, r1
    27a6:	76 01       	movw	r14, r12
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:156
    }

    /*
     * Get data bits - MSB first
     */
    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    27a8:	c0 e0       	ldi	r28, 0x00	; 0
decodeRC5():
    27aa:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
    27ae:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
    27b2:	90 85       	ldd	r25, Z+8	; 0x08
    27b4:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <sBiphaseDecodeRawbuffOffset>
    27b8:	89 17       	cp	r24, r25
    27ba:	e0 f4       	brcc	.+56     	; 0x27f4 <main+0x5a4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:157
        uint8_t tStartLevel = getBiphaselevel();
    27bc:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    27c0:	d8 2f       	mov	r29, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:158
        uint8_t tEndLevel = getBiphaselevel();
    27c2:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:160

        if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
    27c6:	d1 11       	cpse	r29, r1
    27c8:	0b c0       	rjmp	.+22     	; 0x27e0 <main+0x590>
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <main+0x580>
    27ce:	76 c1       	rjmp	.+748    	; 0x2abc <main+0x86c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:162
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;
    27d0:	cc 0c       	add	r12, r12
    27d2:	dd 1c       	adc	r13, r13
    27d4:	ee 1c       	adc	r14, r14
    27d6:	ff 1c       	adc	r15, r15
    27d8:	68 94       	set
    27da:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:156
    }

    /*
     * Get data bits - MSB first
     */
    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    27dc:	cf 5f       	subi	r28, 0xFF	; 255
    27de:	e5 cf       	rjmp	.-54     	; 0x27aa <main+0x55a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:163
        uint8_t tEndLevel = getBiphaselevel();

        if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;
        } else if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
    27e0:	d1 30       	cpi	r29, 0x01	; 1
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <main+0x596>
    27e4:	6b c1       	rjmp	.+726    	; 0x2abc <main+0x86c>
    27e6:	81 11       	cpse	r24, r1
    27e8:	69 c1       	rjmp	.+722    	; 0x2abc <main+0x86c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:165
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 0;
    27ea:	cc 0c       	add	r12, r12
    27ec:	dd 1c       	adc	r13, r13
    27ee:	ee 1c       	adc	r14, r14
    27f0:	ff 1c       	adc	r15, r15
    27f2:	f4 cf       	rjmp	.-24     	; 0x27dc <main+0x58c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:175
            return false;
        }
    }

    // Success
    decodedIRData.numberOfBits = tBitIndex; // must be RC5_BITS
    27f4:	c0 93 35 06 	sts	0x0635, r28	; 0x800635 <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:179

    LongUnion tValue;
    tValue.ULong = tDecodedRawData;
    decodedIRData.decodedRawData = tDecodedRawData;
    27f8:	c0 92 37 06 	sts	0x0637, r12	; 0x800637 <irrecv+0xa>
    27fc:	d0 92 38 06 	sts	0x0638, r13	; 0x800638 <irrecv+0xb>
    2800:	e0 92 39 06 	sts	0x0639, r14	; 0x800639 <irrecv+0xc>
    2804:	f0 92 3a 06 	sts	0x063A, r15	; 0x80063a <irrecv+0xd>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:180
    decodedIRData.command = tValue.UByte.LowByte & 0x3F;
    2808:	8c 2d       	mov	r24, r12
    280a:	8f 73       	andi	r24, 0x3F	; 63
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <irrecv+0x5>
    2812:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:181
    decodedIRData.address = (tValue.UWord.LowWord >> RC5_COMMAND_BITS) & 0x1F;
    2816:	96 01       	movw	r18, r12
    2818:	46 e0       	ldi	r20, 0x06	; 6
    281a:	36 95       	lsr	r19
    281c:	27 95       	ror	r18
    281e:	4a 95       	dec	r20
    2820:	e1 f7       	brne	.-8      	; 0x281a <main+0x5ca>
    2822:	2f 71       	andi	r18, 0x1F	; 31
    2824:	33 27       	eor	r19, r19
    2826:	30 93 30 06 	sts	0x0630, r19	; 0x800630 <irrecv+0x3>
    282a:	20 93 2f 06 	sts	0x062F, r18	; 0x80062f <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:184

    // Get the inverted 7. command bit for RC5X, the inverted value is always 1 for RC5 and serves as a second start bit.
    if ((tValue.UWord.LowWord & (1 << (RC5_TOGGLE_BIT + RC5_ADDRESS_BITS + RC5_COMMAND_BITS))) == 0) {
    282e:	96 01       	movw	r18, r12
    2830:	22 27       	eor	r18, r18
    2832:	30 71       	andi	r19, 0x10	; 16
    2834:	23 2b       	or	r18, r19
    2836:	31 f4       	brne	.+12     	; 0x2844 <main+0x5f4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:185
        decodedIRData.command += 0x40;
    2838:	80 5c       	subi	r24, 0xC0	; 192
    283a:	9f 4f       	sbci	r25, 0xFF	; 255
    283c:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <irrecv+0x5>
    2840:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:188
    }

    decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    2844:	80 e8       	ldi	r24, 0x80	; 128
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:189
    if (tValue.UByte.MidLowByte & 0x8) {
    2846:	d3 fc       	sbrc	r13, 3
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:190
        decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
    2848:	88 e8       	ldi	r24, 0x88	; 136
    284a:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:194
    }

    // check for repeat
    if (decodedIRData.rawDataPtr->rawbuf[0] < (RC5_REPEAT_PERIOD / MICROS_PER_TICK)) {
    284e:	81 85       	ldd	r24, Z+9	; 0x09
    2850:	92 85       	ldd	r25, Z+10	; 0x0a
    2852:	83 3e       	cpi	r24, 0xE3	; 227
    2854:	98 40       	sbci	r25, 0x08	; 8
    2856:	28 f4       	brcc	.+10     	; 0x2862 <main+0x612>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:195
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    2858:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <irrecv+0x9>
    285c:	81 60       	ori	r24, 0x01	; 1
    285e:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:198
    }

    decodedIRData.protocol = RC5;
    2862:	8e e0       	ldi	r24, 0x0E	; 14
    2864:	90 e0       	ldi	r25, 0x00	; 0
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:458
    // check for repeat, do not check toggle bit yet
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((RC6_REPEAT_SPACE + (RC6_REPEAT_SPACE / 2)) / MICROS_PER_TICK)) {
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    }

    decodedIRData.protocol = RC6;
    2866:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <irrecv+0x1>
    286a:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <irrecv>
decode():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1433
#endif

#if defined(DECODE_RC6)
    DEBUG_PRINTLN("Attempting RC6 decode");
    if (decodeRC6())  {
        aResults->bits = decodedIRData.numberOfBits;
    286e:	c0 93 9b 03 	sts	0x039B, r28	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1434
        aResults->value = decodedIRData.decodedRawData;
    2872:	c0 92 97 03 	sts	0x0397, r12	; 0x800397 <results+0x4>
    2876:	d0 92 98 03 	sts	0x0398, r13	; 0x800398 <results+0x5>
    287a:	e0 92 99 03 	sts	0x0399, r14	; 0x800399 <results+0x6>
    287e:	f0 92 9a 03 	sts	0x039A, r15	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:1435
        aResults->decode_type = RC6;
    2882:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <results+0x1>
    2886:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <results>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    288a:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <results+0x4>
    288e:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <results+0x5>
    2892:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <results+0x6>
    2896:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <results+0x7>
    289a:	4a e0       	ldi	r20, 0x0A	; 10
    289c:	0e 94 21 0a 	call	0x1442	; 0x1442 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.85]>
write():
    28a0:	81 e9       	ldi	r24, 0x91	; 145
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
ReceiveIR():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:150
    28a8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <results+0x4>
    28ac:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <results+0x5>
    28b0:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <results+0x6>
    28b4:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <results+0x7>
    28b8:	84 34       	cpi	r24, 0x44	; 68
    28ba:	21 e9       	ldi	r18, 0x91	; 145
    28bc:	92 07       	cpc	r25, r18
    28be:	29 ef       	ldi	r18, 0xF9	; 249
    28c0:	a2 07       	cpc	r26, r18
    28c2:	25 e8       	ldi	r18, 0x85	; 133
    28c4:	b2 07       	cpc	r27, r18
    28c6:	09 f4       	brne	.+2      	; 0x28ca <main+0x67a>
    28c8:	39 c4       	rjmp	.+2162   	; 0x313c <main+0xeec>
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <main+0x67e>
    28cc:	8a c3       	rjmp	.+1812   	; 0x2fe2 <main+0xd92>
    28ce:	81 15       	cp	r24, r1
    28d0:	26 e3       	ldi	r18, 0x36	; 54
    28d2:	92 07       	cpc	r25, r18
    28d4:	27 e8       	ldi	r18, 0x87	; 135
    28d6:	a2 07       	cpc	r26, r18
    28d8:	26 e4       	ldi	r18, 0x46	; 70
    28da:	b2 07       	cpc	r27, r18
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <main+0x690>
    28de:	47 c4       	rjmp	.+2190   	; 0x316e <main+0xf1e>
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <main+0x694>
    28e2:	65 c3       	rjmp	.+1738   	; 0x2fae <main+0xd5e>
    28e4:	88 32       	cpi	r24, 0x28	; 40
    28e6:	94 4f       	sbci	r25, 0xF4	; 244
    28e8:	a2 4d       	sbci	r26, 0xD2	; 210
    28ea:	be 40       	sbci	r27, 0x0E	; 14
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <main+0x6a0>
    28ee:	4e c4       	rjmp	.+2204   	; 0x318c <main+0xf3c>
resume():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:188
 * Restart the ISR state machine
 * Enable receiving of the next value
 */
void IRrecv::resume() {
    // check allows to call resume at arbitrary places or more than once
    if (irparams.StateForISR == IR_REC_STATE_STOP) {
    28f0:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <irparams>
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	11 f4       	brne	.+4      	; 0x28fc <main+0x6ac>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:189
        irparams.StateForISR = IR_REC_STATE_IDLE;
    28f8:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <irparams>
loop():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:363
    28fc:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    2900:	88 23       	and	r24, r24
    2902:	09 f4       	brne	.+2      	; 0x2906 <main+0x6b6>
    2904:	cd c7       	rjmp	.+3994   	; 0x38a0 <main+0x1650>
PlasmaControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:261
    2906:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <plasma_flag>
    290a:	88 23       	and	r24, r24
    290c:	09 f4       	brne	.+2      	; 0x2910 <main+0x6c0>
    290e:	58 c4       	rjmp	.+2224   	; 0x31c0 <main+0xf70>
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	09 f4       	brne	.+2      	; 0x2916 <main+0x6c6>
    2914:	8e c4       	rjmp	.+2332   	; 0x3232 <main+0xfe2>
SegmentControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:90
    2916:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    291a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <segment_cnt+0x1>
    2924:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <segment_cnt>
    2928:	88 3e       	cpi	r24, 0xE8	; 232
    292a:	93 40       	sbci	r25, 0x03	; 3
    292c:	79 f4       	brne	.+30     	; 0x294c <main+0x6fc>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:91
    292e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <segement_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:92
    2938:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <segment_cnt+0x1>
    293c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <segment_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:93
    2940:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    2944:	85 30       	cpi	r24, 0x05	; 5
    2946:	10 f0       	brcs	.+4      	; 0x294c <main+0x6fc>
    2948:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <segement_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:96
    294c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    2950:	81 11       	cpse	r24, r1
    2952:	7c c4       	rjmp	.+2296   	; 0x324c <main+0xffc>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:97
    2954:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    2958:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	c1 f4       	brne	.+48     	; 0x2990 <main+0x740>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:99
    2960:	88 e4       	ldi	r24, 0x48	; 72
    2962:	96 e0       	ldi	r25, 0x06	; 6
    2964:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:100
    2968:	0d e7       	ldi	r16, 0x7D	; 125
    296a:	11 e0       	ldi	r17, 0x01	; 1
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	6a eb       	ldi	r22, 0xBA	; 186
    2974:	72 e0       	ldi	r23, 0x02	; 2
    2976:	88 e4       	ldi	r24, 0x48	; 72
    2978:	96 e0       	ldi	r25, 0x06	; 6
    297a:	0e 94 95 05 	call	0xb2a	; 0xb2a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:101
    297e:	0d e6       	ldi	r16, 0x6D	; 109
    2980:	11 e0       	ldi	r17, 0x01	; 1
    2982:	21 e0       	ldi	r18, 0x01	; 1
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	88 e4       	ldi	r24, 0x48	; 72
    298a:	96 e0       	ldi	r25, 0x06	; 6
    298c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:103
    2990:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    2994:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    2998:	84 3f       	cpi	r24, 0xF4	; 244
    299a:	91 40       	sbci	r25, 0x01	; 1
    299c:	81 f4       	brne	.+32     	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:104
    299e:	8e eb       	ldi	r24, 0xBE	; 190
    29a0:	92 e0       	ldi	r25, 0x02	; 2
    29a2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:105
    29a6:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <p1dot0>
    29aa:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <p1dot0+0x1>
    29ae:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:106
    29b2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <p1dot0>
    29b6:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <p1dot0+0x1>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:117
    29ba:	0e 94 c9 0c 	call	0x1992	; 0x1992 <setSegmentInt(int)>
Read_dust_value():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:38
    29be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    29c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    29cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    29d0:	84 3c       	cpi	r24, 0xC4	; 196
    29d2:	99 40       	sbci	r25, 0x09	; 9
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <main+0x788>
    29d6:	34 c6       	rjmp	.+3176   	; 0x3640 <main+0x13f0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:40
    29d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
    29dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
twi_readFrom():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:169
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  uint32_t startMicros = micros();
    29e0:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    29e4:	6b 01       	movw	r12, r22
    29e6:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:170
  while(TWI_READY != twi_state){
    29e8:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_state>
    29ec:	81 11       	cpse	r24, r1
    29ee:	ea c4       	rjmp	.+2516   	; 0x33c4 <main+0x1174>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:176
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
      twi_handleTimeout(twi_do_reset_on_timeout);
      return 0;
    }
  }
  twi_state = TWI_MRX;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_state>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:177
  twi_sendStop = sendStop;
    29f6:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_sendStop>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:179
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    29fa:	9f ef       	ldi	r25, 0xFF	; 255
    29fc:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <twi_error>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:182

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2a00:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_masterBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:183
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2a04:	98 e1       	ldi	r25, 0x18	; 24
    2a06:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <twi_masterBufferLength>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:191
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    2a0a:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <twi_slarw>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:192
  twi_slarw |= address << 1;
    2a0e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_slarw>
    2a12:	80 65       	ori	r24, 0x50	; 80
    2a14:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <twi_slarw>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:194

  if (true == twi_inRepStart) {
    2a18:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <twi_inRepStart>
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <main+0x7d2>
    2a20:	61 c6       	rjmp	.+3266   	; 0x36e4 <main+0x1494>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:201
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2a22:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <twi_inRepStart>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:202
    startMicros = micros();
    2a26:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    2a2a:	6b 01       	movw	r12, r22
    2a2c:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:204
    do {
      TWDR = twi_slarw;
    2a2e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_slarw>
    2a32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:205
      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    2a36:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_timeout_us>
    2a3a:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    2a3e:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    2a42:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    2a46:	89 2b       	or	r24, r25
    2a48:	8a 2b       	or	r24, r26
    2a4a:	8b 2b       	or	r24, r27
    2a4c:	a1 f0       	breq	.+40     	; 0x2a76 <main+0x826>
    2a4e:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    2a52:	00 91 d5 03 	lds	r16, 0x03D5	; 0x8003d5 <twi_timeout_us>
    2a56:	10 91 d6 03 	lds	r17, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    2a5a:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    2a5e:	30 91 d8 03 	lds	r19, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    2a62:	6c 19       	sub	r22, r12
    2a64:	7d 09       	sbc	r23, r13
    2a66:	8e 09       	sbc	r24, r14
    2a68:	9f 09       	sbc	r25, r15
    2a6a:	06 17       	cp	r16, r22
    2a6c:	17 07       	cpc	r17, r23
    2a6e:	28 07       	cpc	r18, r24
    2a70:	39 07       	cpc	r19, r25
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <main+0x826>
    2a74:	c8 c4       	rjmp	.+2448   	; 0x3406 <main+0x11b6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:209
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    } while(TWCR & _BV(TWWC));
    2a76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a7a:	83 fd       	sbrc	r24, 3
    2a7c:	d8 cf       	rjmp	.-80     	; 0x2a2e <main+0x7de>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:210
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2a7e:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:213
  } else {
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    2a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:217
  }

  // wait for read operation to complete
  startMicros = micros();
    2a84:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    2a88:	6b 01       	movw	r12, r22
    2a8a:	7c 01       	movw	r14, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:218
  while(TWI_MRX == twi_state){
    2a8c:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_state>
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <main+0x846>
    2a94:	29 c6       	rjmp	.+3154   	; 0x36e8 <main+0x1498>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:225
      twi_handleTimeout(twi_do_reset_on_timeout);
      return 0;
    }
  }

  if (twi_masterBufferIndex < length) {
    2a96:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    2a9a:	89 31       	cpi	r24, 0x19	; 25
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <main+0x850>
    2a9e:	46 c6       	rjmp	.+3212   	; 0x372c <main+0x14dc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:226
    length = twi_masterBufferIndex;
    2aa0:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_masterBufferIndex>
    2aa4:	ad ea       	ldi	r26, 0xAD	; 173
    2aa6:	b3 e0       	ldi	r27, 0x03	; 3
    2aa8:	eb ed       	ldi	r30, 0xDB	; 219
    2aaa:	f3 e0       	ldi	r31, 0x03	; 3
main():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:230
  }

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2aac:	90 e0       	ldi	r25, 0x00	; 0
twi_readFrom():
    2aae:	98 17       	cp	r25, r24
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <main+0x864>
    2ab2:	ae c4       	rjmp	.+2396   	; 0x3410 <main+0x11c0>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:231
    data[i] = twi_masterBuffer[i];
    2ab4:	2d 91       	ld	r18, X+
    2ab6:	21 93       	st	Z+, r18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:230
  if (twi_masterBufferIndex < length) {
    length = twi_masterBufferIndex;
  }

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2ab8:	9f 5f       	subi	r25, 0xFF	; 255
    2aba:	f9 cf       	rjmp	.-14     	; 0x2aae <main+0x85e>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:360
        DEBUG_PRINTLN(" is not between 15 and 45");
        return false;
    }

    // Check header "mark" and "space", this must be done for repeat and data
    if (!matchMark(decodedIRData.rawDataPtr->rawbuf[1], RC6_HEADER_MARK)
    2abc:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
    2ac0:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2ac4:	83 85       	ldd	r24, Z+11	; 0x0b
    2ac6:	94 85       	ldd	r25, Z+12	; 0x0c
    2ac8:	88 97       	sbiw	r24, 0x28	; 40
    2aca:	4d 97       	sbiw	r24, 0x1d	; 29
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <main+0x880>
    2ace:	46 c0       	rjmp	.+140    	; 0x2b5c <main+0x90c>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2ad0:	85 85       	ldd	r24, Z+13	; 0x0d
    2ad2:	96 85       	ldd	r25, Z+14	; 0x0e
    2ad4:	0c 97       	sbiw	r24, 0x0c	; 12
    2ad6:	0b 97       	sbiw	r24, 0x0b	; 11
    2ad8:	08 f0       	brcs	.+2      	; 0x2adc <main+0x88c>
    2ada:	40 c0       	rjmp	.+128    	; 0x2b5c <main+0x90c>
initBiphaselevel():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:582
uint16_t sCurrentTimingIntervals; // Number of aBiphaseTimeUnit intervals of the current rawbuf[sBiphaseDecodeRawbuffOffset] timing.
uint8_t sUsedTimingIntervals;       // Number of already used intervals of sCurrentTimingIntervals.
uint16_t sBiphaseTimeUnit;

void IRrecv::initBiphaselevel(uint8_t aRCDecodeRawbuffOffset, uint16_t aBiphaseTimeUnit) {
    sBiphaseDecodeRawbuffOffset = aRCDecodeRawbuffOffset;
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <sBiphaseDecodeRawbuffOffset>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:583
    sBiphaseTimeUnit = aBiphaseTimeUnit;
    2ae2:	8c eb       	ldi	r24, 0xBC	; 188
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <sBiphaseTimeUnit+0x1>
    2aea:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <sBiphaseTimeUnit>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:584
    sUsedTimingIntervals = 0;
    2aee:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <sUsedTimingIntervals>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:372

    // Set Biphase decoding start values
    initBiphaselevel(3, RC6_UNIT); // Skip gap-space and start-bit mark + space

// Process first bit, which is known to be a 1 (mark->space)
    if (getBiphaselevel() != MARK) {
    2af2:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	89 f5       	brne	.+98     	; 0x2b5c <main+0x90c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:377
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("first getBiphaselevel() is not MARK");
        return false;
    }
    if (getBiphaselevel() != SPACE) {
    2afa:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2afe:	c8 2f       	mov	r28, r24
    2b00:	81 11       	cpse	r24, r1
    2b02:	2c c0       	rjmp	.+88     	; 0x2b5c <main+0x90c>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:348
/**
 * Try to decode data as RC6 protocol
 */
bool IRrecv::decodeRC6() {
    uint8_t tBitIndex;
    uint32_t tDecodedRawData = 0;
    2b04:	c1 2c       	mov	r12, r1
    2b06:	d1 2c       	mov	r13, r1
    2b08:	76 01       	movw	r14, r12
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:383
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("second getBiphaselevel() is not SPACE");
        return false;
    }

    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    2b0a:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
    2b0e:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
    2b12:	90 85       	ldd	r25, Z+8	; 0x08
    2b14:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <sBiphaseDecodeRawbuffOffset>
    2b18:	89 17       	cp	r24, r25
    2b1a:	08 f0       	brcs	.+2      	; 0x2b1e <main+0x8ce>
    2b1c:	69 c0       	rjmp	.+210    	; 0x2bf0 <main+0x9a0>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:387
        uint8_t tStartLevel; // start level of coded bit
        uint8_t tEndLevel;   // end level of coded bit

        tStartLevel = getBiphaselevel();
    2b1e:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2b22:	18 2f       	mov	r17, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:388
        if (tBitIndex == 3) {
    2b24:	c3 30       	cpi	r28, 0x03	; 3
    2b26:	b1 f0       	breq	.+44     	; 0x2b54 <main+0x904>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:397
                DEBUG_PRINTLN(F("Toggle mark or space length is wrong"));
                return false;
            }
        }

        tEndLevel = getBiphaselevel();
    2b28:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2b2c:	d8 2f       	mov	r29, r24
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:398
        if (tBitIndex == 3) {
    2b2e:	c3 30       	cpi	r28, 0x03	; 3
    2b30:	21 f4       	brne	.+8      	; 0x2b3a <main+0x8ea>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:400
            // Toggle bit is double wide; make sure second half matches
            if (tEndLevel != getBiphaselevel()) {
    2b32:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2b36:	d8 13       	cpse	r29, r24
    2b38:	11 c0       	rjmp	.+34     	; 0x2b5c <main+0x90c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:410
        }

        /*
         * Determine tDecodedRawData bit value by checking the transition type
         */
        if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
    2b3a:	11 30       	cpi	r17, 0x01	; 1
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <main+0x8f0>
    2b3e:	4e c0       	rjmp	.+156    	; 0x2bdc <main+0x98c>
    2b40:	d1 11       	cpse	r29, r1
    2b42:	0c c0       	rjmp	.+24     	; 0x2b5c <main+0x90c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:412
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;  // inverted compared to RC5
    2b44:	cc 0c       	add	r12, r12
    2b46:	dd 1c       	adc	r13, r13
    2b48:	ee 1c       	adc	r14, r14
    2b4a:	ff 1c       	adc	r15, r15
    2b4c:	68 94       	set
    2b4e:	c0 f8       	bld	r12, 0
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:383
        DEBUG_PRINT(F("RC6: "));
        DEBUG_PRINTLN("second getBiphaselevel() is not SPACE");
        return false;
    }

    for (tBitIndex = 0; sBiphaseDecodeRawbuffOffset < decodedIRData.rawDataPtr->rawlen; tBitIndex++) {
    2b50:	cf 5f       	subi	r28, 0xFF	; 255
    2b52:	db cf       	rjmp	.-74     	; 0x2b0a <main+0x8ba>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:390
        uint8_t tEndLevel;   // end level of coded bit

        tStartLevel = getBiphaselevel();
        if (tBitIndex == 3) {
            // Toggle bit is double wide; make sure second half is equal first half
            if (tStartLevel != getBiphaselevel()) {
    2b54:	0e 94 ab 01 	call	0x356	; 0x356 <IRrecv::getBiphaselevel() [clone .constprop.62]>
    2b58:	18 17       	cp	r17, r24
    2b5a:	31 f3       	breq	.-52     	; 0x2b28 <main+0x8d8>
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:253
 * Old MSB first decoder
 */
bool IRrecv::decodePanasonicMSB(decode_results *aResults) {
    unsigned int offset = 1;

    if (aResults->rawlen < (2 * KASEIKYO_BITS) + 2) {
    2b5c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <results+0xe>
    2b60:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <results+0xf>
    2b64:	82 36       	cpi	r24, 0x62	; 98
    2b66:	91 05       	cpc	r25, r1
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <main+0x91c>
    2b6a:	87 c0       	rjmp	.+270    	; 0x2c7a <main+0xa2a>
    2b6c:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2b70:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	c3 97       	sbiw	r24, 0x33	; 51
    2b7a:	85 97       	sbiw	r24, 0x25	; 37
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <main+0x930>
    2b7e:	7d c0       	rjmp	.+250    	; 0x2c7a <main+0xa2a>
    2b80:	84 81       	ldd	r24, Z+4	; 0x04
    2b82:	95 81       	ldd	r25, Z+5	; 0x05
    2b84:	4a 97       	sbiw	r24, 0x1a	; 26
    2b86:	43 97       	sbiw	r24, 0x13	; 19
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <main+0x93c>
    2b8a:	77 c0       	rjmp	.+238    	; 0x2c7a <main+0xa2a>
decodePanasonicMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:267
        return false;
    }
    offset++;

    // decode address
    if (!decodePulseDistanceData(KASEIKYO_ADDRESS_BITS + KASEIKYO_DATA_BITS, offset, KASEIKYO_BIT_MARK, KASEIKYO_ONE_SPACE,
    2b8c:	20 eb       	ldi	r18, 0xB0	; 176
    2b8e:	31 e0       	ldi	r19, 0x01	; 1
    2b90:	40 e1       	ldi	r20, 0x10	; 16
    2b92:	55 e0       	ldi	r21, 0x05	; 5
    2b94:	60 eb       	ldi	r22, 0xB0	; 176
    2b96:	71 e0       	ldi	r23, 0x01	; 1
    2b98:	8c e2       	ldi	r24, 0x2C	; 44
    2b9a:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <main+0x954>
    2ba2:	6b c0       	rjmp	.+214    	; 0x2c7a <main+0xa2a>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:272
    KASEIKYO_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
        return false;
    }

    aResults->bits = KASEIKYO_BITS;
    2ba4:	80 e3       	ldi	r24, 0x30	; 48
    2ba6:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:273
    aResults->value = decodedIRData.decodedRawData;
    2baa:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    2bae:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    2bb2:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    2bb6:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    2bba:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    2bbe:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    2bc2:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    2bc6:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:274
    aResults->address = PANASONIC_VENDOR_ID_CODE;
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	90 e2       	ldi	r25, 0x20	; 32
    2bce:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <results+0x3>
    2bd2:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <results+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Kaseikyo.cpp:275
    aResults->decode_type = PANASONIC;
    2bd6:	88 e0       	ldi	r24, 0x08	; 8
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	73 cd       	rjmp	.-1306   	; 0x26c2 <main+0x472>
decodeRC6():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:413
         * Determine tDecodedRawData bit value by checking the transition type
         */
        if ((tStartLevel == MARK) && (tEndLevel == SPACE)) {
            // we have a mark to space transition here
            tDecodedRawData = (tDecodedRawData << 1) | 1;  // inverted compared to RC5
        } else if ((tStartLevel == SPACE) && (tEndLevel == MARK)) {
    2bdc:	11 11       	cpse	r17, r1
    2bde:	be cf       	rjmp	.-132    	; 0x2b5c <main+0x90c>
    2be0:	d1 30       	cpi	r29, 0x01	; 1
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <main+0x996>
    2be4:	bb cf       	rjmp	.-138    	; 0x2b5c <main+0x90c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:415
            // we have a space to mark transition here
            tDecodedRawData = (tDecodedRawData << 1) | 0;
    2be6:	cc 0c       	add	r12, r12
    2be8:	dd 1c       	adc	r13, r13
    2bea:	ee 1c       	adc	r14, r14
    2bec:	ff 1c       	adc	r15, r15
    2bee:	b0 cf       	rjmp	.-160    	; 0x2b50 <main+0x900>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:425
            return false;            // Error
        }
    }

// Success
    decodedIRData.numberOfBits = tBitIndex;
    2bf0:	c0 93 35 06 	sts	0x0635, r28	; 0x800635 <irrecv+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:429

    LongUnion tValue;
    tValue.ULong = tDecodedRawData;
    decodedIRData.decodedRawData = tDecodedRawData;
    2bf4:	c0 92 37 06 	sts	0x0637, r12	; 0x800637 <irrecv+0xa>
    2bf8:	d0 92 38 06 	sts	0x0638, r13	; 0x800638 <irrecv+0xb>
    2bfc:	e0 92 39 06 	sts	0x0639, r14	; 0x800639 <irrecv+0xc>
    2c00:	f0 92 3a 06 	sts	0x063A, r15	; 0x80063a <irrecv+0xd>
    2c04:	2c 2d       	mov	r18, r12
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	8d 2d       	mov	r24, r13
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:431

    if (tBitIndex < 36) {
    2c0a:	c4 32       	cpi	r28, 0x24	; 36
    2c0c:	f8 f4       	brcc	.+62     	; 0x2c4c <main+0x9fc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:433
        // RC6
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST;
    2c0e:	80 e8       	ldi	r24, 0x80	; 128
    2c10:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:434
        decodedIRData.command = tValue.UByte.LowByte;
    2c14:	30 93 32 06 	sts	0x0632, r19	; 0x800632 <irrecv+0x5>
    2c18:	20 93 31 06 	sts	0x0631, r18	; 0x800631 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:435
        decodedIRData.address = tValue.UByte.MidLowByte;
    2c1c:	8d 2d       	mov	r24, r13
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <irrecv+0x3>
    2c24:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:437
        // Check for toggle flag
        if ((tValue.UByte.MidHighByte & 1) != 0) {
    2c28:	e0 fe       	sbrs	r14, 0
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <main+0x9e2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:438
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
    2c2c:	88 e8       	ldi	r24, 0x88	; 136
    2c2e:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:454
        // get extra info
        decodedIRData.extra = tValue.UWord.HighWord;
    }

    // check for repeat, do not check toggle bit yet
    if (decodedIRData.rawDataPtr->rawbuf[0] < ((RC6_REPEAT_SPACE + (RC6_REPEAT_SPACE / 2)) / MICROS_PER_TICK)) {
    2c32:	81 85       	ldd	r24, Z+9	; 0x09
    2c34:	92 85       	ldd	r25, Z+10	; 0x0a
    2c36:	8a 38       	cpi	r24, 0x8A	; 138
    2c38:	9c 40       	sbci	r25, 0x0C	; 12
    2c3a:	28 f4       	brcc	.+10     	; 0x2c46 <main+0x9f6>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:455
        decodedIRData.flags |= IRDATA_FLAGS_IS_REPEAT;
    2c3c:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <irrecv+0x9>
    2c40:	81 60       	ori	r24, 0x01	; 1
    2c42:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:458
    }

    decodedIRData.protocol = RC6;
    2c46:	8f e0       	ldi	r24, 0x0F	; 15
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0d ce       	rjmp	.-998    	; 0x2866 <main+0x616>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:442
        if ((tValue.UByte.MidHighByte & 1) != 0) {
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST;
        }
    } else {
        // RC6A
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
    2c4c:	90 e9       	ldi	r25, 0x90	; 144
    2c4e:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:443
        if ((tValue.UByte.MidLowByte & 0x80) != 0) {
    2c52:	d7 fe       	sbrs	r13, 7
    2c54:	03 c0       	rjmp	.+6      	; 0x2c5c <main+0xa0c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:444
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
    2c56:	98 e9       	ldi	r25, 0x98	; 152
    2c58:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:447
        }
        tValue.UByte.MidLowByte &= 0x87F; // mask toggle bit
        decodedIRData.command = tValue.UByte.LowByte;
    2c5c:	30 93 32 06 	sts	0x0632, r19	; 0x800632 <irrecv+0x5>
    2c60:	20 93 31 06 	sts	0x0631, r18	; 0x800631 <irrecv+0x4>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:446
        // RC6A
        decodedIRData.flags = IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
        if ((tValue.UByte.MidLowByte & 0x80) != 0) {
            decodedIRData.flags = IRDATA_TOGGLE_BIT_MASK | IRDATA_FLAGS_IS_MSB_FIRST | IRDATA_FLAGS_EXTRA_INFO;
        }
        tValue.UByte.MidLowByte &= 0x87F; // mask toggle bit
    2c64:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:448
        decodedIRData.command = tValue.UByte.LowByte;
        decodedIRData.address = tValue.UByte.MidLowByte;
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <irrecv+0x3>
    2c6c:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <irrecv+0x2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_RC5_RC6.cpp:450
        // get extra info
        decodedIRData.extra = tValue.UWord.HighWord;
    2c70:	f0 92 34 06 	sts	0x0634, r15	; 0x800634 <irrecv+0x7>
    2c74:	e0 92 33 06 	sts	0x0633, r14	; 0x800633 <irrecv+0x6>
    2c78:	dc cf       	rjmp	.-72     	; 0x2c32 <main+0x9e2>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:231
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeLGMSB(decode_results *aResults) {
    unsigned int offset = 1; // Skip first space

// Check we have enough data (60) - +4 for initial gap, start bit mark and space + stop bit mark
    if (aResults->rawlen != (2 * LG_BITS) + 4) {
    2c7a:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <results+0xe>
    2c7e:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <results+0xf>
    2c82:	cc 97       	sbiw	r24, 0x3c	; 60
    2c84:	e9 f5       	brne	.+122    	; 0x2d00 <main+0xab0>
    2c86:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2c8a:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	86 58       	subi	r24, 0x86	; 134
    2c94:	91 09       	sbc	r25, r1
    2c96:	8c 35       	cpi	r24, 0x5C	; 92
    2c98:	91 05       	cpc	r25, r1
    2c9a:	90 f5       	brcc	.+100    	; 0x2d00 <main+0xab0>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2c9c:	84 81       	ldd	r24, Z+4	; 0x04
    2c9e:	95 81       	ldd	r25, Z+5	; 0x05
    2ca0:	82 54       	subi	r24, 0x42	; 66
    2ca2:	91 09       	sbc	r25, r1
    2ca4:	8f 97       	sbiw	r24, 0x2f	; 47
    2ca6:	60 f5       	brcc	.+88     	; 0x2d00 <main+0xab0>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:246
    if (!matchSpace(aResults->rawbuf[offset], LG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(LG_BITS, offset, LG_BIT_MARK, LG_ONE_SPACE, LG_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    2ca8:	20 e3       	ldi	r18, 0x30	; 48
    2caa:	32 e0       	ldi	r19, 0x02	; 2
    2cac:	40 e9       	ldi	r20, 0x90	; 144
    2cae:	56 e0       	ldi	r21, 0x06	; 6
    2cb0:	60 e3       	ldi	r22, 0x30	; 48
    2cb2:	72 e0       	ldi	r23, 0x02	; 2
    2cb4:	8c e1       	ldi	r24, 0x1C	; 28
    2cb6:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f1       	breq	.+66     	; 0x2d00 <main+0xab0>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:250
        return false;
    }
// Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * LG_BITS)], LG_BIT_MARK)) {
    2cbe:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2cc2:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    2cc6:	ea 58       	subi	r30, 0x8A	; 138
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	08 97       	sbiw	r24, 0x08	; 8
    2cd0:	08 97       	sbiw	r24, 0x08	; 8
    2cd2:	b0 f4       	brcc	.+44     	; 0x2d00 <main+0xab0>
decodeLGMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:256
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    2cd4:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    2cd8:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    2cdc:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    2ce0:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    2ce4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    2ce8:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    2cec:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    2cf0:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:257
    aResults->bits = LG_BITS;
    2cf4:	8c e1       	ldi	r24, 0x1C	; 28
    2cf6:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_LG.cpp:258
    aResults->decode_type = LG;
    2cfa:	86 e0       	ldi	r24, 0x06	; 6
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	e1 cc       	rjmp	.-1598   	; 0x26c2 <main+0x472>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:163
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeJVCMSB(decode_results *aResults) {
    unsigned int offset = 1; // Skip first space

    // Check for repeat
    if ((aResults->rawlen - 1 == 33) && matchMark(aResults->rawbuf[offset], JVC_BIT_MARK)
    2d00:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <results+0xe>
    2d04:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <results+0xf>
    2d08:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2d0c:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:164
            && matchMark(aResults->rawbuf[aResults->rawlen - 1], JVC_BIT_MARK)) {
    2d14:	42 32       	cpi	r20, 0x22	; 34
    2d16:	51 05       	cpc	r21, r1
    2d18:	01 f5       	brne	.+64     	; 0x2d5a <main+0xb0a>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    2d1a:	9c 01       	movw	r18, r24
    2d1c:	28 50       	subi	r18, 0x08	; 8
    2d1e:	31 09       	sbc	r19, r1
    2d20:	27 30       	cpi	r18, 0x07	; 7
    2d22:	31 05       	cpc	r19, r1
    2d24:	d0 f4       	brcc	.+52     	; 0x2d5a <main+0xb0a>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:164
    2d26:	df 01       	movw	r26, r30
    2d28:	ae 5b       	subi	r26, 0xBE	; 190
    2d2a:	bf 4f       	sbci	r27, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    2d2c:	2d 91       	ld	r18, X+
    2d2e:	3c 91       	ld	r19, X
    2d30:	28 50       	subi	r18, 0x08	; 8
    2d32:	31 09       	sbc	r19, r1
    2d34:	27 30       	cpi	r18, 0x07	; 7
    2d36:	31 05       	cpc	r19, r1
    2d38:	80 f4       	brcc	.+32     	; 0x2d5a <main+0xb0a>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:165
        aResults->bits = 0;
    2d3a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:166
        aResults->value = 0xFFFFFFFF;
    2d3e:	80 92 97 03 	sts	0x0397, r8	; 0x800397 <results+0x4>
    2d42:	90 92 98 03 	sts	0x0398, r9	; 0x800398 <results+0x5>
    2d46:	a0 92 99 03 	sts	0x0399, r10	; 0x800399 <results+0x6>
    2d4a:	b0 92 9a 03 	sts	0x039A, r11	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:167
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:168
        decodedIRData.protocol = JVC;
    2d54:	85 e0       	ldi	r24, 0x05	; 5
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	79 cc       	rjmp	.-1806   	; 0x264c <main+0x3fc>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    2d5a:	8d 57       	subi	r24, 0x7D	; 125
    2d5c:	91 09       	sbc	r25, r1
    2d5e:	87 35       	cpi	r24, 0x57	; 87
    2d60:	91 05       	cpc	r25, r1
    2d62:	a0 f5       	brcc	.+104    	; 0x2dcc <main+0xb7c>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:179
        return false;
    }
    offset++;

    // Check we have enough data - +3 for start bit mark and space + stop bit mark
    if (aResults->rawlen <= (2 * JVC_BITS) + 3) {
    2d64:	44 32       	cpi	r20, 0x24	; 36
    2d66:	51 05       	cpc	r21, r1
    2d68:	88 f1       	brcs	.+98     	; 0x2dcc <main+0xb7c>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2d6a:	84 81       	ldd	r24, Z+4	; 0x04
    2d6c:	95 81       	ldd	r25, Z+5	; 0x05
    2d6e:	ce 97       	sbiw	r24, 0x3e	; 62
    2d70:	8c 97       	sbiw	r24, 0x2c	; 44
    2d72:	60 f5       	brcc	.+88     	; 0x2dcc <main+0xb7c>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:193
    if (!matchSpace(aResults->rawbuf[offset], JVC_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(JVC_BITS, offset, JVC_BIT_MARK, JVC_ONE_SPACE, JVC_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    2d74:	2e e0       	ldi	r18, 0x0E	; 14
    2d76:	32 e0       	ldi	r19, 0x02	; 2
    2d78:	4a e2       	ldi	r20, 0x2A	; 42
    2d7a:	56 e0       	ldi	r21, 0x06	; 6
    2d7c:	6e e0       	ldi	r22, 0x0E	; 14
    2d7e:	72 e0       	ldi	r23, 0x02	; 2
    2d80:	80 e1       	ldi	r24, 0x10	; 16
    2d82:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    2d86:	88 23       	and	r24, r24
    2d88:	09 f1       	breq	.+66     	; 0x2dcc <main+0xb7c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:198
        return false;
    }

    // Stop bit
    if (!matchMark(aResults->rawbuf[offset + (2 * JVC_BITS)], JVC_BIT_MARK)) {
    2d8a:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2d8e:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    2d92:	ea 5b       	subi	r30, 0xBA	; 186
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	08 97       	sbiw	r24, 0x08	; 8
    2d9c:	07 97       	sbiw	r24, 0x07	; 7
    2d9e:	b0 f4       	brcc	.+44     	; 0x2dcc <main+0xb7c>
decodeJVCMSB():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:204
        DEBUG_PRINTLN(F("Stop bit mark length is wrong"));
        return false;
    }

    // Success
    aResults->value = decodedIRData.decodedRawData;
    2da0:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    2da4:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    2da8:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    2dac:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    2db0:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    2db4:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    2db8:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    2dbc:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:205
    aResults->bits = JVC_BITS;
    2dc0:	80 e1       	ldi	r24, 0x10	; 16
    2dc2:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_JVC.cpp:206
    aResults->decode_type = JVC;
    2dc6:	85 e0       	ldi	r24, 0x05	; 5
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	7b cc       	rjmp	.-1802   	; 0x26c2 <main+0x472>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:217
#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeSAMSUNG(decode_results *aResults) {
    unsigned int offset = 1;  // Skip first space

    // Initial mark
    if (!matchMark(aResults->rawbuf[offset], SAMSUNG_HEADER_MARK)) {
    2dcc:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2dd0:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	81 54       	subi	r24, 0x41	; 65
    2dda:	91 09       	sbc	r25, r1
    2ddc:	8f 97       	sbiw	r24, 0x2f	; 47
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <main+0xb92>
    2de0:	55 c0       	rjmp	.+170    	; 0x2e8c <main+0xc3c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:223
        return false;
    }
    offset++;

// Check for repeat -- like a NEC repeat
    if ((aResults->rawlen == 4) && matchSpace(aResults->rawbuf[offset], 2250)
    2de2:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <results+0xe>
    2de6:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <results+0xf>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:224
            && matchMark(aResults->rawbuf[offset + 1], SAMSUNG_BIT_MARK)) {
    2dea:	84 30       	cpi	r24, 0x04	; 4
    2dec:	91 05       	cpc	r25, r1
    2dee:	e1 f4       	brne	.+56     	; 0x2e28 <main+0xbd8>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2df0:	84 81       	ldd	r24, Z+4	; 0x04
    2df2:	95 81       	ldd	r25, Z+5	; 0x05
    2df4:	81 97       	sbiw	r24, 0x21	; 33
    2df6:	48 97       	sbiw	r24, 0x18	; 24
    2df8:	08 f0       	brcs	.+2      	; 0x2dfc <main+0xbac>
    2dfa:	48 c0       	rjmp	.+144    	; 0x2e8c <main+0xc3c>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2dfc:	86 81       	ldd	r24, Z+6	; 0x06
    2dfe:	97 81       	ldd	r25, Z+7	; 0x07
    2e00:	08 97       	sbiw	r24, 0x08	; 8
    2e02:	08 97       	sbiw	r24, 0x08	; 8
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <main+0xbb8>
    2e06:	42 c0       	rjmp	.+132    	; 0x2e8c <main+0xc3c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:225
        aResults->bits = 0;
    2e08:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:226
        aResults->value = 0xFFFFFFFF;
    2e0c:	80 92 97 03 	sts	0x0397, r8	; 0x800397 <results+0x4>
    2e10:	90 92 98 03 	sts	0x0398, r9	; 0x800398 <results+0x5>
    2e14:	a0 92 99 03 	sts	0x0399, r10	; 0x800399 <results+0x6>
    2e18:	b0 92 9a 03 	sts	0x039A, r11	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:227
        decodedIRData.flags = IRDATA_FLAGS_IS_REPEAT;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <irrecv+0x9>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:228
        decodedIRData.protocol = SAMSUNG;
    2e22:	80 e1       	ldi	r24, 0x10	; 16
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	12 cc       	rjmp	.-2012   	; 0x264c <main+0x3fc>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:231
        return true;
    }
    if (aResults->rawlen < (2 * SAMSUNG_BITS) + 4) {
    2e28:	84 34       	cpi	r24, 0x44	; 68
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	78 f1       	brcs	.+94     	; 0x2e8c <main+0xc3c>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2e2e:	84 81       	ldd	r24, Z+4	; 0x04
    2e30:	95 81       	ldd	r25, Z+5	; 0x05
    2e32:	81 54       	subi	r24, 0x41	; 65
    2e34:	91 09       	sbc	r25, r1
    2e36:	8e 97       	sbiw	r24, 0x2e	; 46
    2e38:	48 f5       	brcc	.+82     	; 0x2e8c <main+0xc3c>
decodeSAMSUNG():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:241
    if (!matchSpace(aResults->rawbuf[offset], SAMSUNG_HEADER_SPACE)) {
        return false;
    }
    offset++;

    if (!decodePulseDistanceData(SAMSUNG_BITS, offset, SAMSUNG_BIT_MARK, SAMSUNG_ONE_SPACE, SAMSUNG_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    2e3a:	26 e2       	ldi	r18, 0x26	; 38
    2e3c:	32 e0       	ldi	r19, 0x02	; 2
    2e3e:	42 e7       	ldi	r20, 0x72	; 114
    2e40:	56 e0       	ldi	r21, 0x06	; 6
    2e42:	66 e2       	ldi	r22, 0x26	; 38
    2e44:	72 e0       	ldi	r23, 0x02	; 2
    2e46:	80 e2       	ldi	r24, 0x20	; 32
    2e48:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    2e4c:	88 23       	and	r24, r24
    2e4e:	f1 f0       	breq	.+60     	; 0x2e8c <main+0xc3c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:246
        return false;
    }

// Success
    aResults->value = decodedIRData.decodedRawData;
    2e50:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    2e54:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    2e58:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    2e5c:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    2e60:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    2e64:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    2e68:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    2e6c:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:247
    aResults->bits = SAMSUNG_BITS;
    2e70:	80 e2       	ldi	r24, 0x20	; 32
    2e72:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:248
    aResults->decode_type = SAMSUNG;
    2e76:	a0 e1       	ldi	r26, 0x10	; 16
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <results+0x1>
    2e7e:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <results>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Samsung.cpp:249
    decodedIRData.protocol = SAMSUNG;
    2e82:	b0 93 2e 06 	sts	0x062E, r27	; 0x80062e <irrecv+0x1>
    2e86:	a0 93 2d 06 	sts	0x062D, r26	; 0x80062d <irrecv>
    2e8a:	ff cc       	rjmp	.-1538   	; 0x288a <main+0x63a>
decodeDenonOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:201

#if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeDenonOld(decode_results *aResults) {

    // Check we have the right amount of data
    if (decodedIRData.rawDataPtr->rawlen != 1 + 2 + (2 * DENON_BITS) + 1) {
    2e8c:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <irrecv+0xe>
    2e90:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <irrecv+0xf>
    2e94:	80 85       	ldd	r24, Z+8	; 0x08
    2e96:	82 32       	cpi	r24, 0x22	; 34
    2e98:	79 f5       	brne	.+94     	; 0x2ef8 <main+0xca8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:206
        return false;
    }

    // Check initial Mark+Space match
    if (!matchMark(aResults->rawbuf[1], DENON_HEADER_MARK)) {
    2e9a:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2e9e:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
matchMark():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:780
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for marks exceeded by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros + MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros + MARK_EXCESS_MICROS)));
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	04 97       	sbiw	r24, 0x04	; 4
    2ea8:	05 97       	sbiw	r24, 0x05	; 5
    2eaa:	30 f5       	brcc	.+76     	; 0x2ef8 <main+0xca8>
matchSpace():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:813
    Serial.print(F(" <= "));
    Serial.print(TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS) * MICROS_PER_TICK, DEC);
#endif
    // compensate for spaces shortened by demodulator hardware
    bool passed = ((aMeasuredTicks >= TICKS_LOW(aMatchValueMicros - MARK_EXCESS_MICROS))
            && (aMeasuredTicks <= TICKS_HIGH(aMatchValueMicros - MARK_EXCESS_MICROS)));
    2eac:	84 81       	ldd	r24, Z+4	; 0x04
    2eae:	95 81       	ldd	r25, Z+5	; 0x05
    2eb0:	0b 97       	sbiw	r24, 0x0b	; 11
    2eb2:	0a 97       	sbiw	r24, 0x0a	; 10
    2eb4:	08 f5       	brcc	.+66     	; 0x2ef8 <main+0xca8>
decodeDenonOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:215
    if (!matchSpace(aResults->rawbuf[2], DENON_HEADER_SPACE)) {
        return false;
    }

    // Read the bits in
    if (!decodePulseDistanceData(DENON_BITS, 3, DENON_BIT_MARK, DENON_ONE_SPACE, DENON_ZERO_SPACE, PROTOCOL_IS_MSB_FIRST)) {
    2eb6:	2c e0       	ldi	r18, 0x0C	; 12
    2eb8:	33 e0       	ldi	r19, 0x03	; 3
    2eba:	4c e1       	ldi	r20, 0x1C	; 28
    2ebc:	57 e0       	ldi	r21, 0x07	; 7
    2ebe:	64 e0       	ldi	r22, 0x04	; 4
    2ec0:	71 e0       	ldi	r23, 0x01	; 1
    2ec2:	8f e0       	ldi	r24, 0x0F	; 15
    2ec4:	0e 94 14 0c 	call	0x1828	; 0x1828 <IRrecv::decodePulseDistanceData(unsigned char, unsigned char, unsigned int, unsigned int, unsigned int, bool) [clone .constprop.56]>
    2ec8:	88 23       	and	r24, r24
    2eca:	b1 f0       	breq	.+44     	; 0x2ef8 <main+0xca8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:220
        return false;
    }

    // Success
    aResults->value = decodedIRData.decodedRawData;
    2ecc:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <irrecv+0xa>
    2ed0:	90 91 38 06 	lds	r25, 0x0638	; 0x800638 <irrecv+0xb>
    2ed4:	a0 91 39 06 	lds	r26, 0x0639	; 0x800639 <irrecv+0xc>
    2ed8:	b0 91 3a 06 	lds	r27, 0x063A	; 0x80063a <irrecv+0xd>
    2edc:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <results+0x4>
    2ee0:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <results+0x5>
    2ee4:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <results+0x6>
    2ee8:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:221
    aResults->bits = DENON_BITS;
    2eec:	8f e0       	ldi	r24, 0x0F	; 15
    2eee:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/ir_Denon.cpp:222
    aResults->decode_type = DENON;
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	e5 cb       	rjmp	.-2102   	; 0x26c2 <main+0x472>
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:711
#  if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeHashOld(decode_results *aResults) {
    long hash = FNV_BASIS_32;

// Require at least 6 samples to prevent triggering on noise
    if (aResults->rawlen < 6) {
    2ef8:	00 91 a1 03 	lds	r16, 0x03A1	; 0x8003a1 <results+0xe>
    2efc:	10 91 a2 03 	lds	r17, 0x03A2	; 0x8003a2 <results+0xf>
    2f00:	06 30       	cpi	r16, 0x06	; 6
    2f02:	11 05       	cpc	r17, r1
    2f04:	08 f4       	brcc	.+2      	; 0x2f08 <main+0xcb8>
    2f06:	f4 cc       	rjmp	.-1560   	; 0x28f0 <main+0x6a0>
    2f08:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <results+0xc>
    2f0c:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <results+0xd>
    2f10:	32 96       	adiw	r30, 0x02	; 2
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:708
    return true;
}

#  if !defined(NO_LEGACY_COMPATIBILITY)
bool IRrecv::decodeHashOld(decode_results *aResults) {
    long hash = FNV_BASIS_32;
    2f12:	25 ec       	ldi	r18, 0xC5	; 197
    2f14:	3d e9       	ldi	r19, 0x9D	; 157
    2f16:	4c e1       	ldi	r20, 0x1C	; 28
    2f18:	51 e8       	ldi	r21, 0x81	; 129
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:716
    if (aResults->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
    2f1a:	c3 e0       	ldi	r28, 0x03	; 3
    2f1c:	d0 e0       	ldi	r29, 0x00	; 0
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    2f1e:	8a e0       	ldi	r24, 0x0A	; 10
    2f20:	f8 2e       	mov	r15, r24
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:716
    if (aResults->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
    2f22:	84 81       	ldd	r24, Z+4	; 0x04
    2f24:	95 81       	ldd	r25, Z+5	; 0x05
    2f26:	61 91       	ld	r22, Z+
    2f28:	71 91       	ld	r23, Z+
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    2f2a:	f8 9e       	mul	r15, r24
    2f2c:	60 01       	movw	r12, r0
    2f2e:	f9 9e       	mul	r15, r25
    2f30:	d0 0c       	add	r13, r0
    2f32:	11 24       	eor	r1, r1
    2f34:	db 01       	movw	r26, r22
    2f36:	aa 0f       	add	r26, r26
    2f38:	bb 1f       	adc	r27, r27
    2f3a:	aa 0f       	add	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	aa 0f       	add	r26, r26
    2f40:	bb 1f       	adc	r27, r27
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:656
        return 0;
    2f42:	e1 2c       	mov	r14, r1
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:655
 * Compare two (tick) values
 * Use a tolerance of 20% to enable e.g. 500 and 600 (NEC timing) to be equal
 * @return  0 if newval is shorter, 1 if newval is equal, and 2 if newval is longer
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
    2f44:	ca 16       	cp	r12, r26
    2f46:	db 06       	cpc	r13, r27
    2f48:	88 f0       	brcs	.+34     	; 0x2f6c <main+0xd1c>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:658
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    2f4a:	f6 9e       	mul	r15, r22
    2f4c:	d0 01       	movw	r26, r0
    2f4e:	f7 9e       	mul	r15, r23
    2f50:	b0 0d       	add	r27, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	63 e0       	ldi	r22, 0x03	; 3
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	6a 95       	dec	r22
    2f5c:	e1 f7       	brne	.-8      	; 0x2f56 <main+0xd06>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:661
        return 2;
    }
    return 1;
    2f5e:	ee 24       	eor	r14, r14
    2f60:	e3 94       	inc	r14
compare():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:658
 */
uint8_t IRrecv::compare(unsigned int oldval, unsigned int newval) {
    if (newval * 10 < oldval * 8) {
        return 0;
    }
    if (oldval * 10 < newval * 8) {
    2f62:	a8 17       	cp	r26, r24
    2f64:	b9 07       	cpc	r27, r25
    2f66:	10 f4       	brcc	.+4      	; 0x2f6c <main+0xd1c>
main():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:659
        return 2;
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	e8 2e       	mov	r14, r24
decodeHashOld():
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:718
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    2f6c:	63 e9       	ldi	r22, 0x93	; 147
    2f6e:	71 e0       	ldi	r23, 0x01	; 1
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	91 e0       	ldi	r25, 0x01	; 1
    2f74:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <__mulsi3>
    2f78:	9b 01       	movw	r18, r22
    2f7a:	ac 01       	movw	r20, r24
    2f7c:	2e 25       	eor	r18, r14
    2f7e:	21 96       	adiw	r28, 0x01	; 1
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:715
// Require at least 6 samples to prevent triggering on noise
    if (aResults->rawlen < 6) {
        return false;
    }

    for (unsigned int i = 1; (i + 2) < aResults->rawlen; i++) {
    2f80:	c0 17       	cp	r28, r16
    2f82:	d1 07       	cpc	r29, r17
    2f84:	71 f6       	brne	.-100    	; 0x2f22 <main+0xcd2>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:721
        uint8_t value = compare(aResults->rawbuf[i], aResults->rawbuf[i + 2]);
        // Add value into the hash
        hash = (hash * FNV_PRIME_32) ^ value;
    }

    aResults->value = hash;
    2f86:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <results+0x4>
    2f8a:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <results+0x5>
    2f8e:	40 93 99 03 	sts	0x0399, r20	; 0x800399 <results+0x6>
    2f92:	50 93 9a 03 	sts	0x039A, r21	; 0x80039a <results+0x7>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:722
    aResults->bits = 32;
    2f96:	80 e2       	ldi	r24, 0x20	; 32
    2f98:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <results+0x8>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:723
    aResults->decode_type = UNKNOWN;
    2f9c:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <results+0x1>
    2fa0:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <results>
C:\Users\dlcks\Documents\Arduino\libraries\IRremote-3.3.0\src/IRReceive.cpp.h:724
    decodedIRData.protocol = UNKNOWN;
    2fa4:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <irrecv+0x1>
    2fa8:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <irrecv>
    2fac:	6e cc       	rjmp	.-1828   	; 0x288a <main+0x63a>
ReceiveIR():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:150
    2fae:	84 3e       	cpi	r24, 0xE4	; 228
    2fb0:	2e e1       	ldi	r18, 0x1E	; 30
    2fb2:	92 07       	cpc	r25, r18
    2fb4:	22 e3       	ldi	r18, 0x32	; 50
    2fb6:	a2 07       	cpc	r26, r18
    2fb8:	25 e5       	ldi	r18, 0x55	; 85
    2fba:	b2 07       	cpc	r27, r18
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <main+0xd70>
    2fbe:	50 c0       	rjmp	.+160    	; 0x3060 <main+0xe10>
    2fc0:	80 3a       	cpi	r24, 0xA0	; 160
    2fc2:	9c 41       	sbci	r25, 0x1C	; 28
    2fc4:	ab 48       	sbci	r26, 0x8B	; 139
    2fc6:	b9 46       	sbci	r27, 0x69	; 105
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <main+0xd7c>
    2fca:	92 cc       	rjmp	.-1756   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:227
    2fcc:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    2fd0:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:228
    2fd4:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    2fd8:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:229
    2fdc:	a0 ea       	ldi	r26, 0xA0	; 160
    2fde:	bf e0       	ldi	r27, 0x0F	; 15
    2fe0:	3a c0       	rjmp	.+116    	; 0x3056 <main+0xe06>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:150
    2fe2:	84 30       	cpi	r24, 0x04	; 4
    2fe4:	2d ee       	ldi	r18, 0xED	; 237
    2fe6:	92 07       	cpc	r25, r18
    2fe8:	2d e7       	ldi	r18, 0x7D	; 125
    2fea:	a2 07       	cpc	r26, r18
    2fec:	2a ea       	ldi	r18, 0xAA	; 170
    2fee:	b2 07       	cpc	r27, r18
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <main+0xda4>
    2ff2:	52 c0       	rjmp	.+164    	; 0x3098 <main+0xe48>
    2ff4:	b8 f4       	brcc	.+46     	; 0x3024 <main+0xdd4>
    2ff6:	84 32       	cpi	r24, 0x24	; 36
    2ff8:	96 44       	sbci	r25, 0x46	; 70
    2ffa:	a7 44       	sbci	r26, 0x47	; 71
    2ffc:	bf 49       	sbci	r27, 0x9F	; 159
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <main+0xdb2>
    3000:	77 cc       	rjmp	.-1810   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:206
    3002:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    3006:	88 23       	and	r24, r24
    3008:	09 f4       	brne	.+2      	; 0x300c <main+0xdbc>
    300a:	72 cc       	rjmp	.-1820   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:207
    300c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <wind_flag>
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <wind_flag>
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	08 f4       	brcc	.+2      	; 0x301c <main+0xdcc>
    301a:	6c c0       	rjmp	.+216    	; 0x30f4 <main+0xea4>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <wind_flag>
    3022:	68 c0       	rjmp	.+208    	; 0x30f4 <main+0xea4>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:150
    3024:	84 30       	cpi	r24, 0x04	; 4
    3026:	2c e8       	ldi	r18, 0x8C	; 140
    3028:	92 07       	cpc	r25, r18
    302a:	2d ed       	ldi	r18, 0xDD	; 221
    302c:	a2 07       	cpc	r26, r18
    302e:	21 ee       	ldi	r18, 0xE1	; 225
    3030:	b2 07       	cpc	r27, r18
    3032:	09 f4       	brne	.+2      	; 0x3036 <main+0xde6>
    3034:	ba c0       	rjmp	.+372    	; 0x31aa <main+0xf5a>
    3036:	84 34       	cpi	r24, 0x44	; 68
    3038:	96 40       	sbci	r25, 0x06	; 6
    303a:	ad 4f       	sbci	r26, 0xFD	; 253
    303c:	bb 4e       	sbci	r27, 0xEB	; 235
    303e:	09 f0       	breq	.+2      	; 0x3042 <main+0xdf2>
    3040:	57 cc       	rjmp	.-1874   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:217
    3042:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    3046:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:218
    304a:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    304e:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:219
    3052:	a0 ed       	ldi	r26, 0xD0	; 208
    3054:	b7 e0       	ldi	r27, 0x07	; 7
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:229
    3056:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <plasma_period+0x1>
    305a:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <plasma_period>
    305e:	48 cc       	rjmp	.-1904   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:153
    3060:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    3064:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:154
    3068:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    306c:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:155
    3070:	86 e9       	ldi	r24, 0x96	; 150
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <plasma_period+0x1>
    3078:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <plasma_period>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:156
    307c:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    3080:	88 23       	and	r24, r24
    3082:	09 f4       	brne	.+2      	; 0x3086 <main+0xe36>
    3084:	35 cc       	rjmp	.-1942   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:157
    3086:	60 e0       	ldi	r22, 0x00	; 0
    3088:	82 e0       	ldi	r24, 0x02	; 2
    308a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:158
    308e:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:193
    3090:	8e e0       	ldi	r24, 0x0E	; 14
    3092:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
    3096:	2c cc       	rjmp	.-1960   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:162
    3098:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    309c:	c1 e0       	ldi	r28, 0x01	; 1
    309e:	8c 27       	eor	r24, r28
    30a0:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <Power>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:163
    30a4:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    30a8:	88 23       	and	r24, r24
    30aa:	39 f1       	breq	.+78     	; 0x30fa <main+0xeaa>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:164
    30ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <plasma_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:165
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	8d e0       	ldi	r24, 0x0D	; 13
    30b4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:166
    30b8:	61 e0       	ldi	r22, 0x01	; 1
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:167
    30c0:	61 e0       	ldi	r22, 0x01	; 1
    30c2:	85 e1       	ldi	r24, 0x15	; 21
    30c4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:168
    30c8:	c0 93 92 03 	sts	0x0392, r28	; 0x800392 <wind_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:169
    30cc:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    30d0:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:170
    30d4:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    30d8:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:171
    30dc:	a0 ed       	ldi	r26, 0xD0	; 208
    30de:	b7 e0       	ldi	r27, 0x07	; 7
    30e0:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <plasma_period+0x1>
    30e4:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <plasma_period>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:172
    30e8:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <segement_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:173
    30ec:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <segment_cnt+0x1>
    30f0:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <segment_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:185
    30f4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <WindDirectionControl()>
    30f8:	fb cb       	rjmp	.-2058   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:175
    30fa:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <plasma_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:176
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	82 e0       	ldi	r24, 0x02	; 2
    3102:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:177
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	85 e1       	ldi	r24, 0x15	; 21
    310a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:178
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	89 e0       	ldi	r24, 0x09	; 9
    3112:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:179
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	83 e0       	ldi	r24, 0x03	; 3
    311a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:180
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	8d e0       	ldi	r24, 0x0D	; 13
    3122:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:181
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	8e e0       	ldi	r24, 0x0E	; 14
    312a:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:182
    312e:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <wind_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:183
    3132:	88 e4       	ldi	r24, 0x48	; 72
    3134:	96 e0       	ldi	r25, 0x06	; 6
    3136:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
    313a:	dc cf       	rjmp	.-72     	; 0x30f4 <main+0xea4>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:188
    313c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    3140:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:189
    3144:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    3148:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:190
    314c:	80 ed       	ldi	r24, 0xD0	; 208
    314e:	97 e0       	ldi	r25, 0x07	; 7
    3150:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <plasma_period+0x1>
    3154:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <plasma_period>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:191
    3158:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <Power>
    315c:	88 23       	and	r24, r24
    315e:	09 f4       	brne	.+2      	; 0x3162 <main+0xf12>
    3160:	c7 cb       	rjmp	.-2162   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:192
    3162:	61 e0       	ldi	r22, 0x01	; 1
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:193
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	91 cf       	rjmp	.-222    	; 0x3090 <main+0xe40>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:197
    316e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    3172:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:198
    3176:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    317a:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:199
    317e:	a6 e9       	ldi	r26, 0x96	; 150
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <plasma_period+0x1>
    3186:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <plasma_period>
    318a:	78 cf       	rjmp	.-272    	; 0x307c <main+0xe2c>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:212
    318c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    3190:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:213
    3194:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    3198:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:214
    319c:	84 ef       	ldi	r24, 0xF4	; 244
    319e:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:224
    31a0:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <plasma_period+0x1>
    31a4:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <plasma_period>
    31a8:	a3 cb       	rjmp	.-2234   	; 0x28f0 <main+0x6a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:222
    31aa:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    31ae:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:223
    31b2:	70 92 a7 03 	sts	0x03A7, r7	; 0x8003a7 <plasma_duty+0x1>
    31b6:	60 92 a6 03 	sts	0x03A6, r6	; 0x8003a6 <plasma_duty>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:224
    31ba:	88 eb       	ldi	r24, 0xB8	; 184
    31bc:	9b e0       	ldi	r25, 0x0B	; 11
    31be:	f0 cf       	rjmp	.-32     	; 0x31a0 <main+0xf50>
PlasmaControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:264
    31c0:	61 e0       	ldi	r22, 0x01	; 1
    31c2:	83 e0       	ldi	r24, 0x03	; 3
    31c4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:265
    31c8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <plasma_cnt>
    31cc:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <plasma_cnt+0x1>
    31d0:	01 96       	adiw	r24, 0x01	; 1
    31d2:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <plasma_cnt+0x1>
    31d6:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <plasma_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:266
    31da:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <plasma_duty>
    31de:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <plasma_duty+0x1>
    31e2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <plasma_cnt>
    31e6:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <plasma_cnt+0x1>
    31ea:	28 17       	cp	r18, r24
    31ec:	39 07       	cpc	r19, r25
    31ee:	41 f4       	brne	.+16     	; 0x3200 <main+0xfb0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:267
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	85 e0       	ldi	r24, 0x05	; 5
    31f4:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:268
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	86 e0       	ldi	r24, 0x06	; 6
    31fc:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:270
    3200:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <plasma_period>
    3204:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <plasma_period+0x1>
    3208:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <plasma_cnt>
    320c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <plasma_cnt+0x1>
    3210:	28 17       	cp	r18, r24
    3212:	39 07       	cpc	r19, r25
    3214:	09 f0       	breq	.+2      	; 0x3218 <main+0xfc8>
    3216:	7f cb       	rjmp	.-2306   	; 0x2916 <main+0x6c6>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:271
    3218:	61 e0       	ldi	r22, 0x01	; 1
    321a:	85 e0       	ldi	r24, 0x05	; 5
    321c:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:272
    3220:	61 e0       	ldi	r22, 0x01	; 1
    3222:	86 e0       	ldi	r24, 0x06	; 6
    3224:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:273
    3228:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <plasma_cnt+0x1>
    322c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <plasma_cnt>
    3230:	72 cb       	rjmp	.-2332   	; 0x2916 <main+0x6c6>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:277
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:278
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	85 e0       	ldi	r24, 0x05	; 5
    323e:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:279
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	86 e0       	ldi	r24, 0x06	; 6
    3246:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
    324a:	65 cb       	rjmp	.-2358   	; 0x2916 <main+0x6c6>
SegmentControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:108
    324c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	a9 f5       	brne	.+106    	; 0x32be <main+0x106e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:109
    3254:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    3258:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    325c:	89 2b       	or	r24, r25
    325e:	c1 f4       	brne	.+48     	; 0x3290 <main+0x1040>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:110
    3260:	88 e4       	ldi	r24, 0x48	; 72
    3262:	96 e0       	ldi	r25, 0x06	; 6
    3264:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:111
    3268:	0d e7       	ldi	r16, 0x7D	; 125
    326a:	11 e0       	ldi	r17, 0x01	; 1
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	66 ec       	ldi	r22, 0xC6	; 198
    3274:	72 e0       	ldi	r23, 0x02	; 2
    3276:	88 e4       	ldi	r24, 0x48	; 72
    3278:	96 e0       	ldi	r25, 0x06	; 6
    327a:	0e 94 95 05 	call	0xb2a	; 0xb2a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:112
    327e:	0d e6       	ldi	r16, 0x6D	; 109
    3280:	11 e0       	ldi	r17, 0x01	; 1
    3282:	21 e0       	ldi	r18, 0x01	; 1
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	62 e0       	ldi	r22, 0x02	; 2
    3288:	88 e4       	ldi	r24, 0x48	; 72
    328a:	96 e0       	ldi	r25, 0x06	; 6
    328c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TM16xx::setDisplayDigit(unsigned char, unsigned char, bool, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:114
    3290:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    3294:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    3298:	84 3f       	cpi	r24, 0xF4	; 244
    329a:	91 40       	sbci	r25, 0x01	; 1
    329c:	09 f0       	breq	.+2      	; 0x32a0 <main+0x1050>
    329e:	8f cb       	rjmp	.-2274   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:115
    32a0:	8a ec       	ldi	r24, 0xCA	; 202
    32a2:	92 e0       	ldi	r25, 0x02	; 2
    32a4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:116
    32a8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <p2dot5>
    32ac:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <p2dot5+0x1>
    32b0:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:117
    32b4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <p2dot5>
    32b8:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <p2dot5+0x1>
    32bc:	7e cb       	rjmp	.-2308   	; 0x29ba <main+0x76a>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:119
    32be:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    32c2:	82 30       	cpi	r24, 0x02	; 2
    32c4:	61 f5       	brne	.+88     	; 0x331e <main+0x10ce>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:120
    32c6:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    32ca:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    32ce:	89 2b       	or	r24, r25
    32d0:	79 f4       	brne	.+30     	; 0x32f0 <main+0x10a0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:121
    32d2:	88 e4       	ldi	r24, 0x48	; 72
    32d4:	96 e0       	ldi	r25, 0x06	; 6
    32d6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TM1650::clearDisplay()>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:122
    32da:	0d e7       	ldi	r16, 0x7D	; 125
    32dc:	11 e0       	ldi	r17, 0x01	; 1
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	6a eb       	ldi	r22, 0xBA	; 186
    32e6:	72 e0       	ldi	r23, 0x02	; 2
    32e8:	88 e4       	ldi	r24, 0x48	; 72
    32ea:	96 e0       	ldi	r25, 0x06	; 6
    32ec:	0e 94 95 05 	call	0xb2a	; 0xb2a <TM16xx::setDisplayToString(char const*, unsigned int, unsigned char, unsigned char const*)>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:124
    32f0:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    32f4:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    32f8:	84 3f       	cpi	r24, 0xF4	; 244
    32fa:	91 40       	sbci	r25, 0x01	; 1
    32fc:	09 f0       	breq	.+2      	; 0x3300 <main+0x10b0>
    32fe:	5f cb       	rjmp	.-2370   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:125
    3300:	82 ed       	ldi	r24, 0xD2	; 210
    3302:	92 e0       	ldi	r25, 0x02	; 2
    3304:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:126
    3308:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <p10>
    330c:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <p10+0x1>
    3310:	0e 94 97 0c 	call	0x192e	; 0x192e <Print::println(int, int) [clone .constprop.11]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:127
    3314:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <p10>
    3318:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <p10+0x1>
    331c:	4e cb       	rjmp	.-2404   	; 0x29ba <main+0x76a>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:129
    331e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    3322:	83 30       	cpi	r24, 0x03	; 3
    3324:	31 f5       	brne	.+76     	; 0x3372 <main+0x1122>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:130
    3326:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    332a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    332e:	89 2b       	or	r24, r25
    3330:	09 f0       	breq	.+2      	; 0x3334 <main+0x10e4>
    3332:	45 cb       	rjmp	.-2422   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:131
    3334:	89 ed       	ldi	r24, 0xD9	; 217
    3336:	92 e0       	ldi	r25, 0x02	; 2
    3338:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:132
    333c:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <humidity>
    3340:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <humidity+0x1>
    3344:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <humidity+0x2>
    3348:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <humidity+0x3>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    334c:	42 e0       	ldi	r20, 0x02	; 2
    334e:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
write():
    3352:	81 e9       	ldi	r24, 0x91	; 145
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
SegmentControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:134
    335a:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <humidity>
    335e:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <humidity+0x1>
    3362:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <humidity+0x2>
    3366:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <humidity+0x3>
    336a:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:141
    336c:	0e 94 bf 09 	call	0x137e	; 0x137e <setSegmentFloat(float, bool)>
    3370:	26 cb       	rjmp	.-2484   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:136
    3372:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <segement_flag>
    3376:	84 30       	cpi	r24, 0x04	; 4
    3378:	09 f0       	breq	.+2      	; 0x337c <main+0x112c>
    337a:	21 cb       	rjmp	.-2494   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:137
    337c:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <segment_cnt>
    3380:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <segment_cnt+0x1>
    3384:	89 2b       	or	r24, r25
    3386:	09 f0       	breq	.+2      	; 0x338a <main+0x113a>
    3388:	1a cb       	rjmp	.-2508   	; 0x29be <main+0x76e>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:138
    338a:	84 ee       	ldi	r24, 0xE4	; 228
    338c:	92 e0       	ldi	r25, 0x02	; 2
    338e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:139
    3392:	60 91 fb 03 	lds	r22, 0x03FB	; 0x8003fb <temperature>
    3396:	70 91 fc 03 	lds	r23, 0x03FC	; 0x8003fc <temperature+0x1>
    339a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <temperature+0x2>
    339e:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <temperature+0x3>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
    33a2:	42 e0       	ldi	r20, 0x02	; 2
    33a4:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
write():
    33a8:	81 e9       	ldi	r24, 0x91	; 145
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	0e 94 14 0a 	call	0x1428	; 0x1428 <Print::write(char const*) [clone .part.2] [clone .constprop.100]>
SegmentControl():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:141
    33b0:	60 91 fb 03 	lds	r22, 0x03FB	; 0x8003fb <temperature>
    33b4:	70 91 fc 03 	lds	r23, 0x03FC	; 0x8003fc <temperature+0x1>
    33b8:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <temperature+0x2>
    33bc:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <temperature+0x3>
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	d4 cf       	rjmp	.-88     	; 0x336c <main+0x111c>
twi_readFrom():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:171
  }

  // wait until twi is ready, become master receiver
  uint32_t startMicros = micros();
  while(TWI_READY != twi_state){
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    33c4:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_timeout_us>
    33c8:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    33cc:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    33d0:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    33d4:	89 2b       	or	r24, r25
    33d6:	8a 2b       	or	r24, r26
    33d8:	8b 2b       	or	r24, r27
    33da:	09 f4       	brne	.+2      	; 0x33de <main+0x118e>
    33dc:	05 cb       	rjmp	.-2550   	; 0x29e8 <main+0x798>
    33de:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    33e2:	00 91 d5 03 	lds	r16, 0x03D5	; 0x8003d5 <twi_timeout_us>
    33e6:	10 91 d6 03 	lds	r17, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    33ea:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    33ee:	30 91 d8 03 	lds	r19, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    33f2:	6c 19       	sub	r22, r12
    33f4:	7d 09       	sbc	r23, r13
    33f6:	8e 09       	sbc	r24, r14
    33f8:	9f 09       	sbc	r25, r15
    33fa:	06 17       	cp	r16, r22
    33fc:	17 07       	cpc	r17, r23
    33fe:	28 07       	cpc	r18, r24
    3400:	39 07       	cpc	r19, r25
    3402:	08 f0       	brcs	.+2      	; 0x3406 <main+0x11b6>
    3404:	f1 ca       	rjmp	.-2590   	; 0x29e8 <main+0x798>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:220

  // wait for read operation to complete
  startMicros = micros();
  while(TWI_MRX == twi_state){
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
      twi_handleTimeout(twi_do_reset_on_timeout);
    3406:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_do_reset_on_timeout>
    340a:	0e 94 21 09 	call	0x1242	; 0x1242 <twi_handleTimeout>
main():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:221
      return 0;
    340e:	80 e0       	ldi	r24, 0x00	; 0
requestFrom():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:163
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    3410:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <TwoWire::rxBufferIndex>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src/Wire.cpp:164
  rxBufferLength = read;
    3414:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <TwoWire::rxBufferLength>
    3418:	02 e2       	ldi	r16, 0x22	; 34
    341a:	14 e0       	ldi	r17, 0x04	; 4
    341c:	c9 e0       	ldi	r28, 0x09	; 9
    341e:	d4 e0       	ldi	r29, 0x04	; 4
read_data_command():
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:115
uint8_t AM1008W_K_I2C::read_data_command(void)
{
  _i2cPort->requestFrom(AM1008W_K_I2C_ADDRESS, 25);
  uint8_t idx = 0;

  while (_i2cPort->available())
    3420:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <am1008w_k_i2c+0x20>
    3424:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <am1008w_k_i2c+0x21>
    3428:	dc 01       	movw	r26, r24
    342a:	ed 91       	ld	r30, X+
    342c:	fc 91       	ld	r31, X
    342e:	00 84       	ldd	r0, Z+8	; 0x08
    3430:	f1 85       	ldd	r31, Z+9	; 0x09
    3432:	e0 2d       	mov	r30, r0
    3434:	09 95       	icall
    3436:	89 2b       	or	r24, r25
    3438:	09 f4       	brne	.+2      	; 0x343c <main+0x11ec>
    343a:	02 c1       	rjmp	.+516    	; 0x3640 <main+0x13f0>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:117
  { // slave may send less than requested
    uint8_t b = _i2cPort->read();
    343c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <am1008w_k_i2c+0x20>
    3440:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <am1008w_k_i2c+0x21>
    3444:	dc 01       	movw	r26, r24
    3446:	ed 91       	ld	r30, X+
    3448:	fc 91       	ld	r31, X
    344a:	02 84       	ldd	r0, Z+10	; 0x0a
    344c:	f3 85       	ldd	r31, Z+11	; 0x0b
    344e:	e0 2d       	mov	r30, r0
    3450:	09 95       	icall
    3452:	89 93       	st	Y+, r24
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:119
    _buffer[idx++] = b;
    if (idx == AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    3454:	0c 17       	cp	r16, r28
    3456:	1d 07       	cpc	r17, r29
    3458:	19 f7       	brne	.-58     	; 0x3420 <main+0x11d0>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:133
    Serial.println("AM1008W_K_I2C::read_data_command : buffer is short!");
#endif
    return 1;
  }

  if (_buffer[0] != AM1008W_K_I2C_FRAME_STX)
    345a:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <am1008w_k_i2c>
    345e:	26 31       	cpi	r18, 0x16	; 22
    3460:	09 f0       	breq	.+2      	; 0x3464 <main+0x1214>
    3462:	ee c0       	rjmp	.+476    	; 0x3640 <main+0x13f0>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:142
    Serial.println(_buffer[0], HEX);
#endif
    return 2;
  }

  if (_buffer[1] != AM1008W_K_I2C_LEN_READ_DATA_COMMAND)
    3464:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <am1008w_k_i2c+0x1>
    3468:	89 31       	cpi	r24, 0x19	; 25
    346a:	09 f0       	breq	.+2      	; 0x346e <main+0x121e>
    346c:	e9 c0       	rjmp	.+466    	; 0x3640 <main+0x13f0>
    346e:	ea e0       	ldi	r30, 0x0A	; 10
    3470:	f4 e0       	ldi	r31, 0x04	; 4
    3472:	81 e2       	ldi	r24, 0x21	; 33
    3474:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:154

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
  {
    check_code ^= _buffer[i];
    3476:	31 91       	ld	r19, Z+
    3478:	23 27       	eor	r18, r19
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:152
    return 3;
  }

  uint8_t check_code = _buffer[0];

  for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++)
    347a:	8e 17       	cp	r24, r30
    347c:	9f 07       	cpc	r25, r31
    347e:	d9 f7       	brne	.-10     	; 0x3476 <main+0x1226>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:157
  {
    check_code ^= _buffer[i];
  }

  if (_buffer[AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1] != check_code)
    3480:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <am1008w_k_i2c+0x18>
    3484:	28 13       	cpse	r18, r24
    3486:	dc c0       	rjmp	.+440    	; 0x3640 <main+0x13f0>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:170
    Serial.println(check_code, HEX);
#endif
    return 4;
  }

  _pm_operation_mode = _buffer[2];
    3488:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <am1008w_k_i2c+0x2>
    348c:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <am1008w_k_i2c+0x22>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:171
  _co2 = (_buffer[3] << 8) + _buffer[4];
    3490:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <am1008w_k_i2c+0x3>
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	98 2f       	mov	r25, r24
    3498:	88 27       	eor	r24, r24
    349a:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <am1008w_k_i2c+0x4>
    349e:	82 0f       	add	r24, r18
    34a0:	91 1d       	adc	r25, r1
    34a2:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <am1008w_k_i2c+0x24>
    34a6:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <am1008w_k_i2c+0x23>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:172
  _voc = (_buffer[5] << 8) + _buffer[6];
    34aa:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <am1008w_k_i2c+0x5>
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	98 2f       	mov	r25, r24
    34b2:	88 27       	eor	r24, r24
    34b4:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <am1008w_k_i2c+0x6>
    34b8:	82 0f       	add	r24, r18
    34ba:	91 1d       	adc	r25, r1
    34bc:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <am1008w_k_i2c+0x26>
    34c0:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <am1008w_k_i2c+0x25>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:173
  _humidity = (float)((_buffer[7] << 8) + _buffer[8]) / 10;
    34c4:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <am1008w_k_i2c+0x7>
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	76 2f       	mov	r23, r22
    34cc:	66 27       	eor	r22, r22
    34ce:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <am1008w_k_i2c+0x8>
    34d2:	68 0f       	add	r22, r24
    34d4:	71 1d       	adc	r23, r1
    34d6:	07 2e       	mov	r0, r23
    34d8:	00 0c       	add	r0, r0
    34da:	88 0b       	sbc	r24, r24
    34dc:	99 0b       	sbc	r25, r25
    34de:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatsisf>
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    34ee:	1b 01       	movw	r2, r22
    34f0:	2c 01       	movw	r4, r24
    34f2:	20 92 30 04 	sts	0x0430, r2	; 0x800430 <am1008w_k_i2c+0x27>
    34f6:	30 92 31 04 	sts	0x0431, r3	; 0x800431 <am1008w_k_i2c+0x28>
    34fa:	40 92 32 04 	sts	0x0432, r4	; 0x800432 <am1008w_k_i2c+0x29>
    34fe:	50 92 33 04 	sts	0x0433, r5	; 0x800433 <am1008w_k_i2c+0x2a>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:174
  _temperature = (float)((_buffer[9] << 8) + _buffer[10] - 500) / 10;
    3502:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <am1008w_k_i2c+0x9>
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	76 2f       	mov	r23, r22
    350a:	66 27       	eor	r22, r22
    350c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <am1008w_k_i2c+0xa>
    3510:	68 0f       	add	r22, r24
    3512:	71 1d       	adc	r23, r1
    3514:	64 5f       	subi	r22, 0xF4	; 244
    3516:	71 40       	sbci	r23, 0x01	; 1
    3518:	07 2e       	mov	r0, r23
    351a:	00 0c       	add	r0, r0
    351c:	88 0b       	sbc	r24, r24
    351e:	99 0b       	sbc	r25, r25
    3520:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatsisf>
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    3530:	6b 01       	movw	r12, r22
    3532:	7c 01       	movw	r14, r24
    3534:	c0 92 34 04 	sts	0x0434, r12	; 0x800434 <am1008w_k_i2c+0x2b>
    3538:	d0 92 35 04 	sts	0x0435, r13	; 0x800435 <am1008w_k_i2c+0x2c>
    353c:	e0 92 36 04 	sts	0x0436, r14	; 0x800436 <am1008w_k_i2c+0x2d>
    3540:	f0 92 37 04 	sts	0x0437, r15	; 0x800437 <am1008w_k_i2c+0x2e>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:175
  _pm1p0 = (_buffer[11] << 8) + _buffer[12];
    3544:	60 91 14 04 	lds	r22, 0x0414	; 0x800414 <am1008w_k_i2c+0xb>
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	76 2f       	mov	r23, r22
    354c:	66 27       	eor	r22, r22
    354e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <am1008w_k_i2c+0xc>
    3552:	68 0f       	add	r22, r24
    3554:	71 1d       	adc	r23, r1
    3556:	70 93 39 04 	sts	0x0439, r23	; 0x800439 <am1008w_k_i2c+0x30>
    355a:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <am1008w_k_i2c+0x2f>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:176
  _pm2p5 = (_buffer[13] << 8) + _buffer[14];
    355e:	40 91 16 04 	lds	r20, 0x0416	; 0x800416 <am1008w_k_i2c+0xd>
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	54 2f       	mov	r21, r20
    3566:	44 27       	eor	r20, r20
    3568:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <am1008w_k_i2c+0xe>
    356c:	48 0f       	add	r20, r24
    356e:	51 1d       	adc	r21, r1
    3570:	50 93 3b 04 	sts	0x043B, r21	; 0x80043b <am1008w_k_i2c+0x32>
    3574:	40 93 3a 04 	sts	0x043A, r20	; 0x80043a <am1008w_k_i2c+0x31>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:177
  _pm10 = (_buffer[15] << 8) + _buffer[16];
    3578:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <am1008w_k_i2c+0xf>
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	32 2f       	mov	r19, r18
    3580:	22 27       	eor	r18, r18
    3582:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <am1008w_k_i2c+0x10>
    3586:	28 0f       	add	r18, r24
    3588:	31 1d       	adc	r19, r1
    358a:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <am1008w_k_i2c+0x34>
    358e:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <am1008w_k_i2c+0x33>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:178
  _voc_now_r_ref_r = (_buffer[17] << 8) + _buffer[18];
    3592:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <am1008w_k_i2c+0x11>
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	98 2f       	mov	r25, r24
    359a:	88 27       	eor	r24, r24
    359c:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <am1008w_k_i2c+0x12>
    35a0:	8e 0f       	add	r24, r30
    35a2:	91 1d       	adc	r25, r1
    35a4:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <am1008w_k_i2c+0x36>
    35a8:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <am1008w_k_i2c+0x35>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:179
  _voc_ref_r = (_buffer[19] << 8) + _buffer[20];
    35ac:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <am1008w_k_i2c+0x13>
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	98 2f       	mov	r25, r24
    35b4:	88 27       	eor	r24, r24
    35b6:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <am1008w_k_i2c+0x14>
    35ba:	8e 0f       	add	r24, r30
    35bc:	91 1d       	adc	r25, r1
    35be:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <am1008w_k_i2c+0x38>
    35c2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <am1008w_k_i2c+0x37>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:180
  _voc_now_r = (_buffer[21] << 8) + _buffer[22];
    35c6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <am1008w_k_i2c+0x15>
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	98 2f       	mov	r25, r24
    35ce:	88 27       	eor	r24, r24
    35d0:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <am1008w_k_i2c+0x16>
    35d4:	8e 0f       	add	r24, r30
    35d6:	91 1d       	adc	r25, r1
    35d8:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <am1008w_k_i2c+0x3a>
    35dc:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <am1008w_k_i2c+0x39>
C:\Users\dlcks\Documents\Arduino\libraries\AM1008W_K_I2C-1.0.0\src/am1008w_k_i2c.cpp:181
  _pm_sensor_status_alarm.value = _buffer[23];
    35e0:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <am1008w_k_i2c+0x17>
    35e4:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <am1008w_k_i2c+0x3b>
Read_dust_value():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:44
    35e8:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <p1dot0+0x1>
    35ec:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <p1dot0>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:45
    35f0:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <p2dot5+0x1>
    35f4:	40 93 05 04 	sts	0x0405, r20	; 0x800405 <p2dot5>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:46
    35f8:	30 93 04 04 	sts	0x0404, r19	; 0x800404 <p10+0x1>
    35fc:	20 93 03 04 	sts	0x0403, r18	; 0x800403 <p10>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:47
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e2       	ldi	r20, 0x20	; 32
    3606:	51 e4       	ldi	r21, 0x41	; 65
    3608:	c2 01       	movw	r24, r4
    360a:	b1 01       	movw	r22, r2
    360c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    3610:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <humidity>
    3614:	70 93 00 04 	sts	0x0400, r23	; 0x800400 <humidity+0x1>
    3618:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <humidity+0x2>
    361c:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <humidity+0x3>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:48
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e2       	ldi	r20, 0x20	; 32
    3626:	51 e4       	ldi	r21, 0x41	; 65
    3628:	c7 01       	movw	r24, r14
    362a:	b6 01       	movw	r22, r12
    362c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    3630:	60 93 fb 03 	sts	0x03FB, r22	; 0x8003fb <temperature>
    3634:	70 93 fc 03 	sts	0x03FC, r23	; 0x8003fc <temperature+0x1>
    3638:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <temperature+0x2>
    363c:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <temperature+0x3>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:285
    3640:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <O3_cnt>
    3644:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <O3_cnt+0x1>
    3648:	01 96       	adiw	r24, 0x01	; 1
    364a:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <O3_cnt+0x1>
    364e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <O3_cnt>
    3652:	81 33       	cpi	r24, 0x31	; 49
    3654:	95 47       	sbci	r25, 0x75	; 117
    3656:	08 f4       	brcc	.+2      	; 0x365a <main+0x140a>
    3658:	23 c1       	rjmp	.+582    	; 0x38a0 <main+0x1650>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:287
    365a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <O3_cnt+0x1>
    365e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <O3_cnt>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:288
    3662:	82 ef       	ldi	r24, 0xF2	; 242
    3664:	92 e0       	ldi	r25, 0x02	; 2
    3666:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
startHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:105

/**
 * Start the heater
 */
 void MQ131Class::startHeater() {
 	digitalWrite(pinPower, HIGH);
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <MQ131+0x7>
    3670:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:106
 	secLastStart = millis()/1000;
    3674:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
    3678:	28 ee       	ldi	r18, 0xE8	; 232
    367a:	33 e0       	ldi	r19, 0x03	; 3
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    3684:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <MQ131+0xd>
    3688:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <MQ131+0xe>
    368c:	40 93 06 05 	sts	0x0506, r20	; 0x800506 <MQ131+0xf>
    3690:	50 93 07 05 	sts	0x0507, r21	; 0x800507 <MQ131+0x10>
isTimeToRead():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:118
 	// Check if the heater has been started...
 	if(secLastStart < 0) {
 		return false;
 	}
 	// OK, check if it's the time to read based on calibration parameters
 	if(millis() / 1000 >= secLastStart + getTimeToRead()) {
    3694:	0e 94 8f 04 	call	0x91e	; 0x91e <millis>
    3698:	28 ee       	ldi	r18, 0xE8	; 232
    369a:	33 e0       	ldi	r19, 0x03	; 3
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__udivmodsi4>
    36a4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <MQ131+0xd>
    36a8:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <MQ131+0xe>
    36ac:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <MQ131+0xf>
    36b0:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <MQ131+0x10>
    36b4:	c0 90 08 05 	lds	r12, 0x0508	; 0x800508 <MQ131+0x11>
    36b8:	d0 90 09 05 	lds	r13, 0x0509	; 0x800509 <MQ131+0x12>
    36bc:	e0 90 0a 05 	lds	r14, 0x050A	; 0x80050a <MQ131+0x13>
    36c0:	f0 90 0b 05 	lds	r15, 0x050B	; 0x80050b <MQ131+0x14>
    36c4:	8c 0d       	add	r24, r12
    36c6:	9d 1d       	adc	r25, r13
    36c8:	ae 1d       	adc	r26, r14
    36ca:	bf 1d       	adc	r27, r15
    36cc:	28 17       	cp	r18, r24
    36ce:	39 07       	cpc	r19, r25
    36d0:	4a 07       	cpc	r20, r26
    36d2:	5b 07       	cpc	r21, r27
    36d4:	68 f5       	brcc	.+90     	; 0x3730 <main+0x14e0>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:95
 * of the read cycle!
 */
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 5d 04 	call	0x8ba	; 0x8ba <delay>
    36e2:	d8 cf       	rjmp	.-80     	; 0x3694 <main+0x1444>
twi_readFrom():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:213
      }
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
  } else {
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    36e4:	85 ee       	ldi	r24, 0xE5	; 229
    36e6:	cc c9       	rjmp	.-3176   	; 0x2a80 <main+0x830>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:219
  }

  // wait for read operation to complete
  startMicros = micros();
  while(TWI_MRX == twi_state){
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    36e8:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_timeout_us>
    36ec:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    36f0:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    36f4:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    36f8:	89 2b       	or	r24, r25
    36fa:	8a 2b       	or	r24, r26
    36fc:	8b 2b       	or	r24, r27
    36fe:	09 f4       	brne	.+2      	; 0x3702 <main+0x14b2>
    3700:	c5 c9       	rjmp	.-3190   	; 0x2a8c <main+0x83c>
    3702:	0e 94 38 04 	call	0x870	; 0x870 <micros>
    3706:	00 91 d5 03 	lds	r16, 0x03D5	; 0x8003d5 <twi_timeout_us>
    370a:	10 91 d6 03 	lds	r17, 0x03D6	; 0x8003d6 <twi_timeout_us+0x1>
    370e:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <twi_timeout_us+0x2>
    3712:	30 91 d8 03 	lds	r19, 0x03D8	; 0x8003d8 <twi_timeout_us+0x3>
    3716:	6c 19       	sub	r22, r12
    3718:	7d 09       	sbc	r23, r13
    371a:	8e 09       	sbc	r24, r14
    371c:	9f 09       	sbc	r25, r15
    371e:	06 17       	cp	r16, r22
    3720:	17 07       	cpc	r17, r23
    3722:	28 07       	cpc	r18, r24
    3724:	39 07       	cpc	r19, r25
    3726:	08 f0       	brcs	.+2      	; 0x372a <main+0x14da>
    3728:	b1 c9       	rjmp	.-3230   	; 0x2a8c <main+0x83c>
    372a:	6d ce       	rjmp	.-806    	; 0x3406 <main+0x11b6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\libraries\Wire\src\utility/twi.c:225
      twi_handleTimeout(twi_do_reset_on_timeout);
      return 0;
    }
  }

  if (twi_masterBufferIndex < length) {
    372c:	89 e1       	ldi	r24, 0x19	; 25
    372e:	ba c9       	rjmp	.-3212   	; 0x2aa4 <main+0x854>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:152
/**
 * Read Rs value
 */
 float MQ131Class::readRs() {
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
    3730:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <MQ131+0x8>
analogRead():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:53
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3734:	8e 30       	cpi	r24, 0x0E	; 14
    3736:	08 f0       	brcs	.+2      	; 0x373a <main+0x14ea>
    3738:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:69
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    373a:	87 70       	andi	r24, 0x07	; 7
    373c:	80 64       	ori	r24, 0x40	; 64
    373e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:78
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADC)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3742:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3746:	80 64       	ori	r24, 0x40	; 64
    3748:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:81

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    374c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3750:	86 fd       	sbrc	r24, 6
    3752:	fc cf       	rjmp	.-8      	; 0x374c <main+0x14fc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_analog.c:85

	// ADC macro takes care of reading ADC register.
	// avr-gcc implements the proper reading order: ADCL is read first.
	return ADC;
    3754:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    3758:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
readRs():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:154
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	0e 94 95 1c 	call	0x392a	; 0x392a <__floatunsisf>
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5a e3       	ldi	r21, 0x3A	; 58
    376c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 ea       	ldi	r20, 0xA0	; 160
    3776:	50 e4       	ldi	r21, 0x40	; 64
    3778:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    377c:	6b 01       	movw	r12, r22
    377e:	7c 01       	movw	r14, r24
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	a9 01       	movw	r20, r18
    3786:	0e 94 90 1c 	call	0x3920	; 0x3920 <__cmpsf2>
    378a:	88 23       	and	r24, r24
    378c:	09 f4       	brne	.+2      	; 0x3790 <main+0x1540>
    378e:	9e c0       	rjmp	.+316    	; 0x38cc <main+0x167c>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:157
 	float rS = (5.0 / vRL - 1.0) * valueRL;
    3790:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <MQ131+0x9>
    3794:	70 91 01 05 	lds	r23, 0x0501	; 0x800501 <MQ131+0xa>
    3798:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <MQ131+0xb>
    379c:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <MQ131+0xc>
    37a0:	0e 94 95 1c 	call	0x392a	; 0x392a <__floatunsisf>
    37a4:	1b 01       	movw	r2, r22
    37a6:	2c 01       	movw	r4, r24
    37a8:	a7 01       	movw	r20, r14
    37aa:	96 01       	movw	r18, r12
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	80 ea       	ldi	r24, 0xA0	; 160
    37b2:	90 e4       	ldi	r25, 0x40	; 64
    37b4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__divsf3>
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__subsf3>
    37c4:	9b 01       	movw	r18, r22
    37c6:	ac 01       	movw	r20, r24
    37c8:	c2 01       	movw	r24, r4
    37ca:	b1 01       	movw	r22, r2
    37cc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
sample():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:97
 void MQ131Class::sample() {
 	startHeater();
 	while(!isTimeToRead()) {
 		delay(1);
 	}
 	lastValueRs = readRs();
    37d0:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <MQ131+0x19>
    37d4:	70 93 11 05 	sts	0x0511, r23	; 0x800511 <MQ131+0x1a>
    37d8:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <MQ131+0x1b>
    37dc:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <MQ131+0x1c>
stopHeater():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:128

/**
 * Stop the heater
 */
 void MQ131Class::stopHeater() {
 	digitalWrite(pinPower, LOW);
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <MQ131+0x7>
    37e6:	0e 94 93 03 	call	0x726	; 0x726 <digitalWrite>
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:129
 	secLastStart = -1;
    37ea:	80 92 04 05 	sts	0x0504, r8	; 0x800504 <MQ131+0xd>
    37ee:	90 92 05 05 	sts	0x0505, r9	; 0x800505 <MQ131+0xe>
    37f2:	a0 92 06 05 	sts	0x0506, r10	; 0x800506 <MQ131+0xf>
    37f6:	b0 92 07 05 	sts	0x0507, r11	; 0x800507 <MQ131+0x10>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:291
    37fa:	8d ef       	ldi	r24, 0xFD	; 253
    37fc:	92 e0       	ldi	r25, 0x02	; 2
    37fe:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:292
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]>
    380a:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <ozSensorRdValue>
    380e:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <ozSensorRdValue+0x1>
    3812:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ozSensorRdValue+0x2>
    3816:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ozSensorRdValue+0x3>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
    381a:	42 e0       	ldi	r20, 0x02	; 2
    381c:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:294
    3820:	87 e0       	ldi	r24, 0x07	; 7
    3822:	93 e0       	ldi	r25, 0x03	; 3
    3824:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:295
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
    3830:	42 e0       	ldi	r20, 0x02	; 2
    3832:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:296
    3836:	8b e1       	ldi	r24, 0x1B	; 27
    3838:	93 e0       	ldi	r25, 0x03	; 3
    383a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:297
    383e:	87 e0       	ldi	r24, 0x07	; 7
    3840:	93 e0       	ldi	r25, 0x03	; 3
    3842:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:298
    3846:	82 e0       	ldi	r24, 0x02	; 2
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
    384e:	42 e0       	ldi	r20, 0x02	; 2
    3850:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:299
    3854:	80 e2       	ldi	r24, 0x20	; 32
    3856:	93 e0       	ldi	r25, 0x03	; 3
    3858:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:300
    385c:	87 e0       	ldi	r24, 0x07	; 7
    385e:	93 e0       	ldi	r25, 0x03	; 3
    3860:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <Print::print(char const*) [clone .constprop.91]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:301
    3864:	83 e0       	ldi	r24, 0x03	; 3
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MQ131Class::getO3(MQ131Unit) [clone .constprop.87]>
print():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:111
    386c:	42 e0       	ldi	r20, 0x02	; 2
    386e:	0e 94 38 0b 	call	0x1670	; 0x1670 <Print::printFloat(double, unsigned char) [clone .constprop.80]>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:302
    3872:	87 e2       	ldi	r24, 0x27	; 39
    3874:	93 e0       	ldi	r25, 0x03	; 3
    3876:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:303
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e4       	ldi	r19, 0x40	; 64
    387e:	4c e1       	ldi	r20, 0x1C	; 28
    3880:	56 e4       	ldi	r21, 0x46	; 70
    3882:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <MQ131+0x15>
    3886:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <MQ131+0x16>
    388a:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <MQ131+0x17>
    388e:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <MQ131+0x18>
    3892:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__gesf2>
    3896:	87 fd       	sbrc	r24, 7
    3898:	1d c0       	rjmp	.+58     	; 0x38d4 <main+0x1684>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:304
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <plasma_flag>
loop():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:369
    38a0:	61 e0       	ldi	r22, 0x01	; 1
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <delay>
serialEventRun():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	89 2b       	or	r24, r25
    38b2:	11 f4       	brne	.+4      	; 0x38b8 <main+0x1668>
    38b4:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x33c>
    38b8:	0e 94 9e 02 	call	0x53c	; 0x53c <Serial0_available()>
    38bc:	88 23       	and	r24, r24
    38be:	11 f4       	brne	.+4      	; 0x38c4 <main+0x1674>
    38c0:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x33c>
    38c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    38c8:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x33c>
main():
C:\Users\dlcks\Documents\Arduino\libraries\MQ131_gas_sensor-1.5.2\src/MQ131.cpp:156
 	// Read the value
 	uint16_t valueSensor = analogRead(pinSensor);
 	// Compute the voltage on load resistance (for 5V Arduino)
  float vRL = ((float)valueSensor) / 1024.0 * 5.0;
 	// Compute the resistance of the sensor (for 5V Arduino)
  if(!vRL) return 0.0f; //division by zero prevention
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	cb 01       	movw	r24, r22
    38d2:	7e cf       	rjmp	.-260    	; 0x37d0 <main+0x1580>
CheckO3():
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:306
    38d4:	c0 90 03 01 	lds	r12, 0x0103	; 0x800103 <ozSensorRdValue>
    38d8:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <ozSensorRdValue+0x1>
    38dc:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <ozSensorRdValue+0x2>
    38e0:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <ozSensorRdValue+0x3>
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	a9 01       	movw	r20, r18
    38ea:	c7 01       	movw	r24, r14
    38ec:	b6 01       	movw	r22, r12
    38ee:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__gesf2>
    38f2:	87 fd       	sbrc	r24, 7
    38f4:	d5 cf       	rjmp	.-86     	; 0x38a0 <main+0x1650>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:308
    38f6:	2f e8       	ldi	r18, 0x8F	; 143
    38f8:	32 ec       	ldi	r19, 0xC2	; 194
    38fa:	45 ef       	ldi	r20, 0xF5	; 245
    38fc:	5c e3       	ldi	r21, 0x3C	; 60
    38fe:	c7 01       	movw	r24, r14
    3900:	b6 01       	movw	r22, r12
    3902:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__gesf2>
    3906:	87 fd       	sbrc	r24, 7
    3908:	08 c0       	rjmp	.+16     	; 0x391a <main+0x16ca>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:310
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <plasma_flag>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:311
    3910:	8e e2       	ldi	r24, 0x2E	; 46
    3912:	93 e0       	ldi	r25, 0x03	; 3
    3914:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Print::println(char const*) [clone .constprop.97]>
    3918:	c3 cf       	rjmp	.-122    	; 0x38a0 <main+0x1650>
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\dust_O3_8segment_IR_plasma\pro_8MHzatmega328\Debug/.vmpreproc/C:\Users\dlcks\Desktop\?꾨몢?대끂\7segment ?뚮씪利덈쭏\ver\Ozsensor updated\dust_O3_8segment_IR_plasma/dust_O3_8segment_IR_plasma.ino:315
    391a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <plasma_flag>
    391e:	c0 cf       	rjmp	.-128    	; 0x38a0 <main+0x1650>

00003920 <__cmpsf2>:
__cmpsf2():
    3920:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__fp_cmp>
    3924:	08 f4       	brcc	.+2      	; 0x3928 <__cmpsf2+0x8>
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	08 95       	ret

0000392a <__floatunsisf>:
__floatunsisf():
    392a:	e8 94       	clt
    392c:	09 c0       	rjmp	.+18     	; 0x3940 <__floatsisf+0x12>

0000392e <__floatsisf>:
    392e:	97 fb       	bst	r25, 7
    3930:	3e f4       	brtc	.+14     	; 0x3940 <__floatsisf+0x12>
    3932:	90 95       	com	r25
    3934:	80 95       	com	r24
    3936:	70 95       	com	r23
    3938:	61 95       	neg	r22
    393a:	7f 4f       	sbci	r23, 0xFF	; 255
    393c:	8f 4f       	sbci	r24, 0xFF	; 255
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	99 23       	and	r25, r25
    3942:	a9 f0       	breq	.+42     	; 0x396e <__floatsisf+0x40>
    3944:	f9 2f       	mov	r31, r25
    3946:	96 e9       	ldi	r25, 0x96	; 150
    3948:	bb 27       	eor	r27, r27
    394a:	93 95       	inc	r25
    394c:	f6 95       	lsr	r31
    394e:	87 95       	ror	r24
    3950:	77 95       	ror	r23
    3952:	67 95       	ror	r22
    3954:	b7 95       	ror	r27
    3956:	f1 11       	cpse	r31, r1
    3958:	f8 cf       	rjmp	.-16     	; 0x394a <__floatsisf+0x1c>
    395a:	fa f4       	brpl	.+62     	; 0x399a <__floatsisf+0x6c>
    395c:	bb 0f       	add	r27, r27
    395e:	11 f4       	brne	.+4      	; 0x3964 <__floatsisf+0x36>
    3960:	60 ff       	sbrs	r22, 0
    3962:	1b c0       	rjmp	.+54     	; 0x399a <__floatsisf+0x6c>
    3964:	6f 5f       	subi	r22, 0xFF	; 255
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	8f 4f       	sbci	r24, 0xFF	; 255
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	16 c0       	rjmp	.+44     	; 0x399a <__floatsisf+0x6c>
    396e:	88 23       	and	r24, r24
    3970:	11 f0       	breq	.+4      	; 0x3976 <__floatsisf+0x48>
    3972:	96 e9       	ldi	r25, 0x96	; 150
    3974:	11 c0       	rjmp	.+34     	; 0x3998 <__floatsisf+0x6a>
    3976:	77 23       	and	r23, r23
    3978:	21 f0       	breq	.+8      	; 0x3982 <__floatsisf+0x54>
    397a:	9e e8       	ldi	r25, 0x8E	; 142
    397c:	87 2f       	mov	r24, r23
    397e:	76 2f       	mov	r23, r22
    3980:	05 c0       	rjmp	.+10     	; 0x398c <__floatsisf+0x5e>
    3982:	66 23       	and	r22, r22
    3984:	71 f0       	breq	.+28     	; 0x39a2 <__floatsisf+0x74>
    3986:	96 e8       	ldi	r25, 0x86	; 134
    3988:	86 2f       	mov	r24, r22
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	2a f0       	brmi	.+10     	; 0x399a <__floatsisf+0x6c>
    3990:	9a 95       	dec	r25
    3992:	66 0f       	add	r22, r22
    3994:	77 1f       	adc	r23, r23
    3996:	88 1f       	adc	r24, r24
    3998:	da f7       	brpl	.-10     	; 0x3990 <__floatsisf+0x62>
    399a:	88 0f       	add	r24, r24
    399c:	96 95       	lsr	r25
    399e:	87 95       	ror	r24
    39a0:	97 f9       	bld	r25, 7
    39a2:	08 95       	ret

000039a4 <__fp_cmp>:
__fp_cmp():
    39a4:	99 0f       	add	r25, r25
    39a6:	00 08       	sbc	r0, r0
    39a8:	55 0f       	add	r21, r21
    39aa:	aa 0b       	sbc	r26, r26
    39ac:	e0 e8       	ldi	r30, 0x80	; 128
    39ae:	fe ef       	ldi	r31, 0xFE	; 254
    39b0:	16 16       	cp	r1, r22
    39b2:	17 06       	cpc	r1, r23
    39b4:	e8 07       	cpc	r30, r24
    39b6:	f9 07       	cpc	r31, r25
    39b8:	c0 f0       	brcs	.+48     	; 0x39ea <__fp_cmp+0x46>
    39ba:	12 16       	cp	r1, r18
    39bc:	13 06       	cpc	r1, r19
    39be:	e4 07       	cpc	r30, r20
    39c0:	f5 07       	cpc	r31, r21
    39c2:	98 f0       	brcs	.+38     	; 0x39ea <__fp_cmp+0x46>
    39c4:	62 1b       	sub	r22, r18
    39c6:	73 0b       	sbc	r23, r19
    39c8:	84 0b       	sbc	r24, r20
    39ca:	95 0b       	sbc	r25, r21
    39cc:	39 f4       	brne	.+14     	; 0x39dc <__fp_cmp+0x38>
    39ce:	0a 26       	eor	r0, r26
    39d0:	61 f0       	breq	.+24     	; 0x39ea <__fp_cmp+0x46>
    39d2:	23 2b       	or	r18, r19
    39d4:	24 2b       	or	r18, r20
    39d6:	25 2b       	or	r18, r21
    39d8:	21 f4       	brne	.+8      	; 0x39e2 <__fp_cmp+0x3e>
    39da:	08 95       	ret
    39dc:	0a 26       	eor	r0, r26
    39de:	09 f4       	brne	.+2      	; 0x39e2 <__fp_cmp+0x3e>
    39e0:	a1 40       	sbci	r26, 0x01	; 1
    39e2:	a6 95       	lsr	r26
    39e4:	8f ef       	ldi	r24, 0xFF	; 255
    39e6:	81 1d       	adc	r24, r1
    39e8:	81 1d       	adc	r24, r1
    39ea:	08 95       	ret

000039ec <__mulsf3>:
__mulsf3():
    39ec:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3x>
    39f0:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__fp_round>
    39f4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__fp_pscA>
    39f8:	38 f0       	brcs	.+14     	; 0x3a08 <__mulsf3+0x1c>
    39fa:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fp_pscB>
    39fe:	20 f0       	brcs	.+8      	; 0x3a08 <__mulsf3+0x1c>
    3a00:	95 23       	and	r25, r21
    3a02:	11 f0       	breq	.+4      	; 0x3a08 <__mulsf3+0x1c>
    3a04:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3a08:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>
    3a0c:	11 24       	eor	r1, r1
    3a0e:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>

00003a12 <__mulsf3x>:
__mulsf3x():
    3a12:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__fp_split3>
    3a16:	70 f3       	brcs	.-36     	; 0x39f4 <__mulsf3+0x8>

00003a18 <__mulsf3_pse>:
    3a18:	95 9f       	mul	r25, r21
    3a1a:	c1 f3       	breq	.-16     	; 0x3a0c <__mulsf3+0x20>
    3a1c:	95 0f       	add	r25, r21
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	55 1f       	adc	r21, r21
    3a22:	62 9f       	mul	r22, r18
    3a24:	f0 01       	movw	r30, r0
    3a26:	72 9f       	mul	r23, r18
    3a28:	bb 27       	eor	r27, r27
    3a2a:	f0 0d       	add	r31, r0
    3a2c:	b1 1d       	adc	r27, r1
    3a2e:	63 9f       	mul	r22, r19
    3a30:	aa 27       	eor	r26, r26
    3a32:	f0 0d       	add	r31, r0
    3a34:	b1 1d       	adc	r27, r1
    3a36:	aa 1f       	adc	r26, r26
    3a38:	64 9f       	mul	r22, r20
    3a3a:	66 27       	eor	r22, r22
    3a3c:	b0 0d       	add	r27, r0
    3a3e:	a1 1d       	adc	r26, r1
    3a40:	66 1f       	adc	r22, r22
    3a42:	82 9f       	mul	r24, r18
    3a44:	22 27       	eor	r18, r18
    3a46:	b0 0d       	add	r27, r0
    3a48:	a1 1d       	adc	r26, r1
    3a4a:	62 1f       	adc	r22, r18
    3a4c:	73 9f       	mul	r23, r19
    3a4e:	b0 0d       	add	r27, r0
    3a50:	a1 1d       	adc	r26, r1
    3a52:	62 1f       	adc	r22, r18
    3a54:	83 9f       	mul	r24, r19
    3a56:	a0 0d       	add	r26, r0
    3a58:	61 1d       	adc	r22, r1
    3a5a:	22 1f       	adc	r18, r18
    3a5c:	74 9f       	mul	r23, r20
    3a5e:	33 27       	eor	r19, r19
    3a60:	a0 0d       	add	r26, r0
    3a62:	61 1d       	adc	r22, r1
    3a64:	23 1f       	adc	r18, r19
    3a66:	84 9f       	mul	r24, r20
    3a68:	60 0d       	add	r22, r0
    3a6a:	21 1d       	adc	r18, r1
    3a6c:	82 2f       	mov	r24, r18
    3a6e:	76 2f       	mov	r23, r22
    3a70:	6a 2f       	mov	r22, r26
    3a72:	11 24       	eor	r1, r1
    3a74:	9f 57       	subi	r25, 0x7F	; 127
    3a76:	50 40       	sbci	r21, 0x00	; 0
    3a78:	9a f0       	brmi	.+38     	; 0x3aa0 <__mulsf3_pse+0x88>
    3a7a:	f1 f0       	breq	.+60     	; 0x3ab8 <__mulsf3_pse+0xa0>
    3a7c:	88 23       	and	r24, r24
    3a7e:	4a f0       	brmi	.+18     	; 0x3a92 <__mulsf3_pse+0x7a>
    3a80:	ee 0f       	add	r30, r30
    3a82:	ff 1f       	adc	r31, r31
    3a84:	bb 1f       	adc	r27, r27
    3a86:	66 1f       	adc	r22, r22
    3a88:	77 1f       	adc	r23, r23
    3a8a:	88 1f       	adc	r24, r24
    3a8c:	91 50       	subi	r25, 0x01	; 1
    3a8e:	50 40       	sbci	r21, 0x00	; 0
    3a90:	a9 f7       	brne	.-22     	; 0x3a7c <__mulsf3_pse+0x64>
    3a92:	9e 3f       	cpi	r25, 0xFE	; 254
    3a94:	51 05       	cpc	r21, r1
    3a96:	80 f0       	brcs	.+32     	; 0x3ab8 <__mulsf3_pse+0xa0>
    3a98:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3a9c:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>
    3aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    3aa2:	e4 f3       	brlt	.-8      	; 0x3a9c <__mulsf3_pse+0x84>
    3aa4:	98 3e       	cpi	r25, 0xE8	; 232
    3aa6:	d4 f3       	brlt	.-12     	; 0x3a9c <__mulsf3_pse+0x84>
    3aa8:	86 95       	lsr	r24
    3aaa:	77 95       	ror	r23
    3aac:	67 95       	ror	r22
    3aae:	b7 95       	ror	r27
    3ab0:	f7 95       	ror	r31
    3ab2:	e7 95       	ror	r30
    3ab4:	9f 5f       	subi	r25, 0xFF	; 255
    3ab6:	c1 f7       	brne	.-16     	; 0x3aa8 <__mulsf3_pse+0x90>
    3ab8:	fe 2b       	or	r31, r30
    3aba:	88 0f       	add	r24, r24
    3abc:	91 1d       	adc	r25, r1
    3abe:	96 95       	lsr	r25
    3ac0:	87 95       	ror	r24
    3ac2:	97 f9       	bld	r25, 7
    3ac4:	08 95       	ret

00003ac6 <__fp_inf>:
    3ac6:	97 f9       	bld	r25, 7
    3ac8:	9f 67       	ori	r25, 0x7F	; 127
    3aca:	80 e8       	ldi	r24, 0x80	; 128
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	60 e0       	ldi	r22, 0x00	; 0
    3ad0:	08 95       	ret

00003ad2 <__fp_nan>:
    3ad2:	9f ef       	ldi	r25, 0xFF	; 255
    3ad4:	80 ec       	ldi	r24, 0xC0	; 192
    3ad6:	08 95       	ret

00003ad8 <__fp_pscA>:
    3ad8:	00 24       	eor	r0, r0
    3ada:	0a 94       	dec	r0
    3adc:	16 16       	cp	r1, r22
    3ade:	17 06       	cpc	r1, r23
    3ae0:	18 06       	cpc	r1, r24
    3ae2:	09 06       	cpc	r0, r25
__fp_pscA():
    3ae4:	08 95       	ret

00003ae6 <__fp_pscB>:
__fp_pscB():
    3ae6:	00 24       	eor	r0, r0
    3ae8:	0a 94       	dec	r0
    3aea:	12 16       	cp	r1, r18
    3aec:	13 06       	cpc	r1, r19
    3aee:	14 06       	cpc	r1, r20
    3af0:	05 06       	cpc	r0, r21
    3af2:	08 95       	ret

00003af4 <__fp_round>:
__fp_round():
    3af4:	09 2e       	mov	r0, r25
    3af6:	03 94       	inc	r0
    3af8:	00 0c       	add	r0, r0
    3afa:	11 f4       	brne	.+4      	; 0x3b00 <__fp_round+0xc>
    3afc:	88 23       	and	r24, r24
    3afe:	52 f0       	brmi	.+20     	; 0x3b14 <__fp_round+0x20>
    3b00:	bb 0f       	add	r27, r27
    3b02:	40 f4       	brcc	.+16     	; 0x3b14 <__fp_round+0x20>
    3b04:	bf 2b       	or	r27, r31
    3b06:	11 f4       	brne	.+4      	; 0x3b0c <__fp_round+0x18>
    3b08:	60 ff       	sbrs	r22, 0
    3b0a:	04 c0       	rjmp	.+8      	; 0x3b14 <__fp_round+0x20>
    3b0c:	6f 5f       	subi	r22, 0xFF	; 255
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	8f 4f       	sbci	r24, 0xFF	; 255
    3b12:	9f 4f       	sbci	r25, 0xFF	; 255
    3b14:	08 95       	ret

00003b16 <__fp_split3>:
__fp_split3():
    3b16:	57 fd       	sbrc	r21, 7
    3b18:	90 58       	subi	r25, 0x80	; 128
    3b1a:	44 0f       	add	r20, r20
    3b1c:	55 1f       	adc	r21, r21
    3b1e:	59 f0       	breq	.+22     	; 0x3b36 <__fp_splitA+0x10>
    3b20:	5f 3f       	cpi	r21, 0xFF	; 255
    3b22:	71 f0       	breq	.+28     	; 0x3b40 <__fp_splitA+0x1a>
    3b24:	47 95       	ror	r20

00003b26 <__fp_splitA>:
    3b26:	88 0f       	add	r24, r24
    3b28:	97 fb       	bst	r25, 7
    3b2a:	99 1f       	adc	r25, r25
    3b2c:	61 f0       	breq	.+24     	; 0x3b46 <__fp_splitA+0x20>
    3b2e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b30:	79 f0       	breq	.+30     	; 0x3b50 <__fp_splitA+0x2a>
    3b32:	87 95       	ror	r24
    3b34:	08 95       	ret
    3b36:	12 16       	cp	r1, r18
    3b38:	13 06       	cpc	r1, r19
    3b3a:	14 06       	cpc	r1, r20
    3b3c:	55 1f       	adc	r21, r21
    3b3e:	f2 cf       	rjmp	.-28     	; 0x3b24 <__fp_split3+0xe>
    3b40:	46 95       	lsr	r20
    3b42:	f1 df       	rcall	.-30     	; 0x3b26 <__fp_splitA>
    3b44:	08 c0       	rjmp	.+16     	; 0x3b56 <__fp_splitA+0x30>
    3b46:	16 16       	cp	r1, r22
    3b48:	17 06       	cpc	r1, r23
    3b4a:	18 06       	cpc	r1, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	f1 cf       	rjmp	.-30     	; 0x3b32 <__fp_splitA+0xc>
    3b50:	86 95       	lsr	r24
    3b52:	71 05       	cpc	r23, r1
    3b54:	61 05       	cpc	r22, r1
    3b56:	08 94       	sec
    3b58:	08 95       	ret

00003b5a <__fp_zero>:
__fp_zero():
    3b5a:	e8 94       	clt

00003b5c <__fp_szero>:
    3b5c:	bb 27       	eor	r27, r27
    3b5e:	66 27       	eor	r22, r22
    3b60:	77 27       	eor	r23, r23
    3b62:	cb 01       	movw	r24, r22
    3b64:	97 f9       	bld	r25, 7
    3b66:	08 95       	ret

00003b68 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    3b68:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    3b6a:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    3b6c:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    3b6e:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    3b72:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    3b74:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    3b76:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    3b78:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    3b7a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    3b7c:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    3b7e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    3b80:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    3b82:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    3b84:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    3b86:	08 95       	ret

00003b88 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3b88:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3b8a:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3b8c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3b8e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3b90:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3b92:	0d c0       	rjmp	.+26     	; 0x3bae <__udivmodsi4_ep>

00003b94 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3b94:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3b96:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3b98:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3b9a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3b9c:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3b9e:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3ba0:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3ba2:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3ba4:	20 f0       	brcs	.+8      	; 0x3bae <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3ba6:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3ba8:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3baa:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3bac:	f5 0b       	sbc	r31, r21

00003bae <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3bae:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3bb0:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3bb2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3bb4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3bb6:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3bb8:	69 f7       	brne	.-38     	; 0x3b94 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3bba:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3bbc:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3bbe:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3bc0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3bc2:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3bc4:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3bc6:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3bc8:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3bca:	08 95       	ret

00003bcc <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3bcc:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3bd0:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3bd2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3bd4:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3bd6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3bd8:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3bda:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3bdc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3bde:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3be0:	08 95       	ret

00003be2 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3be2:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3be4:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3be6:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3be8:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3bea:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3bec:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3bee:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3bf0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3bf2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3bf4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3bf6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3bf8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3bfa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3bfc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3bfe:	08 95       	ret

00003c00 <__subsf3>:
__subsf3():
    3c00:	50 58       	subi	r21, 0x80	; 128

00003c02 <__addsf3>:
    3c02:	bb 27       	eor	r27, r27
    3c04:	aa 27       	eor	r26, r26
    3c06:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__addsf3x>
    3c0a:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__fp_round>
__addsf3():
    3c0e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__fp_pscA>
    3c12:	38 f0       	brcs	.+14     	; 0x3c22 <__addsf3+0x20>
    3c14:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fp_pscB>
    3c18:	20 f0       	brcs	.+8      	; 0x3c22 <__addsf3+0x20>
    3c1a:	39 f4       	brne	.+14     	; 0x3c2a <__addsf3+0x28>
    3c1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c1e:	19 f4       	brne	.+6      	; 0x3c26 <__addsf3+0x24>
    3c20:	26 f4       	brtc	.+8      	; 0x3c2a <__addsf3+0x28>
    3c22:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>
    3c26:	0e f4       	brtc	.+2      	; 0x3c2a <__addsf3+0x28>
    3c28:	e0 95       	com	r30
    3c2a:	e7 fb       	bst	r30, 7
    3c2c:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>

00003c30 <__addsf3x>:
__addsf3x():
    3c30:	e9 2f       	mov	r30, r25
    3c32:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__fp_split3>
    3c36:	58 f3       	brcs	.-42     	; 0x3c0e <__addsf3+0xc>
    3c38:	ba 17       	cp	r27, r26
    3c3a:	62 07       	cpc	r22, r18
    3c3c:	73 07       	cpc	r23, r19
    3c3e:	84 07       	cpc	r24, r20
    3c40:	95 07       	cpc	r25, r21
    3c42:	20 f0       	brcs	.+8      	; 0x3c4c <__addsf3x+0x1c>
    3c44:	79 f4       	brne	.+30     	; 0x3c64 <__addsf3x+0x34>
    3c46:	a6 f5       	brtc	.+104    	; 0x3cb0 <__addsf3x+0x80>
    3c48:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__fp_zero>
    3c4c:	0e f4       	brtc	.+2      	; 0x3c50 <__addsf3x+0x20>
    3c4e:	e0 95       	com	r30
    3c50:	0b 2e       	mov	r0, r27
    3c52:	ba 2f       	mov	r27, r26
    3c54:	a0 2d       	mov	r26, r0
    3c56:	0b 01       	movw	r0, r22
    3c58:	b9 01       	movw	r22, r18
    3c5a:	90 01       	movw	r18, r0
    3c5c:	0c 01       	movw	r0, r24
    3c5e:	ca 01       	movw	r24, r20
    3c60:	a0 01       	movw	r20, r0
    3c62:	11 24       	eor	r1, r1
    3c64:	ff 27       	eor	r31, r31
    3c66:	59 1b       	sub	r21, r25
    3c68:	99 f0       	breq	.+38     	; 0x3c90 <__addsf3x+0x60>
    3c6a:	59 3f       	cpi	r21, 0xF9	; 249
    3c6c:	50 f4       	brcc	.+20     	; 0x3c82 <__addsf3x+0x52>
    3c6e:	50 3e       	cpi	r21, 0xE0	; 224
    3c70:	68 f1       	brcs	.+90     	; 0x3ccc <__addsf3x+0x9c>
    3c72:	1a 16       	cp	r1, r26
    3c74:	f0 40       	sbci	r31, 0x00	; 0
    3c76:	a2 2f       	mov	r26, r18
    3c78:	23 2f       	mov	r18, r19
    3c7a:	34 2f       	mov	r19, r20
    3c7c:	44 27       	eor	r20, r20
    3c7e:	58 5f       	subi	r21, 0xF8	; 248
    3c80:	f3 cf       	rjmp	.-26     	; 0x3c68 <__addsf3x+0x38>
    3c82:	46 95       	lsr	r20
    3c84:	37 95       	ror	r19
    3c86:	27 95       	ror	r18
    3c88:	a7 95       	ror	r26
    3c8a:	f0 40       	sbci	r31, 0x00	; 0
    3c8c:	53 95       	inc	r21
    3c8e:	c9 f7       	brne	.-14     	; 0x3c82 <__addsf3x+0x52>
    3c90:	7e f4       	brtc	.+30     	; 0x3cb0 <__addsf3x+0x80>
    3c92:	1f 16       	cp	r1, r31
    3c94:	ba 0b       	sbc	r27, r26
    3c96:	62 0b       	sbc	r22, r18
    3c98:	73 0b       	sbc	r23, r19
    3c9a:	84 0b       	sbc	r24, r20
    3c9c:	ba f0       	brmi	.+46     	; 0x3ccc <__addsf3x+0x9c>
    3c9e:	91 50       	subi	r25, 0x01	; 1
    3ca0:	a1 f0       	breq	.+40     	; 0x3cca <__addsf3x+0x9a>
    3ca2:	ff 0f       	add	r31, r31
    3ca4:	bb 1f       	adc	r27, r27
    3ca6:	66 1f       	adc	r22, r22
    3ca8:	77 1f       	adc	r23, r23
    3caa:	88 1f       	adc	r24, r24
    3cac:	c2 f7       	brpl	.-16     	; 0x3c9e <__addsf3x+0x6e>
    3cae:	0e c0       	rjmp	.+28     	; 0x3ccc <__addsf3x+0x9c>
    3cb0:	ba 0f       	add	r27, r26
    3cb2:	62 1f       	adc	r22, r18
    3cb4:	73 1f       	adc	r23, r19
    3cb6:	84 1f       	adc	r24, r20
    3cb8:	48 f4       	brcc	.+18     	; 0x3ccc <__addsf3x+0x9c>
    3cba:	87 95       	ror	r24
    3cbc:	77 95       	ror	r23
    3cbe:	67 95       	ror	r22
    3cc0:	b7 95       	ror	r27
    3cc2:	f7 95       	ror	r31
    3cc4:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc6:	08 f0       	brcs	.+2      	; 0x3cca <__addsf3x+0x9a>
    3cc8:	b0 cf       	rjmp	.-160    	; 0x3c2a <__addsf3+0x28>
    3cca:	93 95       	inc	r25
    3ccc:	88 0f       	add	r24, r24
    3cce:	08 f0       	brcs	.+2      	; 0x3cd2 <__addsf3x+0xa2>
    3cd0:	99 27       	eor	r25, r25
    3cd2:	ee 0f       	add	r30, r30
    3cd4:	97 95       	ror	r25
    3cd6:	87 95       	ror	r24
    3cd8:	08 95       	ret

00003cda <__divsf3>:
    3cda:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divsf3x>
    3cde:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__fp_round>
    3ce2:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__fp_pscB>
    3ce6:	58 f0       	brcs	.+22     	; 0x3cfe <__divsf3+0x24>
    3ce8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__fp_pscA>
    3cec:	40 f0       	brcs	.+16     	; 0x3cfe <__divsf3+0x24>
    3cee:	29 f4       	brne	.+10     	; 0x3cfa <__divsf3+0x20>
    3cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf2:	29 f0       	breq	.+10     	; 0x3cfe <__divsf3+0x24>
    3cf4:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3cf8:	51 11       	cpse	r21, r1
    3cfa:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>
__divsf3():
    3cfe:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>

00003d02 <__divsf3x>:
__divsf3x():
    3d02:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__fp_split3>
    3d06:	68 f3       	brcs	.-38     	; 0x3ce2 <__divsf3+0x8>

00003d08 <__divsf3_pse>:
    3d08:	99 23       	and	r25, r25
    3d0a:	b1 f3       	breq	.-20     	; 0x3cf8 <__divsf3+0x1e>
    3d0c:	55 23       	and	r21, r21
    3d0e:	91 f3       	breq	.-28     	; 0x3cf4 <__divsf3+0x1a>
    3d10:	95 1b       	sub	r25, r21
    3d12:	55 0b       	sbc	r21, r21
    3d14:	bb 27       	eor	r27, r27
    3d16:	aa 27       	eor	r26, r26
    3d18:	62 17       	cp	r22, r18
    3d1a:	73 07       	cpc	r23, r19
    3d1c:	84 07       	cpc	r24, r20
    3d1e:	38 f0       	brcs	.+14     	; 0x3d2e <__divsf3_pse+0x26>
    3d20:	9f 5f       	subi	r25, 0xFF	; 255
    3d22:	5f 4f       	sbci	r21, 0xFF	; 255
    3d24:	22 0f       	add	r18, r18
    3d26:	33 1f       	adc	r19, r19
    3d28:	44 1f       	adc	r20, r20
    3d2a:	aa 1f       	adc	r26, r26
    3d2c:	a9 f3       	breq	.-22     	; 0x3d18 <__divsf3_pse+0x10>
    3d2e:	35 d0       	rcall	.+106    	; 0x3d9a <__divsf3_pse+0x92>
    3d30:	0e 2e       	mov	r0, r30
    3d32:	3a f0       	brmi	.+14     	; 0x3d42 <__divsf3_pse+0x3a>
    3d34:	e0 e8       	ldi	r30, 0x80	; 128
    3d36:	32 d0       	rcall	.+100    	; 0x3d9c <__divsf3_pse+0x94>
    3d38:	91 50       	subi	r25, 0x01	; 1
    3d3a:	50 40       	sbci	r21, 0x00	; 0
    3d3c:	e6 95       	lsr	r30
    3d3e:	00 1c       	adc	r0, r0
    3d40:	ca f7       	brpl	.-14     	; 0x3d34 <__divsf3_pse+0x2c>
    3d42:	2b d0       	rcall	.+86     	; 0x3d9a <__divsf3_pse+0x92>
    3d44:	fe 2f       	mov	r31, r30
    3d46:	29 d0       	rcall	.+82     	; 0x3d9a <__divsf3_pse+0x92>
    3d48:	66 0f       	add	r22, r22
    3d4a:	77 1f       	adc	r23, r23
    3d4c:	88 1f       	adc	r24, r24
    3d4e:	bb 1f       	adc	r27, r27
    3d50:	26 17       	cp	r18, r22
    3d52:	37 07       	cpc	r19, r23
    3d54:	48 07       	cpc	r20, r24
    3d56:	ab 07       	cpc	r26, r27
    3d58:	b0 e8       	ldi	r27, 0x80	; 128
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <__divsf3_pse+0x56>
    3d5c:	bb 0b       	sbc	r27, r27
    3d5e:	80 2d       	mov	r24, r0
    3d60:	bf 01       	movw	r22, r30
    3d62:	ff 27       	eor	r31, r31
    3d64:	93 58       	subi	r25, 0x83	; 131
    3d66:	5f 4f       	sbci	r21, 0xFF	; 255
    3d68:	3a f0       	brmi	.+14     	; 0x3d78 <__divsf3_pse+0x70>
    3d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d6c:	51 05       	cpc	r21, r1
    3d6e:	78 f0       	brcs	.+30     	; 0x3d8e <__divsf3_pse+0x86>
    3d70:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3d74:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>
    3d78:	5f 3f       	cpi	r21, 0xFF	; 255
    3d7a:	e4 f3       	brlt	.-8      	; 0x3d74 <__divsf3_pse+0x6c>
    3d7c:	98 3e       	cpi	r25, 0xE8	; 232
    3d7e:	d4 f3       	brlt	.-12     	; 0x3d74 <__divsf3_pse+0x6c>
    3d80:	86 95       	lsr	r24
    3d82:	77 95       	ror	r23
    3d84:	67 95       	ror	r22
    3d86:	b7 95       	ror	r27
    3d88:	f7 95       	ror	r31
    3d8a:	9f 5f       	subi	r25, 0xFF	; 255
    3d8c:	c9 f7       	brne	.-14     	; 0x3d80 <__divsf3_pse+0x78>
    3d8e:	88 0f       	add	r24, r24
    3d90:	91 1d       	adc	r25, r1
    3d92:	96 95       	lsr	r25
    3d94:	87 95       	ror	r24
    3d96:	97 f9       	bld	r25, 7
    3d98:	08 95       	ret
    3d9a:	e1 e0       	ldi	r30, 0x01	; 1
    3d9c:	66 0f       	add	r22, r22
    3d9e:	77 1f       	adc	r23, r23
    3da0:	88 1f       	adc	r24, r24
    3da2:	bb 1f       	adc	r27, r27
    3da4:	62 17       	cp	r22, r18
    3da6:	73 07       	cpc	r23, r19
    3da8:	84 07       	cpc	r24, r20
    3daa:	ba 07       	cpc	r27, r26
    3dac:	20 f0       	brcs	.+8      	; 0x3db6 <__divsf3_pse+0xae>
    3dae:	62 1b       	sub	r22, r18
    3db0:	73 0b       	sbc	r23, r19
    3db2:	84 0b       	sbc	r24, r20
    3db4:	ba 0b       	sbc	r27, r26
    3db6:	ee 1f       	adc	r30, r30
    3db8:	88 f7       	brcc	.-30     	; 0x3d9c <__divsf3_pse+0x94>
    3dba:	e0 95       	com	r30
    3dbc:	08 95       	ret

00003dbe <__fixsfsi>:
    3dbe:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__fixunssfsi>
    3dc2:	68 94       	set
    3dc4:	b1 11       	cpse	r27, r1
    3dc6:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>
    3dca:	08 95       	ret

00003dcc <__fixunssfsi>:
    3dcc:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fp_splitA>
    3dd0:	88 f0       	brcs	.+34     	; 0x3df4 <__fixunssfsi+0x28>
    3dd2:	9f 57       	subi	r25, 0x7F	; 127
    3dd4:	98 f0       	brcs	.+38     	; 0x3dfc <__fixunssfsi+0x30>
    3dd6:	b9 2f       	mov	r27, r25
    3dd8:	99 27       	eor	r25, r25
    3dda:	b7 51       	subi	r27, 0x17	; 23
    3ddc:	b0 f0       	brcs	.+44     	; 0x3e0a <__fixunssfsi+0x3e>
__fixunssfsi():
    3dde:	e1 f0       	breq	.+56     	; 0x3e18 <__fixunssfsi+0x4c>
    3de0:	66 0f       	add	r22, r22
    3de2:	77 1f       	adc	r23, r23
    3de4:	88 1f       	adc	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	1a f0       	brmi	.+6      	; 0x3df0 <__fixunssfsi+0x24>
    3dea:	ba 95       	dec	r27
    3dec:	c9 f7       	brne	.-14     	; 0x3de0 <__fixunssfsi+0x14>
    3dee:	14 c0       	rjmp	.+40     	; 0x3e18 <__fixunssfsi+0x4c>
    3df0:	b1 30       	cpi	r27, 0x01	; 1
    3df2:	91 f0       	breq	.+36     	; 0x3e18 <__fixunssfsi+0x4c>
    3df4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__fp_zero>
    3df8:	b1 e0       	ldi	r27, 0x01	; 1
    3dfa:	08 95       	ret
    3dfc:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__fp_zero>
    3e00:	67 2f       	mov	r22, r23
    3e02:	78 2f       	mov	r23, r24
    3e04:	88 27       	eor	r24, r24
    3e06:	b8 5f       	subi	r27, 0xF8	; 248
    3e08:	39 f0       	breq	.+14     	; 0x3e18 <__fixunssfsi+0x4c>
    3e0a:	b9 3f       	cpi	r27, 0xF9	; 249
    3e0c:	cc f3       	brlt	.-14     	; 0x3e00 <__fixunssfsi+0x34>
    3e0e:	86 95       	lsr	r24
    3e10:	77 95       	ror	r23
    3e12:	67 95       	ror	r22
    3e14:	b3 95       	inc	r27
    3e16:	d9 f7       	brne	.-10     	; 0x3e0e <__fixunssfsi+0x42>
    3e18:	3e f4       	brtc	.+14     	; 0x3e28 <__fixunssfsi+0x5c>
    3e1a:	90 95       	com	r25
    3e1c:	80 95       	com	r24
    3e1e:	70 95       	com	r23
    3e20:	61 95       	neg	r22
    3e22:	7f 4f       	sbci	r23, 0xFF	; 255
    3e24:	8f 4f       	sbci	r24, 0xFF	; 255
    3e26:	9f 4f       	sbci	r25, 0xFF	; 255
    3e28:	08 95       	ret

00003e2a <__gesf2>:
__gesf2():
    3e2a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__fp_cmp>
    3e2e:	08 f4       	brcc	.+2      	; 0x3e32 <__gesf2+0x8>
    3e30:	8f ef       	ldi	r24, 0xFF	; 255
    3e32:	08 95       	ret

00003e34 <pow>:
pow():
    3e34:	fa 01       	movw	r30, r20
    3e36:	ee 0f       	add	r30, r30
    3e38:	ff 1f       	adc	r31, r31
    3e3a:	30 96       	adiw	r30, 0x00	; 0
    3e3c:	21 05       	cpc	r18, r1
    3e3e:	31 05       	cpc	r19, r1
    3e40:	a1 f1       	breq	.+104    	; 0x3eaa <pow+0x76>
    3e42:	61 15       	cp	r22, r1
    3e44:	71 05       	cpc	r23, r1
    3e46:	61 f4       	brne	.+24     	; 0x3e60 <pow+0x2c>
    3e48:	80 38       	cpi	r24, 0x80	; 128
    3e4a:	bf e3       	ldi	r27, 0x3F	; 63
    3e4c:	9b 07       	cpc	r25, r27
    3e4e:	49 f1       	breq	.+82     	; 0x3ea2 <pow+0x6e>
    3e50:	68 94       	set
    3e52:	90 38       	cpi	r25, 0x80	; 128
    3e54:	81 05       	cpc	r24, r1
    3e56:	61 f0       	breq	.+24     	; 0x3e70 <pow+0x3c>
    3e58:	80 38       	cpi	r24, 0x80	; 128
    3e5a:	bf ef       	ldi	r27, 0xFF	; 255
    3e5c:	9b 07       	cpc	r25, r27
    3e5e:	41 f0       	breq	.+16     	; 0x3e70 <pow+0x3c>
    3e60:	99 23       	and	r25, r25
    3e62:	4a f5       	brpl	.+82     	; 0x3eb6 <pow+0x82>
    3e64:	ff 3f       	cpi	r31, 0xFF	; 255
    3e66:	e1 05       	cpc	r30, r1
    3e68:	31 05       	cpc	r19, r1
    3e6a:	21 05       	cpc	r18, r1
    3e6c:	19 f1       	breq	.+70     	; 0x3eb4 <pow+0x80>
    3e6e:	e8 94       	clt
    3e70:	08 94       	sec
    3e72:	e7 95       	ror	r30
    3e74:	d9 01       	movw	r26, r18
    3e76:	aa 23       	and	r26, r26
    3e78:	29 f4       	brne	.+10     	; 0x3e84 <pow+0x50>
    3e7a:	ab 2f       	mov	r26, r27
    3e7c:	be 2f       	mov	r27, r30
    3e7e:	f8 5f       	subi	r31, 0xF8	; 248
    3e80:	d0 f3       	brcs	.-12     	; 0x3e76 <pow+0x42>
    3e82:	10 c0       	rjmp	.+32     	; 0x3ea4 <pow+0x70>
    3e84:	ff 5f       	subi	r31, 0xFF	; 255
    3e86:	70 f4       	brcc	.+28     	; 0x3ea4 <pow+0x70>
    3e88:	a6 95       	lsr	r26
    3e8a:	e0 f7       	brcc	.-8      	; 0x3e84 <pow+0x50>
    3e8c:	f7 39       	cpi	r31, 0x97	; 151
    3e8e:	50 f0       	brcs	.+20     	; 0x3ea4 <pow+0x70>
    3e90:	19 f0       	breq	.+6      	; 0x3e98 <pow+0x64>
    3e92:	ff 3a       	cpi	r31, 0xAF	; 175
    3e94:	38 f4       	brcc	.+14     	; 0x3ea4 <pow+0x70>
    3e96:	9f 77       	andi	r25, 0x7F	; 127
    3e98:	9f 93       	push	r25
    3e9a:	0d d0       	rcall	.+26     	; 0x3eb6 <pow+0x82>
    3e9c:	0f 90       	pop	r0
    3e9e:	07 fc       	sbrc	r0, 7
    3ea0:	90 58       	subi	r25, 0x80	; 128
    3ea2:	08 95       	ret
    3ea4:	46 f0       	brts	.+16     	; 0x3eb6 <pow+0x82>
    3ea6:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	70 e0       	ldi	r23, 0x00	; 0
    3eae:	80 e8       	ldi	r24, 0x80	; 128
    3eb0:	9f e3       	ldi	r25, 0x3F	; 63
    3eb2:	08 95       	ret
    3eb4:	4f e7       	ldi	r20, 0x7F	; 127
    3eb6:	9f 77       	andi	r25, 0x7F	; 127
    3eb8:	5f 93       	push	r21
    3eba:	4f 93       	push	r20
    3ebc:	3f 93       	push	r19
    3ebe:	2f 93       	push	r18
    3ec0:	0e 94 1a 20 	call	0x4034	; 0x4034 <log>
    3ec4:	2f 91       	pop	r18
    3ec6:	3f 91       	pop	r19
    3ec8:	4f 91       	pop	r20
    3eca:	5f 91       	pop	r21
    3ecc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__mulsf3>
    3ed0:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <exp>

00003ed4 <__unordsf2>:
__unordsf2():
    3ed4:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__fp_cmp>
    3ed8:	88 0b       	sbc	r24, r24
    3eda:	99 0b       	sbc	r25, r25
    3edc:	08 95       	ret
    3ede:	29 f4       	brne	.+10     	; 0x3eea <__unordsf2+0x16>
    3ee0:	16 f0       	brts	.+4      	; 0x3ee6 <__unordsf2+0x12>
    3ee2:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3ee6:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__fp_zero>
    3eea:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>

00003eee <exp>:
exp():
    3eee:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fp_splitA>
    3ef2:	a8 f3       	brcs	.-22     	; 0x3ede <__unordsf2+0xa>
    3ef4:	96 38       	cpi	r25, 0x86	; 134
    3ef6:	a0 f7       	brcc	.-24     	; 0x3ee0 <__unordsf2+0xc>
    3ef8:	07 f8       	bld	r0, 7
    3efa:	0f 92       	push	r0
    3efc:	e8 94       	clt
    3efe:	2b e3       	ldi	r18, 0x3B	; 59
    3f00:	3a ea       	ldi	r19, 0xAA	; 170
    3f02:	48 eb       	ldi	r20, 0xB8	; 184
    3f04:	5f e7       	ldi	r21, 0x7F	; 127
    3f06:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <__mulsf3_pse>
    3f0a:	0f 92       	push	r0
    3f0c:	0f 92       	push	r0
    3f0e:	0f 92       	push	r0
    3f10:	4d b7       	in	r20, 0x3d	; 61
    3f12:	5e b7       	in	r21, 0x3e	; 62
    3f14:	0f 92       	push	r0
    3f16:	0e 94 62 20 	call	0x40c4	; 0x40c4 <modf>
    3f1a:	e8 e6       	ldi	r30, 0x68	; 104
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__fp_powser>
    3f22:	4f 91       	pop	r20
    3f24:	5f 91       	pop	r21
    3f26:	ef 91       	pop	r30
    3f28:	ff 91       	pop	r31
    3f2a:	e5 95       	asr	r30
    3f2c:	ee 1f       	adc	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	49 f0       	breq	.+18     	; 0x3f44 <exp+0x56>
    3f32:	fe 57       	subi	r31, 0x7E	; 126
    3f34:	e0 68       	ori	r30, 0x80	; 128
    3f36:	44 27       	eor	r20, r20
    3f38:	ee 0f       	add	r30, r30
    3f3a:	44 1f       	adc	r20, r20
    3f3c:	fa 95       	dec	r31
    3f3e:	e1 f7       	brne	.-8      	; 0x3f38 <exp+0x4a>
    3f40:	41 95       	neg	r20
    3f42:	55 0b       	sbc	r21, r21
    3f44:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <ldexp>
    3f48:	0f 90       	pop	r0
    3f4a:	07 fe       	sbrs	r0, 7
    3f4c:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <inverse>
    3f50:	08 95       	ret

00003f52 <__fp_powser>:
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	1f 93       	push	r17
    3f58:	0f 93       	push	r16
    3f5a:	ff 92       	push	r15
    3f5c:	ef 92       	push	r14
    3f5e:	df 92       	push	r13
    3f60:	7b 01       	movw	r14, r22
__fp_powser():
    3f62:	8c 01       	movw	r16, r24
    3f64:	68 94       	set
    3f66:	06 c0       	rjmp	.+12     	; 0x3f74 <__fp_powser+0x22>
    3f68:	da 2e       	mov	r13, r26
    3f6a:	ef 01       	movw	r28, r30
    3f6c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3x>
    3f70:	fe 01       	movw	r30, r28
    3f72:	e8 94       	clt
    3f74:	a5 91       	lpm	r26, Z+
    3f76:	25 91       	lpm	r18, Z+
    3f78:	35 91       	lpm	r19, Z+
    3f7a:	45 91       	lpm	r20, Z+
    3f7c:	55 91       	lpm	r21, Z+
    3f7e:	a6 f3       	brts	.-24     	; 0x3f68 <__fp_powser+0x16>
    3f80:	ef 01       	movw	r28, r30
    3f82:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__addsf3x>
    3f86:	fe 01       	movw	r30, r28
    3f88:	97 01       	movw	r18, r14
    3f8a:	a8 01       	movw	r20, r16
    3f8c:	da 94       	dec	r13
    3f8e:	69 f7       	brne	.-38     	; 0x3f6a <__fp_powser+0x18>
    3f90:	df 90       	pop	r13
    3f92:	ef 90       	pop	r14
    3f94:	ff 90       	pop	r15
    3f96:	0f 91       	pop	r16
    3f98:	1f 91       	pop	r17
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	08 95       	ret

00003fa0 <inverse>:
inverse():
    3fa0:	9b 01       	movw	r18, r22
    3fa2:	ac 01       	movw	r20, r24
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	80 e8       	ldi	r24, 0x80	; 128
    3faa:	9f e3       	ldi	r25, 0x3F	; 63
    3fac:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__divsf3>
    3fb0:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>
    3fb4:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_mpack>

00003fb8 <ldexp>:
ldexp():
    3fb8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fp_splitA>
    3fbc:	d8 f3       	brcs	.-10     	; 0x3fb4 <inverse+0x14>
    3fbe:	99 23       	and	r25, r25
    3fc0:	c9 f3       	breq	.-14     	; 0x3fb4 <inverse+0x14>
    3fc2:	94 0f       	add	r25, r20
    3fc4:	51 1d       	adc	r21, r1
    3fc6:	a3 f3       	brvs	.-24     	; 0x3fb0 <inverse+0x10>
    3fc8:	91 50       	subi	r25, 0x01	; 1
    3fca:	50 40       	sbci	r21, 0x00	; 0
    3fcc:	94 f0       	brlt	.+36     	; 0x3ff2 <ldexp+0x3a>
    3fce:	59 f0       	breq	.+22     	; 0x3fe6 <ldexp+0x2e>
    3fd0:	88 23       	and	r24, r24
    3fd2:	32 f0       	brmi	.+12     	; 0x3fe0 <ldexp+0x28>
    3fd4:	66 0f       	add	r22, r22
    3fd6:	77 1f       	adc	r23, r23
    3fd8:	88 1f       	adc	r24, r24
    3fda:	91 50       	subi	r25, 0x01	; 1
    3fdc:	50 40       	sbci	r21, 0x00	; 0
    3fde:	c1 f7       	brne	.-16     	; 0x3fd0 <ldexp+0x18>
    3fe0:	9e 3f       	cpi	r25, 0xFE	; 254
    3fe2:	51 05       	cpc	r21, r1
    3fe4:	2c f7       	brge	.-54     	; 0x3fb0 <inverse+0x10>
    3fe6:	88 0f       	add	r24, r24
    3fe8:	91 1d       	adc	r25, r1
    3fea:	96 95       	lsr	r25
    3fec:	87 95       	ror	r24
    3fee:	97 f9       	bld	r25, 7
    3ff0:	08 95       	ret
    3ff2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ff4:	ac f0       	brlt	.+42     	; 0x4020 <ldexp+0x68>
    3ff6:	98 3e       	cpi	r25, 0xE8	; 232
    3ff8:	9c f0       	brlt	.+38     	; 0x4020 <ldexp+0x68>
    3ffa:	bb 27       	eor	r27, r27
    3ffc:	86 95       	lsr	r24
    3ffe:	77 95       	ror	r23
    4000:	67 95       	ror	r22
    4002:	b7 95       	ror	r27
    4004:	08 f4       	brcc	.+2      	; 0x4008 <ldexp+0x50>
    4006:	b1 60       	ori	r27, 0x01	; 1
    4008:	93 95       	inc	r25
    400a:	c1 f7       	brne	.-16     	; 0x3ffc <ldexp+0x44>
    400c:	bb 0f       	add	r27, r27
    400e:	58 f7       	brcc	.-42     	; 0x3fe6 <ldexp+0x2e>
    4010:	11 f4       	brne	.+4      	; 0x4016 <ldexp+0x5e>
    4012:	60 ff       	sbrs	r22, 0
    4014:	e8 cf       	rjmp	.-48     	; 0x3fe6 <ldexp+0x2e>
    4016:	6f 5f       	subi	r22, 0xFF	; 255
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	8f 4f       	sbci	r24, 0xFF	; 255
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	e3 cf       	rjmp	.-58     	; 0x3fe6 <ldexp+0x2e>
    4020:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_szero>
    4024:	16 f0       	brts	.+4      	; 0x402a <ldexp+0x72>
    4026:	0c 94 96 20 	jmp	0x412c	; 0x412c <__fp_mpack>
    402a:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__fp_nan>
    402e:	68 94       	set
    4030:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__fp_inf>

00004034 <log>:
log():
    4034:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fp_splitA>
    4038:	a8 f3       	brcs	.-22     	; 0x4024 <ldexp+0x6c>
    403a:	99 23       	and	r25, r25
    403c:	c1 f3       	breq	.-16     	; 0x402e <ldexp+0x76>
    403e:	ae f3       	brts	.-22     	; 0x402a <ldexp+0x72>
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	1f 93       	push	r17
    4046:	0f 93       	push	r16
    4048:	ff 92       	push	r15
    404a:	c9 2f       	mov	r28, r25
    404c:	dd 27       	eor	r29, r29
    404e:	88 23       	and	r24, r24
    4050:	2a f0       	brmi	.+10     	; 0x405c <log+0x28>
    4052:	21 97       	sbiw	r28, 0x01	; 1
    4054:	66 0f       	add	r22, r22
    4056:	77 1f       	adc	r23, r23
    4058:	88 1f       	adc	r24, r24
    405a:	da f7       	brpl	.-10     	; 0x4052 <log+0x1e>
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e8       	ldi	r20, 0x80	; 128
    4062:	5f eb       	ldi	r21, 0xBF	; 191
    4064:	9f e3       	ldi	r25, 0x3F	; 63
    4066:	88 39       	cpi	r24, 0x98	; 152
    4068:	20 f0       	brcs	.+8      	; 0x4072 <log+0x3e>
    406a:	80 3e       	cpi	r24, 0xE0	; 224
    406c:	38 f0       	brcs	.+14     	; 0x407c <log+0x48>
    406e:	21 96       	adiw	r28, 0x01	; 1
    4070:	8f 77       	andi	r24, 0x7F	; 127
    4072:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__addsf3>
    4076:	e0 e9       	ldi	r30, 0x90	; 144
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <log+0x50>
    407c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__addsf3>
    4080:	ed eb       	ldi	r30, 0xBD	; 189
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__fp_powser>
    4088:	8b 01       	movw	r16, r22
    408a:	be 01       	movw	r22, r28
    408c:	ec 01       	movw	r28, r24
    408e:	fb 2e       	mov	r15, r27
    4090:	6f 57       	subi	r22, 0x7F	; 127
    4092:	71 09       	sbc	r23, r1
    4094:	75 95       	asr	r23
    4096:	77 1f       	adc	r23, r23
    4098:	88 0b       	sbc	r24, r24
    409a:	99 0b       	sbc	r25, r25
    409c:	0e 94 97 1c 	call	0x392e	; 0x392e <__floatsisf>
    40a0:	28 e1       	ldi	r18, 0x18	; 24
    40a2:	32 e7       	ldi	r19, 0x72	; 114
    40a4:	41 e3       	ldi	r20, 0x31	; 49
    40a6:	5f e3       	ldi	r21, 0x3F	; 63
    40a8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__mulsf3x>
    40ac:	af 2d       	mov	r26, r15
    40ae:	98 01       	movw	r18, r16
    40b0:	ae 01       	movw	r20, r28
    40b2:	ff 90       	pop	r15
    40b4:	0f 91       	pop	r16
    40b6:	1f 91       	pop	r17
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__addsf3x>
    40c0:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__fp_round>

000040c4 <modf>:
    40c4:	fa 01       	movw	r30, r20
    40c6:	dc 01       	movw	r26, r24
    40c8:	aa 0f       	add	r26, r26
    40ca:	bb 1f       	adc	r27, r27
    40cc:	9b 01       	movw	r18, r22
    40ce:	ac 01       	movw	r20, r24
    40d0:	bf 57       	subi	r27, 0x7F	; 127
    40d2:	28 f4       	brcc	.+10     	; 0x40de <modf+0x1a>
modf():
    40d4:	22 27       	eor	r18, r18
    40d6:	33 27       	eor	r19, r19
    40d8:	44 27       	eor	r20, r20
    40da:	50 78       	andi	r21, 0x80	; 128
    40dc:	20 c0       	rjmp	.+64     	; 0x411e <modf+0x5a>
    40de:	b7 51       	subi	r27, 0x17	; 23
    40e0:	90 f4       	brcc	.+36     	; 0x4106 <modf+0x42>
    40e2:	ab 2f       	mov	r26, r27
    40e4:	00 24       	eor	r0, r0
    40e6:	46 95       	lsr	r20
    40e8:	37 95       	ror	r19
    40ea:	27 95       	ror	r18
    40ec:	01 1c       	adc	r0, r1
    40ee:	a3 95       	inc	r26
    40f0:	d2 f3       	brmi	.-12     	; 0x40e6 <modf+0x22>
    40f2:	00 20       	and	r0, r0
    40f4:	71 f0       	breq	.+28     	; 0x4112 <modf+0x4e>
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	44 1f       	adc	r20, r20
    40fc:	b3 95       	inc	r27
    40fe:	da f3       	brmi	.-10     	; 0x40f6 <modf+0x32>
    4100:	0e d0       	rcall	.+28     	; 0x411e <modf+0x5a>
    4102:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__subsf3>
    4106:	61 30       	cpi	r22, 0x01	; 1
    4108:	71 05       	cpc	r23, r1
    410a:	a0 e8       	ldi	r26, 0x80	; 128
    410c:	8a 07       	cpc	r24, r26
    410e:	b9 46       	sbci	r27, 0x69	; 105
    4110:	30 f4       	brcc	.+12     	; 0x411e <modf+0x5a>
    4112:	9b 01       	movw	r18, r22
    4114:	ac 01       	movw	r20, r24
    4116:	66 27       	eor	r22, r22
    4118:	77 27       	eor	r23, r23
    411a:	88 27       	eor	r24, r24
    411c:	90 78       	andi	r25, 0x80	; 128
    411e:	30 96       	adiw	r30, 0x00	; 0
    4120:	21 f0       	breq	.+8      	; 0x412a <modf+0x66>
    4122:	20 83       	st	Z, r18
    4124:	31 83       	std	Z+1, r19	; 0x01
    4126:	42 83       	std	Z+2, r20	; 0x02
    4128:	53 83       	std	Z+3, r21	; 0x03
    412a:	08 95       	ret

0000412c <__fp_mpack>:
__fp_mpack():
    412c:	9f 3f       	cpi	r25, 0xFF	; 255
    412e:	31 f0       	breq	.+12     	; 0x413c <__fp_mpack_finite+0xc>

00004130 <__fp_mpack_finite>:
    4130:	91 50       	subi	r25, 0x01	; 1
    4132:	20 f4       	brcc	.+8      	; 0x413c <__fp_mpack_finite+0xc>
    4134:	87 95       	ror	r24
    4136:	77 95       	ror	r23
    4138:	67 95       	ror	r22
    413a:	b7 95       	ror	r27
    413c:	88 0f       	add	r24, r24
    413e:	91 1d       	adc	r25, r1
    4140:	96 95       	lsr	r25
    4142:	87 95       	ror	r24
    4144:	97 f9       	bld	r25, 7
    4146:	08 95       	ret

00004148 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4148:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    414a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    414c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    414e:	07 c0       	rjmp	.+14     	; 0x415e <__udivmodhi4_ep>

00004150 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4150:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4152:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4154:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4156:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4158:	10 f0       	brcs	.+4      	; 0x415e <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    415a:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    415c:	b7 0b       	sbc	r27, r23

0000415e <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    415e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4160:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4162:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4164:	a9 f7       	brne	.-22     	; 0x4150 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4166:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4168:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    416a:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    416c:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    416e:	08 95       	ret

00004170 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    4170:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    4172:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    4174:	16 f4       	brtc	.+4      	; 0x417a <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    4176:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    4178:	07 d0       	rcall	.+14     	; 0x4188 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    417a:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    417c:	09 d0       	rcall	.+18     	; 0x4190 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    417e:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    4182:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    4184:	05 d0       	rcall	.+10     	; 0x4190 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    4186:	3e f4       	brtc	.+14     	; 0x4196 <__divmodhi4_exit>

00004188 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    4188:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    418a:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    418c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    418e:	08 95       	ret

00004190 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    4190:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    4192:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    4194:	7f 4f       	sbci	r23, 0xFF	; 255

00004196 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    4196:	08 95       	ret

00004198 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4198:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    419a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    419c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    419e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    41a0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    41a2:	09 94       	ijmp

000041a4 <malloc>:
malloc():
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	82 30       	cpi	r24, 0x02	; 2
    41ae:	91 05       	cpc	r25, r1
    41b0:	10 f4       	brcc	.+4      	; 0x41b6 <malloc+0x12>
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	e0 91 6f 06 	lds	r30, 0x066F	; 0x80066f <__flp>
    41ba:	f0 91 70 06 	lds	r31, 0x0670	; 0x800670 <__flp+0x1>
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	b0 e0       	ldi	r27, 0x00	; 0
    41c4:	a0 e0       	ldi	r26, 0x00	; 0
    41c6:	30 97       	sbiw	r30, 0x00	; 0
    41c8:	99 f4       	brne	.+38     	; 0x41f0 <malloc+0x4c>
    41ca:	21 15       	cp	r18, r1
    41cc:	31 05       	cpc	r19, r1
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <malloc+0x2e>
    41d0:	4a c0       	rjmp	.+148    	; 0x4266 <malloc+0xc2>
    41d2:	28 1b       	sub	r18, r24
    41d4:	39 0b       	sbc	r19, r25
    41d6:	24 30       	cpi	r18, 0x04	; 4
    41d8:	31 05       	cpc	r19, r1
    41da:	d8 f5       	brcc	.+118    	; 0x4252 <malloc+0xae>
    41dc:	8a 81       	ldd	r24, Y+2	; 0x02
    41de:	9b 81       	ldd	r25, Y+3	; 0x03
    41e0:	61 15       	cp	r22, r1
    41e2:	71 05       	cpc	r23, r1
    41e4:	89 f1       	breq	.+98     	; 0x4248 <malloc+0xa4>
    41e6:	fb 01       	movw	r30, r22
    41e8:	93 83       	std	Z+3, r25	; 0x03
    41ea:	82 83       	std	Z+2, r24	; 0x02
    41ec:	fe 01       	movw	r30, r28
    41ee:	11 c0       	rjmp	.+34     	; 0x4212 <malloc+0x6e>
    41f0:	40 81       	ld	r20, Z
    41f2:	51 81       	ldd	r21, Z+1	; 0x01
    41f4:	02 81       	ldd	r16, Z+2	; 0x02
    41f6:	13 81       	ldd	r17, Z+3	; 0x03
    41f8:	48 17       	cp	r20, r24
    41fa:	59 07       	cpc	r21, r25
    41fc:	e0 f0       	brcs	.+56     	; 0x4236 <malloc+0x92>
    41fe:	48 17       	cp	r20, r24
    4200:	59 07       	cpc	r21, r25
    4202:	99 f4       	brne	.+38     	; 0x422a <malloc+0x86>
    4204:	10 97       	sbiw	r26, 0x00	; 0
    4206:	61 f0       	breq	.+24     	; 0x4220 <malloc+0x7c>
    4208:	12 96       	adiw	r26, 0x02	; 2
    420a:	0c 93       	st	X, r16
    420c:	12 97       	sbiw	r26, 0x02	; 2
    420e:	13 96       	adiw	r26, 0x03	; 3
    4210:	1c 93       	st	X, r17
    4212:	32 96       	adiw	r30, 0x02	; 2
    4214:	cf 01       	movw	r24, r30
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	1f 91       	pop	r17
    421c:	0f 91       	pop	r16
    421e:	08 95       	ret
    4220:	00 93 6f 06 	sts	0x066F, r16	; 0x80066f <__flp>
    4224:	10 93 70 06 	sts	0x0670, r17	; 0x800670 <__flp+0x1>
    4228:	f4 cf       	rjmp	.-24     	; 0x4212 <malloc+0x6e>
    422a:	21 15       	cp	r18, r1
    422c:	31 05       	cpc	r19, r1
    422e:	51 f0       	breq	.+20     	; 0x4244 <malloc+0xa0>
    4230:	42 17       	cp	r20, r18
    4232:	53 07       	cpc	r21, r19
    4234:	38 f0       	brcs	.+14     	; 0x4244 <malloc+0xa0>
    4236:	a9 01       	movw	r20, r18
    4238:	db 01       	movw	r26, r22
    423a:	9a 01       	movw	r18, r20
    423c:	bd 01       	movw	r22, r26
    423e:	df 01       	movw	r26, r30
    4240:	f8 01       	movw	r30, r16
    4242:	c1 cf       	rjmp	.-126    	; 0x41c6 <malloc+0x22>
    4244:	ef 01       	movw	r28, r30
    4246:	f9 cf       	rjmp	.-14     	; 0x423a <malloc+0x96>
    4248:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <__flp+0x1>
    424c:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <__flp>
    4250:	cd cf       	rjmp	.-102    	; 0x41ec <malloc+0x48>
    4252:	fe 01       	movw	r30, r28
    4254:	e2 0f       	add	r30, r18
    4256:	f3 1f       	adc	r31, r19
    4258:	81 93       	st	Z+, r24
    425a:	91 93       	st	Z+, r25
    425c:	22 50       	subi	r18, 0x02	; 2
    425e:	31 09       	sbc	r19, r1
    4260:	39 83       	std	Y+1, r19	; 0x01
    4262:	28 83       	st	Y, r18
    4264:	d7 cf       	rjmp	.-82     	; 0x4214 <malloc+0x70>
    4266:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <__brkval>
    426a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__brkval+0x1>
    426e:	23 2b       	or	r18, r19
    4270:	41 f4       	brne	.+16     	; 0x4282 <malloc+0xde>
    4272:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_start>
    4276:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_start+0x1>
    427a:	30 93 6e 06 	sts	0x066E, r19	; 0x80066e <__brkval+0x1>
    427e:	20 93 6d 06 	sts	0x066D, r18	; 0x80066d <__brkval>
    4282:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_end>
    4286:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_end+0x1>
    428a:	21 15       	cp	r18, r1
    428c:	31 05       	cpc	r19, r1
    428e:	41 f4       	brne	.+16     	; 0x42a0 <malloc+0xfc>
    4290:	2d b7       	in	r18, 0x3d	; 61
    4292:	3e b7       	in	r19, 0x3e	; 62
    4294:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <__malloc_margin>
    4298:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <__malloc_margin+0x1>
    429c:	24 1b       	sub	r18, r20
    429e:	35 0b       	sbc	r19, r21
    42a0:	e0 91 6d 06 	lds	r30, 0x066D	; 0x80066d <__brkval>
    42a4:	f0 91 6e 06 	lds	r31, 0x066E	; 0x80066e <__brkval+0x1>
    42a8:	e2 17       	cp	r30, r18
    42aa:	f3 07       	cpc	r31, r19
    42ac:	a0 f4       	brcc	.+40     	; 0x42d6 <malloc+0x132>
    42ae:	2e 1b       	sub	r18, r30
    42b0:	3f 0b       	sbc	r19, r31
    42b2:	28 17       	cp	r18, r24
    42b4:	39 07       	cpc	r19, r25
    42b6:	78 f0       	brcs	.+30     	; 0x42d6 <malloc+0x132>
    42b8:	ac 01       	movw	r20, r24
    42ba:	4e 5f       	subi	r20, 0xFE	; 254
    42bc:	5f 4f       	sbci	r21, 0xFF	; 255
    42be:	24 17       	cp	r18, r20
    42c0:	35 07       	cpc	r19, r21
    42c2:	48 f0       	brcs	.+18     	; 0x42d6 <malloc+0x132>
    42c4:	4e 0f       	add	r20, r30
    42c6:	5f 1f       	adc	r21, r31
    42c8:	50 93 6e 06 	sts	0x066E, r21	; 0x80066e <__brkval+0x1>
    42cc:	40 93 6d 06 	sts	0x066D, r20	; 0x80066d <__brkval>
    42d0:	81 93       	st	Z+, r24
    42d2:	91 93       	st	Z+, r25
    42d4:	9f cf       	rjmp	.-194    	; 0x4214 <malloc+0x70>
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	e0 e0       	ldi	r30, 0x00	; 0
    42da:	9c cf       	rjmp	.-200    	; 0x4214 <malloc+0x70>

000042dc <free>:
free():
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	e9 f0       	breq	.+58     	; 0x431e <free+0x42>
    42e4:	fc 01       	movw	r30, r24
    42e6:	32 97       	sbiw	r30, 0x02	; 2
    42e8:	13 82       	std	Z+3, r1	; 0x03
    42ea:	12 82       	std	Z+2, r1	; 0x02
    42ec:	a0 91 6f 06 	lds	r26, 0x066F	; 0x80066f <__flp>
    42f0:	b0 91 70 06 	lds	r27, 0x0670	; 0x800670 <__flp+0x1>
    42f4:	ed 01       	movw	r28, r26
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	10 97       	sbiw	r26, 0x00	; 0
    42fc:	a1 f4       	brne	.+40     	; 0x4326 <free+0x4a>
    42fe:	20 81       	ld	r18, Z
    4300:	31 81       	ldd	r19, Z+1	; 0x01
    4302:	82 0f       	add	r24, r18
    4304:	93 1f       	adc	r25, r19
    4306:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <__brkval>
    430a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__brkval+0x1>
    430e:	28 17       	cp	r18, r24
    4310:	39 07       	cpc	r19, r25
    4312:	09 f0       	breq	.+2      	; 0x4316 <free+0x3a>
    4314:	61 c0       	rjmp	.+194    	; 0x43d8 <free+0xfc>
    4316:	f0 93 6e 06 	sts	0x066E, r31	; 0x80066e <__brkval+0x1>
    431a:	e0 93 6d 06 	sts	0x066D, r30	; 0x80066d <__brkval>
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	08 95       	ret
    4324:	ea 01       	movw	r28, r20
    4326:	ce 17       	cp	r28, r30
    4328:	df 07       	cpc	r29, r31
    432a:	e8 f5       	brcc	.+122    	; 0x43a6 <free+0xca>
    432c:	4a 81       	ldd	r20, Y+2	; 0x02
    432e:	5b 81       	ldd	r21, Y+3	; 0x03
    4330:	9e 01       	movw	r18, r28
    4332:	41 15       	cp	r20, r1
    4334:	51 05       	cpc	r21, r1
    4336:	b1 f7       	brne	.-20     	; 0x4324 <free+0x48>
    4338:	e9 01       	movw	r28, r18
    433a:	fb 83       	std	Y+3, r31	; 0x03
    433c:	ea 83       	std	Y+2, r30	; 0x02
    433e:	49 91       	ld	r20, Y+
    4340:	59 91       	ld	r21, Y+
    4342:	c4 0f       	add	r28, r20
    4344:	d5 1f       	adc	r29, r21
    4346:	ec 17       	cp	r30, r28
    4348:	fd 07       	cpc	r31, r29
    434a:	61 f4       	brne	.+24     	; 0x4364 <free+0x88>
    434c:	80 81       	ld	r24, Z
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	02 96       	adiw	r24, 0x02	; 2
    4352:	84 0f       	add	r24, r20
    4354:	95 1f       	adc	r25, r21
    4356:	e9 01       	movw	r28, r18
    4358:	99 83       	std	Y+1, r25	; 0x01
    435a:	88 83       	st	Y, r24
    435c:	82 81       	ldd	r24, Z+2	; 0x02
    435e:	93 81       	ldd	r25, Z+3	; 0x03
    4360:	9b 83       	std	Y+3, r25	; 0x03
    4362:	8a 83       	std	Y+2, r24	; 0x02
    4364:	f0 e0       	ldi	r31, 0x00	; 0
    4366:	e0 e0       	ldi	r30, 0x00	; 0
    4368:	12 96       	adiw	r26, 0x02	; 2
    436a:	8d 91       	ld	r24, X+
    436c:	9c 91       	ld	r25, X
    436e:	13 97       	sbiw	r26, 0x03	; 3
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	b9 f5       	brne	.+110    	; 0x43e2 <free+0x106>
    4374:	2d 91       	ld	r18, X+
    4376:	3c 91       	ld	r19, X
    4378:	11 97       	sbiw	r26, 0x01	; 1
    437a:	cd 01       	movw	r24, r26
    437c:	02 96       	adiw	r24, 0x02	; 2
    437e:	82 0f       	add	r24, r18
    4380:	93 1f       	adc	r25, r19
    4382:	20 91 6d 06 	lds	r18, 0x066D	; 0x80066d <__brkval>
    4386:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__brkval+0x1>
    438a:	28 17       	cp	r18, r24
    438c:	39 07       	cpc	r19, r25
    438e:	39 f6       	brne	.-114    	; 0x431e <free+0x42>
    4390:	30 97       	sbiw	r30, 0x00	; 0
    4392:	51 f5       	brne	.+84     	; 0x43e8 <free+0x10c>
    4394:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <__flp+0x1>
    4398:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__flp>
    439c:	b0 93 6e 06 	sts	0x066E, r27	; 0x80066e <__brkval+0x1>
    43a0:	a0 93 6d 06 	sts	0x066D, r26	; 0x80066d <__brkval>
    43a4:	bc cf       	rjmp	.-136    	; 0x431e <free+0x42>
    43a6:	d3 83       	std	Z+3, r29	; 0x03
    43a8:	c2 83       	std	Z+2, r28	; 0x02
    43aa:	40 81       	ld	r20, Z
    43ac:	51 81       	ldd	r21, Z+1	; 0x01
    43ae:	84 0f       	add	r24, r20
    43b0:	95 1f       	adc	r25, r21
    43b2:	c8 17       	cp	r28, r24
    43b4:	d9 07       	cpc	r29, r25
    43b6:	61 f4       	brne	.+24     	; 0x43d0 <free+0xf4>
    43b8:	4e 5f       	subi	r20, 0xFE	; 254
    43ba:	5f 4f       	sbci	r21, 0xFF	; 255
    43bc:	88 81       	ld	r24, Y
    43be:	99 81       	ldd	r25, Y+1	; 0x01
    43c0:	48 0f       	add	r20, r24
    43c2:	59 1f       	adc	r21, r25
    43c4:	51 83       	std	Z+1, r21	; 0x01
    43c6:	40 83       	st	Z, r20
    43c8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ca:	9b 81       	ldd	r25, Y+3	; 0x03
    43cc:	93 83       	std	Z+3, r25	; 0x03
    43ce:	82 83       	std	Z+2, r24	; 0x02
    43d0:	21 15       	cp	r18, r1
    43d2:	31 05       	cpc	r19, r1
    43d4:	09 f0       	breq	.+2      	; 0x43d8 <free+0xfc>
    43d6:	b0 cf       	rjmp	.-160    	; 0x4338 <free+0x5c>
    43d8:	f0 93 70 06 	sts	0x0670, r31	; 0x800670 <__flp+0x1>
    43dc:	e0 93 6f 06 	sts	0x066F, r30	; 0x80066f <__flp>
    43e0:	9e cf       	rjmp	.-196    	; 0x431e <free+0x42>
    43e2:	fd 01       	movw	r30, r26
    43e4:	dc 01       	movw	r26, r24
    43e6:	c0 cf       	rjmp	.-128    	; 0x4368 <free+0x8c>
    43e8:	13 82       	std	Z+3, r1	; 0x03
    43ea:	12 82       	std	Z+2, r1	; 0x02
    43ec:	d7 cf       	rjmp	.-82     	; 0x439c <free+0xc0>

000043ee <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    43ee:	f8 94       	cli

000043f0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    43f0:	ff cf       	rjmp	.-2      	; 0x43f0 <__stop_program>
