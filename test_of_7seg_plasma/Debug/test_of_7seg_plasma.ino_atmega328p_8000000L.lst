
C:\Users\dlcks\AppData\Local\Temp\VMBuilds\test_of_7seg_plasma\pro_8MHzatmega328\Debug/test_of_7seg_plasma.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_18>
  4c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_19>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	24 00       	.word	0x0024	; ????
  6e:	27 00       	.word	0x0027	; ????
  70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
  a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
__ctors_start():
  b8:	8c 02       	muls	r24, r28

000000ba <__ctors_end>:
__dtors_end():
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  c6:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  c8:	aa e2       	ldi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  ca:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  d0:	a6 31       	cpi	r26, 0x16	; 22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  d2:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>

000000d6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  d6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  d8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  da:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  dc:	ec e6       	ldi	r30, 0x6C	; 108
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  de:	f8 e0       	ldi	r31, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  e2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  e4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  e6:	aa 32       	cpi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  e8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  ec:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  ee:	cd e5       	ldi	r28, 0x5D	; 93
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  f0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  f4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  f6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  f8:	0e 94 2e 04 	call	0x85c	; 0x85c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  fc:	cc 35       	cpi	r28, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  fe:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 cb 02 	call	0x596	; 0x596 <main>
 106:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

0000010a <__bad_interrupt>:
__vector_22():
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool) [clone .constprop.22]>:
_ZN16VisualMicroDebug16DBG_YieldAndWaitEmb.constprop.22():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:123

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
millis():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:68
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 11a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 11c:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:73
	m = timer0_millis;
 11e:	c0 90 2f 01 	lds	r12, 0x012F	; 0x80012f <timer0_millis>
 122:	d0 90 30 01 	lds	r13, 0x0130	; 0x800130 <timer0_millis+0x1>
 126:	e0 90 31 01 	lds	r14, 0x0131	; 0x800131 <timer0_millis+0x2>
 12a:	f0 90 32 01 	lds	r15, 0x0132	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:74
	SREG = oldSREG;
 12e:	2f bf       	out	0x3f, r18	; 63
_ZN16VisualMicroDebug16DBG_YieldAndWaitEmb.constprop.22():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:126
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
 130:	6c 0d       	add	r22, r12
 132:	7d 1d       	adc	r23, r13
 134:	8e 1d       	adc	r24, r14
 136:	9f 1d       	adc	r25, r15
millis():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:68
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 138:	4f b7       	in	r20, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 13a:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:73
	m = timer0_millis;
 13c:	00 91 2f 01 	lds	r16, 0x012F	; 0x80012f <timer0_millis>
 140:	10 91 30 01 	lds	r17, 0x0130	; 0x800130 <timer0_millis+0x1>
 144:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <timer0_millis+0x2>
 148:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:74
	SREG = oldSREG;
 14c:	4f bf       	out	0x3f, r20	; 63
_ZN16VisualMicroDebug16DBG_YieldAndWaitEmb.constprop.22():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:140

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
 14e:	0c 15       	cp	r16, r12
 150:	1d 05       	cpc	r17, r13
 152:	2e 05       	cpc	r18, r14
 154:	3f 05       	cpc	r19, r15
 156:	28 f0       	brcs	.+10     	; 0x162 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool) [clone .constprop.22]+0x54>
 158:	60 17       	cp	r22, r16
 15a:	71 07       	cpc	r23, r17
 15c:	82 07       	cpc	r24, r18
 15e:	93 07       	cpc	r25, r19
 160:	58 f7       	brcc	.-42     	; 0x138 <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool) [clone .constprop.22]+0x2a>
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:158
			//#endif
#endif
		}
	}

}
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	08 95       	ret

00000170 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	6c 01       	movw	r12, r24
 186:	7b 01       	movw	r14, r22
 188:	8b 01       	movw	r16, r22
 18a:	04 0f       	add	r16, r20
 18c:	15 1f       	adc	r17, r21
 18e:	eb 01       	movw	r28, r22
 190:	5e 01       	movw	r10, r28
 192:	ae 18       	sub	r10, r14
 194:	bf 08       	sbc	r11, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:37
  size_t n = 0;
  while (size--) {
 196:	c0 17       	cp	r28, r16
 198:	d1 07       	cpc	r29, r17
 19a:	59 f0       	breq	.+22     	; 0x1b2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:38
    if (write(*buffer++)) n++;
 19c:	69 91       	ld	r22, Y+
 19e:	d6 01       	movw	r26, r12
 1a0:	ed 91       	ld	r30, X+
 1a2:	fc 91       	ld	r31, X
 1a4:	01 90       	ld	r0, Z+
 1a6:	f0 81       	ld	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	c6 01       	movw	r24, r12
 1ac:	09 95       	icall
 1ae:	89 2b       	or	r24, r25
 1b0:	79 f7       	brne	.-34     	; 0x190 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.cpp:42
    else break;
  }
  return n;
}
 1b2:	c5 01       	movw	r24, r10
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	bf 90       	pop	r11
 1c6:	af 90       	pop	r10
 1c8:	08 95       	ret

000001ca <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 1ca:	fc 01       	movw	r30, r24
 1cc:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
 1ce:	44 8d       	ldd	r20, Z+28	; 0x1c
 1d0:	25 2f       	mov	r18, r21
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	84 2f       	mov	r24, r20
 1d6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 1d8:	82 1b       	sub	r24, r18
 1da:	93 0b       	sbc	r25, r19
 1dc:	54 17       	cp	r21, r20
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <HardwareSerial::availableForWrite()+0x1a>
 1e0:	cf 96       	adiw	r24, 0x3f	; 63
 1e2:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:202
  return tail - head - 1;
 1e4:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:203
}
 1e6:	08 95       	ret

000001e8 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 1e8:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1ea:	91 8d       	ldd	r25, Z+25	; 0x19
 1ec:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ee:	98 17       	cp	r25, r24
 1f0:	61 f0       	breq	.+24     	; 0x20a <HardwareSerial::read()+0x22>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
 1f4:	ae 0f       	add	r26, r30
 1f6:	bf 2f       	mov	r27, r31
 1f8:	b1 1d       	adc	r27, r1
 1fa:	5d 96       	adiw	r26, 0x1d	; 29
 1fc:	8c 91       	ld	r24, X
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1fe:	92 8d       	ldd	r25, Z+26	; 0x1a
 200:	9f 5f       	subi	r25, 0xFF	; 255
 202:	9f 73       	andi	r25, 0x3F	; 63
 204:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:188
    return c;
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 20e:	08 95       	ret

00000210 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 210:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
 212:	91 8d       	ldd	r25, Z+25	; 0x19
 214:	82 8d       	ldd	r24, Z+26	; 0x1a
 216:	98 17       	cp	r25, r24
 218:	31 f0       	breq	.+12     	; 0x226 <HardwareSerial::peek()+0x16>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 21a:	82 8d       	ldd	r24, Z+26	; 0x1a
 21c:	e8 0f       	add	r30, r24
 21e:	f1 1d       	adc	r31, r1
 220:	85 8d       	ldd	r24, Z+29	; 0x1d
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 22a:	08 95       	ret

0000022c <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 22c:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 22e:	91 8d       	ldd	r25, Z+25	; 0x19
 230:	22 8d       	ldd	r18, Z+26	; 0x1a
 232:	89 2f       	mov	r24, r25
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	80 5c       	subi	r24, 0xC0	; 192
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	82 1b       	sub	r24, r18
 23c:	91 09       	sbc	r25, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:169
}
 23e:	8f 73       	andi	r24, 0x3F	; 63
 240:	99 27       	eor	r25, r25
 242:	08 95       	ret

00000244 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 244:	83 e3       	ldi	r24, 0x33	; 51
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 16 01 	call	0x22c	; 0x22c <HardwareSerial::available()>
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	89 2b       	or	r24, r25
 250:	09 f4       	brne	.+2      	; 0x254 <Serial0_available()+0x10>
 252:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:77
}
 254:	82 2f       	mov	r24, r18
 256:	08 95       	ret

00000258 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	89 2b       	or	r24, r25
 25e:	29 f0       	breq	.+10     	; 0x26a <serialEventRun()+0x12>
 260:	0e 94 22 01 	call	0x244	; 0x244 <Serial0_available()>
 264:	81 11       	cpse	r24, r1
 266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 26a:	08 95       	ret

0000026c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 26c:	fc 01       	movw	r30, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 26e:	a4 8d       	ldd	r26, Z+28	; 0x1c
 270:	a8 0f       	add	r26, r24
 272:	b9 2f       	mov	r27, r25
 274:	b1 1d       	adc	r27, r1
 276:	a3 5a       	subi	r26, 0xA3	; 163
 278:	bf 4f       	sbci	r27, 0xFF	; 255
 27a:	2c 91       	ld	r18, X
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 27c:	84 8d       	ldd	r24, Z+28	; 0x1c
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	8f 73       	andi	r24, 0x3F	; 63
 284:	99 27       	eor	r25, r25
 286:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:96

  *_udr = c;
 288:	a6 89       	ldd	r26, Z+22	; 0x16
 28a:	b7 89       	ldd	r27, Z+23	; 0x17
 28c:	2c 93       	st	X, r18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 28e:	a0 89       	ldd	r26, Z+16	; 0x10
 290:	b1 89       	ldd	r27, Z+17	; 0x11
 292:	8c 91       	ld	r24, X
 294:	83 70       	andi	r24, 0x03	; 3
 296:	80 64       	ori	r24, 0x40	; 64
 298:	8c 93       	st	X, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 29a:	93 8d       	ldd	r25, Z+27	; 0x1b
 29c:	84 8d       	ldd	r24, Z+28	; 0x1c
 29e:	98 13       	cpse	r25, r24
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 2a2:	02 88       	ldd	r0, Z+18	; 0x12
 2a4:	f3 89       	ldd	r31, Z+19	; 0x13
 2a6:	e0 2d       	mov	r30, r0
 2a8:	80 81       	ld	r24, Z
 2aa:	8f 7d       	andi	r24, 0xDF	; 223
 2ac:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:113
  }
}
 2ae:	08 95       	ret

000002b0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:227
  _written = true;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2c6:	98 13       	cpse	r25, r24
 2c8:	1a c0       	rjmp	.+52     	; 0x2fe <HardwareSerial::write(unsigned char)+0x4e>
 2ca:	e8 89       	ldd	r30, Y+16	; 0x10
 2cc:	f9 89       	ldd	r31, Y+17	; 0x11
 2ce:	80 81       	ld	r24, Z
 2d0:	85 ff       	sbrs	r24, 5
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 2d4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d6:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:242
      *_udr = c;
 2d8:	ee 89       	ldd	r30, Y+22	; 0x16
 2da:	ff 89       	ldd	r31, Y+23	; 0x17
 2dc:	60 83       	st	Z, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 2de:	e8 89       	ldd	r30, Y+16	; 0x10
 2e0:	f9 89       	ldd	r31, Y+17	; 0x11
 2e2:	80 81       	ld	r24, Z
 2e4:	83 70       	andi	r24, 0x03	; 3
 2e6:	80 64       	ori	r24, 0x40	; 64
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
 2e8:	80 83       	st	Z, r24
__iRestore():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ea:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:279
  }
  
  return 1;
}
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	08 95       	ret
 2fe:	f6 2e       	mov	r15, r22
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 300:	0b 8d       	ldd	r16, Y+27	; 0x1b
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	0f 73       	andi	r16, 0x3F	; 63
 30a:	11 27       	eor	r17, r17
 30c:	e0 2e       	mov	r14, r16
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:255
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 30e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 310:	8e 11       	cpse	r24, r14
 312:	0c c0       	rjmp	.+24     	; 0x32c <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	07 fc       	sbrc	r0, 7
 318:	fa cf       	rjmp	.-12     	; 0x30e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 31a:	e8 89       	ldd	r30, Y+16	; 0x10
 31c:	f9 89       	ldd	r31, Y+17	; 0x11
 31e:	80 81       	ld	r24, Z
 320:	85 ff       	sbrs	r24, 5
 322:	f5 cf       	rjmp	.-22     	; 0x30e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:262
	_tx_udr_empty_irq();
 324:	ce 01       	movw	r24, r28
 326:	0e 94 36 01 	call	0x26c	; 0x26c <HardwareSerial::_tx_udr_empty_irq()>
 32a:	f1 cf       	rjmp	.-30     	; 0x30e <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 32c:	eb 8d       	ldd	r30, Y+27	; 0x1b
 32e:	ec 0f       	add	r30, r28
 330:	fd 2f       	mov	r31, r29
 332:	f1 1d       	adc	r31, r1
 334:	e3 5a       	subi	r30, 0xA3	; 163
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	f0 82       	st	Z, r15
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 33a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\dlcks\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 33c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:274
    _tx_buffer_head = i;
 33e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
 340:	ea 89       	ldd	r30, Y+18	; 0x12
 342:	fb 89       	ldd	r31, Y+19	; 0x13
 344:	80 81       	ld	r24, Z
 346:	80 62       	ori	r24, 0x20	; 32
 348:	cf cf       	rjmp	.-98     	; 0x2e8 <HardwareSerial::write(unsigned char)+0x38>

0000034a <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 350:	88 8d       	ldd	r24, Y+24	; 0x18
 352:	88 23       	and	r24, r24
 354:	b9 f0       	breq	.+46     	; 0x384 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 356:	aa 89       	ldd	r26, Y+18	; 0x12
 358:	bb 89       	ldd	r27, Y+19	; 0x13
 35a:	e8 89       	ldd	r30, Y+16	; 0x10
 35c:	f9 89       	ldd	r31, Y+17	; 0x11
 35e:	8c 91       	ld	r24, X
 360:	85 fd       	sbrc	r24, 5
 362:	03 c0       	rjmp	.+6      	; 0x36a <HardwareSerial::flush()+0x20>
 364:	80 81       	ld	r24, Z
 366:	86 fd       	sbrc	r24, 6
 368:	0d c0       	rjmp	.+26     	; 0x384 <HardwareSerial::flush()+0x3a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	07 fc       	sbrc	r0, 7
 36e:	f7 cf       	rjmp	.-18     	; 0x35e <HardwareSerial::flush()+0x14>
 370:	8c 91       	ld	r24, X
 372:	85 ff       	sbrs	r24, 5
 374:	f2 cf       	rjmp	.-28     	; 0x35a <HardwareSerial::flush()+0x10>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:218
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 376:	80 81       	ld	r24, Z
 378:	85 ff       	sbrs	r24, 5
 37a:	ed cf       	rjmp	.-38     	; 0x356 <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:219
	  _tx_udr_empty_irq();
 37c:	ce 01       	movw	r24, r28
 37e:	0e 94 36 01 	call	0x26c	; 0x26c <HardwareSerial::_tx_udr_empty_irq()>
 382:	e9 cf       	rjmp	.-46     	; 0x356 <HardwareSerial::flush()+0xc>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <micros>:
micros():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:81
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 38a:	3f b7       	in	r19, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:83
	
	cli();
 38c:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:84
	m = timer0_overflow_count;
 38e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timer0_overflow_count>
 392:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timer0_overflow_count+0x1>
 396:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <timer0_overflow_count+0x2>
 39a:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
 39e:	26 b5       	in	r18, 0x26	; 38
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 3a0:	a8 9b       	sbis	0x15, 0	; 21
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <micros+0x24>
 3a4:	2f 3f       	cpi	r18, 0xFF	; 255
 3a6:	19 f0       	breq	.+6      	; 0x3ae <micros+0x24>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:95
		m++;
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	a1 1d       	adc	r26, r1
 3ac:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 3ae:	3f bf       	out	0x3f, r19	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 3b0:	ba 2f       	mov	r27, r26
 3b2:	a9 2f       	mov	r26, r25
 3b4:	98 2f       	mov	r25, r24
 3b6:	88 27       	eor	r24, r24
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	62 0f       	add	r22, r18
 3be:	71 1d       	adc	r23, r1
 3c0:	81 1d       	adc	r24, r1
 3c2:	91 1d       	adc	r25, r1
 3c4:	43 e0       	ldi	r20, 0x03	; 3
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	4a 95       	dec	r20
 3d0:	d1 f7       	brne	.-12     	; 0x3c6 <micros+0x3c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:104
}
 3d2:	08 95       	ret

000003d4 <__vector_19>:
__vector_19():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 3f6:	83 e3       	ldi	r24, 0x33	; 51
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 36 01 	call	0x26c	; 0x26c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:65
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_18>:
__vector_18():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 434:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Serial+0x10>
 438:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Serial+0x11>
 43c:	80 81       	ld	r24, Z
 43e:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <Serial+0x16>
 442:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <Serial+0x17>
 446:	82 fd       	sbrc	r24, 2
 448:	1b c0       	rjmp	.+54     	; 0x480 <__vector_18+0x60>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 44a:	90 81       	ld	r25, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 44c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Serial+0x19>
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 454:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <Serial+0x1a>
 458:	82 17       	cp	r24, r18
 45a:	41 f0       	breq	.+16     	; 0x46c <__vector_18+0x4c>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 45c:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Serial+0x19>
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	ed 5c       	subi	r30, 0xCD	; 205
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 468:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Serial+0x19>
__vector_18():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti
_rx_complete_irq():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 480:	80 81       	ld	r24, Z
 482:	f4 cf       	rjmp	.-24     	; 0x46c <__vector_18+0x4c>

00000484 <__vector_16>:
__vector_16():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:47
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 49a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <timer0_millis>
 49e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <timer0_millis+0x1>
 4a2:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <timer0_millis+0x2>
 4a6:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:51
	unsigned char f = timer0_fract;
 4aa:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <__data_end>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
 4ae:	26 e0       	ldi	r18, 0x06	; 6
 4b0:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:55
	if (f >= FRACT_MAX) {
 4b2:	2d 37       	cpi	r18, 0x7D	; 125
 4b4:	58 f5       	brcc	.+86     	; 0x50c <__vector_16+0x88>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:53
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 4b6:	02 96       	adiw	r24, 0x02	; 2
 4b8:	a1 1d       	adc	r26, r1
 4ba:	b1 1d       	adc	r27, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:60
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 4bc:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:61
	timer0_millis = m;
 4c0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <timer0_millis>
 4c4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <timer0_millis+0x1>
 4c8:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <timer0_millis+0x2>
 4cc:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:62
	timer0_overflow_count++;
 4d0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <timer0_overflow_count>
 4d4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <timer0_overflow_count+0x1>
 4d8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <timer0_overflow_count+0x2>
 4dc:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <timer0_overflow_count+0x3>
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	a1 1d       	adc	r26, r1
 4e4:	b1 1d       	adc	r27, r1
 4e6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <timer0_overflow_count>
 4ea:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <timer0_overflow_count+0x1>
 4ee:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <timer0_overflow_count+0x2>
 4f2:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <timer0_overflow_count+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:63
}
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:56
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 50c:	29 e8       	ldi	r18, 0x89	; 137
 50e:	23 0f       	add	r18, r19
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:57
		m += 1;
 510:	03 96       	adiw	r24, 0x03	; 3
 512:	a1 1d       	adc	r26, r1
 514:	b1 1d       	adc	r27, r1
 516:	d2 cf       	rjmp	.-92     	; 0x4bc <__vector_16+0x38>

00000518 <global constructors keyed to 65535_0_test_of_7seg_plasma.cpp.o.1920>:
_GLOBAL__I_65535_0_test_of_7seg_plasma.cpp.o.1920():
 518:	e3 e3       	ldi	r30, 0x33	; 51
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	13 82       	std	Z+3, r1	; 0x03
 51e:	12 82       	std	Z+2, r1	; 0x02
 520:	88 ee       	ldi	r24, 0xE8	; 232
 522:	93 e0       	ldi	r25, 0x03	; 3
 524:	a0 e0       	ldi	r26, 0x00	; 0
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	84 83       	std	Z+4, r24	; 0x04
 52a:	95 83       	std	Z+5, r25	; 0x05
 52c:	a6 83       	std	Z+6, r26	; 0x06
 52e:	b7 83       	std	Z+7, r27	; 0x07
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	91 83       	std	Z+1, r25	; 0x01
 536:	80 83       	st	Z, r24
 538:	85 ec       	ldi	r24, 0xC5	; 197
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	95 87       	std	Z+13, r25	; 0x0d
 53e:	84 87       	std	Z+12, r24	; 0x0c
 540:	84 ec       	ldi	r24, 0xC4	; 196
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	97 87       	std	Z+15, r25	; 0x0f
 546:	86 87       	std	Z+14, r24	; 0x0e
 548:	80 ec       	ldi	r24, 0xC0	; 192
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	91 8b       	std	Z+17, r25	; 0x11
 54e:	80 8b       	std	Z+16, r24	; 0x10
 550:	81 ec       	ldi	r24, 0xC1	; 193
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	93 8b       	std	Z+19, r25	; 0x13
 556:	82 8b       	std	Z+18, r24	; 0x12
 558:	82 ec       	ldi	r24, 0xC2	; 194
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	95 8b       	std	Z+21, r25	; 0x15
 55e:	84 8b       	std	Z+20, r24	; 0x14
 560:	86 ec       	ldi	r24, 0xC6	; 198
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	97 8b       	std	Z+23, r25	; 0x17
 566:	86 8b       	std	Z+22, r24	; 0x16
 568:	11 8e       	std	Z+25, r1	; 0x19
 56a:	12 8e       	std	Z+26, r1	; 0x1a
 56c:	13 8e       	std	Z+27, r1	; 0x1b
 56e:	14 8e       	std	Z+28, r1	; 0x1c
 570:	e0 ed       	ldi	r30, 0xD0	; 208
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	16 82       	std	Z+6, r1	; 0x06
 576:	17 82       	std	Z+7, r1	; 0x07
 578:	10 86       	std	Z+8, r1	; 0x08
 57a:	11 86       	std	Z+9, r1	; 0x09
 57c:	12 86       	std	Z+10, r1	; 0x0a
 57e:	13 86       	std	Z+11, r1	; 0x0b
 580:	14 86       	std	Z+12, r1	; 0x0c
 582:	15 86       	std	Z+13, r1	; 0x0d
 584:	16 86       	std	Z+14, r1	; 0x0e
 586:	17 86       	std	Z+15, r1	; 0x0f
 588:	10 8a       	std	Z+16, r1	; 0x10
 58a:	11 8a       	std	Z+17, r1	; 0x11
 58c:	12 8a       	std	Z+18, r1	; 0x12
 58e:	13 8a       	std	Z+19, r1	; 0x13
 590:	14 8a       	std	Z+20, r1	; 0x14
 592:	15 8a       	std	Z+21, r1	; 0x15
 594:	08 95       	ret

00000596 <main>:
main():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 596:	78 94       	sei
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 598:	84 b5       	in	r24, 0x24	; 36
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
 59e:	84 b5       	in	r24, 0x24	; 36
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	84 bd       	out	0x24, r24	; 36
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5a4:	85 b5       	in	r24, 0x25	; 37
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:266
	sbi(TCCR0B, CS00);
 5aa:	85 b5       	in	r24, 0x25	; 37
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	85 bd       	out	0x25, r24	; 37
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5ba:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5be:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5c8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 5d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 5dc:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 5e0:	84 60       	ori	r24, 0x04	; 4
 5e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 5e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:360
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
 5f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 5f4:	84 60       	ori	r24, 0x04	; 4
 5f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:361
		sbi(ADCSRA, ADPS1);
 5fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:362
		cbi(ADCSRA, ADPS0);
 604:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 608:	8e 7f       	andi	r24, 0xFE	; 254
 60a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 60e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 612:	80 68       	ori	r24, 0x80	; 128
 614:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 618:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
init():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1067
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
 61c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <MicroDebug+0x42>
 620:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <MicroDebug+0x43>
 624:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <MicroDebug+0x44>
 628:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <MicroDebug+0x45>
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1069

	lastPacketMS = 0L;
 62c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <MicroDebug+0x2>
 630:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <MicroDebug+0x3>
 634:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <MicroDebug+0x4>
 638:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <MicroDebug+0x5>
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:121
#endif


void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
 63c:	68 eb       	ldi	r22, 0xB8	; 184
 63e:	7b e0       	ldi	r23, 0x0B	; 11
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 87 00 	call	0x10e	; 0x10e <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool) [clone .constprop.22]>
delay():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:108
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint32_t start = micros();
 648:	0e 94 c5 01 	call	0x38a	; 0x38a <micros>
 64c:	4b 01       	movw	r8, r22
 64e:	5c 01       	movw	r10, r24
 650:	48 ee       	ldi	r20, 0xE8	; 232
 652:	c4 2e       	mov	r12, r20
 654:	43 e0       	ldi	r20, 0x03	; 3
 656:	d4 2e       	mov	r13, r20
 658:	e1 2c       	mov	r14, r1
 65a:	f1 2c       	mov	r15, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:112

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 65c:	0e 94 c5 01 	call	0x38a	; 0x38a <micros>
 660:	68 19       	sub	r22, r8
 662:	79 09       	sbc	r23, r9
 664:	8a 09       	sbc	r24, r10
 666:	9b 09       	sbc	r25, r11
 668:	68 3e       	cpi	r22, 0xE8	; 232
 66a:	73 40       	sbci	r23, 0x03	; 3
 66c:	81 05       	cpc	r24, r1
 66e:	91 05       	cpc	r25, r1
 670:	a8 f3       	brcs	.-22     	; 0x65c <main+0xc6>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:113
			ms--;
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	c2 1a       	sub	r12, r18
 676:	d1 08       	sbc	r13, r1
 678:	e1 08       	sbc	r14, r1
 67a:	f1 08       	sbc	r15, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:114
			start += 1000;
 67c:	88 ee       	ldi	r24, 0xE8	; 232
 67e:	88 0e       	add	r8, r24
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	98 1e       	adc	r9, r24
 684:	a1 1c       	adc	r10, r1
 686:	b1 1c       	adc	r11, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:112
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 688:	c1 14       	cp	r12, r1
 68a:	d1 04       	cpc	r13, r1
 68c:	e1 04       	cpc	r14, r1
 68e:	f1 04       	cpc	r15, r1
 690:	29 f7       	brne	.-54     	; 0x65c <main+0xc6>
begin():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 692:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Serial+0x10>
 696:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Serial+0x11>
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 69e:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Serial+0xc>
 6a2:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Serial+0xd>
 6a6:	10 82       	st	Z, r1
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
 6a8:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Serial+0xe>
 6ac:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Serial+0xf>
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:138

  _written = false;
 6b4:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <Serial+0x18>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 6b8:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <Serial+0x14>
 6bc:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <Serial+0x15>
 6c0:	86 e0       	ldi	r24, 0x06	; 6
 6c2:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:146
  
  sbi(*_ucsrb, RXEN0);
 6c4:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Serial+0x12>
 6c8:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Serial+0x13>
 6cc:	80 81       	ld	r24, Z
 6ce:	80 61       	ori	r24, 0x10	; 16
 6d0:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
 6d2:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Serial+0x12>
 6d6:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Serial+0x13>
 6da:	80 81       	ld	r24, Z
 6dc:	88 60       	ori	r24, 0x08	; 8
 6de:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
 6e0:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Serial+0x12>
 6e4:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Serial+0x13>
 6e8:	80 81       	ld	r24, Z
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	80 83       	st	Z, r24
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
 6ee:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Serial+0x12>
 6f2:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Serial+0x13>
 6f6:	80 81       	ld	r24, Z
 6f8:	8f 7d       	andi	r24, 0xDF	; 223
 6fa:	80 83       	st	Z, r24
millis():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:68
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 6fc:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 6fe:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:73
	m = timer0_millis;
 700:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <timer0_millis>
 704:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <timer0_millis+0x1>
 708:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <timer0_millis+0x2>
 70c:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:74
	SREG = oldSREG;
 710:	2f bf       	out	0x3f, r18	; 63
outPacketStart():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:351
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
 712:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <MicroDebug+0x2>
 716:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <MicroDebug+0x3>
 71a:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <MicroDebug+0x4>
 71e:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <MicroDebug+0x5>
write():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 722:	40 e1       	ldi	r20, 0x10	; 16
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	62 e1       	ldi	r22, 0x12	; 18
 728:	71 e0       	ldi	r23, 0x01	; 1
 72a:	83 e3       	ldi	r24, 0x33	; 51
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 b8 00 	call	0x170	; 0x170 <Print::write(unsigned char const*, unsigned int)>
DBG_YieldAndWait():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:121
#endif


void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
 732:	6a e0       	ldi	r22, 0x0A	; 10
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 87 00 	call	0x10e	; 0x10e <VisualMicroDebug::DBG_YieldAndWait(unsigned long, bool) [clone .constprop.22]>
start():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:1197
		while (breakWait(0) != 'c') {
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <MicroDebug+0x16>
millis():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:68
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 744:	2f b7       	in	r18, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 746:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:73
	m = timer0_millis;
 748:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <timer0_millis>
 74c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <timer0_millis+0x1>
 750:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <timer0_millis+0x2>
 754:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <timer0_millis+0x3>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring.c:74
	SREG = oldSREG;
 758:	2f bf       	out	0x3f, r18	; 63
outPacketStart():
C:\Program Files (x86)\Atmel\Studio\7.0\Extensions\ejiwfyoc.ucr\Micro Platforms\default\debuggers\VM_DBG/VM_DBG.cpp:351
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
 75a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <MicroDebug+0x2>
 75e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <MicroDebug+0x3>
 762:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <MicroDebug+0x4>
 766:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <MicroDebug+0x5>
write():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/Print.h:54
 76a:	46 e0       	ldi	r20, 0x06	; 6
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	63 e2       	ldi	r22, 0x23	; 35
 770:	71 e0       	ldi	r23, 0x01	; 1
 772:	83 e3       	ldi	r24, 0x33	; 51
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 b8 00 	call	0x170	; 0x170 <Print::write(unsigned char const*, unsigned int)>
pinMode():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 77a:	ed e9       	ldi	r30, 0x9D	; 157
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	24 91       	lpm	r18, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
 780:	e9 e8       	ldi	r30, 0x89	; 137
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:35
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 786:	88 23       	and	r24, r24
 788:	99 f0       	breq	.+38     	; 0x7b0 <main+0x21a>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:38

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	fc 01       	movw	r30, r24
 792:	e8 59       	subi	r30, 0x98	; 152
 794:	ff 4f       	sbci	r31, 0xFF	; 255
 796:	a5 91       	lpm	r26, Z+
 798:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:39
	out = portOutputRegister(port);
 79a:	fc 01       	movw	r30, r24
 79c:	ee 58       	subi	r30, 0x8E	; 142
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	85 91       	lpm	r24, Z+
 7a2:	94 91       	lpm	r25, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:54
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 7a4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:55
                cli();
 7a6:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:56
		*reg |= bit;
 7a8:	ec 91       	ld	r30, X
 7aa:	e2 2b       	or	r30, r18
 7ac:	ec 93       	st	X, r30
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:57
		SREG = oldSREG;
 7ae:	8f bf       	out	0x3f, r24	; 63
digitalWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:140
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 7b0:	c3 eb       	ldi	r28, 0xB3	; 179
 7b2:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
 7b4:	0f e9       	ldi	r16, 0x9F	; 159
 7b6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
 7b8:	9b e8       	ldi	r25, 0x8B	; 139
 7ba:	e9 2e       	mov	r14, r25
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	f9 2e       	mov	r15, r25
serialEventRun():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	c2 2e       	mov	r12, r18
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	d2 2e       	mov	r13, r18
digitalWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:140
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 7c8:	fe 01       	movw	r30, r28
 7ca:	84 91       	lpm	r24, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
 7cc:	f8 01       	movw	r30, r16
 7ce:	94 91       	lpm	r25, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
 7d0:	f7 01       	movw	r30, r14
 7d2:	24 91       	lpm	r18, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 7d4:	22 23       	and	r18, r18
 7d6:	b9 f0       	breq	.+46     	; 0x806 <main+0x270>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 7d8:	88 23       	and	r24, r24
 7da:	39 f0       	breq	.+14     	; 0x7ea <main+0x254>
turnOffPWM():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	39 f1       	breq	.+78     	; 0x82e <main+0x298>
 7e0:	e0 f4       	brcc	.+56     	; 0x81a <main+0x284>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	51 f1       	breq	.+84     	; 0x83a <main+0x2a4>
 7e6:	82 30       	cpi	r24, 0x02	; 2
 7e8:	61 f1       	breq	.+88     	; 0x842 <main+0x2ac>
digitalWrite():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:151

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 7ea:	e2 2f       	mov	r30, r18
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	ee 58       	subi	r30, 0x8E	; 142
 7f4:	ff 4f       	sbci	r31, 0xFF	; 255
 7f6:	a5 91       	lpm	r26, Z+
 7f8:	b4 91       	lpm	r27, Z
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
 7fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:154
	cli();
 7fc:	f8 94       	cli
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:159

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 7fe:	2c 91       	ld	r18, X
 800:	92 2b       	or	r25, r18
 802:	9c 93       	st	X, r25
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
 804:	8f bf       	out	0x3f, r24	; 63
serialEventRun():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/HardwareSerial.cpp:67
 806:	c1 14       	cp	r12, r1
 808:	d1 04       	cpc	r13, r1
 80a:	f1 f2       	breq	.-68     	; 0x7c8 <main+0x232>
 80c:	0e 94 22 01 	call	0x244	; 0x244 <Serial0_available()>
 810:	88 23       	and	r24, r24
 812:	d1 f2       	breq	.-76     	; 0x7c8 <main+0x232>
 814:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 818:	d7 cf       	rjmp	.-82     	; 0x7c8 <main+0x232>
turnOffPWM():
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 81a:	87 30       	cpi	r24, 0x07	; 7
 81c:	a9 f0       	breq	.+42     	; 0x848 <main+0x2b2>
 81e:	88 30       	cpi	r24, 0x08	; 8
 820:	c9 f0       	breq	.+50     	; 0x854 <main+0x2be>
 822:	84 30       	cpi	r24, 0x04	; 4
 824:	11 f7       	brne	.-60     	; 0x7ea <main+0x254>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 826:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 82a:	8f 7d       	andi	r24, 0xDF	; 223
 82c:	03 c0       	rjmp	.+6      	; 0x834 <main+0x29e>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:80
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 82e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 832:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:83
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 834:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 838:	d8 cf       	rjmp	.-80     	; 0x7ea <main+0x254>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 83a:	84 b5       	in	r24, 0x24	; 36
 83c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 83e:	84 bd       	out	0x24, r24	; 36
 840:	d4 cf       	rjmp	.-88     	; 0x7ea <main+0x254>
 842:	84 b5       	in	r24, 0x24	; 36
 844:	8f 7d       	andi	r24, 0xDF	; 223
 846:	fb cf       	rjmp	.-10     	; 0x83e <main+0x2a8>
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 848:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 84c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\dlcks\AppData\Local\arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 84e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 852:	cb cf       	rjmp	.-106    	; 0x7ea <main+0x254>
 854:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 858:	8f 7d       	andi	r24, 0xDF	; 223
 85a:	f9 cf       	rjmp	.-14     	; 0x84e <main+0x2b8>

0000085c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 85c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 85e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 860:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 862:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 864:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 866:	09 94       	ijmp

00000868 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 868:	f8 94       	cli

0000086a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
